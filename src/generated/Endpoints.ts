// DO NOT EDIT THIS FILE
import { OctokitResponse } from "../OctokitResponse";
import { RequestHeaders } from "../RequestHeaders";
import { RequestRequestOptions } from "../RequestRequestOptions";

type RequiredPreview<T> = {
  mediaType: {
    previews: [T, ...string[]];
  };
};

export interface Endpoints {
  /**
   * @see https://developer.github.com/v3/apps/#delete-an-installation-for-the-authenticated-app
   */
  "DELETE /app/installations/:installation_id": {
    parameters: AppsDeleteInstallationEndpoint;
    request: AppsDeleteInstallationRequestOptions;
    response: OctokitResponse<never | AppsDeleteInstallationResponse404Data>;
  };
  /**
   * @see https://developer.github.com/v3/apps/#unsuspend-an-app-installation
   */
  "DELETE /app/installations/:installation_id/suspended": {
    parameters: AppsUnsuspendInstallationEndpoint;
    request: AppsUnsuspendInstallationRequestOptions;
    response: OctokitResponse<never | AppsUnsuspendInstallationResponse404Data>;
  };
  /**
   * @see https://developer.github.com/v3/apps/oauth_applications/#delete-an-app-authorization
   */
  "DELETE /applications/:client_id/grant": {
    parameters: AppsDeleteAuthorizationEndpoint;
    request: AppsDeleteAuthorizationRequestOptions;
    response: OctokitResponse<never | AppsDeleteAuthorizationResponse422Data>;
  };
  /**
   * @see https://developer.github.com/v3/apps/oauth_applications/#revoke-a-grant-for-an-application
   */
  "DELETE /applications/:client_id/grants/:access_token": {
    parameters: AppsRevokeGrantForApplicationEndpoint;
    request: AppsRevokeGrantForApplicationRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/apps/oauth_applications/#delete-an-app-token
   */
  "DELETE /applications/:client_id/token": {
    parameters: AppsDeleteTokenEndpoint;
    request: AppsDeleteTokenRequestOptions;
    response: OctokitResponse<never | AppsDeleteTokenResponse422Data>;
  };
  /**
   * @see https://developer.github.com/v3/apps/oauth_applications/#revoke-an-authorization-for-an-application
   */
  "DELETE /applications/:client_id/tokens/:access_token": {
    parameters: AppsRevokeAuthorizationForApplicationEndpoint;
    request: AppsRevokeAuthorizationForApplicationRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/oauth_authorizations/#delete-a-grant
   */
  "DELETE /applications/grants/:grant_id": {
    parameters: OauthAuthorizationsDeleteGrantEndpoint;
    request: OauthAuthorizationsDeleteGrantRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | OauthAuthorizationsDeleteGrantResponse401Data
      | OauthAuthorizationsDeleteGrantResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/oauth_authorizations/#delete-an-authorization
   */
  "DELETE /authorizations/:authorization_id": {
    parameters: OauthAuthorizationsDeleteAuthorizationEndpoint;
    request: OauthAuthorizationsDeleteAuthorizationRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | OauthAuthorizationsDeleteAuthorizationResponse401Data
      | OauthAuthorizationsDeleteAuthorizationResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/actions/#delete-a-self-hosted-runner-group-from-an-enterprise
   */
  "DELETE /enterprises/:enterprise/actions/runner-groups/:runner_group_id": {
    parameters: EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseEndpoint;
    request: EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/actions/#remove-organization-access-to-a-self-hosted-runner-group-in-an-enterprise
   */
  "DELETE /enterprises/:enterprise/actions/runner-groups/:runner_group_id/organizations/:org_id": {
    parameters: EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseEndpoint;
    request: EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/actions/#remove-a-self-hosted-runner-from-a-group-for-an-enterprise
   */
  "DELETE /enterprises/:enterprise/actions/runner-groups/:runner_group_id/runners/:runner_id": {
    parameters: EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseEndpoint;
    request: EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/actions/#delete-self-hosted-runner-from-an-enterprise
   */
  "DELETE /enterprises/:enterprise/actions/runners/:runner_id": {
    parameters: EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseEndpoint;
    request: EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/gists/#delete-a-gist
   */
  "DELETE /gists/:gist_id": {
    parameters: GistsDeleteEndpoint;
    request: GistsDeleteRequestOptions;
    response: OctokitResponse<
      never | never | GistsDeleteResponse403Data | GistsDeleteResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/gists/comments/#delete-a-gist-comment
   */
  "DELETE /gists/:gist_id/comments/:comment_id": {
    parameters: GistsDeleteCommentEndpoint;
    request: GistsDeleteCommentRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | GistsDeleteCommentResponse403Data
      | GistsDeleteCommentResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/gists/#unstar-a-gist
   */
  "DELETE /gists/:gist_id/star": {
    parameters: GistsUnstarEndpoint;
    request: GistsUnstarRequestOptions;
    response: OctokitResponse<
      never | never | GistsUnstarResponse403Data | GistsUnstarResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/installations/#revoke-an-installation-access-token
   */
  "DELETE /installation/token": {
    parameters: AppsRevokeInstallationAccessTokenEndpoint;
    request: AppsRevokeInstallationAccessTokenRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/activity/notifications/#delete-a-thread-subscription
   */
  "DELETE /notifications/threads/:thread_id/subscription": {
    parameters: ActivityDeleteThreadSubscriptionEndpoint;
    request: ActivityDeleteThreadSubscriptionRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | ActivityDeleteThreadSubscriptionResponse401Data
      | ActivityDeleteThreadSubscriptionResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runner-groups/#delete-a-self-hosted-runner-group-from-an-organization
   */
  "DELETE /orgs/:org/actions/runner-groups/:runner_group_id": {
    parameters: ActionsDeleteSelfHostedRunnerGroupFromOrgEndpoint;
    request: ActionsDeleteSelfHostedRunnerGroupFromOrgRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runner-groups/#remove-repository-access-to-a-self-hosted-runner-group-in-an-organization
   */
  "DELETE /orgs/:org/actions/runner-groups/:runner_group_id/repositories/:repository_id": {
    parameters: ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgEndpoint;
    request: ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runner-groups/#remove-a-self-hosted-runner-from-a-group-for-an-organization
   */
  "DELETE /orgs/:org/actions/runner-groups/:runner_group_id/runners/:runner_id": {
    parameters: ActionsRemoveSelfHostedRunnerFromGroupForOrgEndpoint;
    request: ActionsRemoveSelfHostedRunnerFromGroupForOrgRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runners/#delete-a-self-hosted-runner-from-an-organization
   */
  "DELETE /orgs/:org/actions/runners/:runner_id": {
    parameters: ActionsDeleteSelfHostedRunnerFromOrgEndpoint;
    request: ActionsDeleteSelfHostedRunnerFromOrgRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/actions/secrets/#delete-an-organization-secret
   */
  "DELETE /orgs/:org/actions/secrets/:secret_name": {
    parameters: ActionsDeleteOrgSecretEndpoint;
    request: ActionsDeleteOrgSecretRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/actions/secrets/#remove-selected-repository-from-an-organization-secret
   */
  "DELETE /orgs/:org/actions/secrets/:secret_name/repositories/:repository_id": {
    parameters: ActionsRemoveSelectedRepoFromOrgSecretEndpoint;
    request: ActionsRemoveSelectedRepoFromOrgSecretRequestOptions;
    response: OctokitResponse<never | never>;
  };
  /**
   * @see https://developer.github.com/v3/orgs/blocking/#unblock-a-user-from-an-organization
   */
  "DELETE /orgs/:org/blocks/:username": {
    parameters: OrgsUnblockUserEndpoint;
    request: OrgsUnblockUserRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/orgs/#remove-a-saml-sso-authorization-for-an-organization
   */
  "DELETE /orgs/:org/credential-authorizations/:credential_id": {
    parameters: OrgsRemoveSamlSsoAuthorizationEndpoint;
    request: OrgsRemoveSamlSsoAuthorizationRequestOptions;
    response: OctokitResponse<
      never | OrgsRemoveSamlSsoAuthorizationResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/orgs/hooks/#delete-an-organization-webhook
   */
  "DELETE /orgs/:org/hooks/:hook_id": {
    parameters: OrgsDeleteWebhookEndpoint;
    request: OrgsDeleteWebhookRequestOptions;
    response: OctokitResponse<never | OrgsDeleteWebhookResponse404Data>;
  };
  /**
   * @see https://developer.github.com/v3/interactions/orgs/#remove-interaction-restrictions-for-an-organization
   */
  "DELETE /orgs/:org/interaction-limits": {
    parameters: InteractionsRemoveRestrictionsForOrgEndpoint;
    request: InteractionsRemoveRestrictionsForOrgRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/orgs/members/#remove-an-organization-member
   */
  "DELETE /orgs/:org/members/:username": {
    parameters: OrgsRemoveMemberEndpoint;
    request: OrgsRemoveMemberRequestOptions;
    response: OctokitResponse<never | OrgsRemoveMemberResponse403Data>;
  };
  /**
   * @see https://developer.github.com/v3/orgs/members/#remove-organization-membership-for-a-user
   */
  "DELETE /orgs/:org/memberships/:username": {
    parameters: OrgsRemoveMembershipForUserEndpoint;
    request: OrgsRemoveMembershipForUserRequestOptions;
    response: OctokitResponse<
      | never
      | OrgsRemoveMembershipForUserResponse403Data
      | OrgsRemoveMembershipForUserResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/migrations/orgs/#delete-an-organization-migration-archive
   */
  "DELETE /orgs/:org/migrations/:migration_id/archive": {
    parameters: MigrationsDeleteArchiveForOrgEndpoint;
    request: MigrationsDeleteArchiveForOrgRequestOptions;
    response: OctokitResponse<
      never | MigrationsDeleteArchiveForOrgResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/migrations/orgs/#unlock-an-organization-repository
   */
  "DELETE /orgs/:org/migrations/:migration_id/repos/:repo_name/lock": {
    parameters: MigrationsUnlockRepoForOrgEndpoint;
    request: MigrationsUnlockRepoForOrgRequestOptions;
    response: OctokitResponse<
      never | MigrationsUnlockRepoForOrgResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/orgs/outside_collaborators/#remove-outside-collaborator-from-an-organization
   */
  "DELETE /orgs/:org/outside_collaborators/:username": {
    parameters: OrgsRemoveOutsideCollaboratorEndpoint;
    request: OrgsRemoveOutsideCollaboratorRequestOptions;
    response: OctokitResponse<
      never | OrgsRemoveOutsideCollaboratorResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/orgs/members/#remove-public-organization-membership-for-the-authenticated-user
   */
  "DELETE /orgs/:org/public_members/:username": {
    parameters: OrgsRemovePublicMembershipForAuthenticatedUserEndpoint;
    request: OrgsRemovePublicMembershipForAuthenticatedUserRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/teams/#delete-a-team
   */
  "DELETE /orgs/:org/teams/:team_slug": {
    parameters: TeamsDeleteInOrgEndpoint;
    request: TeamsDeleteInOrgRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/teams/discussions/#delete-a-discussion
   */
  "DELETE /orgs/:org/teams/:team_slug/discussions/:discussion_number": {
    parameters: TeamsDeleteDiscussionInOrgEndpoint;
    request: TeamsDeleteDiscussionInOrgRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/teams/discussion_comments/#delete-a-discussion-comment
   */
  "DELETE /orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number": {
    parameters: TeamsDeleteDiscussionCommentInOrgEndpoint;
    request: TeamsDeleteDiscussionCommentInOrgRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#delete-team-discussion-comment-reaction
   */
  "DELETE /orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id": {
    parameters: ReactionsDeleteForTeamDiscussionCommentEndpoint;
    request: ReactionsDeleteForTeamDiscussionCommentRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#delete-team-discussion-reaction
   */
  "DELETE /orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions/:reaction_id": {
    parameters: ReactionsDeleteForTeamDiscussionEndpoint;
    request: ReactionsDeleteForTeamDiscussionRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/teams/members/#remove-team-membership-for-a-user
   */
  "DELETE /orgs/:org/teams/:team_slug/memberships/:username": {
    parameters: TeamsRemoveMembershipForUserInOrgEndpoint;
    request: TeamsRemoveMembershipForUserInOrgRequestOptions;
    response: OctokitResponse<never | never>;
  };
  /**
   * @see https://developer.github.com/v3/teams/#remove-a-project-from-a-team
   */
  "DELETE /orgs/:org/teams/:team_slug/projects/:project_id": {
    parameters: TeamsRemoveProjectInOrgEndpoint;
    request: TeamsRemoveProjectInOrgRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/teams/#remove-a-repository-from-a-team
   */
  "DELETE /orgs/:org/teams/:team_slug/repos/:owner/:repo": {
    parameters: TeamsRemoveRepoInOrgEndpoint;
    request: TeamsRemoveRepoInOrgRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/projects/#delete-a-project
   */
  "DELETE /projects/:project_id": {
    parameters: ProjectsDeleteEndpoint;
    request: ProjectsDeleteRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | ProjectsDeleteResponse401Data
      | ProjectsDeleteResponse403Data
      | ProjectsDeleteResponse404Data
      | ProjectsDeleteResponse410Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/projects/collaborators/#remove-project-collaborator
   */
  "DELETE /projects/:project_id/collaborators/:username": {
    parameters: ProjectsRemoveCollaboratorEndpoint;
    request: ProjectsRemoveCollaboratorRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | ProjectsRemoveCollaboratorResponse401Data
      | ProjectsRemoveCollaboratorResponse403Data
      | ProjectsRemoveCollaboratorResponse404Data
      | ProjectsRemoveCollaboratorResponse415Data
      | ProjectsRemoveCollaboratorResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/projects/columns/#delete-a-project-column
   */
  "DELETE /projects/columns/:column_id": {
    parameters: ProjectsDeleteColumnEndpoint;
    request: ProjectsDeleteColumnRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | ProjectsDeleteColumnResponse401Data
      | ProjectsDeleteColumnResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/projects/cards/#delete-a-project-card
   */
  "DELETE /projects/columns/cards/:card_id": {
    parameters: ProjectsDeleteCardEndpoint;
    request: ProjectsDeleteCardRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | ProjectsDeleteCardResponse401Data
      | ProjectsDeleteCardResponse403Data
      | ProjectsDeleteCardResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#delete-a-reaction-legacy
   */
  "DELETE /reactions/:reaction_id": {
    parameters: ReactionsDeleteLegacyEndpoint;
    request: ReactionsDeleteLegacyRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | ReactionsDeleteLegacyResponse401Data
      | ReactionsDeleteLegacyResponse403Data
      | ReactionsDeleteLegacyResponse410Data
      | ReactionsDeleteLegacyResponse415Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/#delete-a-repository
   */
  "DELETE /repos/:owner/:repo": {
    parameters: ReposDeleteEndpoint;
    request: ReposDeleteRequestOptions;
    response: OctokitResponse<
      never | ReposDeleteResponse403Data | ReposDeleteResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/actions/artifacts/#delete-an-artifact
   */
  "DELETE /repos/:owner/:repo/actions/artifacts/:artifact_id": {
    parameters: ActionsDeleteArtifactEndpoint;
    request: ActionsDeleteArtifactRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runners/#delete-a-self-hosted-runner-from-a-repository
   */
  "DELETE /repos/:owner/:repo/actions/runners/:runner_id": {
    parameters: ActionsDeleteSelfHostedRunnerFromRepoEndpoint;
    request: ActionsDeleteSelfHostedRunnerFromRepoRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/actions/workflow-runs/#delete-a-workflow-run
   */
  "DELETE /repos/:owner/:repo/actions/runs/:run_id": {
    parameters: ActionsDeleteWorkflowRunEndpoint;
    request: ActionsDeleteWorkflowRunRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/actions/workflow-runs/#delete-workflow-run-logs
   */
  "DELETE /repos/:owner/:repo/actions/runs/:run_id/logs": {
    parameters: ActionsDeleteWorkflowRunLogsEndpoint;
    request: ActionsDeleteWorkflowRunLogsRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/actions/secrets/#delete-a-repository-secret
   */
  "DELETE /repos/:owner/:repo/actions/secrets/:secret_name": {
    parameters: ActionsDeleteRepoSecretEndpoint;
    request: ActionsDeleteRepoSecretRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/repos/#disable-automated-security-fixes
   */
  "DELETE /repos/:owner/:repo/automated-security-fixes": {
    parameters: ReposDisableAutomatedSecurityFixesEndpoint;
    request: ReposDisableAutomatedSecurityFixesRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#delete-branch-protection
   */
  "DELETE /repos/:owner/:repo/branches/:branch/protection": {
    parameters: ReposDeleteBranchProtectionEndpoint;
    request: ReposDeleteBranchProtectionRequestOptions;
    response: OctokitResponse<
      never | ReposDeleteBranchProtectionResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#delete-admin-branch-protection
   */
  "DELETE /repos/:owner/:repo/branches/:branch/protection/enforce_admins": {
    parameters: ReposDeleteAdminBranchProtectionEndpoint;
    request: ReposDeleteAdminBranchProtectionRequestOptions;
    response: OctokitResponse<
      never | ReposDeleteAdminBranchProtectionResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#delete-pull-request-review-protection
   */
  "DELETE /repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews": {
    parameters: ReposDeletePullRequestReviewProtectionEndpoint;
    request: ReposDeletePullRequestReviewProtectionRequestOptions;
    response: OctokitResponse<
      never | ReposDeletePullRequestReviewProtectionResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#delete-commit-signature-protection
   */
  "DELETE /repos/:owner/:repo/branches/:branch/protection/required_signatures": {
    parameters: ReposDeleteCommitSignatureProtectionEndpoint;
    request: ReposDeleteCommitSignatureProtectionRequestOptions;
    response: OctokitResponse<
      never | ReposDeleteCommitSignatureProtectionResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#remove-status-check-protection
   */
  "DELETE /repos/:owner/:repo/branches/:branch/protection/required_status_checks": {
    parameters: ReposRemoveStatusCheckProtectionEndpoint;
    request: ReposRemoveStatusCheckProtectionRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#remove-status-check-contexts
   */
  "DELETE /repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts": {
    parameters: ReposRemoveStatusCheckContextsEndpoint;
    request: ReposRemoveStatusCheckContextsRequestOptions;
    response: OctokitResponse<
      | ReposRemoveStatusCheckContextsResponseData
      | ReposRemoveStatusCheckContextsResponse404Data
      | ReposRemoveStatusCheckContextsResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#delete-access-restrictions
   */
  "DELETE /repos/:owner/:repo/branches/:branch/protection/restrictions": {
    parameters: ReposDeleteAccessRestrictionsEndpoint;
    request: ReposDeleteAccessRestrictionsRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#remove-app-access-restrictions
   */
  "DELETE /repos/:owner/:repo/branches/:branch/protection/restrictions/apps": {
    parameters: ReposRemoveAppAccessRestrictionsEndpoint;
    request: ReposRemoveAppAccessRestrictionsRequestOptions;
    response: OctokitResponse<
      | ReposRemoveAppAccessRestrictionsResponseData
      | ReposRemoveAppAccessRestrictionsResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#remove-team-access-restrictions
   */
  "DELETE /repos/:owner/:repo/branches/:branch/protection/restrictions/teams": {
    parameters: ReposRemoveTeamAccessRestrictionsEndpoint;
    request: ReposRemoveTeamAccessRestrictionsRequestOptions;
    response: OctokitResponse<
      | ReposRemoveTeamAccessRestrictionsResponseData
      | ReposRemoveTeamAccessRestrictionsResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#remove-user-access-restrictions
   */
  "DELETE /repos/:owner/:repo/branches/:branch/protection/restrictions/users": {
    parameters: ReposRemoveUserAccessRestrictionsEndpoint;
    request: ReposRemoveUserAccessRestrictionsRequestOptions;
    response: OctokitResponse<
      | ReposRemoveUserAccessRestrictionsResponseData
      | ReposRemoveUserAccessRestrictionsResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/collaborators/#remove-a-repository-collaborator
   */
  "DELETE /repos/:owner/:repo/collaborators/:username": {
    parameters: ReposRemoveCollaboratorEndpoint;
    request: ReposRemoveCollaboratorRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/repos/comments/#delete-a-commit-comment
   */
  "DELETE /repos/:owner/:repo/comments/:comment_id": {
    parameters: ReposDeleteCommitCommentEndpoint;
    request: ReposDeleteCommitCommentRequestOptions;
    response: OctokitResponse<never | ReposDeleteCommitCommentResponse404Data>;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#delete-a-commit-comment-reaction
   */
  "DELETE /repos/:owner/:repo/comments/:comment_id/reactions/:reaction_id": {
    parameters: ReactionsDeleteForCommitCommentEndpoint;
    request: ReactionsDeleteForCommitCommentRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/repos/contents/#delete-a-file
   */
  "DELETE /repos/:owner/:repo/contents/:path": {
    parameters: ReposDeleteFileEndpoint;
    request: ReposDeleteFileRequestOptions;
    response: OctokitResponse<
      | ReposDeleteFileResponseData
      | ReposDeleteFileResponse404Data
      | ReposDeleteFileResponse409Data
      | ReposDeleteFileResponse422Data
      | ReposDeleteFileResponse503Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/deployments/#delete-a-deployment
   */
  "DELETE /repos/:owner/:repo/deployments/:deployment_id": {
    parameters: ReposDeleteDeploymentEndpoint;
    request: ReposDeleteDeploymentRequestOptions;
    response: OctokitResponse<
      | never
      | ReposDeleteDeploymentResponse404Data
      | ReposDeleteDeploymentResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/git/refs/#delete-a-reference
   */
  "DELETE /repos/:owner/:repo/git/refs/:ref": {
    parameters: GitDeleteRefEndpoint;
    request: GitDeleteRefRequestOptions;
    response: OctokitResponse<never | GitDeleteRefResponse422Data>;
  };
  /**
   * @see https://developer.github.com/v3/repos/hooks/#delete-a-repository-webhook
   */
  "DELETE /repos/:owner/:repo/hooks/:hook_id": {
    parameters: ReposDeleteWebhookEndpoint;
    request: ReposDeleteWebhookRequestOptions;
    response: OctokitResponse<never | ReposDeleteWebhookResponse404Data>;
  };
  /**
   * @see https://developer.github.com/v3/migrations/source_imports/#cancel-an-import
   */
  "DELETE /repos/:owner/:repo/import": {
    parameters: MigrationsCancelImportEndpoint;
    request: MigrationsCancelImportRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/interactions/repos/#remove-interaction-restrictions-for-a-repository
   */
  "DELETE /repos/:owner/:repo/interaction-limits": {
    parameters: InteractionsRemoveRestrictionsForRepoEndpoint;
    request: InteractionsRemoveRestrictionsForRepoRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/repos/invitations/#delete-a-repository-invitation
   */
  "DELETE /repos/:owner/:repo/invitations/:invitation_id": {
    parameters: ReposDeleteInvitationEndpoint;
    request: ReposDeleteInvitationRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/issues/assignees/#remove-assignees-from-an-issue
   */
  "DELETE /repos/:owner/:repo/issues/:issue_number/assignees": {
    parameters: IssuesRemoveAssigneesEndpoint;
    request: IssuesRemoveAssigneesRequestOptions;
    response: OctokitResponse<IssuesRemoveAssigneesResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/issues/labels/#remove-all-labels-from-an-issue
   */
  "DELETE /repos/:owner/:repo/issues/:issue_number/labels": {
    parameters: IssuesRemoveAllLabelsEndpoint;
    request: IssuesRemoveAllLabelsRequestOptions;
    response: OctokitResponse<never | IssuesRemoveAllLabelsResponse410Data>;
  };
  /**
   * @see https://developer.github.com/v3/issues/labels/#remove-a-label-from-an-issue
   */
  "DELETE /repos/:owner/:repo/issues/:issue_number/labels/:name": {
    parameters: IssuesRemoveLabelEndpoint;
    request: IssuesRemoveLabelRequestOptions;
    response: OctokitResponse<
      | IssuesRemoveLabelResponseData
      | IssuesRemoveLabelResponse404Data
      | IssuesRemoveLabelResponse410Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/#unlock-an-issue
   */
  "DELETE /repos/:owner/:repo/issues/:issue_number/lock": {
    parameters: IssuesUnlockEndpoint;
    request: IssuesUnlockRequestOptions;
    response: OctokitResponse<
      never | IssuesUnlockResponse403Data | IssuesUnlockResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#delete-an-issue-reaction
   */
  "DELETE /repos/:owner/:repo/issues/:issue_number/reactions/:reaction_id": {
    parameters: ReactionsDeleteForIssueEndpoint;
    request: ReactionsDeleteForIssueRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/issues/comments/#delete-an-issue-comment
   */
  "DELETE /repos/:owner/:repo/issues/comments/:comment_id": {
    parameters: IssuesDeleteCommentEndpoint;
    request: IssuesDeleteCommentRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#delete-an-issue-comment-reaction
   */
  "DELETE /repos/:owner/:repo/issues/comments/:comment_id/reactions/:reaction_id": {
    parameters: ReactionsDeleteForIssueCommentEndpoint;
    request: ReactionsDeleteForIssueCommentRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/repos/keys/#delete-a-deploy-key
   */
  "DELETE /repos/:owner/:repo/keys/:key_id": {
    parameters: ReposDeleteDeployKeyEndpoint;
    request: ReposDeleteDeployKeyRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/issues/labels/#delete-a-label
   */
  "DELETE /repos/:owner/:repo/labels/:name": {
    parameters: IssuesDeleteLabelEndpoint;
    request: IssuesDeleteLabelRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/issues/milestones/#delete-a-milestone
   */
  "DELETE /repos/:owner/:repo/milestones/:milestone_number": {
    parameters: IssuesDeleteMilestoneEndpoint;
    request: IssuesDeleteMilestoneRequestOptions;
    response: OctokitResponse<never | IssuesDeleteMilestoneResponse404Data>;
  };
  /**
   * @see https://developer.github.com/v3/repos/pages/#delete-a-github-pages-site
   */
  "DELETE /repos/:owner/:repo/pages": {
    parameters: ReposDeletePagesSiteEndpoint;
    request: ReposDeletePagesSiteRequestOptions;
    response: OctokitResponse<
      | never
      | ReposDeletePagesSiteResponse404Data
      | ReposDeletePagesSiteResponse415Data
      | ReposDeletePagesSiteResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/pulls/review_requests/#remove-requested-reviewers-from-a-pull-request
   */
  "DELETE /repos/:owner/:repo/pulls/:pull_number/requested_reviewers": {
    parameters: PullsRemoveRequestedReviewersEndpoint;
    request: PullsRemoveRequestedReviewersRequestOptions;
    response: OctokitResponse<
      never | PullsRemoveRequestedReviewersResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/pulls/reviews/#delete-a-pending-review-for-a-pull-request
   */
  "DELETE /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id": {
    parameters: PullsDeletePendingReviewEndpoint;
    request: PullsDeletePendingReviewRequestOptions;
    response: OctokitResponse<
      | PullsDeletePendingReviewResponseData
      | PullsDeletePendingReviewResponse404Data
      | PullsDeletePendingReviewResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/pulls/comments/#delete-a-review-comment-for-a-pull-request
   */
  "DELETE /repos/:owner/:repo/pulls/comments/:comment_id": {
    parameters: PullsDeleteReviewCommentEndpoint;
    request: PullsDeleteReviewCommentRequestOptions;
    response: OctokitResponse<never | PullsDeleteReviewCommentResponse404Data>;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#delete-a-pull-request-comment-reaction
   */
  "DELETE /repos/:owner/:repo/pulls/comments/:comment_id/reactions/:reaction_id": {
    parameters: ReactionsDeleteForPullRequestCommentEndpoint;
    request: ReactionsDeleteForPullRequestCommentRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/repos/releases/#delete-a-release
   */
  "DELETE /repos/:owner/:repo/releases/:release_id": {
    parameters: ReposDeleteReleaseEndpoint;
    request: ReposDeleteReleaseRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/repos/releases/#delete-a-release-asset
   */
  "DELETE /repos/:owner/:repo/releases/assets/:asset_id": {
    parameters: ReposDeleteReleaseAssetEndpoint;
    request: ReposDeleteReleaseAssetRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/activity/watching/#delete-a-repository-subscription
   */
  "DELETE /repos/:owner/:repo/subscription": {
    parameters: ActivityDeleteRepoSubscriptionEndpoint;
    request: ActivityDeleteRepoSubscriptionRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/repos/#disable-vulnerability-alerts
   */
  "DELETE /repos/:owner/:repo/vulnerability-alerts": {
    parameters: ReposDisableVulnerabilityAlertsEndpoint;
    request: ReposDisableVulnerabilityAlertsRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/scim/#delete-a-scim-group-from-an-enterprise
   */
  "DELETE /scim/v2/enterprises/:enterprise/Groups/:scim_group_id": {
    parameters: EnterpriseAdminDeleteScimGroupFromEnterpriseEndpoint;
    request: EnterpriseAdminDeleteScimGroupFromEnterpriseRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/scim/#delete-a-scim-user-from-an-enterprise
   */
  "DELETE /scim/v2/enterprises/:enterprise/Users/:scim_user_id": {
    parameters: EnterpriseAdminDeleteUserFromEnterpriseEndpoint;
    request: EnterpriseAdminDeleteUserFromEnterpriseRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/scim/#delete-a-scim-user-from-an-organization
   */
  "DELETE /scim/v2/organizations/:org/Users/:scim_user_id": {
    parameters: ScimDeleteUserFromOrgEndpoint;
    request: ScimDeleteUserFromOrgRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | ScimDeleteUserFromOrgResponse403Data
      | ScimDeleteUserFromOrgResponse403Data
      | ScimDeleteUserFromOrgResponse404Data
      | ScimDeleteUserFromOrgResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/#delete-a-team-legacy
   */
  "DELETE /teams/:team_id": {
    parameters: TeamsDeleteLegacyEndpoint;
    request: TeamsDeleteLegacyRequestOptions;
    response: OctokitResponse<
      | never
      | TeamsDeleteLegacyResponse404Data
      | TeamsDeleteLegacyResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/discussions/#delete-a-discussion-legacy
   */
  "DELETE /teams/:team_id/discussions/:discussion_number": {
    parameters: TeamsDeleteDiscussionLegacyEndpoint;
    request: TeamsDeleteDiscussionLegacyRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/teams/discussion_comments/#delete-a-discussion-comment-legacy
   */
  "DELETE /teams/:team_id/discussions/:discussion_number/comments/:comment_number": {
    parameters: TeamsDeleteDiscussionCommentLegacyEndpoint;
    request: TeamsDeleteDiscussionCommentLegacyRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/teams/members/#remove-team-member-legacy
   */
  "DELETE /teams/:team_id/members/:username": {
    parameters: TeamsRemoveMemberLegacyEndpoint;
    request: TeamsRemoveMemberLegacyRequestOptions;
    response: OctokitResponse<never | never>;
  };
  /**
   * @see https://developer.github.com/v3/teams/members/#remove-team-membership-for-a-user-legacy
   */
  "DELETE /teams/:team_id/memberships/:username": {
    parameters: TeamsRemoveMembershipForUserLegacyEndpoint;
    request: TeamsRemoveMembershipForUserLegacyRequestOptions;
    response: OctokitResponse<never | never>;
  };
  /**
   * @see https://developer.github.com/v3/teams/#remove-a-project-from-a-team-legacy
   */
  "DELETE /teams/:team_id/projects/:project_id": {
    parameters: TeamsRemoveProjectLegacyEndpoint;
    request: TeamsRemoveProjectLegacyRequestOptions;
    response: OctokitResponse<
      | never
      | TeamsRemoveProjectLegacyResponse404Data
      | TeamsRemoveProjectLegacyResponse415Data
      | TeamsRemoveProjectLegacyResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/#remove-a-repository-from-a-team-legacy
   */
  "DELETE /teams/:team_id/repos/:owner/:repo": {
    parameters: TeamsRemoveRepoLegacyEndpoint;
    request: TeamsRemoveRepoLegacyRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/users/blocking/#unblock-a-user
   */
  "DELETE /user/blocks/:username": {
    parameters: UsersUnblockEndpoint;
    request: UsersUnblockRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | UsersUnblockResponse401Data
      | UsersUnblockResponse403Data
      | UsersUnblockResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/emails/#delete-an-email-address-for-the-authenticated-user
   */
  "DELETE /user/emails": {
    parameters: UsersDeleteEmailForAuthenticatedEndpoint;
    request: UsersDeleteEmailForAuthenticatedRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | UsersDeleteEmailForAuthenticatedResponse401Data
      | UsersDeleteEmailForAuthenticatedResponse403Data
      | UsersDeleteEmailForAuthenticatedResponse404Data
      | UsersDeleteEmailForAuthenticatedResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/followers/#unfollow-a-user
   */
  "DELETE /user/following/:username": {
    parameters: UsersUnfollowEndpoint;
    request: UsersUnfollowRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | UsersUnfollowResponse401Data
      | UsersUnfollowResponse403Data
      | UsersUnfollowResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/gpg_keys/#delete-a-gpg-key-for-the-authenticated-user
   */
  "DELETE /user/gpg_keys/:gpg_key_id": {
    parameters: UsersDeleteGpgKeyForAuthenticatedEndpoint;
    request: UsersDeleteGpgKeyForAuthenticatedRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | UsersDeleteGpgKeyForAuthenticatedResponse401Data
      | UsersDeleteGpgKeyForAuthenticatedResponse403Data
      | UsersDeleteGpgKeyForAuthenticatedResponse404Data
      | UsersDeleteGpgKeyForAuthenticatedResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/installations/#remove-a-repository-from-an-app-installation
   */
  "DELETE /user/installations/:installation_id/repositories/:repository_id": {
    parameters: AppsRemoveRepoFromInstallationEndpoint;
    request: AppsRemoveRepoFromInstallationRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | AppsRemoveRepoFromInstallationResponse403Data
      | AppsRemoveRepoFromInstallationResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/keys/#delete-a-public-ssh-key-for-the-authenticated-user
   */
  "DELETE /user/keys/:key_id": {
    parameters: UsersDeletePublicSshKeyForAuthenticatedEndpoint;
    request: UsersDeletePublicSshKeyForAuthenticatedRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | UsersDeletePublicSshKeyForAuthenticatedResponse401Data
      | UsersDeletePublicSshKeyForAuthenticatedResponse403Data
      | UsersDeletePublicSshKeyForAuthenticatedResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/migrations/users/#delete-a-user-migration-archive
   */
  "DELETE /user/migrations/:migration_id/archive": {
    parameters: MigrationsDeleteArchiveForAuthenticatedUserEndpoint;
    request: MigrationsDeleteArchiveForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | MigrationsDeleteArchiveForAuthenticatedUserResponse401Data
      | MigrationsDeleteArchiveForAuthenticatedUserResponse403Data
      | MigrationsDeleteArchiveForAuthenticatedUserResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/migrations/users/#unlock-a-user-repository
   */
  "DELETE /user/migrations/:migration_id/repos/:repo_name/lock": {
    parameters: MigrationsUnlockRepoForAuthenticatedUserEndpoint;
    request: MigrationsUnlockRepoForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | MigrationsUnlockRepoForAuthenticatedUserResponse401Data
      | MigrationsUnlockRepoForAuthenticatedUserResponse403Data
      | MigrationsUnlockRepoForAuthenticatedUserResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/invitations/#decline-a-repository-invitation
   */
  "DELETE /user/repository_invitations/:invitation_id": {
    parameters: ReposDeclineInvitationEndpoint;
    request: ReposDeclineInvitationRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | ReposDeclineInvitationResponse403Data
      | ReposDeclineInvitationResponse404Data
      | ReposDeclineInvitationResponse409Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/activity/starring/#unstar-a-repository-for-the-authenticated-user
   */
  "DELETE /user/starred/:owner/:repo": {
    parameters: ActivityUnstarRepoForAuthenticatedUserEndpoint;
    request: ActivityUnstarRepoForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | ActivityUnstarRepoForAuthenticatedUserResponse401Data
      | ActivityUnstarRepoForAuthenticatedUserResponse403Data
      | ActivityUnstarRepoForAuthenticatedUserResponse404Data
    >;
  };
  /**
   * @see
   */
  "GET /": {
    parameters: MetaRootEndpoint;
    request: MetaRootRequestOptions;
    response: OctokitResponse<MetaRootResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/apps/#get-the-authenticated-app
   */
  "GET /app": {
    parameters: AppsGetAuthenticatedEndpoint;
    request: AppsGetAuthenticatedRequestOptions;
    response: OctokitResponse<AppsGetAuthenticatedResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/apps/#list-installations-for-the-authenticated-app
   */
  "GET /app/installations": {
    parameters: AppsListInstallationsEndpoint;
    request: AppsListInstallationsRequestOptions;
    response: OctokitResponse<AppsListInstallationsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/apps/#get-an-installation-for-the-authenticated-app
   */
  "GET /app/installations/:installation_id": {
    parameters: AppsGetInstallationEndpoint;
    request: AppsGetInstallationRequestOptions;
    response: OctokitResponse<
      | AppsGetInstallationResponseData
      | AppsGetInstallationResponse404Data
      | AppsGetInstallationResponse415Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/oauth_applications/#check-an-authorization
   */
  "GET /applications/:client_id/tokens/:access_token": {
    parameters: AppsCheckAuthorizationEndpoint;
    request: AppsCheckAuthorizationRequestOptions;
    response: OctokitResponse<
      AppsCheckAuthorizationResponseData | AppsCheckAuthorizationResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/oauth_authorizations/#list-your-grants
   */
  "GET /applications/grants": {
    parameters: OauthAuthorizationsListGrantsEndpoint;
    request: OauthAuthorizationsListGrantsRequestOptions;
    response: OctokitResponse<
      | OauthAuthorizationsListGrantsResponseData
      | never
      | OauthAuthorizationsListGrantsResponse401Data
      | OauthAuthorizationsListGrantsResponse403Data
      | OauthAuthorizationsListGrantsResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/oauth_authorizations/#get-a-single-grant
   */
  "GET /applications/grants/:grant_id": {
    parameters: OauthAuthorizationsGetGrantEndpoint;
    request: OauthAuthorizationsGetGrantRequestOptions;
    response: OctokitResponse<
      | OauthAuthorizationsGetGrantResponseData
      | never
      | OauthAuthorizationsGetGrantResponse401Data
      | OauthAuthorizationsGetGrantResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/#get-an-app
   */
  "GET /apps/:app_slug": {
    parameters: AppsGetBySlugEndpoint;
    request: AppsGetBySlugRequestOptions;
    response: OctokitResponse<
      | AppsGetBySlugResponseData
      | AppsGetBySlugResponse403Data
      | AppsGetBySlugResponse404Data
      | AppsGetBySlugResponse415Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/oauth_authorizations/#list-your-authorizations
   */
  "GET /authorizations": {
    parameters: OauthAuthorizationsListAuthorizationsEndpoint;
    request: OauthAuthorizationsListAuthorizationsRequestOptions;
    response: OctokitResponse<
      | OauthAuthorizationsListAuthorizationsResponseData
      | never
      | OauthAuthorizationsListAuthorizationsResponse401Data
      | OauthAuthorizationsListAuthorizationsResponse403Data
      | OauthAuthorizationsListAuthorizationsResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/oauth_authorizations/#get-a-single-authorization
   */
  "GET /authorizations/:authorization_id": {
    parameters: OauthAuthorizationsGetAuthorizationEndpoint;
    request: OauthAuthorizationsGetAuthorizationRequestOptions;
    response: OctokitResponse<
      | OauthAuthorizationsGetAuthorizationResponseData
      | never
      | OauthAuthorizationsGetAuthorizationResponse401Data
      | OauthAuthorizationsGetAuthorizationResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/codes_of_conduct/#get-all-codes-of-conduct
   */
  "GET /codes_of_conduct": {
    parameters: CodesOfConductGetAllCodesOfConductEndpoint;
    request: CodesOfConductGetAllCodesOfConductRequestOptions;
    response: OctokitResponse<
      | CodesOfConductGetAllCodesOfConductResponseData
      | never
      | CodesOfConductGetAllCodesOfConductResponse415Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/codes_of_conduct/#get-a-code-of-conduct
   */
  "GET /codes_of_conduct/:key": {
    parameters: CodesOfConductGetConductCodeEndpoint;
    request: CodesOfConductGetConductCodeRequestOptions;
    response: OctokitResponse<
      | CodesOfConductGetConductCodeResponseData
      | never
      | CodesOfConductGetConductCodeResponse404Data
      | CodesOfConductGetConductCodeResponse415Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/emojis/#get-emojis
   */
  "GET /emojis": {
    parameters: EmojisGetEndpoint;
    request: EmojisGetRequestOptions;
    response: OctokitResponse<EmojisGetResponseData | never>;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/actions/#list-self-hosted-runner-groups-for-an-enterprise
   */
  "GET /enterprises/:enterprise/actions/runner-groups": {
    parameters: EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseEndpoint;
    request: EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequestOptions;
    response: OctokitResponse<
      EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/actions/#get-a-self-hosted-runner-group-for-an-enterprise
   */
  "GET /enterprises/:enterprise/actions/runner-groups/:runner_group_id": {
    parameters: EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseEndpoint;
    request: EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequestOptions;
    response: OctokitResponse<
      EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/actions/#list-organization-access-to-a-self-hosted-runner-group-in-a-enterprise
   */
  "GET /enterprises/:enterprise/actions/runner-groups/:runner_group_id/organizations": {
    parameters: EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseEndpoint;
    request: EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequestOptions;
    response: OctokitResponse<
      EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/actions/#list-self-hosted-runners-in-a-group-for-an-enterprise
   */
  "GET /enterprises/:enterprise/actions/runner-groups/:runner_group_id/runners": {
    parameters: EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseEndpoint;
    request: EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequestOptions;
    response: OctokitResponse<
      EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/actions/#list-self-hosted-runners-for-an-enterprise
   */
  "GET /enterprises/:enterprise/actions/runners": {
    parameters: EnterpriseAdminListSelfHostedRunnersForEnterpriseEndpoint;
    request: EnterpriseAdminListSelfHostedRunnersForEnterpriseRequestOptions;
    response: OctokitResponse<
      EnterpriseAdminListSelfHostedRunnersForEnterpriseResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/actions/#get-a-self-hosted-runner-for-an-enterprise
   */
  "GET /enterprises/:enterprise/actions/runners/:runner_id": {
    parameters: EnterpriseAdminGetSelfHostedRunnerForEnterpriseEndpoint;
    request: EnterpriseAdminGetSelfHostedRunnerForEnterpriseRequestOptions;
    response: OctokitResponse<
      EnterpriseAdminGetSelfHostedRunnerForEnterpriseResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/actions/#list-runner-applications-for-an-enterprise
   */
  "GET /enterprises/:enterprise/actions/runners/downloads": {
    parameters: EnterpriseAdminListRunnerApplicationsForEnterpriseEndpoint;
    request: EnterpriseAdminListRunnerApplicationsForEnterpriseRequestOptions;
    response: OctokitResponse<
      EnterpriseAdminListRunnerApplicationsForEnterpriseResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/billing/#get-github-actions-billing-for-an-enterprise
   */
  "GET /enterprises/:enterprise/settings/billing/actions": {
    parameters: BillingGetGithubActionsBillingGheEndpoint;
    request: BillingGetGithubActionsBillingGheRequestOptions;
    response: OctokitResponse<BillingGetGithubActionsBillingGheResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/billing/#get-github-packages-billing-for-an-enterprise
   */
  "GET /enterprises/:enterprise/settings/billing/packages": {
    parameters: BillingGetGithubPackagesBillingGheEndpoint;
    request: BillingGetGithubPackagesBillingGheRequestOptions;
    response: OctokitResponse<BillingGetGithubPackagesBillingGheResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/billing/#get-shared-storage-billing-for-an-enterprise
   */
  "GET /enterprises/:enterprise/settings/billing/shared-storage": {
    parameters: BillingGetSharedStorageBillingGheEndpoint;
    request: BillingGetSharedStorageBillingGheRequestOptions;
    response: OctokitResponse<BillingGetSharedStorageBillingGheResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/activity/events/#list-public-events
   */
  "GET /events": {
    parameters: ActivityListPublicEventsEndpoint;
    request: ActivityListPublicEventsRequestOptions;
    response: OctokitResponse<
      | ActivityListPublicEventsResponseData
      | never
      | ActivityListPublicEventsResponse403Data
      | ActivityListPublicEventsResponse503Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/activity/feeds/#get-feeds
   */
  "GET /feeds": {
    parameters: ActivityGetFeedsEndpoint;
    request: ActivityGetFeedsRequestOptions;
    response: OctokitResponse<ActivityGetFeedsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/gists/#list-gists-for-the-authenticated-user
   */
  "GET /gists": {
    parameters: GistsListEndpoint;
    request: GistsListRequestOptions;
    response: OctokitResponse<
      GistsListResponseData | never | GistsListResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/gists/#get-a-gist
   */
  "GET /gists/:gist_id": {
    parameters: GistsGetEndpoint;
    request: GistsGetRequestOptions;
    response: OctokitResponse<
      | GistsGetResponseData
      | never
      | GistsGetResponse403Data
      | GistsGetResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/gists/#get-a-gist-revision
   */
  "GET /gists/:gist_id/:sha": {
    parameters: GistsGetRevisionEndpoint;
    request: GistsGetRevisionRequestOptions;
    response: OctokitResponse<
      | GistsGetRevisionResponseData
      | GistsGetRevisionResponse403Data
      | GistsGetRevisionResponse404Data
      | GistsGetRevisionResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/gists/comments/#list-gist-comments
   */
  "GET /gists/:gist_id/comments": {
    parameters: GistsListCommentsEndpoint;
    request: GistsListCommentsRequestOptions;
    response: OctokitResponse<
      | GistsListCommentsResponseData
      | never
      | GistsListCommentsResponse403Data
      | GistsListCommentsResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/gists/comments/#get-a-gist-comment
   */
  "GET /gists/:gist_id/comments/:comment_id": {
    parameters: GistsGetCommentEndpoint;
    request: GistsGetCommentRequestOptions;
    response: OctokitResponse<
      | GistsGetCommentResponseData
      | never
      | GistsGetCommentResponse403Data
      | GistsGetCommentResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/gists/#list-gist-commits
   */
  "GET /gists/:gist_id/commits": {
    parameters: GistsListCommitsEndpoint;
    request: GistsListCommitsRequestOptions;
    response: OctokitResponse<
      | GistsListCommitsResponseData
      | never
      | GistsListCommitsResponse403Data
      | GistsListCommitsResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/gists/#list-gist-forks
   */
  "GET /gists/:gist_id/forks": {
    parameters: GistsListForksEndpoint;
    request: GistsListForksRequestOptions;
    response: OctokitResponse<
      | GistsListForksResponseData
      | never
      | GistsListForksResponse403Data
      | GistsListForksResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/gists/#check-if-a-gist-is-starred
   */
  "GET /gists/:gist_id/star": {
    parameters: GistsCheckIsStarredEndpoint;
    request: GistsCheckIsStarredRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | GistsCheckIsStarredResponse403Data
      | GistsCheckIsStarredResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/gists/#list-public-gists
   */
  "GET /gists/public": {
    parameters: GistsListPublicEndpoint;
    request: GistsListPublicRequestOptions;
    response: OctokitResponse<
      | GistsListPublicResponseData
      | never
      | GistsListPublicResponse403Data
      | GistsListPublicResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/gists/#list-starred-gists
   */
  "GET /gists/starred": {
    parameters: GistsListStarredEndpoint;
    request: GistsListStarredRequestOptions;
    response: OctokitResponse<
      | GistsListStarredResponseData
      | never
      | GistsListStarredResponse401Data
      | GistsListStarredResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/gitignore/#get-all-gitignore-templates
   */
  "GET /gitignore/templates": {
    parameters: GitignoreGetAllTemplatesEndpoint;
    request: GitignoreGetAllTemplatesRequestOptions;
    response: OctokitResponse<GitignoreGetAllTemplatesResponseData | never>;
  };
  /**
   * @see https://developer.github.com/v3/gitignore/#get-a-gitignore-template
   */
  "GET /gitignore/templates/:name": {
    parameters: GitignoreGetTemplateEndpoint;
    request: GitignoreGetTemplateRequestOptions;
    response: OctokitResponse<GitignoreGetTemplateResponseData | never>;
  };
  /**
   * @see https://developer.github.com/v3/apps/installations/#list-repositories-accessible-to-the-app-installation
   */
  "GET /installation/repositories": {
    parameters: AppsListReposAccessibleToInstallationEndpoint;
    request: AppsListReposAccessibleToInstallationRequestOptions;
    response: OctokitResponse<
      | AppsListReposAccessibleToInstallationResponseData
      | never
      | AppsListReposAccessibleToInstallationResponse401Data
      | AppsListReposAccessibleToInstallationResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/#list-issues-assigned-to-the-authenticated-user
   */
  "GET /issues": {
    parameters: IssuesListEndpoint;
    request: IssuesListRequestOptions;
    response: OctokitResponse<
      | IssuesListResponseData
      | never
      | IssuesListResponse404Data
      | IssuesListResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/licenses/#get-all-commonly-used-licenses
   */
  "GET /licenses": {
    parameters: LicensesGetAllCommonlyUsedEndpoint;
    request: LicensesGetAllCommonlyUsedRequestOptions;
    response: OctokitResponse<LicensesGetAllCommonlyUsedResponseData | never>;
  };
  /**
   * @see https://developer.github.com/v3/licenses/#get-a-license
   */
  "GET /licenses/:license": {
    parameters: LicensesGetEndpoint;
    request: LicensesGetRequestOptions;
    response: OctokitResponse<
      | LicensesGetResponseData
      | never
      | LicensesGetResponse403Data
      | LicensesGetResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/marketplace/#get-a-subscription-plan-for-an-account
   */
  "GET /marketplace_listing/accounts/:account_id": {
    parameters: AppsGetSubscriptionPlanForAccountEndpoint;
    request: AppsGetSubscriptionPlanForAccountRequestOptions;
    response: OctokitResponse<
      | AppsGetSubscriptionPlanForAccountResponseData
      | AppsGetSubscriptionPlanForAccountResponse401Data
      | AppsGetSubscriptionPlanForAccountResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/marketplace/#list-plans
   */
  "GET /marketplace_listing/plans": {
    parameters: AppsListPlansEndpoint;
    request: AppsListPlansRequestOptions;
    response: OctokitResponse<
      | AppsListPlansResponseData
      | AppsListPlansResponse401Data
      | AppsListPlansResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/marketplace/#list-accounts-for-a-plan
   */
  "GET /marketplace_listing/plans/:plan_id/accounts": {
    parameters: AppsListAccountsForPlanEndpoint;
    request: AppsListAccountsForPlanRequestOptions;
    response: OctokitResponse<
      | AppsListAccountsForPlanResponseData
      | AppsListAccountsForPlanResponse401Data
      | AppsListAccountsForPlanResponse404Data
      | AppsListAccountsForPlanResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/marketplace/#get-a-subscription-plan-for-an-account-stubbed
   */
  "GET /marketplace_listing/stubbed/accounts/:account_id": {
    parameters: AppsGetSubscriptionPlanForAccountStubbedEndpoint;
    request: AppsGetSubscriptionPlanForAccountStubbedRequestOptions;
    response: OctokitResponse<
      | AppsGetSubscriptionPlanForAccountStubbedResponseData
      | AppsGetSubscriptionPlanForAccountStubbedResponse401Data
      | never
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/marketplace/#list-plans-stubbed
   */
  "GET /marketplace_listing/stubbed/plans": {
    parameters: AppsListPlansStubbedEndpoint;
    request: AppsListPlansStubbedRequestOptions;
    response: OctokitResponse<
      AppsListPlansStubbedResponseData | AppsListPlansStubbedResponse401Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/marketplace/#list-accounts-for-a-plan-stubbed
   */
  "GET /marketplace_listing/stubbed/plans/:plan_id/accounts": {
    parameters: AppsListAccountsForPlanStubbedEndpoint;
    request: AppsListAccountsForPlanStubbedRequestOptions;
    response: OctokitResponse<
      | AppsListAccountsForPlanStubbedResponseData
      | AppsListAccountsForPlanStubbedResponse401Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/meta/#get-github-meta-information
   */
  "GET /meta": {
    parameters: MetaGetEndpoint;
    request: MetaGetRequestOptions;
    response: OctokitResponse<MetaGetResponseData | never>;
  };
  /**
   * @see https://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories
   */
  "GET /networks/:owner/:repo/events": {
    parameters: ActivityListPublicEventsForRepoNetworkEndpoint;
    request: ActivityListPublicEventsForRepoNetworkRequestOptions;
    response: OctokitResponse<
      | ActivityListPublicEventsForRepoNetworkResponseData
      | never
      | never
      | ActivityListPublicEventsForRepoNetworkResponse403Data
      | ActivityListPublicEventsForRepoNetworkResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/activity/notifications/#list-notifications-for-the-authenticated-user
   */
  "GET /notifications": {
    parameters: ActivityListNotificationsForAuthenticatedUserEndpoint;
    request: ActivityListNotificationsForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | ActivityListNotificationsForAuthenticatedUserResponseData
      | never
      | ActivityListNotificationsForAuthenticatedUserResponse401Data
      | ActivityListNotificationsForAuthenticatedUserResponse403Data
      | ActivityListNotificationsForAuthenticatedUserResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/activity/notifications/#get-a-thread
   */
  "GET /notifications/threads/:thread_id": {
    parameters: ActivityGetThreadEndpoint;
    request: ActivityGetThreadRequestOptions;
    response: OctokitResponse<
      | ActivityGetThreadResponseData
      | never
      | ActivityGetThreadResponse401Data
      | ActivityGetThreadResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/activity/notifications/#get-a-thread-subscription-for-the-authenticated-user
   */
  "GET /notifications/threads/:thread_id/subscription": {
    parameters: ActivityGetThreadSubscriptionForAuthenticatedUserEndpoint;
    request: ActivityGetThreadSubscriptionForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | ActivityGetThreadSubscriptionForAuthenticatedUserResponseData
      | never
      | ActivityGetThreadSubscriptionForAuthenticatedUserResponse401Data
      | ActivityGetThreadSubscriptionForAuthenticatedUserResponse403Data
    >;
  };
  /**
   * @see
   */
  "GET /octocat": {
    parameters: MetaGetOctocatEndpoint;
    request: MetaGetOctocatRequestOptions;
    response: OctokitResponse<MetaGetOctocatResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/orgs/#list-organizations
   */
  "GET /organizations": {
    parameters: OrgsListEndpoint;
    request: OrgsListRequestOptions;
    response: OctokitResponse<OrgsListResponseData | never>;
  };
  /**
   * @see https://developer.github.com/v3/orgs/#get-an-organization
   */
  "GET /orgs/:org": {
    parameters: OrgsGetEndpoint;
    request: OrgsGetRequestOptions;
    response: OctokitResponse<OrgsGetResponseData | OrgsGetResponse404Data>;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runner-groups/#list-self-hosted-runner-groups-for-an-organization
   */
  "GET /orgs/:org/actions/runner-groups": {
    parameters: ActionsListSelfHostedRunnerGroupsForOrgEndpoint;
    request: ActionsListSelfHostedRunnerGroupsForOrgRequestOptions;
    response: OctokitResponse<
      ActionsListSelfHostedRunnerGroupsForOrgResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runner-groups/#get-a-self-hosted-runner-group-for-an-organization
   */
  "GET /orgs/:org/actions/runner-groups/:runner_group_id": {
    parameters: ActionsGetSelfHostedRunnerGroupForOrgEndpoint;
    request: ActionsGetSelfHostedRunnerGroupForOrgRequestOptions;
    response: OctokitResponse<
      ActionsGetSelfHostedRunnerGroupForOrgResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runner-groups/#list-repository-access-to-a-self-hosted-runner-group-in-an-organization
   */
  "GET /orgs/:org/actions/runner-groups/:runner_group_id/repositories": {
    parameters: ActionsListRepoAccessToSelfHostedRunnerGroupInOrgEndpoint;
    request: ActionsListRepoAccessToSelfHostedRunnerGroupInOrgRequestOptions;
    response: OctokitResponse<
      ActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runner-groups/#list-self-hosted-runners-in-a-group-for-an-organization
   */
  "GET /orgs/:org/actions/runner-groups/:runner_group_id/runners": {
    parameters: ActionsListSelfHostedRunnersInGroupForOrgEndpoint;
    request: ActionsListSelfHostedRunnersInGroupForOrgRequestOptions;
    response: OctokitResponse<
      ActionsListSelfHostedRunnersInGroupForOrgResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runners/#list-self-hosted-runners-for-an-organization
   */
  "GET /orgs/:org/actions/runners": {
    parameters: ActionsListSelfHostedRunnersForOrgEndpoint;
    request: ActionsListSelfHostedRunnersForOrgRequestOptions;
    response: OctokitResponse<ActionsListSelfHostedRunnersForOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runners/#get-a-self-hosted-runner-for-an-organization
   */
  "GET /orgs/:org/actions/runners/:runner_id": {
    parameters: ActionsGetSelfHostedRunnerForOrgEndpoint;
    request: ActionsGetSelfHostedRunnerForOrgRequestOptions;
    response: OctokitResponse<ActionsGetSelfHostedRunnerForOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runners/#list-runner-applications-for-an-organization
   */
  "GET /orgs/:org/actions/runners/downloads": {
    parameters: ActionsListRunnerApplicationsForOrgEndpoint;
    request: ActionsListRunnerApplicationsForOrgRequestOptions;
    response: OctokitResponse<ActionsListRunnerApplicationsForOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/secrets/#list-organization-secrets
   */
  "GET /orgs/:org/actions/secrets": {
    parameters: ActionsListOrgSecretsEndpoint;
    request: ActionsListOrgSecretsRequestOptions;
    response: OctokitResponse<ActionsListOrgSecretsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/secrets/#get-an-organization-secret
   */
  "GET /orgs/:org/actions/secrets/:secret_name": {
    parameters: ActionsGetOrgSecretEndpoint;
    request: ActionsGetOrgSecretRequestOptions;
    response: OctokitResponse<ActionsGetOrgSecretResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/secrets/#list-selected-repositories-for-an-organization-secret
   */
  "GET /orgs/:org/actions/secrets/:secret_name/repositories": {
    parameters: ActionsListSelectedReposForOrgSecretEndpoint;
    request: ActionsListSelectedReposForOrgSecretRequestOptions;
    response: OctokitResponse<ActionsListSelectedReposForOrgSecretResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/secrets/#get-an-organization-public-key
   */
  "GET /orgs/:org/actions/secrets/public-key": {
    parameters: ActionsGetOrgPublicKeyEndpoint;
    request: ActionsGetOrgPublicKeyRequestOptions;
    response: OctokitResponse<ActionsGetOrgPublicKeyResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/orgs/blocking/#list-users-blocked-by-an-organization
   */
  "GET /orgs/:org/blocks": {
    parameters: OrgsListBlockedUsersEndpoint;
    request: OrgsListBlockedUsersRequestOptions;
    response: OctokitResponse<
      OrgsListBlockedUsersResponseData | OrgsListBlockedUsersResponse415Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/orgs/blocking/#check-if-a-user-is-blocked-by-an-organization
   */
  "GET /orgs/:org/blocks/:username": {
    parameters: OrgsCheckBlockedUserEndpoint;
    request: OrgsCheckBlockedUserRequestOptions;
    response: OctokitResponse<never | OrgsCheckBlockedUserResponse404Data>;
  };
  /**
   * @see https://developer.github.com/v3/orgs/#list-saml-sso-authorizations-for-an-organization
   */
  "GET /orgs/:org/credential-authorizations": {
    parameters: OrgsListSamlSsoAuthorizationsEndpoint;
    request: OrgsListSamlSsoAuthorizationsRequestOptions;
    response: OctokitResponse<OrgsListSamlSsoAuthorizationsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/activity/events/#list-public-organization-events
   */
  "GET /orgs/:org/events": {
    parameters: ActivityListPublicOrgEventsEndpoint;
    request: ActivityListPublicOrgEventsRequestOptions;
    response: OctokitResponse<ActivityListPublicOrgEventsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/orgs/hooks/#list-organization-webhooks
   */
  "GET /orgs/:org/hooks": {
    parameters: OrgsListWebhooksEndpoint;
    request: OrgsListWebhooksRequestOptions;
    response: OctokitResponse<
      OrgsListWebhooksResponseData | OrgsListWebhooksResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/orgs/hooks/#get-an-organization-webhook
   */
  "GET /orgs/:org/hooks/:hook_id": {
    parameters: OrgsGetWebhookEndpoint;
    request: OrgsGetWebhookRequestOptions;
    response: OctokitResponse<
      OrgsGetWebhookResponseData | OrgsGetWebhookResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/#get-an-organization-installation-for-the-authenticated-app
   */
  "GET /orgs/:org/installation": {
    parameters: AppsGetOrgInstallationEndpoint;
    request: AppsGetOrgInstallationRequestOptions;
    response: OctokitResponse<AppsGetOrgInstallationResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/orgs/#list-app-installations-for-an-organization
   */
  "GET /orgs/:org/installations": {
    parameters: OrgsListAppInstallationsEndpoint;
    request: OrgsListAppInstallationsRequestOptions;
    response: OctokitResponse<OrgsListAppInstallationsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/interactions/orgs/#get-interaction-restrictions-for-an-organization
   */
  "GET /orgs/:org/interaction-limits": {
    parameters: InteractionsGetRestrictionsForOrgEndpoint;
    request: InteractionsGetRestrictionsForOrgRequestOptions;
    response: OctokitResponse<InteractionsGetRestrictionsForOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/orgs/members/#list-pending-organization-invitations
   */
  "GET /orgs/:org/invitations": {
    parameters: OrgsListPendingInvitationsEndpoint;
    request: OrgsListPendingInvitationsRequestOptions;
    response: OctokitResponse<
      | OrgsListPendingInvitationsResponseData
      | OrgsListPendingInvitationsResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/orgs/members/#list-organization-invitation-teams
   */
  "GET /orgs/:org/invitations/:invitation_id/teams": {
    parameters: OrgsListInvitationTeamsEndpoint;
    request: OrgsListInvitationTeamsRequestOptions;
    response: OctokitResponse<
      | OrgsListInvitationTeamsResponseData
      | OrgsListInvitationTeamsResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/#list-organization-issues-assigned-to-the-authenticated-user
   */
  "GET /orgs/:org/issues": {
    parameters: IssuesListForOrgEndpoint;
    request: IssuesListForOrgRequestOptions;
    response: OctokitResponse<
      IssuesListForOrgResponseData | IssuesListForOrgResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/orgs/members/#list-organization-members
   */
  "GET /orgs/:org/members": {
    parameters: OrgsListMembersEndpoint;
    request: OrgsListMembersRequestOptions;
    response: OctokitResponse<
      OrgsListMembersResponseData | never | OrgsListMembersResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/orgs/members/#check-organization-membership-for-a-user
   */
  "GET /orgs/:org/members/:username": {
    parameters: OrgsCheckMembershipForUserEndpoint;
    request: OrgsCheckMembershipForUserRequestOptions;
    response: OctokitResponse<never | never | never>;
  };
  /**
   * @see https://developer.github.com/v3/orgs/members/#get-organization-membership-for-a-user
   */
  "GET /orgs/:org/memberships/:username": {
    parameters: OrgsGetMembershipForUserEndpoint;
    request: OrgsGetMembershipForUserRequestOptions;
    response: OctokitResponse<
      | OrgsGetMembershipForUserResponseData
      | OrgsGetMembershipForUserResponse403Data
      | OrgsGetMembershipForUserResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/migrations/orgs/#list-organization-migrations
   */
  "GET /orgs/:org/migrations": {
    parameters: MigrationsListForOrgEndpoint;
    request: MigrationsListForOrgRequestOptions;
    response: OctokitResponse<MigrationsListForOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/migrations/orgs/#get-an-organization-migration-status
   */
  "GET /orgs/:org/migrations/:migration_id": {
    parameters: MigrationsGetStatusForOrgEndpoint;
    request: MigrationsGetStatusForOrgRequestOptions;
    response: OctokitResponse<
      | MigrationsGetStatusForOrgResponseData
      | MigrationsGetStatusForOrgResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/migrations/orgs/#download-an-organization-migration-archive
   */
  "GET /orgs/:org/migrations/:migration_id/archive": {
    parameters: MigrationsDownloadArchiveForOrgEndpoint;
    request: MigrationsDownloadArchiveForOrgRequestOptions;
    response: OctokitResponse<
      never | MigrationsDownloadArchiveForOrgResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/migrations/orgs/#list-repositories-in-an-organization-migration
   */
  "GET /orgs/:org/migrations/:migration_id/repositories": {
    parameters: MigrationsListReposForOrgEndpoint;
    request: MigrationsListReposForOrgRequestOptions;
    response: OctokitResponse<
      | MigrationsListReposForOrgResponseData
      | MigrationsListReposForOrgResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators-for-an-organization
   */
  "GET /orgs/:org/outside_collaborators": {
    parameters: OrgsListOutsideCollaboratorsEndpoint;
    request: OrgsListOutsideCollaboratorsRequestOptions;
    response: OctokitResponse<OrgsListOutsideCollaboratorsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/projects/#list-organization-projects
   */
  "GET /orgs/:org/projects": {
    parameters: ProjectsListForOrgEndpoint;
    request: ProjectsListForOrgRequestOptions;
    response: OctokitResponse<
      ProjectsListForOrgResponseData | ProjectsListForOrgResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/orgs/members/#list-public-organization-members
   */
  "GET /orgs/:org/public_members": {
    parameters: OrgsListPublicMembersEndpoint;
    request: OrgsListPublicMembersRequestOptions;
    response: OctokitResponse<OrgsListPublicMembersResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/orgs/members/#check-public-organization-membership-for-a-user
   */
  "GET /orgs/:org/public_members/:username": {
    parameters: OrgsCheckPublicMembershipForUserEndpoint;
    request: OrgsCheckPublicMembershipForUserRequestOptions;
    response: OctokitResponse<never | never>;
  };
  /**
   * @see https://developer.github.com/v3/repos/#list-organization-repositories
   */
  "GET /orgs/:org/repos": {
    parameters: ReposListForOrgEndpoint;
    request: ReposListForOrgRequestOptions;
    response: OctokitResponse<ReposListForOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/billing/#get-github-actions-billing-for-an-organization
   */
  "GET /orgs/:org/settings/billing/actions": {
    parameters: BillingGetGithubActionsBillingOrgEndpoint;
    request: BillingGetGithubActionsBillingOrgRequestOptions;
    response: OctokitResponse<BillingGetGithubActionsBillingOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/billing/#get-github-packages-billing-for-an-organization
   */
  "GET /orgs/:org/settings/billing/packages": {
    parameters: BillingGetGithubPackagesBillingOrgEndpoint;
    request: BillingGetGithubPackagesBillingOrgRequestOptions;
    response: OctokitResponse<BillingGetGithubPackagesBillingOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/billing/#get-shared-storage-billing-for-an-organization
   */
  "GET /orgs/:org/settings/billing/shared-storage": {
    parameters: BillingGetSharedStorageBillingOrgEndpoint;
    request: BillingGetSharedStorageBillingOrgRequestOptions;
    response: OctokitResponse<BillingGetSharedStorageBillingOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/team_sync/#list-idp-groups-for-an-organization
   */
  "GET /orgs/:org/team-sync/groups": {
    parameters: TeamsListIdpGroupsForOrgEndpoint;
    request: TeamsListIdpGroupsForOrgRequestOptions;
    response: OctokitResponse<TeamsListIdpGroupsForOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/#list-teams
   */
  "GET /orgs/:org/teams": {
    parameters: TeamsListEndpoint;
    request: TeamsListRequestOptions;
    response: OctokitResponse<TeamsListResponseData | TeamsListResponse403Data>;
  };
  /**
   * @see https://developer.github.com/v3/teams/#get-a-team-by-name
   */
  "GET /orgs/:org/teams/:team_slug": {
    parameters: TeamsGetByNameEndpoint;
    request: TeamsGetByNameRequestOptions;
    response: OctokitResponse<
      TeamsGetByNameResponseData | TeamsGetByNameResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/discussions/#list-discussions
   */
  "GET /orgs/:org/teams/:team_slug/discussions": {
    parameters: TeamsListDiscussionsInOrgEndpoint;
    request: TeamsListDiscussionsInOrgRequestOptions;
    response: OctokitResponse<TeamsListDiscussionsInOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/discussions/#get-a-discussion
   */
  "GET /orgs/:org/teams/:team_slug/discussions/:discussion_number": {
    parameters: TeamsGetDiscussionInOrgEndpoint;
    request: TeamsGetDiscussionInOrgRequestOptions;
    response: OctokitResponse<TeamsGetDiscussionInOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/discussion_comments/#list-discussion-comments
   */
  "GET /orgs/:org/teams/:team_slug/discussions/:discussion_number/comments": {
    parameters: TeamsListDiscussionCommentsInOrgEndpoint;
    request: TeamsListDiscussionCommentsInOrgRequestOptions;
    response: OctokitResponse<TeamsListDiscussionCommentsInOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/discussion_comments/#get-a-discussion-comment
   */
  "GET /orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number": {
    parameters: TeamsGetDiscussionCommentInOrgEndpoint;
    request: TeamsGetDiscussionCommentInOrgRequestOptions;
    response: OctokitResponse<TeamsGetDiscussionCommentInOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment
   */
  "GET /orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions": {
    parameters: ReactionsListForTeamDiscussionCommentInOrgEndpoint;
    request: ReactionsListForTeamDiscussionCommentInOrgRequestOptions;
    response: OctokitResponse<
      ReactionsListForTeamDiscussionCommentInOrgResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion
   */
  "GET /orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions": {
    parameters: ReactionsListForTeamDiscussionInOrgEndpoint;
    request: ReactionsListForTeamDiscussionInOrgRequestOptions;
    response: OctokitResponse<ReactionsListForTeamDiscussionInOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/members/#list-pending-team-invitations
   */
  "GET /orgs/:org/teams/:team_slug/invitations": {
    parameters: TeamsListPendingInvitationsInOrgEndpoint;
    request: TeamsListPendingInvitationsInOrgRequestOptions;
    response: OctokitResponse<TeamsListPendingInvitationsInOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/members/#list-team-members
   */
  "GET /orgs/:org/teams/:team_slug/members": {
    parameters: TeamsListMembersInOrgEndpoint;
    request: TeamsListMembersInOrgRequestOptions;
    response: OctokitResponse<TeamsListMembersInOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/members/#get-team-membership-for-a-user
   */
  "GET /orgs/:org/teams/:team_slug/memberships/:username": {
    parameters: TeamsGetMembershipForUserInOrgEndpoint;
    request: TeamsGetMembershipForUserInOrgRequestOptions;
    response: OctokitResponse<
      TeamsGetMembershipForUserInOrgResponseData | never
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/#list-team-projects
   */
  "GET /orgs/:org/teams/:team_slug/projects": {
    parameters: TeamsListProjectsInOrgEndpoint;
    request: TeamsListProjectsInOrgRequestOptions;
    response: OctokitResponse<TeamsListProjectsInOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/#check-team-permissions-for-a-project
   */
  "GET /orgs/:org/teams/:team_slug/projects/:project_id": {
    parameters: TeamsCheckPermissionsForProjectInOrgEndpoint;
    request: TeamsCheckPermissionsForProjectInOrgRequestOptions;
    response: OctokitResponse<
      TeamsCheckPermissionsForProjectInOrgResponseData | never
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/#list-team-repositories
   */
  "GET /orgs/:org/teams/:team_slug/repos": {
    parameters: TeamsListReposInOrgEndpoint;
    request: TeamsListReposInOrgRequestOptions;
    response: OctokitResponse<TeamsListReposInOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/#check-team-permissions-for-a-repository
   */
  "GET /orgs/:org/teams/:team_slug/repos/:owner/:repo": {
    parameters: TeamsCheckPermissionsForRepoInOrgEndpoint;
    request: TeamsCheckPermissionsForRepoInOrgRequestOptions;
    response: OctokitResponse<
      TeamsCheckPermissionsForRepoInOrgResponseData | never | never
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/team_sync/#list-idp-groups-for-a-team
   */
  "GET /orgs/:org/teams/:team_slug/team-sync/group-mappings": {
    parameters: TeamsListIdpGroupsInOrgEndpoint;
    request: TeamsListIdpGroupsInOrgRequestOptions;
    response: OctokitResponse<TeamsListIdpGroupsInOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/#list-child-teams
   */
  "GET /orgs/:org/teams/:team_slug/teams": {
    parameters: TeamsListChildInOrgEndpoint;
    request: TeamsListChildInOrgRequestOptions;
    response: OctokitResponse<TeamsListChildInOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/projects/#get-a-project
   */
  "GET /projects/:project_id": {
    parameters: ProjectsGetEndpoint;
    request: ProjectsGetRequestOptions;
    response: OctokitResponse<
      | ProjectsGetResponseData
      | never
      | ProjectsGetResponse401Data
      | ProjectsGetResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/projects/collaborators/#list-project-collaborators
   */
  "GET /projects/:project_id/collaborators": {
    parameters: ProjectsListCollaboratorsEndpoint;
    request: ProjectsListCollaboratorsRequestOptions;
    response: OctokitResponse<
      | ProjectsListCollaboratorsResponseData
      | never
      | ProjectsListCollaboratorsResponse401Data
      | ProjectsListCollaboratorsResponse403Data
      | ProjectsListCollaboratorsResponse404Data
      | ProjectsListCollaboratorsResponse415Data
      | ProjectsListCollaboratorsResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/projects/collaborators/#get-project-permission-for-a-user
   */
  "GET /projects/:project_id/collaborators/:username/permission": {
    parameters: ProjectsGetPermissionForUserEndpoint;
    request: ProjectsGetPermissionForUserRequestOptions;
    response: OctokitResponse<
      | ProjectsGetPermissionForUserResponseData
      | never
      | ProjectsGetPermissionForUserResponse401Data
      | ProjectsGetPermissionForUserResponse403Data
      | ProjectsGetPermissionForUserResponse404Data
      | ProjectsGetPermissionForUserResponse415Data
      | ProjectsGetPermissionForUserResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/projects/columns/#list-project-columns
   */
  "GET /projects/:project_id/columns": {
    parameters: ProjectsListColumnsEndpoint;
    request: ProjectsListColumnsRequestOptions;
    response: OctokitResponse<
      | ProjectsListColumnsResponseData
      | never
      | ProjectsListColumnsResponse401Data
      | ProjectsListColumnsResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/projects/columns/#get-a-project-column
   */
  "GET /projects/columns/:column_id": {
    parameters: ProjectsGetColumnEndpoint;
    request: ProjectsGetColumnRequestOptions;
    response: OctokitResponse<
      | ProjectsGetColumnResponseData
      | never
      | ProjectsGetColumnResponse401Data
      | ProjectsGetColumnResponse403Data
      | ProjectsGetColumnResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/projects/cards/#list-project-cards
   */
  "GET /projects/columns/:column_id/cards": {
    parameters: ProjectsListCardsEndpoint;
    request: ProjectsListCardsRequestOptions;
    response: OctokitResponse<
      | ProjectsListCardsResponseData
      | never
      | ProjectsListCardsResponse401Data
      | ProjectsListCardsResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/projects/cards/#get-a-project-card
   */
  "GET /projects/columns/cards/:card_id": {
    parameters: ProjectsGetCardEndpoint;
    request: ProjectsGetCardRequestOptions;
    response: OctokitResponse<
      | ProjectsGetCardResponseData
      | never
      | ProjectsGetCardResponse401Data
      | ProjectsGetCardResponse403Data
      | ProjectsGetCardResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/rate_limit/#get-rate-limit-status-for-the-authenticated-user
   */
  "GET /rate_limit": {
    parameters: RateLimitGetEndpoint;
    request: RateLimitGetRequestOptions;
    response: OctokitResponse<
      RateLimitGetResponseData | never | RateLimitGetResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/#get-a-repository
   */
  "GET /repos/:owner/:repo": {
    parameters: ReposGetEndpoint;
    request: ReposGetRequestOptions;
    response: OctokitResponse<
      | ReposGetResponseData
      | never
      | ReposGetResponse403Data
      | ReposGetResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/actions/artifacts/#list-artifacts-for-a-repository
   */
  "GET /repos/:owner/:repo/actions/artifacts": {
    parameters: ActionsListArtifactsForRepoEndpoint;
    request: ActionsListArtifactsForRepoRequestOptions;
    response: OctokitResponse<ActionsListArtifactsForRepoResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/artifacts/#get-an-artifact
   */
  "GET /repos/:owner/:repo/actions/artifacts/:artifact_id": {
    parameters: ActionsGetArtifactEndpoint;
    request: ActionsGetArtifactRequestOptions;
    response: OctokitResponse<ActionsGetArtifactResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/artifacts/#download-an-artifact
   */
  "GET /repos/:owner/:repo/actions/artifacts/:artifact_id/:archive_format": {
    parameters: ActionsDownloadArtifactEndpoint;
    request: ActionsDownloadArtifactRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/actions/workflow-jobs/#get-a-job-for-a-workflow-run
   */
  "GET /repos/:owner/:repo/actions/jobs/:job_id": {
    parameters: ActionsGetJobForWorkflowRunEndpoint;
    request: ActionsGetJobForWorkflowRunRequestOptions;
    response: OctokitResponse<ActionsGetJobForWorkflowRunResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/workflow-jobs/#download-job-logs-for-a-workflow-run
   */
  "GET /repos/:owner/:repo/actions/jobs/:job_id/logs": {
    parameters: ActionsDownloadJobLogsForWorkflowRunEndpoint;
    request: ActionsDownloadJobLogsForWorkflowRunRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see
   */
  "GET /repos/:owner/:repo/actions/permissions": {
    parameters: ActionsGetRepoPermissionsEndpoint;
    request: ActionsGetRepoPermissionsRequestOptions;
    response: OctokitResponse<ActionsGetRepoPermissionsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runners/#list-self-hosted-runners-for-a-repository
   */
  "GET /repos/:owner/:repo/actions/runners": {
    parameters: ActionsListSelfHostedRunnersForRepoEndpoint;
    request: ActionsListSelfHostedRunnersForRepoRequestOptions;
    response: OctokitResponse<ActionsListSelfHostedRunnersForRepoResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runners/#get-a-self-hosted-runner-for-a-repository
   */
  "GET /repos/:owner/:repo/actions/runners/:runner_id": {
    parameters: ActionsGetSelfHostedRunnerForRepoEndpoint;
    request: ActionsGetSelfHostedRunnerForRepoRequestOptions;
    response: OctokitResponse<ActionsGetSelfHostedRunnerForRepoResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runners/#list-runner-applications-for-a-repository
   */
  "GET /repos/:owner/:repo/actions/runners/downloads": {
    parameters: ActionsListRunnerApplicationsForRepoEndpoint;
    request: ActionsListRunnerApplicationsForRepoRequestOptions;
    response: OctokitResponse<ActionsListRunnerApplicationsForRepoResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/workflow-runs/#list-workflow-runs-for-a-repository
   */
  "GET /repos/:owner/:repo/actions/runs": {
    parameters: ActionsListWorkflowRunsForRepoEndpoint;
    request: ActionsListWorkflowRunsForRepoRequestOptions;
    response: OctokitResponse<ActionsListWorkflowRunsForRepoResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/workflow-runs/#get-a-workflow-run
   */
  "GET /repos/:owner/:repo/actions/runs/:run_id": {
    parameters: ActionsGetWorkflowRunEndpoint;
    request: ActionsGetWorkflowRunRequestOptions;
    response: OctokitResponse<ActionsGetWorkflowRunResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/artifacts/#list-workflow-run-artifacts
   */
  "GET /repos/:owner/:repo/actions/runs/:run_id/artifacts": {
    parameters: ActionsListWorkflowRunArtifactsEndpoint;
    request: ActionsListWorkflowRunArtifactsRequestOptions;
    response: OctokitResponse<ActionsListWorkflowRunArtifactsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/workflow-jobs/#list-jobs-for-a-workflow-run
   */
  "GET /repos/:owner/:repo/actions/runs/:run_id/jobs": {
    parameters: ActionsListJobsForWorkflowRunEndpoint;
    request: ActionsListJobsForWorkflowRunRequestOptions;
    response: OctokitResponse<ActionsListJobsForWorkflowRunResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/workflow-runs/#download-workflow-run-logs
   */
  "GET /repos/:owner/:repo/actions/runs/:run_id/logs": {
    parameters: ActionsDownloadWorkflowRunLogsEndpoint;
    request: ActionsDownloadWorkflowRunLogsRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/actions/workflow-runs/#get-workflow-run-usage
   */
  "GET /repos/:owner/:repo/actions/runs/:run_id/timing": {
    parameters: ActionsGetWorkflowRunUsageEndpoint;
    request: ActionsGetWorkflowRunUsageRequestOptions;
    response: OctokitResponse<ActionsGetWorkflowRunUsageResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/secrets/#list-repository-secrets
   */
  "GET /repos/:owner/:repo/actions/secrets": {
    parameters: ActionsListRepoSecretsEndpoint;
    request: ActionsListRepoSecretsRequestOptions;
    response: OctokitResponse<ActionsListRepoSecretsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/secrets/#get-a-repository-secret
   */
  "GET /repos/:owner/:repo/actions/secrets/:secret_name": {
    parameters: ActionsGetRepoSecretEndpoint;
    request: ActionsGetRepoSecretRequestOptions;
    response: OctokitResponse<ActionsGetRepoSecretResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/secrets/#get-a-repository-public-key
   */
  "GET /repos/:owner/:repo/actions/secrets/public-key": {
    parameters: ActionsGetRepoPublicKeyEndpoint;
    request: ActionsGetRepoPublicKeyRequestOptions;
    response: OctokitResponse<ActionsGetRepoPublicKeyResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/workflows/#list-repository-workflows
   */
  "GET /repos/:owner/:repo/actions/workflows": {
    parameters: ActionsListRepoWorkflowsEndpoint;
    request: ActionsListRepoWorkflowsRequestOptions;
    response: OctokitResponse<ActionsListRepoWorkflowsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/workflows/#get-a-workflow
   */
  "GET /repos/:owner/:repo/actions/workflows/:workflow_id": {
    parameters: ActionsGetWorkflowEndpoint;
    request: ActionsGetWorkflowRequestOptions;
    response: OctokitResponse<ActionsGetWorkflowResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/workflow-runs/#list-workflow-runs
   */
  "GET /repos/:owner/:repo/actions/workflows/:workflow_id/runs": {
    parameters: ActionsListWorkflowRunsEndpoint;
    request: ActionsListWorkflowRunsRequestOptions;
    response: OctokitResponse<ActionsListWorkflowRunsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/workflows/#get-workflow-usage
   */
  "GET /repos/:owner/:repo/actions/workflows/:workflow_id/timing": {
    parameters: ActionsGetWorkflowUsageEndpoint;
    request: ActionsGetWorkflowUsageRequestOptions;
    response: OctokitResponse<ActionsGetWorkflowUsageResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/issues/assignees/#list-assignees
   */
  "GET /repos/:owner/:repo/assignees": {
    parameters: IssuesListAssigneesEndpoint;
    request: IssuesListAssigneesRequestOptions;
    response: OctokitResponse<
      IssuesListAssigneesResponseData | IssuesListAssigneesResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/assignees/#check-if-a-user-can-be-assigned
   */
  "GET /repos/:owner/:repo/assignees/:assignee": {
    parameters: IssuesCheckUserCanBeAssignedEndpoint;
    request: IssuesCheckUserCanBeAssignedRequestOptions;
    response: OctokitResponse<
      never | IssuesCheckUserCanBeAssignedResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#list-branches
   */
  "GET /repos/:owner/:repo/branches": {
    parameters: ReposListBranchesEndpoint;
    request: ReposListBranchesRequestOptions;
    response: OctokitResponse<
      ReposListBranchesResponseData | ReposListBranchesResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#get-a-branch
   */
  "GET /repos/:owner/:repo/branches/:branch": {
    parameters: ReposGetBranchEndpoint;
    request: ReposGetBranchRequestOptions;
    response: OctokitResponse<
      | ReposGetBranchResponseData
      | ReposGetBranchResponse404Data
      | ReposGetBranchResponse415Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#get-branch-protection
   */
  "GET /repos/:owner/:repo/branches/:branch/protection": {
    parameters: ReposGetBranchProtectionEndpoint;
    request: ReposGetBranchProtectionRequestOptions;
    response: OctokitResponse<
      | ReposGetBranchProtectionResponseData
      | ReposGetBranchProtectionResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#get-admin-branch-protection
   */
  "GET /repos/:owner/:repo/branches/:branch/protection/enforce_admins": {
    parameters: ReposGetAdminBranchProtectionEndpoint;
    request: ReposGetAdminBranchProtectionRequestOptions;
    response: OctokitResponse<ReposGetAdminBranchProtectionResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#get-pull-request-review-protection
   */
  "GET /repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews": {
    parameters: ReposGetPullRequestReviewProtectionEndpoint;
    request: ReposGetPullRequestReviewProtectionRequestOptions;
    response: OctokitResponse<ReposGetPullRequestReviewProtectionResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#get-commit-signature-protection
   */
  "GET /repos/:owner/:repo/branches/:branch/protection/required_signatures": {
    parameters: ReposGetCommitSignatureProtectionEndpoint;
    request: ReposGetCommitSignatureProtectionRequestOptions;
    response: OctokitResponse<
      | ReposGetCommitSignatureProtectionResponseData
      | ReposGetCommitSignatureProtectionResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#get-status-checks-protection
   */
  "GET /repos/:owner/:repo/branches/:branch/protection/required_status_checks": {
    parameters: ReposGetStatusChecksProtectionEndpoint;
    request: ReposGetStatusChecksProtectionRequestOptions;
    response: OctokitResponse<
      | ReposGetStatusChecksProtectionResponseData
      | ReposGetStatusChecksProtectionResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#get-all-status-check-contexts
   */
  "GET /repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts": {
    parameters: ReposGetAllStatusCheckContextsEndpoint;
    request: ReposGetAllStatusCheckContextsRequestOptions;
    response: OctokitResponse<
      | ReposGetAllStatusCheckContextsResponseData
      | ReposGetAllStatusCheckContextsResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#get-access-restrictions
   */
  "GET /repos/:owner/:repo/branches/:branch/protection/restrictions": {
    parameters: ReposGetAccessRestrictionsEndpoint;
    request: ReposGetAccessRestrictionsRequestOptions;
    response: OctokitResponse<
      | ReposGetAccessRestrictionsResponseData
      | ReposGetAccessRestrictionsResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#list-apps-with-access-to-the-protected-branch
   */
  "GET /repos/:owner/:repo/branches/:branch/protection/restrictions/apps": {
    parameters: ReposGetAppsWithAccessToProtectedBranchEndpoint;
    request: ReposGetAppsWithAccessToProtectedBranchRequestOptions;
    response: OctokitResponse<
      | ReposGetAppsWithAccessToProtectedBranchResponseData
      | ReposGetAppsWithAccessToProtectedBranchResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#list-teams-with-access-to-the-protected-branch
   */
  "GET /repos/:owner/:repo/branches/:branch/protection/restrictions/teams": {
    parameters: ReposGetTeamsWithAccessToProtectedBranchEndpoint;
    request: ReposGetTeamsWithAccessToProtectedBranchRequestOptions;
    response: OctokitResponse<
      | ReposGetTeamsWithAccessToProtectedBranchResponseData
      | ReposGetTeamsWithAccessToProtectedBranchResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#list-users-with-access-to-the-protected-branch
   */
  "GET /repos/:owner/:repo/branches/:branch/protection/restrictions/users": {
    parameters: ReposGetUsersWithAccessToProtectedBranchEndpoint;
    request: ReposGetUsersWithAccessToProtectedBranchRequestOptions;
    response: OctokitResponse<
      | ReposGetUsersWithAccessToProtectedBranchResponseData
      | ReposGetUsersWithAccessToProtectedBranchResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/checks/runs/#get-a-check-run
   */
  "GET /repos/:owner/:repo/check-runs/:check_run_id": {
    parameters: ChecksGetEndpoint;
    request: ChecksGetRequestOptions;
    response: OctokitResponse<ChecksGetResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/checks/runs/#list-check-run-annotations
   */
  "GET /repos/:owner/:repo/check-runs/:check_run_id/annotations": {
    parameters: ChecksListAnnotationsEndpoint;
    request: ChecksListAnnotationsRequestOptions;
    response: OctokitResponse<ChecksListAnnotationsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/checks/suites/#get-a-check-suite
   */
  "GET /repos/:owner/:repo/check-suites/:check_suite_id": {
    parameters: ChecksGetSuiteEndpoint;
    request: ChecksGetSuiteRequestOptions;
    response: OctokitResponse<ChecksGetSuiteResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/checks/runs/#list-check-runs-in-a-check-suite
   */
  "GET /repos/:owner/:repo/check-suites/:check_suite_id/check-runs": {
    parameters: ChecksListForSuiteEndpoint;
    request: ChecksListForSuiteRequestOptions;
    response: OctokitResponse<ChecksListForSuiteResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/code-scanning/#list-code-scanning-alerts-for-a-repository
   */
  "GET /repos/:owner/:repo/code-scanning/alerts": {
    parameters: CodeScanningListAlertsForRepoEndpoint;
    request: CodeScanningListAlertsForRepoRequestOptions;
    response: OctokitResponse<
      | CodeScanningListAlertsForRepoResponseData
      | never
      | CodeScanningListAlertsForRepoResponse503Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/code-scanning/#get-a-code-scanning-alert
   */
  "GET /repos/:owner/:repo/code-scanning/alerts/:alert_number": {
    parameters: CodeScanningGetAlertEndpoint;
    request: CodeScanningGetAlertRequestOptions;
    response: OctokitResponse<
      | CodeScanningGetAlertResponseData
      | CodeScanningGetAlertResponse404Data
      | CodeScanningGetAlertResponse503Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/code-scanning/#list-recent-analyses
   */
  "GET /repos/:owner/:repo/code-scanning/analyses": {
    parameters: CodeScanningListRecentAnalysesEndpoint;
    request: CodeScanningListRecentAnalysesRequestOptions;
    response: OctokitResponse<CodeScanningListRecentAnalysesResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/collaborators/#list-repository-collaborators
   */
  "GET /repos/:owner/:repo/collaborators": {
    parameters: ReposListCollaboratorsEndpoint;
    request: ReposListCollaboratorsRequestOptions;
    response: OctokitResponse<
      ReposListCollaboratorsResponseData | ReposListCollaboratorsResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/collaborators/#check-if-a-user-is-a-repository-collaborator
   */
  "GET /repos/:owner/:repo/collaborators/:username": {
    parameters: ReposCheckCollaboratorEndpoint;
    request: ReposCheckCollaboratorRequestOptions;
    response: OctokitResponse<never | never>;
  };
  /**
   * @see https://developer.github.com/v3/repos/collaborators/#get-repository-permissions-for-a-user
   */
  "GET /repos/:owner/:repo/collaborators/:username/permission": {
    parameters: ReposGetCollaboratorPermissionLevelEndpoint;
    request: ReposGetCollaboratorPermissionLevelRequestOptions;
    response: OctokitResponse<
      | ReposGetCollaboratorPermissionLevelResponseData
      | ReposGetCollaboratorPermissionLevelResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/comments/#list-commit-comments-for-a-repository
   */
  "GET /repos/:owner/:repo/comments": {
    parameters: ReposListCommitCommentsForRepoEndpoint;
    request: ReposListCommitCommentsForRepoRequestOptions;
    response: OctokitResponse<ReposListCommitCommentsForRepoResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/comments/#get-a-commit-comment
   */
  "GET /repos/:owner/:repo/comments/:comment_id": {
    parameters: ReposGetCommitCommentEndpoint;
    request: ReposGetCommitCommentRequestOptions;
    response: OctokitResponse<
      ReposGetCommitCommentResponseData | ReposGetCommitCommentResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#list-reactions-for-a-commit-comment
   */
  "GET /repos/:owner/:repo/comments/:comment_id/reactions": {
    parameters: ReactionsListForCommitCommentEndpoint;
    request: ReactionsListForCommitCommentRequestOptions;
    response: OctokitResponse<
      | ReactionsListForCommitCommentResponseData
      | ReactionsListForCommitCommentResponse404Data
      | ReactionsListForCommitCommentResponse415Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/commits/#list-commits
   */
  "GET /repos/:owner/:repo/commits": {
    parameters: ReposListCommitsEndpoint;
    request: ReposListCommitsRequestOptions;
    response: OctokitResponse<
      | ReposListCommitsResponseData
      | ReposListCommitsResponse400Data
      | ReposListCommitsResponse400Data
      | ReposListCommitsResponse404Data
      | ReposListCommitsResponse409Data
      | ReposListCommitsResponse500Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/commits/#list-branches-for-head-commit
   */
  "GET /repos/:owner/:repo/commits/:commit_sha/branches-where-head": {
    parameters: ReposListBranchesForHeadCommitEndpoint;
    request: ReposListBranchesForHeadCommitRequestOptions;
    response: OctokitResponse<
      | ReposListBranchesForHeadCommitResponseData
      | ReposListBranchesForHeadCommitResponse415Data
      | ReposListBranchesForHeadCommitResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/comments/#list-commit-comments
   */
  "GET /repos/:owner/:repo/commits/:commit_sha/comments": {
    parameters: ReposListCommentsForCommitEndpoint;
    request: ReposListCommentsForCommitRequestOptions;
    response: OctokitResponse<ReposListCommentsForCommitResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/commits/#list-pull-requests-associated-with-a-commit
   */
  "GET /repos/:owner/:repo/commits/:commit_sha/pulls": {
    parameters: ReposListPullRequestsAssociatedWithCommitEndpoint;
    request: ReposListPullRequestsAssociatedWithCommitRequestOptions;
    response: OctokitResponse<
      | ReposListPullRequestsAssociatedWithCommitResponseData
      | ReposListPullRequestsAssociatedWithCommitResponse415Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/commits/#get-a-commit
   */
  "GET /repos/:owner/:repo/commits/:ref": {
    parameters: ReposGetCommitEndpoint;
    request: ReposGetCommitRequestOptions;
    response: OctokitResponse<
      | ReposGetCommitResponseData
      | ReposGetCommitResponse404Data
      | ReposGetCommitResponse422Data
      | ReposGetCommitResponse500Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/checks/runs/#list-check-runs-for-a-git-reference
   */
  "GET /repos/:owner/:repo/commits/:ref/check-runs": {
    parameters: ChecksListForRefEndpoint;
    request: ChecksListForRefRequestOptions;
    response: OctokitResponse<ChecksListForRefResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/checks/suites/#list-check-suites-for-a-git-reference
   */
  "GET /repos/:owner/:repo/commits/:ref/check-suites": {
    parameters: ChecksListSuitesForRefEndpoint;
    request: ChecksListSuitesForRefRequestOptions;
    response: OctokitResponse<ChecksListSuitesForRefResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-reference
   */
  "GET /repos/:owner/:repo/commits/:ref/status": {
    parameters: ReposGetCombinedStatusForRefEndpoint;
    request: ReposGetCombinedStatusForRefRequestOptions;
    response: OctokitResponse<
      | ReposGetCombinedStatusForRefResponseData
      | ReposGetCombinedStatusForRefResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/statuses/#list-commit-statuses-for-a-reference
   */
  "GET /repos/:owner/:repo/commits/:ref/statuses": {
    parameters: ReposListCommitStatusesForRefEndpoint;
    request: ReposListCommitStatusesForRefRequestOptions;
    response: OctokitResponse<
      ReposListCommitStatusesForRefResponseData | never
    >;
  };
  /**
   * @see https://developer.github.com/v3/codes_of_conduct/#get-the-code-of-conduct-for-a-repository
   */
  "GET /repos/:owner/:repo/community/code_of_conduct": {
    parameters: CodesOfConductGetForRepoEndpoint;
    request: CodesOfConductGetForRepoRequestOptions;
    response: OctokitResponse<CodesOfConductGetForRepoResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/community/#get-community-profile-metrics
   */
  "GET /repos/:owner/:repo/community/profile": {
    parameters: ReposGetCommunityProfileMetricsEndpoint;
    request: ReposGetCommunityProfileMetricsRequestOptions;
    response: OctokitResponse<ReposGetCommunityProfileMetricsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/commits/#compare-two-commits
   */
  "GET /repos/:owner/:repo/compare/:base...:head": {
    parameters: ReposCompareCommitsEndpoint;
    request: ReposCompareCommitsRequestOptions;
    response: OctokitResponse<
      | ReposCompareCommitsResponseData
      | ReposCompareCommitsResponse404Data
      | ReposCompareCommitsResponse500Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/contents/#get-repository-content
   */
  "GET /repos/:owner/:repo/contents/:path": {
    parameters: ReposGetContentEndpoint;
    request: ReposGetContentRequestOptions;
    response: OctokitResponse<
      | ReposGetContentResponseData
      | ReposGetContentResponse200Data
      | never
      | ReposGetContentResponse403Data
      | ReposGetContentResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/#list-repository-contributors
   */
  "GET /repos/:owner/:repo/contributors": {
    parameters: ReposListContributorsEndpoint;
    request: ReposListContributorsRequestOptions;
    response: OctokitResponse<
      | ReposListContributorsResponseData
      | never
      | ReposListContributorsResponse403Data
      | ReposListContributorsResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/deployments/#list-deployments
   */
  "GET /repos/:owner/:repo/deployments": {
    parameters: ReposListDeploymentsEndpoint;
    request: ReposListDeploymentsRequestOptions;
    response: OctokitResponse<ReposListDeploymentsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/deployments/#get-a-deployment
   */
  "GET /repos/:owner/:repo/deployments/:deployment_id": {
    parameters: ReposGetDeploymentEndpoint;
    request: ReposGetDeploymentRequestOptions;
    response: OctokitResponse<
      ReposGetDeploymentResponseData | ReposGetDeploymentResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/deployments/#list-deployment-statuses
   */
  "GET /repos/:owner/:repo/deployments/:deployment_id/statuses": {
    parameters: ReposListDeploymentStatusesEndpoint;
    request: ReposListDeploymentStatusesRequestOptions;
    response: OctokitResponse<
      | ReposListDeploymentStatusesResponseData
      | ReposListDeploymentStatusesResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/deployments/#get-a-deployment-status
   */
  "GET /repos/:owner/:repo/deployments/:deployment_id/statuses/:status_id": {
    parameters: ReposGetDeploymentStatusEndpoint;
    request: ReposGetDeploymentStatusRequestOptions;
    response: OctokitResponse<
      | ReposGetDeploymentStatusResponseData
      | ReposGetDeploymentStatusResponse404Data
      | ReposGetDeploymentStatusResponse415Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/activity/events/#list-repository-events
   */
  "GET /repos/:owner/:repo/events": {
    parameters: ActivityListRepoEventsEndpoint;
    request: ActivityListRepoEventsRequestOptions;
    response: OctokitResponse<ActivityListRepoEventsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/forks/#list-forks
   */
  "GET /repos/:owner/:repo/forks": {
    parameters: ReposListForksEndpoint;
    request: ReposListForksRequestOptions;
    response: OctokitResponse<
      | ReposListForksResponseData
      | ReposListForksResponse400Data
      | ReposListForksResponse400Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/git/blobs/#get-a-blob
   */
  "GET /repos/:owner/:repo/git/blobs/:file_sha": {
    parameters: GitGetBlobEndpoint;
    request: GitGetBlobRequestOptions;
    response: OctokitResponse<
      | GitGetBlobResponseData
      | GitGetBlobResponse403Data
      | GitGetBlobResponse404Data
      | GitGetBlobResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/git/commits/#get-a-commit
   */
  "GET /repos/:owner/:repo/git/commits/:commit_sha": {
    parameters: GitGetCommitEndpoint;
    request: GitGetCommitRequestOptions;
    response: OctokitResponse<
      GitGetCommitResponseData | GitGetCommitResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/git/refs/#list-matching-references
   */
  "GET /repos/:owner/:repo/git/matching-refs/:ref": {
    parameters: GitListMatchingRefsEndpoint;
    request: GitListMatchingRefsRequestOptions;
    response: OctokitResponse<GitListMatchingRefsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/git/refs/#get-a-reference
   */
  "GET /repos/:owner/:repo/git/ref/:ref": {
    parameters: GitGetRefEndpoint;
    request: GitGetRefRequestOptions;
    response: OctokitResponse<GitGetRefResponseData | GitGetRefResponse404Data>;
  };
  /**
   * @see https://developer.github.com/v3/git/tags/#get-a-tag
   */
  "GET /repos/:owner/:repo/git/tags/:tag_sha": {
    parameters: GitGetTagEndpoint;
    request: GitGetTagRequestOptions;
    response: OctokitResponse<GitGetTagResponseData | GitGetTagResponse404Data>;
  };
  /**
   * @see https://developer.github.com/v3/git/trees/#get-a-tree
   */
  "GET /repos/:owner/:repo/git/trees/:tree_sha": {
    parameters: GitGetTreeEndpoint;
    request: GitGetTreeRequestOptions;
    response: OctokitResponse<
      | GitGetTreeResponseData
      | GitGetTreeResponse404Data
      | GitGetTreeResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/hooks/#list-repository-webhooks
   */
  "GET /repos/:owner/:repo/hooks": {
    parameters: ReposListWebhooksEndpoint;
    request: ReposListWebhooksRequestOptions;
    response: OctokitResponse<
      ReposListWebhooksResponseData | ReposListWebhooksResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/hooks/#get-a-repository-webhook
   */
  "GET /repos/:owner/:repo/hooks/:hook_id": {
    parameters: ReposGetWebhookEndpoint;
    request: ReposGetWebhookRequestOptions;
    response: OctokitResponse<
      ReposGetWebhookResponseData | ReposGetWebhookResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/migrations/source_imports/#get-an-import-status
   */
  "GET /repos/:owner/:repo/import": {
    parameters: MigrationsGetImportStatusEndpoint;
    request: MigrationsGetImportStatusRequestOptions;
    response: OctokitResponse<
      | MigrationsGetImportStatusResponseData
      | MigrationsGetImportStatusResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/migrations/source_imports/#get-commit-authors
   */
  "GET /repos/:owner/:repo/import/authors": {
    parameters: MigrationsGetCommitAuthorsEndpoint;
    request: MigrationsGetCommitAuthorsRequestOptions;
    response: OctokitResponse<
      | MigrationsGetCommitAuthorsResponseData
      | MigrationsGetCommitAuthorsResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/migrations/source_imports/#get-large-files
   */
  "GET /repos/:owner/:repo/import/large_files": {
    parameters: MigrationsGetLargeFilesEndpoint;
    request: MigrationsGetLargeFilesRequestOptions;
    response: OctokitResponse<MigrationsGetLargeFilesResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/apps/#get-a-repository-installation-for-the-authenticated-app
   */
  "GET /repos/:owner/:repo/installation": {
    parameters: AppsGetRepoInstallationEndpoint;
    request: AppsGetRepoInstallationRequestOptions;
    response: OctokitResponse<
      | AppsGetRepoInstallationResponseData
      | never
      | AppsGetRepoInstallationResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/interactions/repos/#get-interaction-restrictions-for-a-repository
   */
  "GET /repos/:owner/:repo/interaction-limits": {
    parameters: InteractionsGetRestrictionsForRepoEndpoint;
    request: InteractionsGetRestrictionsForRepoRequestOptions;
    response: OctokitResponse<InteractionsGetRestrictionsForRepoResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/invitations/#list-repository-invitations
   */
  "GET /repos/:owner/:repo/invitations": {
    parameters: ReposListInvitationsEndpoint;
    request: ReposListInvitationsRequestOptions;
    response: OctokitResponse<ReposListInvitationsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/issues/#list-repository-issues
   */
  "GET /repos/:owner/:repo/issues": {
    parameters: IssuesListForRepoEndpoint;
    request: IssuesListForRepoRequestOptions;
    response: OctokitResponse<
      | IssuesListForRepoResponseData
      | never
      | IssuesListForRepoResponse404Data
      | IssuesListForRepoResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/#get-an-issue
   */
  "GET /repos/:owner/:repo/issues/:issue_number": {
    parameters: IssuesGetEndpoint;
    request: IssuesGetRequestOptions;
    response: OctokitResponse<
      | IssuesGetResponseData
      | never
      | never
      | IssuesGetResponse404Data
      | IssuesGetResponse410Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/comments/#list-issue-comments
   */
  "GET /repos/:owner/:repo/issues/:issue_number/comments": {
    parameters: IssuesListCommentsEndpoint;
    request: IssuesListCommentsRequestOptions;
    response: OctokitResponse<
      | IssuesListCommentsResponseData
      | IssuesListCommentsResponse404Data
      | IssuesListCommentsResponse410Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/events/#list-issue-events
   */
  "GET /repos/:owner/:repo/issues/:issue_number/events": {
    parameters: IssuesListEventsEndpoint;
    request: IssuesListEventsRequestOptions;
    response: OctokitResponse<
      IssuesListEventsResponseData | IssuesListEventsResponse410Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/labels/#list-labels-for-an-issue
   */
  "GET /repos/:owner/:repo/issues/:issue_number/labels": {
    parameters: IssuesListLabelsOnIssueEndpoint;
    request: IssuesListLabelsOnIssueRequestOptions;
    response: OctokitResponse<
      | IssuesListLabelsOnIssueResponseData
      | IssuesListLabelsOnIssueResponse410Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#list-reactions-for-an-issue
   */
  "GET /repos/:owner/:repo/issues/:issue_number/reactions": {
    parameters: ReactionsListForIssueEndpoint;
    request: ReactionsListForIssueRequestOptions;
    response: OctokitResponse<
      | ReactionsListForIssueResponseData
      | ReactionsListForIssueResponse404Data
      | ReactionsListForIssueResponse410Data
      | ReactionsListForIssueResponse415Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/timeline/#list-timeline-events-for-an-issue
   */
  "GET /repos/:owner/:repo/issues/:issue_number/timeline": {
    parameters: IssuesListEventsForTimelineEndpoint;
    request: IssuesListEventsForTimelineRequestOptions;
    response: OctokitResponse<
      | IssuesListEventsForTimelineResponseData
      | IssuesListEventsForTimelineResponse404Data
      | IssuesListEventsForTimelineResponse410Data
      | IssuesListEventsForTimelineResponse415Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/comments/#list-issue-comments-for-a-repository
   */
  "GET /repos/:owner/:repo/issues/comments": {
    parameters: IssuesListCommentsForRepoEndpoint;
    request: IssuesListCommentsForRepoRequestOptions;
    response: OctokitResponse<
      | IssuesListCommentsForRepoResponseData
      | IssuesListCommentsForRepoResponse404Data
      | IssuesListCommentsForRepoResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/comments/#get-an-issue-comment
   */
  "GET /repos/:owner/:repo/issues/comments/:comment_id": {
    parameters: IssuesGetCommentEndpoint;
    request: IssuesGetCommentRequestOptions;
    response: OctokitResponse<
      IssuesGetCommentResponseData | IssuesGetCommentResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#list-reactions-for-an-issue-comment
   */
  "GET /repos/:owner/:repo/issues/comments/:comment_id/reactions": {
    parameters: ReactionsListForIssueCommentEndpoint;
    request: ReactionsListForIssueCommentRequestOptions;
    response: OctokitResponse<
      | ReactionsListForIssueCommentResponseData
      | ReactionsListForIssueCommentResponse404Data
      | ReactionsListForIssueCommentResponse415Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/events/#list-issue-events-for-a-repository
   */
  "GET /repos/:owner/:repo/issues/events": {
    parameters: IssuesListEventsForRepoEndpoint;
    request: IssuesListEventsForRepoRequestOptions;
    response: OctokitResponse<
      | IssuesListEventsForRepoResponseData
      | IssuesListEventsForRepoResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/events/#get-an-issue-event
   */
  "GET /repos/:owner/:repo/issues/events/:event_id": {
    parameters: IssuesGetEventEndpoint;
    request: IssuesGetEventRequestOptions;
    response: OctokitResponse<
      | IssuesGetEventResponseData
      | IssuesGetEventResponse403Data
      | IssuesGetEventResponse404Data
      | IssuesGetEventResponse410Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/keys/#list-deploy-keys
   */
  "GET /repos/:owner/:repo/keys": {
    parameters: ReposListDeployKeysEndpoint;
    request: ReposListDeployKeysRequestOptions;
    response: OctokitResponse<ReposListDeployKeysResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/keys/#get-a-deploy-key
   */
  "GET /repos/:owner/:repo/keys/:key_id": {
    parameters: ReposGetDeployKeyEndpoint;
    request: ReposGetDeployKeyRequestOptions;
    response: OctokitResponse<
      ReposGetDeployKeyResponseData | ReposGetDeployKeyResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/labels/#list-labels-for-a-repository
   */
  "GET /repos/:owner/:repo/labels": {
    parameters: IssuesListLabelsForRepoEndpoint;
    request: IssuesListLabelsForRepoRequestOptions;
    response: OctokitResponse<
      | IssuesListLabelsForRepoResponseData
      | IssuesListLabelsForRepoResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/labels/#get-a-label
   */
  "GET /repos/:owner/:repo/labels/:name": {
    parameters: IssuesGetLabelEndpoint;
    request: IssuesGetLabelRequestOptions;
    response: OctokitResponse<
      IssuesGetLabelResponseData | IssuesGetLabelResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/#list-repository-languages
   */
  "GET /repos/:owner/:repo/languages": {
    parameters: ReposListLanguagesEndpoint;
    request: ReposListLanguagesRequestOptions;
    response: OctokitResponse<ReposListLanguagesResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/licenses/#get-the-license-for-a-repository
   */
  "GET /repos/:owner/:repo/license": {
    parameters: LicensesGetForRepoEndpoint;
    request: LicensesGetForRepoRequestOptions;
    response: OctokitResponse<LicensesGetForRepoResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/issues/milestones/#list-milestones
   */
  "GET /repos/:owner/:repo/milestones": {
    parameters: IssuesListMilestonesEndpoint;
    request: IssuesListMilestonesRequestOptions;
    response: OctokitResponse<
      IssuesListMilestonesResponseData | IssuesListMilestonesResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/milestones/#get-a-milestone
   */
  "GET /repos/:owner/:repo/milestones/:milestone_number": {
    parameters: IssuesGetMilestoneEndpoint;
    request: IssuesGetMilestoneRequestOptions;
    response: OctokitResponse<
      IssuesGetMilestoneResponseData | IssuesGetMilestoneResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/labels/#list-labels-for-issues-in-a-milestone
   */
  "GET /repos/:owner/:repo/milestones/:milestone_number/labels": {
    parameters: IssuesListLabelsForMilestoneEndpoint;
    request: IssuesListLabelsForMilestoneRequestOptions;
    response: OctokitResponse<IssuesListLabelsForMilestoneResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/activity/notifications/#list-repository-notifications-for-the-authenticated-user
   */
  "GET /repos/:owner/:repo/notifications": {
    parameters: ActivityListRepoNotificationsForAuthenticatedUserEndpoint;
    request: ActivityListRepoNotificationsForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      ActivityListRepoNotificationsForAuthenticatedUserResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/pages/#get-a-github-pages-site
   */
  "GET /repos/:owner/:repo/pages": {
    parameters: ReposGetPagesEndpoint;
    request: ReposGetPagesRequestOptions;
    response: OctokitResponse<
      ReposGetPagesResponseData | ReposGetPagesResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/pages/#list-github-pages-builds
   */
  "GET /repos/:owner/:repo/pages/builds": {
    parameters: ReposListPagesBuildsEndpoint;
    request: ReposListPagesBuildsRequestOptions;
    response: OctokitResponse<ReposListPagesBuildsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/pages/#get-github-pages-build
   */
  "GET /repos/:owner/:repo/pages/builds/:build_id": {
    parameters: ReposGetPagesBuildEndpoint;
    request: ReposGetPagesBuildRequestOptions;
    response: OctokitResponse<ReposGetPagesBuildResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/pages/#get-latest-pages-build
   */
  "GET /repos/:owner/:repo/pages/builds/latest": {
    parameters: ReposGetLatestPagesBuildEndpoint;
    request: ReposGetLatestPagesBuildRequestOptions;
    response: OctokitResponse<ReposGetLatestPagesBuildResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/projects/#list-repository-projects
   */
  "GET /repos/:owner/:repo/projects": {
    parameters: ProjectsListForRepoEndpoint;
    request: ProjectsListForRepoRequestOptions;
    response: OctokitResponse<
      | ProjectsListForRepoResponseData
      | ProjectsListForRepoResponse401Data
      | ProjectsListForRepoResponse403Data
      | ProjectsListForRepoResponse404Data
      | ProjectsListForRepoResponse410Data
      | ProjectsListForRepoResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/pulls/#list-pull-requests
   */
  "GET /repos/:owner/:repo/pulls": {
    parameters: PullsListEndpoint;
    request: PullsListRequestOptions;
    response: OctokitResponse<
      PullsListResponseData | never | PullsListResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/pulls/#get-a-pull-request
   */
  "GET /repos/:owner/:repo/pulls/:pull_number": {
    parameters: PullsGetEndpoint;
    request: PullsGetRequestOptions;
    response: OctokitResponse<
      | PullsGetResponseData
      | never
      | PullsGetResponse404Data
      | PullsGetResponse500Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/pulls/comments/#list-review-comments-on-a-pull-request
   */
  "GET /repos/:owner/:repo/pulls/:pull_number/comments": {
    parameters: PullsListReviewCommentsEndpoint;
    request: PullsListReviewCommentsRequestOptions;
    response: OctokitResponse<PullsListReviewCommentsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/pulls/#list-commits-on-a-pull-request
   */
  "GET /repos/:owner/:repo/pulls/:pull_number/commits": {
    parameters: PullsListCommitsEndpoint;
    request: PullsListCommitsRequestOptions;
    response: OctokitResponse<PullsListCommitsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/pulls/#list-pull-requests-files
   */
  "GET /repos/:owner/:repo/pulls/:pull_number/files": {
    parameters: PullsListFilesEndpoint;
    request: PullsListFilesRequestOptions;
    response: OctokitResponse<
      | PullsListFilesResponseData
      | PullsListFilesResponse422Data
      | PullsListFilesResponse500Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/pulls/#check-if-a-pull-request-has-been-merged
   */
  "GET /repos/:owner/:repo/pulls/:pull_number/merge": {
    parameters: PullsCheckIfMergedEndpoint;
    request: PullsCheckIfMergedRequestOptions;
    response: OctokitResponse<never | never>;
  };
  /**
   * @see https://developer.github.com/v3/pulls/review_requests/#list-requested-reviewers-for-a-pull-request
   */
  "GET /repos/:owner/:repo/pulls/:pull_number/requested_reviewers": {
    parameters: PullsListRequestedReviewersEndpoint;
    request: PullsListRequestedReviewersRequestOptions;
    response: OctokitResponse<PullsListRequestedReviewersResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/pulls/reviews/#list-reviews-for-a-pull-request
   */
  "GET /repos/:owner/:repo/pulls/:pull_number/reviews": {
    parameters: PullsListReviewsEndpoint;
    request: PullsListReviewsRequestOptions;
    response: OctokitResponse<PullsListReviewsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/pulls/reviews/#get-a-review-for-a-pull-request
   */
  "GET /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id": {
    parameters: PullsGetReviewEndpoint;
    request: PullsGetReviewRequestOptions;
    response: OctokitResponse<
      PullsGetReviewResponseData | PullsGetReviewResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/pulls/reviews/#list-comments-for-a-pull-request-review
   */
  "GET /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/comments": {
    parameters: PullsListCommentsForReviewEndpoint;
    request: PullsListCommentsForReviewRequestOptions;
    response: OctokitResponse<
      | PullsListCommentsForReviewResponseData
      | PullsListCommentsForReviewResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/pulls/comments/#list-review-comments-in-a-repository
   */
  "GET /repos/:owner/:repo/pulls/comments": {
    parameters: PullsListReviewCommentsForRepoEndpoint;
    request: PullsListReviewCommentsForRepoRequestOptions;
    response: OctokitResponse<PullsListReviewCommentsForRepoResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/pulls/comments/#get-a-review-comment-for-a-pull-request
   */
  "GET /repos/:owner/:repo/pulls/comments/:comment_id": {
    parameters: PullsGetReviewCommentEndpoint;
    request: PullsGetReviewCommentRequestOptions;
    response: OctokitResponse<
      PullsGetReviewCommentResponseData | PullsGetReviewCommentResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#list-reactions-for-a-pull-request-review-comment
   */
  "GET /repos/:owner/:repo/pulls/comments/:comment_id/reactions": {
    parameters: ReactionsListForPullRequestReviewCommentEndpoint;
    request: ReactionsListForPullRequestReviewCommentRequestOptions;
    response: OctokitResponse<
      | ReactionsListForPullRequestReviewCommentResponseData
      | ReactionsListForPullRequestReviewCommentResponse404Data
      | ReactionsListForPullRequestReviewCommentResponse415Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/contents/#get-a-repository-readme
   */
  "GET /repos/:owner/:repo/readme": {
    parameters: ReposGetReadmeEndpoint;
    request: ReposGetReadmeRequestOptions;
    response: OctokitResponse<
      | ReposGetReadmeResponseData
      | ReposGetReadmeResponse404Data
      | ReposGetReadmeResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/releases/#list-releases
   */
  "GET /repos/:owner/:repo/releases": {
    parameters: ReposListReleasesEndpoint;
    request: ReposListReleasesRequestOptions;
    response: OctokitResponse<
      ReposListReleasesResponseData | ReposListReleasesResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/releases/#get-a-release
   */
  "GET /repos/:owner/:repo/releases/:release_id": {
    parameters: ReposGetReleaseEndpoint;
    request: ReposGetReleaseRequestOptions;
    response: OctokitResponse<
      ReposGetReleaseResponseData | ReposGetReleaseResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/releases/#list-release-assets
   */
  "GET /repos/:owner/:repo/releases/:release_id/assets": {
    parameters: ReposListReleaseAssetsEndpoint;
    request: ReposListReleaseAssetsRequestOptions;
    response: OctokitResponse<ReposListReleaseAssetsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/releases/#get-a-release-asset
   */
  "GET /repos/:owner/:repo/releases/assets/:asset_id": {
    parameters: ReposGetReleaseAssetEndpoint;
    request: ReposGetReleaseAssetRequestOptions;
    response: OctokitResponse<
      | ReposGetReleaseAssetResponseData
      | never
      | ReposGetReleaseAssetResponse404Data
      | ReposGetReleaseAssetResponse415Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/releases/#get-the-latest-release
   */
  "GET /repos/:owner/:repo/releases/latest": {
    parameters: ReposGetLatestReleaseEndpoint;
    request: ReposGetLatestReleaseRequestOptions;
    response: OctokitResponse<ReposGetLatestReleaseResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/releases/#get-a-release-by-tag-name
   */
  "GET /repos/:owner/:repo/releases/tags/:tag": {
    parameters: ReposGetReleaseByTagEndpoint;
    request: ReposGetReleaseByTagRequestOptions;
    response: OctokitResponse<
      ReposGetReleaseByTagResponseData | ReposGetReleaseByTagResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/activity/starring/#list-stargazers
   */
  "GET /repos/:owner/:repo/stargazers": {
    parameters: ActivityListStargazersForRepoEndpoint;
    request: ActivityListStargazersForRepoRequestOptions;
    response: OctokitResponse<
      | ActivityListStargazersForRepoResponseData
      | ActivityListStargazersForRepoResponse200Data
      | ActivityListStargazersForRepoResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/statistics/#get-the-weekly-commit-activity
   */
  "GET /repos/:owner/:repo/stats/code_frequency": {
    parameters: ReposGetCodeFrequencyStatsEndpoint;
    request: ReposGetCodeFrequencyStatsRequestOptions;
    response: OctokitResponse<ReposGetCodeFrequencyStatsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/statistics/#get-the-last-year-of-commit-activity
   */
  "GET /repos/:owner/:repo/stats/commit_activity": {
    parameters: ReposGetCommitActivityStatsEndpoint;
    request: ReposGetCommitActivityStatsRequestOptions;
    response: OctokitResponse<ReposGetCommitActivityStatsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/statistics/#get-all-contributor-commit-activity
   */
  "GET /repos/:owner/:repo/stats/contributors": {
    parameters: ReposGetContributorsStatsEndpoint;
    request: ReposGetContributorsStatsRequestOptions;
    response: OctokitResponse<ReposGetContributorsStatsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/statistics/#get-the-weekly-commit-count
   */
  "GET /repos/:owner/:repo/stats/participation": {
    parameters: ReposGetParticipationStatsEndpoint;
    request: ReposGetParticipationStatsRequestOptions;
    response: OctokitResponse<
      | ReposGetParticipationStatsResponseData
      | ReposGetParticipationStatsResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/statistics/#get-the-hourly-commit-count-for-each-day
   */
  "GET /repos/:owner/:repo/stats/punch_card": {
    parameters: ReposGetPunchCardStatsEndpoint;
    request: ReposGetPunchCardStatsRequestOptions;
    response: OctokitResponse<ReposGetPunchCardStatsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/activity/watching/#list-watchers
   */
  "GET /repos/:owner/:repo/subscribers": {
    parameters: ActivityListWatchersForRepoEndpoint;
    request: ActivityListWatchersForRepoRequestOptions;
    response: OctokitResponse<ActivityListWatchersForRepoResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/activity/watching/#get-a-repository-subscription
   */
  "GET /repos/:owner/:repo/subscription": {
    parameters: ActivityGetRepoSubscriptionEndpoint;
    request: ActivityGetRepoSubscriptionRequestOptions;
    response: OctokitResponse<
      | ActivityGetRepoSubscriptionResponseData
      | ActivityGetRepoSubscriptionResponse403Data
      | never
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/#list-repository-tags
   */
  "GET /repos/:owner/:repo/tags": {
    parameters: ReposListTagsEndpoint;
    request: ReposListTagsRequestOptions;
    response: OctokitResponse<ReposListTagsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/contents/#download-a-repository-archive
   */
  "GET /repos/:owner/:repo/tarball/:ref": {
    parameters: ReposDownloadTarballArchiveEndpoint;
    request: ReposDownloadTarballArchiveRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/repos/#list-repository-teams
   */
  "GET /repos/:owner/:repo/teams": {
    parameters: ReposListTeamsEndpoint;
    request: ReposListTeamsRequestOptions;
    response: OctokitResponse<ReposListTeamsResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/#get-all-repository-topics
   */
  "GET /repos/:owner/:repo/topics": {
    parameters: ReposGetAllTopicsEndpoint;
    request: ReposGetAllTopicsRequestOptions;
    response: OctokitResponse<
      | ReposGetAllTopicsResponseData
      | ReposGetAllTopicsResponse404Data
      | ReposGetAllTopicsResponse415Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/traffic/#get-repository-clones
   */
  "GET /repos/:owner/:repo/traffic/clones": {
    parameters: ReposGetClonesEndpoint;
    request: ReposGetClonesRequestOptions;
    response: OctokitResponse<
      ReposGetClonesResponseData | ReposGetClonesResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/traffic/#get-top-referral-paths
   */
  "GET /repos/:owner/:repo/traffic/popular/paths": {
    parameters: ReposGetTopPathsEndpoint;
    request: ReposGetTopPathsRequestOptions;
    response: OctokitResponse<
      ReposGetTopPathsResponseData | ReposGetTopPathsResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/traffic/#get-top-referral-sources
   */
  "GET /repos/:owner/:repo/traffic/popular/referrers": {
    parameters: ReposGetTopReferrersEndpoint;
    request: ReposGetTopReferrersRequestOptions;
    response: OctokitResponse<
      ReposGetTopReferrersResponseData | ReposGetTopReferrersResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/traffic/#get-page-views
   */
  "GET /repos/:owner/:repo/traffic/views": {
    parameters: ReposGetViewsEndpoint;
    request: ReposGetViewsRequestOptions;
    response: OctokitResponse<
      ReposGetViewsResponseData | ReposGetViewsResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/#check-if-vulnerability-alerts-are-enabled-for-a-repository
   */
  "GET /repos/:owner/:repo/vulnerability-alerts": {
    parameters: ReposCheckVulnerabilityAlertsEndpoint;
    request: ReposCheckVulnerabilityAlertsRequestOptions;
    response: OctokitResponse<never | never>;
  };
  /**
   * @see https://developer.github.com/v3/repos/contents/#download-a-repository-archive
   */
  "GET /repos/:owner/:repo/zipball/:ref": {
    parameters: ReposDownloadZipballArchiveEndpoint;
    request: ReposDownloadZipballArchiveRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/repos/#list-public-repositories
   */
  "GET /repositories": {
    parameters: ReposListPublicEndpoint;
    request: ReposListPublicRequestOptions;
    response: OctokitResponse<
      ReposListPublicResponseData | never | ReposListPublicResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/scim/#list-provisioned-scim groups-for-an-enterprise
   */
  "GET /scim/v2/enterprises/:enterprise/Groups": {
    parameters: EnterpriseAdminListProvisionedGroupsEnterpriseEndpoint;
    request: EnterpriseAdminListProvisionedGroupsEnterpriseRequestOptions;
    response: OctokitResponse<
      EnterpriseAdminListProvisionedGroupsEnterpriseResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/scim/#get-scim-provisioning-information-for-an-enterprise group
   */
  "GET /scim/v2/enterprises/:enterprise/Groups/:scim_group_id": {
    parameters: EnterpriseAdminGetProvisioningInformationForEnterpriseGroupEndpoint;
    request: EnterpriseAdminGetProvisioningInformationForEnterpriseGroupRequestOptions;
    response: OctokitResponse<
      EnterpriseAdminGetProvisioningInformationForEnterpriseGroupResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/scim/#list-scim-provisioned-identities-for-an-enterprise
   */
  "GET /scim/v2/enterprises/:enterprise/Users": {
    parameters: EnterpriseAdminListProvisionedIdentitiesEnterpriseEndpoint;
    request: EnterpriseAdminListProvisionedIdentitiesEnterpriseRequestOptions;
    response: OctokitResponse<
      EnterpriseAdminListProvisionedIdentitiesEnterpriseResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/scim/#get-scim-provisioning-information-for-an-enterprise-user
   */
  "GET /scim/v2/enterprises/:enterprise/Users/:scim_user_id": {
    parameters: EnterpriseAdminGetProvisioningInformationForEnterpriseUserEndpoint;
    request: EnterpriseAdminGetProvisioningInformationForEnterpriseUserRequestOptions;
    response: OctokitResponse<
      EnterpriseAdminGetProvisioningInformationForEnterpriseUserResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/scim/#list-scim-provisioned-identities
   */
  "GET /scim/v2/organizations/:org/Users": {
    parameters: ScimListProvisionedIdentitiesEndpoint;
    request: ScimListProvisionedIdentitiesRequestOptions;
    response: OctokitResponse<
      | ScimListProvisionedIdentitiesResponseData
      | never
      | ScimListProvisionedIdentitiesResponse400Data
      | ScimListProvisionedIdentitiesResponse400Data
      | ScimListProvisionedIdentitiesResponse403Data
      | ScimListProvisionedIdentitiesResponse403Data
      | ScimListProvisionedIdentitiesResponse404Data
      | ScimListProvisionedIdentitiesResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/scim/#get-scim-provisioning-information-for-a-user
   */
  "GET /scim/v2/organizations/:org/Users/:scim_user_id": {
    parameters: ScimGetProvisioningInformationForUserEndpoint;
    request: ScimGetProvisioningInformationForUserRequestOptions;
    response: OctokitResponse<
      | ScimGetProvisioningInformationForUserResponseData
      | never
      | ScimGetProvisioningInformationForUserResponse403Data
      | ScimGetProvisioningInformationForUserResponse403Data
      | ScimGetProvisioningInformationForUserResponse404Data
      | ScimGetProvisioningInformationForUserResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/search/#search-code
   */
  "GET /search/code": {
    parameters: SearchCodeEndpoint;
    request: SearchCodeRequestOptions;
    response: OctokitResponse<
      | SearchCodeResponseData
      | never
      | SearchCodeResponse403Data
      | SearchCodeResponse422Data
      | SearchCodeResponse503Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/search/#search-commits
   */
  "GET /search/commits": {
    parameters: SearchCommitsEndpoint;
    request: SearchCommitsRequestOptions;
    response: OctokitResponse<
      SearchCommitsResponseData | never | SearchCommitsResponse415Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/search/#search-issues-and-pull-requests
   */
  "GET /search/issues": {
    parameters: SearchIssuesAndPullRequestsEndpoint;
    request: SearchIssuesAndPullRequestsRequestOptions;
    response: OctokitResponse<
      | SearchIssuesAndPullRequestsResponseData
      | never
      | SearchIssuesAndPullRequestsResponse403Data
      | SearchIssuesAndPullRequestsResponse422Data
      | SearchIssuesAndPullRequestsResponse503Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/search/#search-labels
   */
  "GET /search/labels": {
    parameters: SearchLabelsEndpoint;
    request: SearchLabelsRequestOptions;
    response: OctokitResponse<
      | SearchLabelsResponseData
      | never
      | SearchLabelsResponse403Data
      | SearchLabelsResponse404Data
      | SearchLabelsResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/search/#search-repositories
   */
  "GET /search/repositories": {
    parameters: SearchReposEndpoint;
    request: SearchReposRequestOptions;
    response: OctokitResponse<
      | SearchReposResponseData
      | never
      | SearchReposResponse422Data
      | SearchReposResponse503Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/search/#search-topics
   */
  "GET /search/topics": {
    parameters: SearchTopicsEndpoint;
    request: SearchTopicsRequestOptions;
    response: OctokitResponse<
      SearchTopicsResponseData | never | SearchTopicsResponse415Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/search/#search-users
   */
  "GET /search/users": {
    parameters: SearchUsersEndpoint;
    request: SearchUsersRequestOptions;
    response: OctokitResponse<
      | SearchUsersResponseData
      | never
      | SearchUsersResponse422Data
      | SearchUsersResponse503Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/#get-a-team-legacy
   */
  "GET /teams/:team_id": {
    parameters: TeamsGetLegacyEndpoint;
    request: TeamsGetLegacyRequestOptions;
    response: OctokitResponse<
      TeamsGetLegacyResponseData | TeamsGetLegacyResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/discussions/#list-discussions-legacy
   */
  "GET /teams/:team_id/discussions": {
    parameters: TeamsListDiscussionsLegacyEndpoint;
    request: TeamsListDiscussionsLegacyRequestOptions;
    response: OctokitResponse<TeamsListDiscussionsLegacyResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/discussions/#get-a-discussion-legacy
   */
  "GET /teams/:team_id/discussions/:discussion_number": {
    parameters: TeamsGetDiscussionLegacyEndpoint;
    request: TeamsGetDiscussionLegacyRequestOptions;
    response: OctokitResponse<TeamsGetDiscussionLegacyResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/discussion_comments/#list-discussion-comments-legacy
   */
  "GET /teams/:team_id/discussions/:discussion_number/comments": {
    parameters: TeamsListDiscussionCommentsLegacyEndpoint;
    request: TeamsListDiscussionCommentsLegacyRequestOptions;
    response: OctokitResponse<TeamsListDiscussionCommentsLegacyResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/discussion_comments/#get-a-discussion-comment-legacy
   */
  "GET /teams/:team_id/discussions/:discussion_number/comments/:comment_number": {
    parameters: TeamsGetDiscussionCommentLegacyEndpoint;
    request: TeamsGetDiscussionCommentLegacyRequestOptions;
    response: OctokitResponse<TeamsGetDiscussionCommentLegacyResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment-legacy
   */
  "GET /teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions": {
    parameters: ReactionsListForTeamDiscussionCommentLegacyEndpoint;
    request: ReactionsListForTeamDiscussionCommentLegacyRequestOptions;
    response: OctokitResponse<
      ReactionsListForTeamDiscussionCommentLegacyResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-legacy
   */
  "GET /teams/:team_id/discussions/:discussion_number/reactions": {
    parameters: ReactionsListForTeamDiscussionLegacyEndpoint;
    request: ReactionsListForTeamDiscussionLegacyRequestOptions;
    response: OctokitResponse<ReactionsListForTeamDiscussionLegacyResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/members/#list-pending-team-invitations-legacy
   */
  "GET /teams/:team_id/invitations": {
    parameters: TeamsListPendingInvitationsLegacyEndpoint;
    request: TeamsListPendingInvitationsLegacyRequestOptions;
    response: OctokitResponse<TeamsListPendingInvitationsLegacyResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/members/#list-team-members-legacy
   */
  "GET /teams/:team_id/members": {
    parameters: TeamsListMembersLegacyEndpoint;
    request: TeamsListMembersLegacyRequestOptions;
    response: OctokitResponse<
      TeamsListMembersLegacyResponseData | TeamsListMembersLegacyResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/members/#get-team-member-legacy
   */
  "GET /teams/:team_id/members/:username": {
    parameters: TeamsGetMemberLegacyEndpoint;
    request: TeamsGetMemberLegacyRequestOptions;
    response: OctokitResponse<never | never>;
  };
  /**
   * @see https://developer.github.com/v3/teams/members/#get-team-membership-for-a-user-legacy
   */
  "GET /teams/:team_id/memberships/:username": {
    parameters: TeamsGetMembershipForUserLegacyEndpoint;
    request: TeamsGetMembershipForUserLegacyRequestOptions;
    response: OctokitResponse<
      | TeamsGetMembershipForUserLegacyResponseData
      | TeamsGetMembershipForUserLegacyResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/#list-team-projects-legacy
   */
  "GET /teams/:team_id/projects": {
    parameters: TeamsListProjectsLegacyEndpoint;
    request: TeamsListProjectsLegacyRequestOptions;
    response: OctokitResponse<
      | TeamsListProjectsLegacyResponseData
      | TeamsListProjectsLegacyResponse404Data
      | TeamsListProjectsLegacyResponse415Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/#check-team-permissions-for-a-project-legacy
   */
  "GET /teams/:team_id/projects/:project_id": {
    parameters: TeamsCheckPermissionsForProjectLegacyEndpoint;
    request: TeamsCheckPermissionsForProjectLegacyRequestOptions;
    response: OctokitResponse<
      | TeamsCheckPermissionsForProjectLegacyResponseData
      | never
      | TeamsCheckPermissionsForProjectLegacyResponse415Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/#list-team-repositories-legacy
   */
  "GET /teams/:team_id/repos": {
    parameters: TeamsListReposLegacyEndpoint;
    request: TeamsListReposLegacyRequestOptions;
    response: OctokitResponse<
      TeamsListReposLegacyResponseData | TeamsListReposLegacyResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/#check-team-permissions-for-a-repository-legacy
   */
  "GET /teams/:team_id/repos/:owner/:repo": {
    parameters: TeamsCheckPermissionsForRepoLegacyEndpoint;
    request: TeamsCheckPermissionsForRepoLegacyRequestOptions;
    response: OctokitResponse<
      TeamsCheckPermissionsForRepoLegacyResponseData | never | never
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/team_sync/#list-idp-groups-for-a-team-legacy
   */
  "GET /teams/:team_id/team-sync/group-mappings": {
    parameters: TeamsListIdpGroupsForLegacyEndpoint;
    request: TeamsListIdpGroupsForLegacyRequestOptions;
    response: OctokitResponse<
      | TeamsListIdpGroupsForLegacyResponseData
      | TeamsListIdpGroupsForLegacyResponse403Data
      | TeamsListIdpGroupsForLegacyResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/#list-child-teams-legacy
   */
  "GET /teams/:team_id/teams": {
    parameters: TeamsListChildLegacyEndpoint;
    request: TeamsListChildLegacyRequestOptions;
    response: OctokitResponse<
      | TeamsListChildLegacyResponseData
      | TeamsListChildLegacyResponse403Data
      | TeamsListChildLegacyResponse404Data
      | TeamsListChildLegacyResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/#get-the-authenticated-user
   */
  "GET /user": {
    parameters: UsersGetAuthenticatedEndpoint;
    request: UsersGetAuthenticatedRequestOptions;
    response: OctokitResponse<
      | UsersGetAuthenticatedResponseData
      | never
      | UsersGetAuthenticatedResponse401Data
      | UsersGetAuthenticatedResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/blocking/#list-users-blocked-by-the-authenticated-user
   */
  "GET /user/blocks": {
    parameters: UsersListBlockedByAuthenticatedEndpoint;
    request: UsersListBlockedByAuthenticatedRequestOptions;
    response: OctokitResponse<
      | UsersListBlockedByAuthenticatedResponseData
      | never
      | UsersListBlockedByAuthenticatedResponse401Data
      | UsersListBlockedByAuthenticatedResponse403Data
      | UsersListBlockedByAuthenticatedResponse404Data
      | UsersListBlockedByAuthenticatedResponse415Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/blocking/#check-if-a-user-is-blocked-by-the-authenticated-user
   */
  "GET /user/blocks/:username": {
    parameters: UsersCheckBlockedEndpoint;
    request: UsersCheckBlockedRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | UsersCheckBlockedResponse401Data
      | UsersCheckBlockedResponse403Data
      | UsersCheckBlockedResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/emails/#list-email-addresses-for-the-authenticated-user
   */
  "GET /user/emails": {
    parameters: UsersListEmailsForAuthenticatedEndpoint;
    request: UsersListEmailsForAuthenticatedRequestOptions;
    response: OctokitResponse<
      | UsersListEmailsForAuthenticatedResponseData
      | never
      | UsersListEmailsForAuthenticatedResponse401Data
      | UsersListEmailsForAuthenticatedResponse403Data
      | UsersListEmailsForAuthenticatedResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/followers/#list-followers-of-the-authenticated-user
   */
  "GET /user/followers": {
    parameters: UsersListFollowersForAuthenticatedUserEndpoint;
    request: UsersListFollowersForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | UsersListFollowersForAuthenticatedUserResponseData
      | never
      | UsersListFollowersForAuthenticatedUserResponse401Data
      | UsersListFollowersForAuthenticatedUserResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/followers/#list-the-people-the-authenticated-user-follows
   */
  "GET /user/following": {
    parameters: UsersListFollowedByAuthenticatedEndpoint;
    request: UsersListFollowedByAuthenticatedRequestOptions;
    response: OctokitResponse<
      | UsersListFollowedByAuthenticatedResponseData
      | never
      | UsersListFollowedByAuthenticatedResponse401Data
      | UsersListFollowedByAuthenticatedResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/followers/#check-if-a-person-is-followed-by-the-authenticated-user
   */
  "GET /user/following/:username": {
    parameters: UsersCheckPersonIsFollowedByAuthenticatedEndpoint;
    request: UsersCheckPersonIsFollowedByAuthenticatedRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | UsersCheckPersonIsFollowedByAuthenticatedResponse401Data
      | UsersCheckPersonIsFollowedByAuthenticatedResponse403Data
      | UsersCheckPersonIsFollowedByAuthenticatedResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/gpg_keys/#list-gpg-keys-for-the-authenticated-user
   */
  "GET /user/gpg_keys": {
    parameters: UsersListGpgKeysForAuthenticatedEndpoint;
    request: UsersListGpgKeysForAuthenticatedRequestOptions;
    response: OctokitResponse<
      | UsersListGpgKeysForAuthenticatedResponseData
      | never
      | UsersListGpgKeysForAuthenticatedResponse401Data
      | UsersListGpgKeysForAuthenticatedResponse403Data
      | UsersListGpgKeysForAuthenticatedResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/gpg_keys/#get-a-gpg-key-for-the-authenticated-user
   */
  "GET /user/gpg_keys/:gpg_key_id": {
    parameters: UsersGetGpgKeyForAuthenticatedEndpoint;
    request: UsersGetGpgKeyForAuthenticatedRequestOptions;
    response: OctokitResponse<
      | UsersGetGpgKeyForAuthenticatedResponseData
      | never
      | UsersGetGpgKeyForAuthenticatedResponse401Data
      | UsersGetGpgKeyForAuthenticatedResponse403Data
      | UsersGetGpgKeyForAuthenticatedResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/installations/#list-app-installations-accessible-to-the-user-access-token
   */
  "GET /user/installations": {
    parameters: AppsListInstallationsForAuthenticatedUserEndpoint;
    request: AppsListInstallationsForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | AppsListInstallationsForAuthenticatedUserResponseData
      | never
      | AppsListInstallationsForAuthenticatedUserResponse401Data
      | AppsListInstallationsForAuthenticatedUserResponse403Data
      | AppsListInstallationsForAuthenticatedUserResponse415Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/installations/#list-repositories-accessible-to-the-user-access-token
   */
  "GET /user/installations/:installation_id/repositories": {
    parameters: AppsListInstallationReposForAuthenticatedUserEndpoint;
    request: AppsListInstallationReposForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | AppsListInstallationReposForAuthenticatedUserResponseData
      | never
      | AppsListInstallationReposForAuthenticatedUserResponse403Data
      | AppsListInstallationReposForAuthenticatedUserResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/#list-user-account-issues-assigned-to-the-authenticated-user
   */
  "GET /user/issues": {
    parameters: IssuesListForAuthenticatedUserEndpoint;
    request: IssuesListForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | IssuesListForAuthenticatedUserResponseData
      | never
      | IssuesListForAuthenticatedUserResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/keys/#list-public-ssh-keys-for-the-authenticated-user
   */
  "GET /user/keys": {
    parameters: UsersListPublicSshKeysForAuthenticatedEndpoint;
    request: UsersListPublicSshKeysForAuthenticatedRequestOptions;
    response: OctokitResponse<
      | UsersListPublicSshKeysForAuthenticatedResponseData
      | never
      | UsersListPublicSshKeysForAuthenticatedResponse401Data
      | UsersListPublicSshKeysForAuthenticatedResponse403Data
      | UsersListPublicSshKeysForAuthenticatedResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/keys/#get-a-public-ssh-key-for-the-authenticated-user
   */
  "GET /user/keys/:key_id": {
    parameters: UsersGetPublicSshKeyForAuthenticatedEndpoint;
    request: UsersGetPublicSshKeyForAuthenticatedRequestOptions;
    response: OctokitResponse<
      | UsersGetPublicSshKeyForAuthenticatedResponseData
      | never
      | UsersGetPublicSshKeyForAuthenticatedResponse401Data
      | UsersGetPublicSshKeyForAuthenticatedResponse403Data
      | UsersGetPublicSshKeyForAuthenticatedResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/marketplace/#list-subscriptions-for-the-authenticated-user
   */
  "GET /user/marketplace_purchases": {
    parameters: AppsListSubscriptionsForAuthenticatedUserEndpoint;
    request: AppsListSubscriptionsForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | AppsListSubscriptionsForAuthenticatedUserResponseData
      | never
      | AppsListSubscriptionsForAuthenticatedUserResponse401Data
      | AppsListSubscriptionsForAuthenticatedUserResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/marketplace/#list-subscriptions-for-the-authenticated-user-stubbed
   */
  "GET /user/marketplace_purchases/stubbed": {
    parameters: AppsListSubscriptionsForAuthenticatedUserStubbedEndpoint;
    request: AppsListSubscriptionsForAuthenticatedUserStubbedRequestOptions;
    response: OctokitResponse<
      | AppsListSubscriptionsForAuthenticatedUserStubbedResponseData
      | never
      | AppsListSubscriptionsForAuthenticatedUserStubbedResponse401Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/orgs/members/#list-organization-memberships-for-the-authenticated-user
   */
  "GET /user/memberships/orgs": {
    parameters: OrgsListMembershipsForAuthenticatedUserEndpoint;
    request: OrgsListMembershipsForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | OrgsListMembershipsForAuthenticatedUserResponseData
      | never
      | OrgsListMembershipsForAuthenticatedUserResponse401Data
      | OrgsListMembershipsForAuthenticatedUserResponse403Data
      | OrgsListMembershipsForAuthenticatedUserResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/orgs/members/#get-an-organization-membership-for-the-authenticated-user
   */
  "GET /user/memberships/orgs/:org": {
    parameters: OrgsGetMembershipForAuthenticatedUserEndpoint;
    request: OrgsGetMembershipForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | OrgsGetMembershipForAuthenticatedUserResponseData
      | OrgsGetMembershipForAuthenticatedUserResponse403Data
      | OrgsGetMembershipForAuthenticatedUserResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/migrations/users/#list-user-migrations
   */
  "GET /user/migrations": {
    parameters: MigrationsListForAuthenticatedUserEndpoint;
    request: MigrationsListForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | MigrationsListForAuthenticatedUserResponseData
      | never
      | MigrationsListForAuthenticatedUserResponse401Data
      | MigrationsListForAuthenticatedUserResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/migrations/users/#get-a-user-migration-status
   */
  "GET /user/migrations/:migration_id": {
    parameters: MigrationsGetStatusForAuthenticatedUserEndpoint;
    request: MigrationsGetStatusForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | MigrationsGetStatusForAuthenticatedUserResponseData
      | never
      | MigrationsGetStatusForAuthenticatedUserResponse401Data
      | MigrationsGetStatusForAuthenticatedUserResponse403Data
      | MigrationsGetStatusForAuthenticatedUserResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/migrations/users/#download-a-user-migration-archive
   */
  "GET /user/migrations/:migration_id/archive": {
    parameters: MigrationsGetArchiveForAuthenticatedUserEndpoint;
    request: MigrationsGetArchiveForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | MigrationsGetArchiveForAuthenticatedUserResponse401Data
      | MigrationsGetArchiveForAuthenticatedUserResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/migrations/users/#list-repositories-for-a-user-migration
   */
  "GET /user/migrations/:migration_id/repositories": {
    parameters: MigrationsListReposForUserEndpoint;
    request: MigrationsListReposForUserRequestOptions;
    response: OctokitResponse<
      | MigrationsListReposForUserResponseData
      | MigrationsListReposForUserResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/orgs/#list-organizations-for-the-authenticated-user
   */
  "GET /user/orgs": {
    parameters: OrgsListForAuthenticatedUserEndpoint;
    request: OrgsListForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | OrgsListForAuthenticatedUserResponseData
      | never
      | OrgsListForAuthenticatedUserResponse401Data
      | OrgsListForAuthenticatedUserResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/emails/#list-public-email-addresses-for-the-authenticated-user
   */
  "GET /user/public_emails": {
    parameters: UsersListPublicEmailsForAuthenticatedEndpoint;
    request: UsersListPublicEmailsForAuthenticatedRequestOptions;
    response: OctokitResponse<
      | UsersListPublicEmailsForAuthenticatedResponseData
      | never
      | UsersListPublicEmailsForAuthenticatedResponse401Data
      | UsersListPublicEmailsForAuthenticatedResponse403Data
      | UsersListPublicEmailsForAuthenticatedResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/#list-repositories-for-the-authenticated-user
   */
  "GET /user/repos": {
    parameters: ReposListForAuthenticatedUserEndpoint;
    request: ReposListForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | ReposListForAuthenticatedUserResponseData
      | never
      | ReposListForAuthenticatedUserResponse401Data
      | ReposListForAuthenticatedUserResponse403Data
      | never
      | ReposListForAuthenticatedUserResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/invitations/#list-repository-invitations-for-the-authenticated-user
   */
  "GET /user/repository_invitations": {
    parameters: ReposListInvitationsForAuthenticatedUserEndpoint;
    request: ReposListInvitationsForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | ReposListInvitationsForAuthenticatedUserResponseData
      | never
      | ReposListInvitationsForAuthenticatedUserResponse401Data
      | ReposListInvitationsForAuthenticatedUserResponse403Data
      | ReposListInvitationsForAuthenticatedUserResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-the-authenticated-user
   */
  "GET /user/starred": {
    parameters: ActivityListReposStarredByAuthenticatedUserEndpoint;
    request: ActivityListReposStarredByAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | ActivityListReposStarredByAuthenticatedUserResponseData
      | ActivityListReposStarredByAuthenticatedUserResponse200Data
      | never
      | ActivityListReposStarredByAuthenticatedUserResponse401Data
      | ActivityListReposStarredByAuthenticatedUserResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/activity/starring/#check-if-a-repository-is-starred-by-the-authenticated-user
   */
  "GET /user/starred/:owner/:repo": {
    parameters: ActivityCheckRepoIsStarredByAuthenticatedUserEndpoint;
    request: ActivityCheckRepoIsStarredByAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | ActivityCheckRepoIsStarredByAuthenticatedUserResponse401Data
      | ActivityCheckRepoIsStarredByAuthenticatedUserResponse403Data
      | ActivityCheckRepoIsStarredByAuthenticatedUserResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-the-authenticated-user
   */
  "GET /user/subscriptions": {
    parameters: ActivityListWatchedReposForAuthenticatedUserEndpoint;
    request: ActivityListWatchedReposForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | ActivityListWatchedReposForAuthenticatedUserResponseData
      | never
      | ActivityListWatchedReposForAuthenticatedUserResponse401Data
      | ActivityListWatchedReposForAuthenticatedUserResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/#list-teams-for-the-authenticated-user
   */
  "GET /user/teams": {
    parameters: TeamsListForAuthenticatedUserEndpoint;
    request: TeamsListForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | TeamsListForAuthenticatedUserResponseData
      | never
      | TeamsListForAuthenticatedUserResponse403Data
      | TeamsListForAuthenticatedUserResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/#list-users
   */
  "GET /users": {
    parameters: UsersListEndpoint;
    request: UsersListRequestOptions;
    response: OctokitResponse<UsersListResponseData | never>;
  };
  /**
   * @see https://developer.github.com/v3/users/#get-a-user
   */
  "GET /users/:username": {
    parameters: UsersGetByUsernameEndpoint;
    request: UsersGetByUsernameRequestOptions;
    response: OctokitResponse<
      UsersGetByUsernameResponseData | UsersGetByUsernameResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/activity/events/#list-events-for-the-authenticated-user
   */
  "GET /users/:username/events": {
    parameters: ActivityListEventsForAuthenticatedUserEndpoint;
    request: ActivityListEventsForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      ActivityListEventsForAuthenticatedUserResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/activity/events/#list-organization-events-for-the-authenticated-user
   */
  "GET /users/:username/events/orgs/:org": {
    parameters: ActivityListOrgEventsForAuthenticatedUserEndpoint;
    request: ActivityListOrgEventsForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      ActivityListOrgEventsForAuthenticatedUserResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/activity/events/#list-public-events-for-a-user
   */
  "GET /users/:username/events/public": {
    parameters: ActivityListPublicEventsForUserEndpoint;
    request: ActivityListPublicEventsForUserRequestOptions;
    response: OctokitResponse<ActivityListPublicEventsForUserResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/users/followers/#list-followers-of-a-user
   */
  "GET /users/:username/followers": {
    parameters: UsersListFollowersForUserEndpoint;
    request: UsersListFollowersForUserRequestOptions;
    response: OctokitResponse<UsersListFollowersForUserResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/users/followers/#list-the-people-a-user-follows
   */
  "GET /users/:username/following": {
    parameters: UsersListFollowingForUserEndpoint;
    request: UsersListFollowingForUserRequestOptions;
    response: OctokitResponse<UsersListFollowingForUserResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/users/followers/#check-if-a-user-follows-another-user
   */
  "GET /users/:username/following/:target_user": {
    parameters: UsersCheckFollowingForUserEndpoint;
    request: UsersCheckFollowingForUserRequestOptions;
    response: OctokitResponse<never | never>;
  };
  /**
   * @see https://developer.github.com/v3/gists/#list-gists-for-a-user
   */
  "GET /users/:username/gists": {
    parameters: GistsListForUserEndpoint;
    request: GistsListForUserRequestOptions;
    response: OctokitResponse<
      GistsListForUserResponseData | GistsListForUserResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/gpg_keys/#list-gpg-keys-for-a-user
   */
  "GET /users/:username/gpg_keys": {
    parameters: UsersListGpgKeysForUserEndpoint;
    request: UsersListGpgKeysForUserRequestOptions;
    response: OctokitResponse<UsersListGpgKeysForUserResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/users/#get-contextual-information-for-a-user
   */
  "GET /users/:username/hovercard": {
    parameters: UsersGetContextForUserEndpoint;
    request: UsersGetContextForUserRequestOptions;
    response: OctokitResponse<
      | UsersGetContextForUserResponseData
      | UsersGetContextForUserResponse404Data
      | UsersGetContextForUserResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/#get-a-user-installation-for-the-authenticated-app
   */
  "GET /users/:username/installation": {
    parameters: AppsGetUserInstallationEndpoint;
    request: AppsGetUserInstallationRequestOptions;
    response: OctokitResponse<AppsGetUserInstallationResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/users/keys/#list-public-keys-for-a-user
   */
  "GET /users/:username/keys": {
    parameters: UsersListPublicKeysForUserEndpoint;
    request: UsersListPublicKeysForUserRequestOptions;
    response: OctokitResponse<UsersListPublicKeysForUserResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/orgs/#list-organizations-for-a-user
   */
  "GET /users/:username/orgs": {
    parameters: OrgsListForUserEndpoint;
    request: OrgsListForUserRequestOptions;
    response: OctokitResponse<OrgsListForUserResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/projects/#list-user-projects
   */
  "GET /users/:username/projects": {
    parameters: ProjectsListForUserEndpoint;
    request: ProjectsListForUserRequestOptions;
    response: OctokitResponse<
      | ProjectsListForUserResponseData
      | ProjectsListForUserResponse415Data
      | ProjectsListForUserResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/activity/events/#list-events-received-by-the-authenticated-user
   */
  "GET /users/:username/received_events": {
    parameters: ActivityListReceivedEventsForUserEndpoint;
    request: ActivityListReceivedEventsForUserRequestOptions;
    response: OctokitResponse<ActivityListReceivedEventsForUserResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/activity/events/#list-public-events-received-by-a-user
   */
  "GET /users/:username/received_events/public": {
    parameters: ActivityListReceivedPublicEventsForUserEndpoint;
    request: ActivityListReceivedPublicEventsForUserRequestOptions;
    response: OctokitResponse<
      ActivityListReceivedPublicEventsForUserResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/#list-repositories-for-a-user
   */
  "GET /users/:username/repos": {
    parameters: ReposListForUserEndpoint;
    request: ReposListForUserRequestOptions;
    response: OctokitResponse<ReposListForUserResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/billing/#get-github-actions-billing-for-a-user
   */
  "GET /users/:username/settings/billing/actions": {
    parameters: BillingGetGithubActionsBillingUserEndpoint;
    request: BillingGetGithubActionsBillingUserRequestOptions;
    response: OctokitResponse<BillingGetGithubActionsBillingUserResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/billing/#get-github-packages-billing-for-a-user
   */
  "GET /users/:username/settings/billing/packages": {
    parameters: BillingGetGithubPackagesBillingUserEndpoint;
    request: BillingGetGithubPackagesBillingUserRequestOptions;
    response: OctokitResponse<BillingGetGithubPackagesBillingUserResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/billing/#get-shared-storage-billing-for-a-user
   */
  "GET /users/:username/settings/billing/shared-storage": {
    parameters: BillingGetSharedStorageBillingUserEndpoint;
    request: BillingGetSharedStorageBillingUserRequestOptions;
    response: OctokitResponse<BillingGetSharedStorageBillingUserResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-a-user
   */
  "GET /users/:username/starred": {
    parameters: ActivityListReposStarredByUserEndpoint;
    request: ActivityListReposStarredByUserRequestOptions;
    response: OctokitResponse<
      | ActivityListReposStarredByUserResponseData
      | ActivityListReposStarredByUserResponse200Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-a-user
   */
  "GET /users/:username/subscriptions": {
    parameters: ActivityListReposWatchedByUserEndpoint;
    request: ActivityListReposWatchedByUserRequestOptions;
    response: OctokitResponse<ActivityListReposWatchedByUserResponseData>;
  };
  /**
   * @see
   */
  "GET /zen": {
    parameters: MetaGetZenEndpoint;
    request: MetaGetZenRequestOptions;
    response: OctokitResponse<MetaGetZenResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/apps/oauth_applications/#reset-a-token
   */
  "PATCH /applications/:client_id/token": {
    parameters: AppsResetTokenEndpoint;
    request: AppsResetTokenRequestOptions;
    response: OctokitResponse<
      AppsResetTokenResponseData | AppsResetTokenResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/oauth_authorizations/#update-an-existing-authorization
   */
  "PATCH /authorizations/:authorization_id": {
    parameters: OauthAuthorizationsUpdateAuthorizationEndpoint;
    request: OauthAuthorizationsUpdateAuthorizationRequestOptions;
    response: OctokitResponse<
      | OauthAuthorizationsUpdateAuthorizationResponseData
      | OauthAuthorizationsUpdateAuthorizationResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/actions/#update-a-self-hosted-runner-group-for-an-enterprise
   */
  "PATCH /enterprises/:enterprise/actions/runner-groups/:runner_group_id": {
    parameters: EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseEndpoint;
    request: EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequestOptions;
    response: OctokitResponse<
      EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/gists/#update-a-gist
   */
  "PATCH /gists/:gist_id": {
    parameters: GistsUpdateEndpoint;
    request: GistsUpdateRequestOptions;
    response: OctokitResponse<
      | GistsUpdateResponseData
      | GistsUpdateResponse404Data
      | GistsUpdateResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/gists/comments/#update-a-gist-comment
   */
  "PATCH /gists/:gist_id/comments/:comment_id": {
    parameters: GistsUpdateCommentEndpoint;
    request: GistsUpdateCommentRequestOptions;
    response: OctokitResponse<
      GistsUpdateCommentResponseData | GistsUpdateCommentResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/activity/notifications/#mark-a-thread-as-read
   */
  "PATCH /notifications/threads/:thread_id": {
    parameters: ActivityMarkThreadAsReadEndpoint;
    request: ActivityMarkThreadAsReadRequestOptions;
    response: OctokitResponse<
      never | never | ActivityMarkThreadAsReadResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/orgs/#update-an-organization
   */
  "PATCH /orgs/:org": {
    parameters: OrgsUpdateEndpoint;
    request: OrgsUpdateRequestOptions;
    response: OctokitResponse<
      | OrgsUpdateResponseData
      | OrgsUpdateResponse409Data
      | OrgsUpdateResponse415Data
      | OrgsUpdateResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runner-groups/#update-a-self-hosted-runner-group-for-an-organization
   */
  "PATCH /orgs/:org/actions/runner-groups/:runner_group_id": {
    parameters: ActionsUpdateSelfHostedRunnerGroupForOrgEndpoint;
    request: ActionsUpdateSelfHostedRunnerGroupForOrgRequestOptions;
    response: OctokitResponse<
      ActionsUpdateSelfHostedRunnerGroupForOrgResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/orgs/hooks/#update-an-organization-webhook
   */
  "PATCH /orgs/:org/hooks/:hook_id": {
    parameters: OrgsUpdateWebhookEndpoint;
    request: OrgsUpdateWebhookRequestOptions;
    response: OctokitResponse<
      | OrgsUpdateWebhookResponseData
      | OrgsUpdateWebhookResponse404Data
      | OrgsUpdateWebhookResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/#update-a-team
   */
  "PATCH /orgs/:org/teams/:team_slug": {
    parameters: TeamsUpdateInOrgEndpoint;
    request: TeamsUpdateInOrgRequestOptions;
    response: OctokitResponse<TeamsUpdateInOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/discussions/#update-a-discussion
   */
  "PATCH /orgs/:org/teams/:team_slug/discussions/:discussion_number": {
    parameters: TeamsUpdateDiscussionInOrgEndpoint;
    request: TeamsUpdateDiscussionInOrgRequestOptions;
    response: OctokitResponse<TeamsUpdateDiscussionInOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/discussion_comments/#update-a-discussion-comment
   */
  "PATCH /orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number": {
    parameters: TeamsUpdateDiscussionCommentInOrgEndpoint;
    request: TeamsUpdateDiscussionCommentInOrgRequestOptions;
    response: OctokitResponse<TeamsUpdateDiscussionCommentInOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/team_sync/#create-or-update-idp-group-connections
   */
  "PATCH /orgs/:org/teams/:team_slug/team-sync/group-mappings": {
    parameters: TeamsCreateOrUpdateIdpGroupConnectionsInOrgEndpoint;
    request: TeamsCreateOrUpdateIdpGroupConnectionsInOrgRequestOptions;
    response: OctokitResponse<
      TeamsCreateOrUpdateIdpGroupConnectionsInOrgResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/projects/#update-a-project
   */
  "PATCH /projects/:project_id": {
    parameters: ProjectsUpdateEndpoint;
    request: ProjectsUpdateRequestOptions;
    response: OctokitResponse<
      | ProjectsUpdateResponseData
      | never
      | ProjectsUpdateResponse401Data
      | ProjectsUpdateResponse403Data
      | never
      | ProjectsUpdateResponse410Data
      | ProjectsUpdateResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/projects/columns/#update-a-project-column
   */
  "PATCH /projects/columns/:column_id": {
    parameters: ProjectsUpdateColumnEndpoint;
    request: ProjectsUpdateColumnRequestOptions;
    response: OctokitResponse<
      | ProjectsUpdateColumnResponseData
      | never
      | ProjectsUpdateColumnResponse401Data
      | ProjectsUpdateColumnResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/projects/cards/#update-a-project-card
   */
  "PATCH /projects/columns/cards/:card_id": {
    parameters: ProjectsUpdateCardEndpoint;
    request: ProjectsUpdateCardRequestOptions;
    response: OctokitResponse<
      | ProjectsUpdateCardResponseData
      | never
      | ProjectsUpdateCardResponse401Data
      | ProjectsUpdateCardResponse403Data
      | ProjectsUpdateCardResponse404Data
      | ProjectsUpdateCardResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/#update-a-repository
   */
  "PATCH /repos/:owner/:repo": {
    parameters: ReposUpdateEndpoint;
    request: ReposUpdateRequestOptions;
    response: OctokitResponse<
      | ReposUpdateResponseData
      | ReposUpdateResponse403Data
      | ReposUpdateResponse404Data
      | ReposUpdateResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#update-pull-request-review-protection
   */
  "PATCH /repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews": {
    parameters: ReposUpdatePullRequestReviewProtectionEndpoint;
    request: ReposUpdatePullRequestReviewProtectionRequestOptions;
    response: OctokitResponse<
      | ReposUpdatePullRequestReviewProtectionResponseData
      | ReposUpdatePullRequestReviewProtectionResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#update-status-check-potection
   */
  "PATCH /repos/:owner/:repo/branches/:branch/protection/required_status_checks": {
    parameters: ReposUpdateStatusCheckProtectionEndpoint;
    request: ReposUpdateStatusCheckProtectionRequestOptions;
    response: OctokitResponse<
      | ReposUpdateStatusCheckProtectionResponseData
      | ReposUpdateStatusCheckProtectionResponse404Data
      | ReposUpdateStatusCheckProtectionResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/checks/runs/#update-a-check-run
   */
  "PATCH /repos/:owner/:repo/check-runs/:check_run_id": {
    parameters: ChecksUpdateEndpoint;
    request: ChecksUpdateRequestOptions;
    response: OctokitResponse<ChecksUpdateResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/checks/suites/#update-repository-preferences-for-check-suites
   */
  "PATCH /repos/:owner/:repo/check-suites/preferences": {
    parameters: ChecksSetSuitesPreferencesEndpoint;
    request: ChecksSetSuitesPreferencesRequestOptions;
    response: OctokitResponse<ChecksSetSuitesPreferencesResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/code-scanning/#upload-a-code-scanning-alert
   */
  "PATCH /repos/:owner/:repo/code-scanning/alerts/:alert_number": {
    parameters: CodeScanningUpdateAlertEndpoint;
    request: CodeScanningUpdateAlertRequestOptions;
    response: OctokitResponse<CodeScanningUpdateAlertResponseData | never>;
  };
  /**
   * @see https://developer.github.com/v3/repos/comments/#update-a-commit-comment
   */
  "PATCH /repos/:owner/:repo/comments/:comment_id": {
    parameters: ReposUpdateCommitCommentEndpoint;
    request: ReposUpdateCommitCommentRequestOptions;
    response: OctokitResponse<
      | ReposUpdateCommitCommentResponseData
      | ReposUpdateCommitCommentResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/git/refs/#update-a-reference
   */
  "PATCH /repos/:owner/:repo/git/refs/:ref": {
    parameters: GitUpdateRefEndpoint;
    request: GitUpdateRefRequestOptions;
    response: OctokitResponse<
      GitUpdateRefResponseData | GitUpdateRefResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/hooks/#update-a-repository-webhook
   */
  "PATCH /repos/:owner/:repo/hooks/:hook_id": {
    parameters: ReposUpdateWebhookEndpoint;
    request: ReposUpdateWebhookRequestOptions;
    response: OctokitResponse<
      | ReposUpdateWebhookResponseData
      | ReposUpdateWebhookResponse404Data
      | ReposUpdateWebhookResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/migrations/source_imports/#update-an-import
   */
  "PATCH /repos/:owner/:repo/import": {
    parameters: MigrationsUpdateImportEndpoint;
    request: MigrationsUpdateImportRequestOptions;
    response: OctokitResponse<MigrationsUpdateImportResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/migrations/source_imports/#map-a-commit-author
   */
  "PATCH /repos/:owner/:repo/import/authors/:author_id": {
    parameters: MigrationsMapCommitAuthorEndpoint;
    request: MigrationsMapCommitAuthorRequestOptions;
    response: OctokitResponse<
      | MigrationsMapCommitAuthorResponseData
      | MigrationsMapCommitAuthorResponse404Data
      | MigrationsMapCommitAuthorResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/migrations/source_imports/#update-git-lfs-preference
   */
  "PATCH /repos/:owner/:repo/import/lfs": {
    parameters: MigrationsSetLfsPreferenceEndpoint;
    request: MigrationsSetLfsPreferenceRequestOptions;
    response: OctokitResponse<
      | MigrationsSetLfsPreferenceResponseData
      | MigrationsSetLfsPreferenceResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/invitations/#update-a-repository-invitation
   */
  "PATCH /repos/:owner/:repo/invitations/:invitation_id": {
    parameters: ReposUpdateInvitationEndpoint;
    request: ReposUpdateInvitationRequestOptions;
    response: OctokitResponse<ReposUpdateInvitationResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/issues/#update-an-issue
   */
  "PATCH /repos/:owner/:repo/issues/:issue_number": {
    parameters: IssuesUpdateEndpoint;
    request: IssuesUpdateRequestOptions;
    response: OctokitResponse<
      | IssuesUpdateResponseData
      | never
      | IssuesUpdateResponse403Data
      | IssuesUpdateResponse404Data
      | IssuesUpdateResponse410Data
      | IssuesUpdateResponse422Data
      | IssuesUpdateResponse503Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/comments/#update-an-issue-comment
   */
  "PATCH /repos/:owner/:repo/issues/comments/:comment_id": {
    parameters: IssuesUpdateCommentEndpoint;
    request: IssuesUpdateCommentRequestOptions;
    response: OctokitResponse<
      IssuesUpdateCommentResponseData | IssuesUpdateCommentResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/labels/#update-a-label
   */
  "PATCH /repos/:owner/:repo/labels/:name": {
    parameters: IssuesUpdateLabelEndpoint;
    request: IssuesUpdateLabelRequestOptions;
    response: OctokitResponse<IssuesUpdateLabelResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/issues/milestones/#update-a-milestone
   */
  "PATCH /repos/:owner/:repo/milestones/:milestone_number": {
    parameters: IssuesUpdateMilestoneEndpoint;
    request: IssuesUpdateMilestoneRequestOptions;
    response: OctokitResponse<IssuesUpdateMilestoneResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/pulls/#update-a-pull-request
   */
  "PATCH /repos/:owner/:repo/pulls/:pull_number": {
    parameters: PullsUpdateEndpoint;
    request: PullsUpdateRequestOptions;
    response: OctokitResponse<
      | PullsUpdateResponseData
      | PullsUpdateResponse403Data
      | PullsUpdateResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/pulls/comments/#update-a-review-comment-for-a-pull-request
   */
  "PATCH /repos/:owner/:repo/pulls/comments/:comment_id": {
    parameters: PullsUpdateReviewCommentEndpoint;
    request: PullsUpdateReviewCommentRequestOptions;
    response: OctokitResponse<PullsUpdateReviewCommentResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/releases/#update-a-release
   */
  "PATCH /repos/:owner/:repo/releases/:release_id": {
    parameters: ReposUpdateReleaseEndpoint;
    request: ReposUpdateReleaseRequestOptions;
    response: OctokitResponse<ReposUpdateReleaseResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/releases/#update-a-release-asset
   */
  "PATCH /repos/:owner/:repo/releases/assets/:asset_id": {
    parameters: ReposUpdateReleaseAssetEndpoint;
    request: ReposUpdateReleaseAssetRequestOptions;
    response: OctokitResponse<ReposUpdateReleaseAssetResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/scim/#update-an-attribute-for-a-scim-enterprise-group
   */
  "PATCH /scim/v2/enterprises/:enterprise/Groups/:scim_group_id": {
    parameters: EnterpriseAdminUpdateAttributeForEnterpriseGroupEndpoint;
    request: EnterpriseAdminUpdateAttributeForEnterpriseGroupRequestOptions;
    response: OctokitResponse<
      EnterpriseAdminUpdateAttributeForEnterpriseGroupResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/scim/#update-an-attribute-for-a-scim-enterprise-user
   */
  "PATCH /scim/v2/enterprises/:enterprise/Users/:scim_user_id": {
    parameters: EnterpriseAdminUpdateAttributeForEnterpriseUserEndpoint;
    request: EnterpriseAdminUpdateAttributeForEnterpriseUserRequestOptions;
    response: OctokitResponse<
      EnterpriseAdminUpdateAttributeForEnterpriseUserResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/scim/#update-an-attribute-for-a-scim-user
   */
  "PATCH /scim/v2/organizations/:org/Users/:scim_user_id": {
    parameters: ScimUpdateAttributeForUserEndpoint;
    request: ScimUpdateAttributeForUserRequestOptions;
    response: OctokitResponse<
      | ScimUpdateAttributeForUserResponseData
      | never
      | ScimUpdateAttributeForUserResponse400Data
      | ScimUpdateAttributeForUserResponse400Data
      | ScimUpdateAttributeForUserResponse403Data
      | ScimUpdateAttributeForUserResponse403Data
      | ScimUpdateAttributeForUserResponse404Data
      | ScimUpdateAttributeForUserResponse404Data
      | ScimUpdateAttributeForUserResponse429Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/#update-a-team-legacy
   */
  "PATCH /teams/:team_id": {
    parameters: TeamsUpdateLegacyEndpoint;
    request: TeamsUpdateLegacyRequestOptions;
    response: OctokitResponse<
      | TeamsUpdateLegacyResponseData
      | TeamsUpdateLegacyResponse403Data
      | TeamsUpdateLegacyResponse404Data
      | TeamsUpdateLegacyResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/discussions/#update-a-discussion-legacy
   */
  "PATCH /teams/:team_id/discussions/:discussion_number": {
    parameters: TeamsUpdateDiscussionLegacyEndpoint;
    request: TeamsUpdateDiscussionLegacyRequestOptions;
    response: OctokitResponse<TeamsUpdateDiscussionLegacyResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/discussion_comments/#update-a-discussion-comment-legacy
   */
  "PATCH /teams/:team_id/discussions/:discussion_number/comments/:comment_number": {
    parameters: TeamsUpdateDiscussionCommentLegacyEndpoint;
    request: TeamsUpdateDiscussionCommentLegacyRequestOptions;
    response: OctokitResponse<TeamsUpdateDiscussionCommentLegacyResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/team_sync/#create-or-update-idp-group-connections-legacy
   */
  "PATCH /teams/:team_id/team-sync/group-mappings": {
    parameters: TeamsCreateOrUpdateIdpGroupConnectionsLegacyEndpoint;
    request: TeamsCreateOrUpdateIdpGroupConnectionsLegacyRequestOptions;
    response: OctokitResponse<
      | TeamsCreateOrUpdateIdpGroupConnectionsLegacyResponseData
      | TeamsCreateOrUpdateIdpGroupConnectionsLegacyResponse403Data
      | TeamsCreateOrUpdateIdpGroupConnectionsLegacyResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/#update-the-authenticated-user
   */
  "PATCH /user": {
    parameters: UsersUpdateAuthenticatedEndpoint;
    request: UsersUpdateAuthenticatedRequestOptions;
    response: OctokitResponse<
      | UsersUpdateAuthenticatedResponseData
      | never
      | UsersUpdateAuthenticatedResponse401Data
      | UsersUpdateAuthenticatedResponse403Data
      | UsersUpdateAuthenticatedResponse404Data
      | UsersUpdateAuthenticatedResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/emails/#set-primary-email-visibility-for-the-authenticated-user
   */
  "PATCH /user/email/visibility": {
    parameters: UsersSetPrimaryEmailVisibilityForAuthenticatedEndpoint;
    request: UsersSetPrimaryEmailVisibilityForAuthenticatedRequestOptions;
    response: OctokitResponse<
      | UsersSetPrimaryEmailVisibilityForAuthenticatedResponseData
      | never
      | UsersSetPrimaryEmailVisibilityForAuthenticatedResponse401Data
      | UsersSetPrimaryEmailVisibilityForAuthenticatedResponse403Data
      | UsersSetPrimaryEmailVisibilityForAuthenticatedResponse404Data
      | UsersSetPrimaryEmailVisibilityForAuthenticatedResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/orgs/members/#update-an-organization-membership-for-the-authenticated-user
   */
  "PATCH /user/memberships/orgs/:org": {
    parameters: OrgsUpdateMembershipForAuthenticatedUserEndpoint;
    request: OrgsUpdateMembershipForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | OrgsUpdateMembershipForAuthenticatedUserResponseData
      | OrgsUpdateMembershipForAuthenticatedUserResponse403Data
      | OrgsUpdateMembershipForAuthenticatedUserResponse404Data
      | OrgsUpdateMembershipForAuthenticatedUserResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/invitations/#accept-a-repository-invitation
   */
  "PATCH /user/repository_invitations/:invitation_id": {
    parameters: ReposAcceptInvitationEndpoint;
    request: ReposAcceptInvitationRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | ReposAcceptInvitationResponse403Data
      | ReposAcceptInvitationResponse404Data
      | ReposAcceptInvitationResponse409Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/#create-a-github-app-from-a-manifest
   */
  "POST /app-manifests/:code/conversions": {
    parameters: AppsCreateFromManifestEndpoint;
    request: AppsCreateFromManifestRequestOptions;
    response: OctokitResponse<
      | AppsCreateFromManifestResponseData
      | AppsCreateFromManifestResponse404Data
      | AppsCreateFromManifestResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/#create-an-installation-access-token-for-an-app
   */
  "POST /app/installations/:installation_id/access_tokens": {
    parameters: AppsCreateInstallationAccessTokenEndpoint;
    request: AppsCreateInstallationAccessTokenRequestOptions;
    response: OctokitResponse<
      | AppsCreateInstallationAccessTokenResponseData
      | AppsCreateInstallationAccessTokenResponse401Data
      | AppsCreateInstallationAccessTokenResponse403Data
      | AppsCreateInstallationAccessTokenResponse404Data
      | AppsCreateInstallationAccessTokenResponse415Data
      | AppsCreateInstallationAccessTokenResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/oauth_applications/#check-a-token
   */
  "POST /applications/:client_id/token": {
    parameters: AppsCheckTokenEndpoint;
    request: AppsCheckTokenRequestOptions;
    response: OctokitResponse<
      | AppsCheckTokenResponseData
      | AppsCheckTokenResponse404Data
      | AppsCheckTokenResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/oauth_applications/#reset-an-authorization
   */
  "POST /applications/:client_id/tokens/:access_token": {
    parameters: AppsResetAuthorizationEndpoint;
    request: AppsResetAuthorizationRequestOptions;
    response: OctokitResponse<AppsResetAuthorizationResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization
   */
  "POST /authorizations": {
    parameters: OauthAuthorizationsCreateAuthorizationEndpoint;
    request: OauthAuthorizationsCreateAuthorizationRequestOptions;
    response: OctokitResponse<
      | OauthAuthorizationsCreateAuthorizationResponseData
      | never
      | OauthAuthorizationsCreateAuthorizationResponse401Data
      | OauthAuthorizationsCreateAuthorizationResponse403Data
      | OauthAuthorizationsCreateAuthorizationResponse410Data
      | OauthAuthorizationsCreateAuthorizationResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/installations/#create-a-content-attachment
   */
  "POST /content_references/:content_reference_id/attachments": {
    parameters: AppsCreateContentAttachmentEndpoint;
    request: AppsCreateContentAttachmentRequestOptions;
    response: OctokitResponse<
      | AppsCreateContentAttachmentResponseData
      | never
      | AppsCreateContentAttachmentResponse403Data
      | AppsCreateContentAttachmentResponse404Data
      | AppsCreateContentAttachmentResponse410Data
      | AppsCreateContentAttachmentResponse415Data
      | AppsCreateContentAttachmentResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/actions/#create-self-hosted-runner-group-for-an-enterprise
   */
  "POST /enterprises/:enterprise/actions/runner-groups": {
    parameters: EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseEndpoint;
    request: EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequestOptions;
    response: OctokitResponse<
      EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/actions/#create-a-registration-token-for-an-enterprise
   */
  "POST /enterprises/:enterprise/actions/runners/registration-token": {
    parameters: EnterpriseAdminCreateRegistrationTokenForEnterpriseEndpoint;
    request: EnterpriseAdminCreateRegistrationTokenForEnterpriseRequestOptions;
    response: OctokitResponse<
      EnterpriseAdminCreateRegistrationTokenForEnterpriseResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/actions/#create-a-remove-token-for-an-enterprise
   */
  "POST /enterprises/:enterprise/actions/runners/remove-token": {
    parameters: EnterpriseAdminCreateRemoveTokenForEnterpriseEndpoint;
    request: EnterpriseAdminCreateRemoveTokenForEnterpriseRequestOptions;
    response: OctokitResponse<
      EnterpriseAdminCreateRemoveTokenForEnterpriseResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/gists/#create-a-gist
   */
  "POST /gists": {
    parameters: GistsCreateEndpoint;
    request: GistsCreateRequestOptions;
    response: OctokitResponse<
      | GistsCreateResponseData
      | never
      | GistsCreateResponse403Data
      | GistsCreateResponse404Data
      | GistsCreateResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/gists/comments/#create-a-gist-comment
   */
  "POST /gists/:gist_id/comments": {
    parameters: GistsCreateCommentEndpoint;
    request: GistsCreateCommentRequestOptions;
    response: OctokitResponse<
      | GistsCreateCommentResponseData
      | never
      | GistsCreateCommentResponse403Data
      | GistsCreateCommentResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/gists/#fork-a-gist
   */
  "POST /gists/:gist_id/forks": {
    parameters: GistsForkEndpoint;
    request: GistsForkRequestOptions;
    response: OctokitResponse<
      | GistsForkResponseData
      | never
      | GistsForkResponse403Data
      | GistsForkResponse404Data
      | GistsForkResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/markdown/#render-a-markdown-document
   */
  "POST /markdown": {
    parameters: MarkdownRenderEndpoint;
    request: MarkdownRenderRequestOptions;
    response: OctokitResponse<never | never>;
  };
  /**
   * @see https://developer.github.com/v3/markdown/#render-a-markdown-document-in-raw-mode
   */
  "POST /markdown/raw": {
    parameters: MarkdownRenderRawEndpoint;
    request: MarkdownRenderRawRequestOptions;
    response: OctokitResponse<MarkdownRenderRawResponseData | never>;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runner-groups/#create-a-self-hosted-runner-group-for-an-organization
   */
  "POST /orgs/:org/actions/runner-groups": {
    parameters: ActionsCreateSelfHostedRunnerGroupForOrgEndpoint;
    request: ActionsCreateSelfHostedRunnerGroupForOrgRequestOptions;
    response: OctokitResponse<
      ActionsCreateSelfHostedRunnerGroupForOrgResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runners/#create-a-registration-token-for-an-organization
   */
  "POST /orgs/:org/actions/runners/registration-token": {
    parameters: ActionsCreateRegistrationTokenForOrgEndpoint;
    request: ActionsCreateRegistrationTokenForOrgRequestOptions;
    response: OctokitResponse<ActionsCreateRegistrationTokenForOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runners/#create-a-remove-token-for-an-organization
   */
  "POST /orgs/:org/actions/runners/remove-token": {
    parameters: ActionsCreateRemoveTokenForOrgEndpoint;
    request: ActionsCreateRemoveTokenForOrgRequestOptions;
    response: OctokitResponse<ActionsCreateRemoveTokenForOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/orgs/hooks/#create-an-organization-webhook
   */
  "POST /orgs/:org/hooks": {
    parameters: OrgsCreateWebhookEndpoint;
    request: OrgsCreateWebhookRequestOptions;
    response: OctokitResponse<
      | OrgsCreateWebhookResponseData
      | OrgsCreateWebhookResponse404Data
      | OrgsCreateWebhookResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/orgs/hooks/#ping-an-organization-webhook
   */
  "POST /orgs/:org/hooks/:hook_id/pings": {
    parameters: OrgsPingWebhookEndpoint;
    request: OrgsPingWebhookRequestOptions;
    response: OctokitResponse<never | OrgsPingWebhookResponse404Data>;
  };
  /**
   * @see https://developer.github.com/v3/orgs/members/#create-an-organization-invitation
   */
  "POST /orgs/:org/invitations": {
    parameters: OrgsCreateInvitationEndpoint;
    request: OrgsCreateInvitationRequestOptions;
    response: OctokitResponse<
      | OrgsCreateInvitationResponseData
      | OrgsCreateInvitationResponse404Data
      | OrgsCreateInvitationResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/migrations/orgs/#start-an-organization-migration
   */
  "POST /orgs/:org/migrations": {
    parameters: MigrationsStartForOrgEndpoint;
    request: MigrationsStartForOrgRequestOptions;
    response: OctokitResponse<
      | MigrationsStartForOrgResponseData
      | MigrationsStartForOrgResponse404Data
      | MigrationsStartForOrgResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/projects/#create-an-organization-project
   */
  "POST /orgs/:org/projects": {
    parameters: ProjectsCreateForOrgEndpoint;
    request: ProjectsCreateForOrgRequestOptions;
    response: OctokitResponse<
      | ProjectsCreateForOrgResponseData
      | ProjectsCreateForOrgResponse401Data
      | ProjectsCreateForOrgResponse403Data
      | ProjectsCreateForOrgResponse404Data
      | ProjectsCreateForOrgResponse410Data
      | ProjectsCreateForOrgResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/#create-an-organization-repository
   */
  "POST /orgs/:org/repos": {
    parameters: ReposCreateInOrgEndpoint;
    request: ReposCreateInOrgRequestOptions;
    response: OctokitResponse<
      | ReposCreateInOrgResponseData
      | ReposCreateInOrgResponse403Data
      | ReposCreateInOrgResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/#create-a-team
   */
  "POST /orgs/:org/teams": {
    parameters: TeamsCreateEndpoint;
    request: TeamsCreateRequestOptions;
    response: OctokitResponse<
      | TeamsCreateResponseData
      | TeamsCreateResponse403Data
      | TeamsCreateResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/discussions/#create-a-discussion
   */
  "POST /orgs/:org/teams/:team_slug/discussions": {
    parameters: TeamsCreateDiscussionInOrgEndpoint;
    request: TeamsCreateDiscussionInOrgRequestOptions;
    response: OctokitResponse<TeamsCreateDiscussionInOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/discussion_comments/#create-a-discussion-comment
   */
  "POST /orgs/:org/teams/:team_slug/discussions/:discussion_number/comments": {
    parameters: TeamsCreateDiscussionCommentInOrgEndpoint;
    request: TeamsCreateDiscussionCommentInOrgRequestOptions;
    response: OctokitResponse<TeamsCreateDiscussionCommentInOrgResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment
   */
  "POST /orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions": {
    parameters: ReactionsCreateForTeamDiscussionCommentInOrgEndpoint;
    request: ReactionsCreateForTeamDiscussionCommentInOrgRequestOptions;
    response: OctokitResponse<
      ReactionsCreateForTeamDiscussionCommentInOrgResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion
   */
  "POST /orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions": {
    parameters: ReactionsCreateForTeamDiscussionInOrgEndpoint;
    request: ReactionsCreateForTeamDiscussionInOrgRequestOptions;
    response: OctokitResponse<
      ReactionsCreateForTeamDiscussionInOrgResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/projects/columns/#create-a-project-column
   */
  "POST /projects/:project_id/columns": {
    parameters: ProjectsCreateColumnEndpoint;
    request: ProjectsCreateColumnRequestOptions;
    response: OctokitResponse<
      | ProjectsCreateColumnResponseData
      | never
      | ProjectsCreateColumnResponse401Data
      | ProjectsCreateColumnResponse403Data
      | ProjectsCreateColumnResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/projects/cards/#create-a-project-card
   */
  "POST /projects/columns/:column_id/cards": {
    parameters: ProjectsCreateCardEndpoint;
    request: ProjectsCreateCardRequestOptions;
    response: OctokitResponse<
      | ProjectsCreateCardResponseData
      | never
      | ProjectsCreateCardResponse401Data
      | ProjectsCreateCardResponse403Data
      | ProjectsCreateCardResponse422Data
      | ProjectsCreateCardResponse503Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/projects/columns/#move-a-project-column
   */
  "POST /projects/columns/:column_id/moves": {
    parameters: ProjectsMoveColumnEndpoint;
    request: ProjectsMoveColumnRequestOptions;
    response: OctokitResponse<
      | ProjectsMoveColumnResponseData
      | never
      | ProjectsMoveColumnResponse401Data
      | ProjectsMoveColumnResponse403Data
      | ProjectsMoveColumnResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/projects/cards/#move-a-project-card
   */
  "POST /projects/columns/cards/:card_id/moves": {
    parameters: ProjectsMoveCardEndpoint;
    request: ProjectsMoveCardRequestOptions;
    response: OctokitResponse<
      | ProjectsMoveCardResponseData
      | never
      | ProjectsMoveCardResponse401Data
      | ProjectsMoveCardResponse403Data
      | ProjectsMoveCardResponse422Data
      | ProjectsMoveCardResponse503Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runners/#create-a-registration-token-for-a-repository
   */
  "POST /repos/:owner/:repo/actions/runners/registration-token": {
    parameters: ActionsCreateRegistrationTokenForRepoEndpoint;
    request: ActionsCreateRegistrationTokenForRepoRequestOptions;
    response: OctokitResponse<
      ActionsCreateRegistrationTokenForRepoResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runners/#create-a-remove-token-for-a-repository
   */
  "POST /repos/:owner/:repo/actions/runners/remove-token": {
    parameters: ActionsCreateRemoveTokenForRepoEndpoint;
    request: ActionsCreateRemoveTokenForRepoRequestOptions;
    response: OctokitResponse<ActionsCreateRemoveTokenForRepoResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/actions/workflow-runs/#cancel-a-workflow-run
   */
  "POST /repos/:owner/:repo/actions/runs/:run_id/cancel": {
    parameters: ActionsCancelWorkflowRunEndpoint;
    request: ActionsCancelWorkflowRunRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/actions/workflow-runs/#re-run-a-workflow
   */
  "POST /repos/:owner/:repo/actions/runs/:run_id/rerun": {
    parameters: ActionsReRunWorkflowEndpoint;
    request: ActionsReRunWorkflowRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/actions/workflows/#create-a-workflow-dispatch-event
   */
  "POST /repos/:owner/:repo/actions/workflows/:workflow_id/dispatches": {
    parameters: ActionsCreateWorkflowDispatchEndpoint;
    request: ActionsCreateWorkflowDispatchRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#set-admin-branch-protection
   */
  "POST /repos/:owner/:repo/branches/:branch/protection/enforce_admins": {
    parameters: ReposSetAdminBranchProtectionEndpoint;
    request: ReposSetAdminBranchProtectionRequestOptions;
    response: OctokitResponse<ReposSetAdminBranchProtectionResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#create-commit-signature-protection
   */
  "POST /repos/:owner/:repo/branches/:branch/protection/required_signatures": {
    parameters: ReposCreateCommitSignatureProtectionEndpoint;
    request: ReposCreateCommitSignatureProtectionRequestOptions;
    response: OctokitResponse<
      | ReposCreateCommitSignatureProtectionResponseData
      | ReposCreateCommitSignatureProtectionResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#add-status-check-contexts
   */
  "POST /repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts": {
    parameters: ReposAddStatusCheckContextsEndpoint;
    request: ReposAddStatusCheckContextsRequestOptions;
    response: OctokitResponse<
      | ReposAddStatusCheckContextsResponseData
      | ReposAddStatusCheckContextsResponse403Data
      | ReposAddStatusCheckContextsResponse404Data
      | ReposAddStatusCheckContextsResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#add-app-access-restrictions
   */
  "POST /repos/:owner/:repo/branches/:branch/protection/restrictions/apps": {
    parameters: ReposAddAppAccessRestrictionsEndpoint;
    request: ReposAddAppAccessRestrictionsRequestOptions;
    response: OctokitResponse<
      | ReposAddAppAccessRestrictionsResponseData
      | ReposAddAppAccessRestrictionsResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#add-team-access-restrictions
   */
  "POST /repos/:owner/:repo/branches/:branch/protection/restrictions/teams": {
    parameters: ReposAddTeamAccessRestrictionsEndpoint;
    request: ReposAddTeamAccessRestrictionsRequestOptions;
    response: OctokitResponse<
      | ReposAddTeamAccessRestrictionsResponseData
      | ReposAddTeamAccessRestrictionsResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#add-user-access-restrictions
   */
  "POST /repos/:owner/:repo/branches/:branch/protection/restrictions/users": {
    parameters: ReposAddUserAccessRestrictionsEndpoint;
    request: ReposAddUserAccessRestrictionsRequestOptions;
    response: OctokitResponse<
      | ReposAddUserAccessRestrictionsResponseData
      | ReposAddUserAccessRestrictionsResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/checks/runs/#create-a-check-run
   */
  "POST /repos/:owner/:repo/check-runs": {
    parameters: ChecksCreateEndpoint;
    request: ChecksCreateRequestOptions;
    response: OctokitResponse<ChecksCreateResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/checks/suites/#create-a-check-suite
   */
  "POST /repos/:owner/:repo/check-suites": {
    parameters: ChecksCreateSuiteEndpoint;
    request: ChecksCreateSuiteRequestOptions;
    response: OctokitResponse<ChecksCreateSuiteResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/checks/suites/#rerequest-a-check-suite
   */
  "POST /repos/:owner/:repo/check-suites/:check_suite_id/rerequest": {
    parameters: ChecksRerequestSuiteEndpoint;
    request: ChecksRerequestSuiteRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/code-scanning/#upload-a-sarif-analysis
   */
  "POST /repos/:owner/:repo/code-scanning/sarifs": {
    parameters: CodeScanningUploadSarifEndpoint;
    request: CodeScanningUploadSarifRequestOptions;
    response: OctokitResponse<never | never>;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#create-reaction-for-a-commit-comment
   */
  "POST /repos/:owner/:repo/comments/:comment_id/reactions": {
    parameters: ReactionsCreateForCommitCommentEndpoint;
    request: ReactionsCreateForCommitCommentRequestOptions;
    response: OctokitResponse<
      | ReactionsCreateForCommitCommentResponseData
      | ReactionsCreateForCommitCommentResponse201Data
      | ReactionsCreateForCommitCommentResponse415Data
      | ReactionsCreateForCommitCommentResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/comments/#create-a-commit-comment
   */
  "POST /repos/:owner/:repo/commits/:commit_sha/comments": {
    parameters: ReposCreateCommitCommentEndpoint;
    request: ReposCreateCommitCommentRequestOptions;
    response: OctokitResponse<
      | ReposCreateCommitCommentResponseData
      | ReposCreateCommitCommentResponse403Data
      | ReposCreateCommitCommentResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/deployments/#create-a-deployment
   */
  "POST /repos/:owner/:repo/deployments": {
    parameters: ReposCreateDeploymentEndpoint;
    request: ReposCreateDeploymentRequestOptions;
    response: OctokitResponse<
      | ReposCreateDeploymentResponseData
      | ReposCreateDeploymentResponse202Data
      | ReposCreateDeploymentResponse409Data
      | ReposCreateDeploymentResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/deployments/#create-a-deployment-status
   */
  "POST /repos/:owner/:repo/deployments/:deployment_id/statuses": {
    parameters: ReposCreateDeploymentStatusEndpoint;
    request: ReposCreateDeploymentStatusRequestOptions;
    response: OctokitResponse<
      | ReposCreateDeploymentStatusResponseData
      | ReposCreateDeploymentStatusResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/#create-a-repository-dispatch-event
   */
  "POST /repos/:owner/:repo/dispatches": {
    parameters: ReposCreateDispatchEventEndpoint;
    request: ReposCreateDispatchEventRequestOptions;
    response: OctokitResponse<never | ReposCreateDispatchEventResponse422Data>;
  };
  /**
   * @see https://developer.github.com/v3/repos/forks/#create-a-fork
   */
  "POST /repos/:owner/:repo/forks": {
    parameters: ReposCreateForkEndpoint;
    request: ReposCreateForkRequestOptions;
    response: OctokitResponse<
      | ReposCreateForkResponseData
      | ReposCreateForkResponse400Data
      | ReposCreateForkResponse400Data
      | ReposCreateForkResponse403Data
      | ReposCreateForkResponse404Data
      | ReposCreateForkResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/git/blobs/#create-a-blob
   */
  "POST /repos/:owner/:repo/git/blobs": {
    parameters: GitCreateBlobEndpoint;
    request: GitCreateBlobRequestOptions;
    response: OctokitResponse<
      | GitCreateBlobResponseData
      | GitCreateBlobResponse403Data
      | GitCreateBlobResponse404Data
      | GitCreateBlobResponse409Data
      | GitCreateBlobResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/git/commits/#create-a-commit
   */
  "POST /repos/:owner/:repo/git/commits": {
    parameters: GitCreateCommitEndpoint;
    request: GitCreateCommitRequestOptions;
    response: OctokitResponse<
      | GitCreateCommitResponseData
      | GitCreateCommitResponse404Data
      | GitCreateCommitResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/git/refs/#create-a-reference
   */
  "POST /repos/:owner/:repo/git/refs": {
    parameters: GitCreateRefEndpoint;
    request: GitCreateRefRequestOptions;
    response: OctokitResponse<
      GitCreateRefResponseData | GitCreateRefResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/git/tags/#create-a-tag-object
   */
  "POST /repos/:owner/:repo/git/tags": {
    parameters: GitCreateTagEndpoint;
    request: GitCreateTagRequestOptions;
    response: OctokitResponse<
      GitCreateTagResponseData | GitCreateTagResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/git/trees/#create-a-tree
   */
  "POST /repos/:owner/:repo/git/trees": {
    parameters: GitCreateTreeEndpoint;
    request: GitCreateTreeRequestOptions;
    response: OctokitResponse<
      | GitCreateTreeResponseData
      | GitCreateTreeResponse403Data
      | GitCreateTreeResponse404Data
      | GitCreateTreeResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/hooks/#create-a-repository-webhook
   */
  "POST /repos/:owner/:repo/hooks": {
    parameters: ReposCreateWebhookEndpoint;
    request: ReposCreateWebhookRequestOptions;
    response: OctokitResponse<
      | ReposCreateWebhookResponseData
      | ReposCreateWebhookResponse403Data
      | ReposCreateWebhookResponse404Data
      | ReposCreateWebhookResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/hooks/#ping-a-repository-webhook
   */
  "POST /repos/:owner/:repo/hooks/:hook_id/pings": {
    parameters: ReposPingWebhookEndpoint;
    request: ReposPingWebhookRequestOptions;
    response: OctokitResponse<never | ReposPingWebhookResponse404Data>;
  };
  /**
   * @see https://developer.github.com/v3/repos/hooks/#test-the-push-repository-webhook
   */
  "POST /repos/:owner/:repo/hooks/:hook_id/tests": {
    parameters: ReposTestPushWebhookEndpoint;
    request: ReposTestPushWebhookRequestOptions;
    response: OctokitResponse<never | ReposTestPushWebhookResponse404Data>;
  };
  /**
   * @see https://developer.github.com/v3/issues/#create-an-issue
   */
  "POST /repos/:owner/:repo/issues": {
    parameters: IssuesCreateEndpoint;
    request: IssuesCreateRequestOptions;
    response: OctokitResponse<
      | IssuesCreateResponseData
      | IssuesCreateResponse403Data
      | IssuesCreateResponse404Data
      | IssuesCreateResponse410Data
      | IssuesCreateResponse422Data
      | IssuesCreateResponse503Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/assignees/#add-assignees-to-an-issue
   */
  "POST /repos/:owner/:repo/issues/:issue_number/assignees": {
    parameters: IssuesAddAssigneesEndpoint;
    request: IssuesAddAssigneesRequestOptions;
    response: OctokitResponse<IssuesAddAssigneesResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/issues/comments/#create-an-issue-comment
   */
  "POST /repos/:owner/:repo/issues/:issue_number/comments": {
    parameters: IssuesCreateCommentEndpoint;
    request: IssuesCreateCommentRequestOptions;
    response: OctokitResponse<
      | IssuesCreateCommentResponseData
      | IssuesCreateCommentResponse403Data
      | IssuesCreateCommentResponse404Data
      | IssuesCreateCommentResponse410Data
      | IssuesCreateCommentResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/labels/#add-labels-to-an-issue
   */
  "POST /repos/:owner/:repo/issues/:issue_number/labels": {
    parameters: IssuesAddLabelsEndpoint;
    request: IssuesAddLabelsRequestOptions;
    response: OctokitResponse<
      | IssuesAddLabelsResponseData
      | IssuesAddLabelsResponse410Data
      | IssuesAddLabelsResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#create-reaction-for-an-issue
   */
  "POST /repos/:owner/:repo/issues/:issue_number/reactions": {
    parameters: ReactionsCreateForIssueEndpoint;
    request: ReactionsCreateForIssueRequestOptions;
    response: OctokitResponse<
      | ReactionsCreateForIssueResponseData
      | ReactionsCreateForIssueResponse415Data
      | ReactionsCreateForIssueResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#create-reaction-for-an-issue-comment
   */
  "POST /repos/:owner/:repo/issues/comments/:comment_id/reactions": {
    parameters: ReactionsCreateForIssueCommentEndpoint;
    request: ReactionsCreateForIssueCommentRequestOptions;
    response: OctokitResponse<
      | ReactionsCreateForIssueCommentResponseData
      | ReactionsCreateForIssueCommentResponse201Data
      | ReactionsCreateForIssueCommentResponse415Data
      | ReactionsCreateForIssueCommentResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/keys/#create-a-deploy-key
   */
  "POST /repos/:owner/:repo/keys": {
    parameters: ReposCreateDeployKeyEndpoint;
    request: ReposCreateDeployKeyRequestOptions;
    response: OctokitResponse<
      ReposCreateDeployKeyResponseData | ReposCreateDeployKeyResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/labels/#create-a-label
   */
  "POST /repos/:owner/:repo/labels": {
    parameters: IssuesCreateLabelEndpoint;
    request: IssuesCreateLabelRequestOptions;
    response: OctokitResponse<
      | IssuesCreateLabelResponseData
      | IssuesCreateLabelResponse404Data
      | IssuesCreateLabelResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/merging/#merge-a-branch
   */
  "POST /repos/:owner/:repo/merges": {
    parameters: ReposMergeEndpoint;
    request: ReposMergeRequestOptions;
    response: OctokitResponse<
      | ReposMergeResponseData
      | ReposMergeResponse403Data
      | ReposMergeResponse404Data
      | ReposMergeResponse409Data
      | ReposMergeResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/milestones/#create-a-milestone
   */
  "POST /repos/:owner/:repo/milestones": {
    parameters: IssuesCreateMilestoneEndpoint;
    request: IssuesCreateMilestoneRequestOptions;
    response: OctokitResponse<
      | IssuesCreateMilestoneResponseData
      | IssuesCreateMilestoneResponse404Data
      | IssuesCreateMilestoneResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/pages/#create-a-github-pages-site
   */
  "POST /repos/:owner/:repo/pages": {
    parameters: ReposCreatePagesSiteEndpoint;
    request: ReposCreatePagesSiteRequestOptions;
    response: OctokitResponse<
      | ReposCreatePagesSiteResponseData
      | ReposCreatePagesSiteResponse409Data
      | ReposCreatePagesSiteResponse415Data
      | ReposCreatePagesSiteResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/pages/#request-a-github-pages-build
   */
  "POST /repos/:owner/:repo/pages/builds": {
    parameters: ReposRequestPagesBuildEndpoint;
    request: ReposRequestPagesBuildRequestOptions;
    response: OctokitResponse<ReposRequestPagesBuildResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/projects/#create-a-repository-project
   */
  "POST /repos/:owner/:repo/projects": {
    parameters: ProjectsCreateForRepoEndpoint;
    request: ProjectsCreateForRepoRequestOptions;
    response: OctokitResponse<
      | ProjectsCreateForRepoResponseData
      | ProjectsCreateForRepoResponse401Data
      | ProjectsCreateForRepoResponse403Data
      | ProjectsCreateForRepoResponse404Data
      | ProjectsCreateForRepoResponse410Data
      | ProjectsCreateForRepoResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/pulls/#create-a-pull-request
   */
  "POST /repos/:owner/:repo/pulls": {
    parameters: PullsCreateEndpoint;
    request: PullsCreateRequestOptions;
    response: OctokitResponse<
      | PullsCreateResponseData
      | PullsCreateResponse403Data
      | PullsCreateResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/pulls/comments/#create-a-review-comment-for-a-pull-request
   */
  "POST /repos/:owner/:repo/pulls/:pull_number/comments": {
    parameters: PullsCreateReviewCommentEndpoint;
    request: PullsCreateReviewCommentRequestOptions;
    response: OctokitResponse<
      | PullsCreateReviewCommentResponseData
      | PullsCreateReviewCommentResponse403Data
      | PullsCreateReviewCommentResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/pulls/comments/#create-a-reply-for-a-review-comment
   */
  "POST /repos/:owner/:repo/pulls/:pull_number/comments/:comment_id/replies": {
    parameters: PullsCreateReplyForReviewCommentEndpoint;
    request: PullsCreateReplyForReviewCommentRequestOptions;
    response: OctokitResponse<
      | PullsCreateReplyForReviewCommentResponseData
      | PullsCreateReplyForReviewCommentResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/pulls/review_requests/#request-reviewers-for-a-pull-request
   */
  "POST /repos/:owner/:repo/pulls/:pull_number/requested_reviewers": {
    parameters: PullsRequestReviewersEndpoint;
    request: PullsRequestReviewersRequestOptions;
    response: OctokitResponse<
      | PullsRequestReviewersResponseData
      | PullsRequestReviewersResponse403Data
      | never
    >;
  };
  /**
   * @see https://developer.github.com/v3/pulls/reviews/#create-a-review-for-a-pull-request
   */
  "POST /repos/:owner/:repo/pulls/:pull_number/reviews": {
    parameters: PullsCreateReviewEndpoint;
    request: PullsCreateReviewRequestOptions;
    response: OctokitResponse<
      | PullsCreateReviewResponseData
      | PullsCreateReviewResponse403Data
      | PullsCreateReviewResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/pulls/reviews/#submit-a-review-for-a-pull-request
   */
  "POST /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/events": {
    parameters: PullsSubmitReviewEndpoint;
    request: PullsSubmitReviewRequestOptions;
    response: OctokitResponse<
      | PullsSubmitReviewResponseData
      | PullsSubmitReviewResponse403Data
      | PullsSubmitReviewResponse404Data
      | PullsSubmitReviewResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#create-reaction-for-a-pull-request-review-comment
   */
  "POST /repos/:owner/:repo/pulls/comments/:comment_id/reactions": {
    parameters: ReactionsCreateForPullRequestReviewCommentEndpoint;
    request: ReactionsCreateForPullRequestReviewCommentRequestOptions;
    response: OctokitResponse<
      | ReactionsCreateForPullRequestReviewCommentResponseData
      | ReactionsCreateForPullRequestReviewCommentResponse201Data
      | ReactionsCreateForPullRequestReviewCommentResponse415Data
      | ReactionsCreateForPullRequestReviewCommentResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/releases/#create-a-release
   */
  "POST /repos/:owner/:repo/releases": {
    parameters: ReposCreateReleaseEndpoint;
    request: ReposCreateReleaseRequestOptions;
    response: OctokitResponse<
      ReposCreateReleaseResponseData | ReposCreateReleaseResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/releases/#upload-a-release-asset
   */
  "POST /repos/:owner/:repo/releases/:release_id/assets{?name,label}": {
    parameters: ReposUploadReleaseAssetEndpoint;
    request: ReposUploadReleaseAssetRequestOptions;
    response: OctokitResponse<ReposUploadReleaseAssetResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/statuses/#create-a-commit-status
   */
  "POST /repos/:owner/:repo/statuses/:sha": {
    parameters: ReposCreateCommitStatusEndpoint;
    request: ReposCreateCommitStatusRequestOptions;
    response: OctokitResponse<ReposCreateCommitStatusResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/#transfer-a-repository
   */
  "POST /repos/:owner/:repo/transfer": {
    parameters: ReposTransferEndpoint;
    request: ReposTransferRequestOptions;
    response: OctokitResponse<ReposTransferResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/#create-a-repository-using-a-template
   */
  "POST /repos/:template_owner/:template_repo/generate": {
    parameters: ReposCreateUsingTemplateEndpoint;
    request: ReposCreateUsingTemplateRequestOptions;
    response: OctokitResponse<ReposCreateUsingTemplateResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/scim/#provision-a-scim-enterprise-group-and-invite-users
   */
  "POST /scim/v2/enterprises/:enterprise/Groups": {
    parameters: EnterpriseAdminProvisionAndInviteEnterpriseGroupEndpoint;
    request: EnterpriseAdminProvisionAndInviteEnterpriseGroupRequestOptions;
    response: OctokitResponse<
      EnterpriseAdminProvisionAndInviteEnterpriseGroupResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/scim/#provision-and-invite-a-scim-enterprise-user
   */
  "POST /scim/v2/enterprises/:enterprise/Users": {
    parameters: EnterpriseAdminProvisionAndInviteEnterpriseUserEndpoint;
    request: EnterpriseAdminProvisionAndInviteEnterpriseUserRequestOptions;
    response: OctokitResponse<
      EnterpriseAdminProvisionAndInviteEnterpriseUserResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/scim/#provision-and-invite-a-scim-user
   */
  "POST /scim/v2/organizations/:org/Users": {
    parameters: ScimProvisionAndInviteUserEndpoint;
    request: ScimProvisionAndInviteUserRequestOptions;
    response: OctokitResponse<
      | ScimProvisionAndInviteUserResponseData
      | never
      | ScimProvisionAndInviteUserResponse400Data
      | ScimProvisionAndInviteUserResponse400Data
      | ScimProvisionAndInviteUserResponse403Data
      | ScimProvisionAndInviteUserResponse403Data
      | ScimProvisionAndInviteUserResponse404Data
      | ScimProvisionAndInviteUserResponse404Data
      | ScimProvisionAndInviteUserResponse409Data
      | ScimProvisionAndInviteUserResponse409Data
      | ScimProvisionAndInviteUserResponse500Data
      | ScimProvisionAndInviteUserResponse500Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/discussions/#create-a-discussion-legacy
   */
  "POST /teams/:team_id/discussions": {
    parameters: TeamsCreateDiscussionLegacyEndpoint;
    request: TeamsCreateDiscussionLegacyRequestOptions;
    response: OctokitResponse<TeamsCreateDiscussionLegacyResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/teams/discussion_comments/#create-a-discussion-comment-legacy
   */
  "POST /teams/:team_id/discussions/:discussion_number/comments": {
    parameters: TeamsCreateDiscussionCommentLegacyEndpoint;
    request: TeamsCreateDiscussionCommentLegacyRequestOptions;
    response: OctokitResponse<TeamsCreateDiscussionCommentLegacyResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment-legacy
   */
  "POST /teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions": {
    parameters: ReactionsCreateForTeamDiscussionCommentLegacyEndpoint;
    request: ReactionsCreateForTeamDiscussionCommentLegacyRequestOptions;
    response: OctokitResponse<
      ReactionsCreateForTeamDiscussionCommentLegacyResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-legacy
   */
  "POST /teams/:team_id/discussions/:discussion_number/reactions": {
    parameters: ReactionsCreateForTeamDiscussionLegacyEndpoint;
    request: ReactionsCreateForTeamDiscussionLegacyRequestOptions;
    response: OctokitResponse<
      ReactionsCreateForTeamDiscussionLegacyResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/emails/#add-an-email-address-for-the-authenticated-user
   */
  "POST /user/emails": {
    parameters: UsersAddEmailForAuthenticatedEndpoint;
    request: UsersAddEmailForAuthenticatedRequestOptions;
    response: OctokitResponse<
      | UsersAddEmailForAuthenticatedResponseData
      | never
      | UsersAddEmailForAuthenticatedResponse401Data
      | UsersAddEmailForAuthenticatedResponse403Data
      | UsersAddEmailForAuthenticatedResponse404Data
      | UsersAddEmailForAuthenticatedResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/gpg_keys/#create-a-gpg-key-for-the-authenticated-user
   */
  "POST /user/gpg_keys": {
    parameters: UsersCreateGpgKeyForAuthenticatedEndpoint;
    request: UsersCreateGpgKeyForAuthenticatedRequestOptions;
    response: OctokitResponse<
      | UsersCreateGpgKeyForAuthenticatedResponseData
      | never
      | UsersCreateGpgKeyForAuthenticatedResponse401Data
      | UsersCreateGpgKeyForAuthenticatedResponse403Data
      | UsersCreateGpgKeyForAuthenticatedResponse404Data
      | UsersCreateGpgKeyForAuthenticatedResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/keys/#create-a-public-ssh-key-for-the-authenticated-user
   */
  "POST /user/keys": {
    parameters: UsersCreatePublicSshKeyForAuthenticatedEndpoint;
    request: UsersCreatePublicSshKeyForAuthenticatedRequestOptions;
    response: OctokitResponse<
      | UsersCreatePublicSshKeyForAuthenticatedResponseData
      | never
      | UsersCreatePublicSshKeyForAuthenticatedResponse401Data
      | UsersCreatePublicSshKeyForAuthenticatedResponse403Data
      | UsersCreatePublicSshKeyForAuthenticatedResponse404Data
      | UsersCreatePublicSshKeyForAuthenticatedResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/migrations/users/#start-a-user-migration
   */
  "POST /user/migrations": {
    parameters: MigrationsStartForAuthenticatedUserEndpoint;
    request: MigrationsStartForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | MigrationsStartForAuthenticatedUserResponseData
      | never
      | MigrationsStartForAuthenticatedUserResponse401Data
      | MigrationsStartForAuthenticatedUserResponse403Data
      | MigrationsStartForAuthenticatedUserResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/projects/#create-a-user-project
   */
  "POST /user/projects": {
    parameters: ProjectsCreateForAuthenticatedUserEndpoint;
    request: ProjectsCreateForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | ProjectsCreateForAuthenticatedUserResponseData
      | never
      | ProjectsCreateForAuthenticatedUserResponse401Data
      | ProjectsCreateForAuthenticatedUserResponse403Data
      | ProjectsCreateForAuthenticatedUserResponse415Data
      | ProjectsCreateForAuthenticatedUserResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/#create-a-repository-for-the-authenticated-user
   */
  "POST /user/repos": {
    parameters: ReposCreateForAuthenticatedUserEndpoint;
    request: ReposCreateForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | ReposCreateForAuthenticatedUserResponseData
      | never
      | ReposCreateForAuthenticatedUserResponse400Data
      | ReposCreateForAuthenticatedUserResponse400Data
      | ReposCreateForAuthenticatedUserResponse401Data
      | ReposCreateForAuthenticatedUserResponse403Data
      | ReposCreateForAuthenticatedUserResponse404Data
      | ReposCreateForAuthenticatedUserResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/#suspend-an-app-installation
   */
  "PUT /app/installations/:installation_id/suspended": {
    parameters: AppsSuspendInstallationEndpoint;
    request: AppsSuspendInstallationRequestOptions;
    response: OctokitResponse<never | AppsSuspendInstallationResponse404Data>;
  };
  /**
   * @see https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app
   */
  "PUT /authorizations/clients/:client_id": {
    parameters: OauthAuthorizationsGetOrCreateAuthorizationForAppEndpoint;
    request: OauthAuthorizationsGetOrCreateAuthorizationForAppRequestOptions;
    response: OctokitResponse<
      | OauthAuthorizationsGetOrCreateAuthorizationForAppResponseData
      | OauthAuthorizationsGetOrCreateAuthorizationForAppResponse201Data
      | never
      | OauthAuthorizationsGetOrCreateAuthorizationForAppResponse401Data
      | OauthAuthorizationsGetOrCreateAuthorizationForAppResponse403Data
      | OauthAuthorizationsGetOrCreateAuthorizationForAppResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint
   */
  "PUT /authorizations/clients/:client_id/:fingerprint": {
    parameters: OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintEndpoint;
    request: OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRequestOptions;
    response: OctokitResponse<
      | OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponseData
      | OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponse201Data
      | OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/actions/#set-organization-access-to-a-self-hosted-runner-group-in-an-enterprise
   */
  "PUT /enterprises/:enterprise/actions/runner-groups/:runner_group_id/organizations": {
    parameters: EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseEndpoint;
    request: EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/actions/#add-organization-access-to-a-self-hosted-runner-group-in-an-enterprise
   */
  "PUT /enterprises/:enterprise/actions/runner-groups/:runner_group_id/organizations/:org_id": {
    parameters: EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseEndpoint;
    request: EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/actions/#set-self-hosted-runners-in-a-group-for-an-enterprise
   */
  "PUT /enterprises/:enterprise/actions/runner-groups/:runner_group_id/runners": {
    parameters: EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseEndpoint;
    request: EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/actions/#add-a-self-hosted-runner-to-a-group-for-an-enterprise
   */
  "PUT /enterprises/:enterprise/actions/runner-groups/:runner_group_id/runners/:runner_id": {
    parameters: EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseEndpoint;
    request: EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/gists/#star-a-gist
   */
  "PUT /gists/:gist_id/star": {
    parameters: GistsStarEndpoint;
    request: GistsStarRequestOptions;
    response: OctokitResponse<
      never | never | GistsStarResponse403Data | GistsStarResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/activity/notifications/#mark-notifications-as-read
   */
  "PUT /notifications": {
    parameters: ActivityMarkNotificationsAsReadEndpoint;
    request: ActivityMarkNotificationsAsReadRequestOptions;
    response: OctokitResponse<
      | ActivityMarkNotificationsAsReadResponseData
      | never
      | never
      | ActivityMarkNotificationsAsReadResponse401Data
      | ActivityMarkNotificationsAsReadResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/activity/notifications/#set-a-thread-subscription
   */
  "PUT /notifications/threads/:thread_id/subscription": {
    parameters: ActivitySetThreadSubscriptionEndpoint;
    request: ActivitySetThreadSubscriptionRequestOptions;
    response: OctokitResponse<
      | ActivitySetThreadSubscriptionResponseData
      | never
      | ActivitySetThreadSubscriptionResponse401Data
      | ActivitySetThreadSubscriptionResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runner-groups/#set-repository-access-to-a-self-hosted-runner-group-in-an-organization
   */
  "PUT /orgs/:org/actions/runner-groups/:runner_group_id/repositories": {
    parameters: ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgEndpoint;
    request: ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runner-groups/#add-repository-acess-to-a-self-hosted-runner-group-in-an-organization
   */
  "PUT /orgs/:org/actions/runner-groups/:runner_group_id/repositories/:repository_id": {
    parameters: ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgEndpoint;
    request: ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runner-groups/#set-self-hosted-runners-in-a-group-for-an-organization
   */
  "PUT /orgs/:org/actions/runner-groups/:runner_group_id/runners": {
    parameters: ActionsSetSelfHostedRunnersInGroupForOrgEndpoint;
    request: ActionsSetSelfHostedRunnersInGroupForOrgRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/actions/self-hosted-runner-groups/#add-a-self-hosted-runner-to-a-group-for-an-organization
   */
  "PUT /orgs/:org/actions/runner-groups/:runner_group_id/runners/:runner_id": {
    parameters: ActionsAddSelfHostedRunnerToGroupForOrgEndpoint;
    request: ActionsAddSelfHostedRunnerToGroupForOrgRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/actions/secrets/#create-or-update-an-organization-secret
   */
  "PUT /orgs/:org/actions/secrets/:secret_name": {
    parameters: ActionsCreateOrUpdateOrgSecretEndpoint;
    request: ActionsCreateOrUpdateOrgSecretRequestOptions;
    response: OctokitResponse<never | never>;
  };
  /**
   * @see https://developer.github.com/v3/actions/secrets/#set-selected-repositories-for-an-organization-secret
   */
  "PUT /orgs/:org/actions/secrets/:secret_name/repositories": {
    parameters: ActionsSetSelectedReposForOrgSecretEndpoint;
    request: ActionsSetSelectedReposForOrgSecretRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/actions/secrets/#add-selected-repository-to-an-organization-secret
   */
  "PUT /orgs/:org/actions/secrets/:secret_name/repositories/:repository_id": {
    parameters: ActionsAddSelectedRepoToOrgSecretEndpoint;
    request: ActionsAddSelectedRepoToOrgSecretRequestOptions;
    response: OctokitResponse<never | never>;
  };
  /**
   * @see https://developer.github.com/v3/orgs/blocking/#block-a-user-from-an-organization
   */
  "PUT /orgs/:org/blocks/:username": {
    parameters: OrgsBlockUserEndpoint;
    request: OrgsBlockUserRequestOptions;
    response: OctokitResponse<never | OrgsBlockUserResponse422Data>;
  };
  /**
   * @see https://developer.github.com/v3/interactions/orgs/#set-interaction-restrictions-for-an-organization
   */
  "PUT /orgs/:org/interaction-limits": {
    parameters: InteractionsSetRestrictionsForOrgEndpoint;
    request: InteractionsSetRestrictionsForOrgRequestOptions;
    response: OctokitResponse<
      | InteractionsSetRestrictionsForOrgResponseData
      | InteractionsSetRestrictionsForOrgResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/orgs/members/#set-organization-membership-for-a-user
   */
  "PUT /orgs/:org/memberships/:username": {
    parameters: OrgsSetMembershipForUserEndpoint;
    request: OrgsSetMembershipForUserRequestOptions;
    response: OctokitResponse<
      | OrgsSetMembershipForUserResponseData
      | OrgsSetMembershipForUserResponse403Data
      | OrgsSetMembershipForUserResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/orgs/outside_collaborators/#convert-an-organization-member-to-outside-collaborator
   */
  "PUT /orgs/:org/outside_collaborators/:username": {
    parameters: OrgsConvertMemberToOutsideCollaboratorEndpoint;
    request: OrgsConvertMemberToOutsideCollaboratorRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | OrgsConvertMemberToOutsideCollaboratorResponse403Data
      | OrgsConvertMemberToOutsideCollaboratorResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/orgs/members/#set-public-organization-membership-for-the-authenticated-user
   */
  "PUT /orgs/:org/public_members/:username": {
    parameters: OrgsSetPublicMembershipForAuthenticatedUserEndpoint;
    request: OrgsSetPublicMembershipForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      never | OrgsSetPublicMembershipForAuthenticatedUserResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/members/#add-or-update-team-membership-for-a-user
   */
  "PUT /orgs/:org/teams/:team_slug/memberships/:username": {
    parameters: TeamsAddOrUpdateMembershipForUserInOrgEndpoint;
    request: TeamsAddOrUpdateMembershipForUserInOrgRequestOptions;
    response: OctokitResponse<
      | TeamsAddOrUpdateMembershipForUserInOrgResponseData
      | never
      | TeamsAddOrUpdateMembershipForUserInOrgResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/#add-or-update-team-project-permissions
   */
  "PUT /orgs/:org/teams/:team_slug/projects/:project_id": {
    parameters: TeamsAddOrUpdateProjectPermissionsInOrgEndpoint;
    request: TeamsAddOrUpdateProjectPermissionsInOrgRequestOptions;
    response: OctokitResponse<
      never | TeamsAddOrUpdateProjectPermissionsInOrgResponse403Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/#add-or-update-team-repository-permissions
   */
  "PUT /orgs/:org/teams/:team_slug/repos/:owner/:repo": {
    parameters: TeamsAddOrUpdateRepoPermissionsInOrgEndpoint;
    request: TeamsAddOrUpdateRepoPermissionsInOrgRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/projects/collaborators/#add-project-collaborator
   */
  "PUT /projects/:project_id/collaborators/:username": {
    parameters: ProjectsAddCollaboratorEndpoint;
    request: ProjectsAddCollaboratorRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | ProjectsAddCollaboratorResponse401Data
      | ProjectsAddCollaboratorResponse403Data
      | ProjectsAddCollaboratorResponse404Data
      | ProjectsAddCollaboratorResponse415Data
      | ProjectsAddCollaboratorResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/actions/secrets/#create-or-update-a-repository-secret
   */
  "PUT /repos/:owner/:repo/actions/secrets/:secret_name": {
    parameters: ActionsCreateOrUpdateRepoSecretEndpoint;
    request: ActionsCreateOrUpdateRepoSecretRequestOptions;
    response: OctokitResponse<never | never>;
  };
  /**
   * @see https://developer.github.com/v3/repos/#enable-automated-security-fixes
   */
  "PUT /repos/:owner/:repo/automated-security-fixes": {
    parameters: ReposEnableAutomatedSecurityFixesEndpoint;
    request: ReposEnableAutomatedSecurityFixesRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#update-branch-protection
   */
  "PUT /repos/:owner/:repo/branches/:branch/protection": {
    parameters: ReposUpdateBranchProtectionEndpoint;
    request: ReposUpdateBranchProtectionRequestOptions;
    response: OctokitResponse<
      | ReposUpdateBranchProtectionResponseData
      | ReposUpdateBranchProtectionResponse403Data
      | ReposUpdateBranchProtectionResponse404Data
      | ReposUpdateBranchProtectionResponse415Data
      | ReposUpdateBranchProtectionResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#set-status-check-contexts
   */
  "PUT /repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts": {
    parameters: ReposSetStatusCheckContextsEndpoint;
    request: ReposSetStatusCheckContextsRequestOptions;
    response: OctokitResponse<
      | ReposSetStatusCheckContextsResponseData
      | ReposSetStatusCheckContextsResponse404Data
      | ReposSetStatusCheckContextsResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#set-app-access-restrictions
   */
  "PUT /repos/:owner/:repo/branches/:branch/protection/restrictions/apps": {
    parameters: ReposSetAppAccessRestrictionsEndpoint;
    request: ReposSetAppAccessRestrictionsRequestOptions;
    response: OctokitResponse<
      | ReposSetAppAccessRestrictionsResponseData
      | ReposSetAppAccessRestrictionsResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#set-team-access-restrictions
   */
  "PUT /repos/:owner/:repo/branches/:branch/protection/restrictions/teams": {
    parameters: ReposSetTeamAccessRestrictionsEndpoint;
    request: ReposSetTeamAccessRestrictionsRequestOptions;
    response: OctokitResponse<
      | ReposSetTeamAccessRestrictionsResponseData
      | ReposSetTeamAccessRestrictionsResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/branches/#set-user-access-restrictions
   */
  "PUT /repos/:owner/:repo/branches/:branch/protection/restrictions/users": {
    parameters: ReposSetUserAccessRestrictionsEndpoint;
    request: ReposSetUserAccessRestrictionsRequestOptions;
    response: OctokitResponse<
      | ReposSetUserAccessRestrictionsResponseData
      | ReposSetUserAccessRestrictionsResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/collaborators/#add-a-repository-collaborator
   */
  "PUT /repos/:owner/:repo/collaborators/:username": {
    parameters: ReposAddCollaboratorEndpoint;
    request: ReposAddCollaboratorRequestOptions;
    response: OctokitResponse<
      | ReposAddCollaboratorResponseData
      | never
      | ReposAddCollaboratorResponse403Data
      | ReposAddCollaboratorResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/contents/#create-or-update-file-contents
   */
  "PUT /repos/:owner/:repo/contents/:path": {
    parameters: ReposCreateOrUpdateFileContentsEndpoint;
    request: ReposCreateOrUpdateFileContentsRequestOptions;
    response: OctokitResponse<
      | ReposCreateOrUpdateFileContentsResponseData
      | ReposCreateOrUpdateFileContentsResponse201Data
      | ReposCreateOrUpdateFileContentsResponse404Data
      | ReposCreateOrUpdateFileContentsResponse409Data
      | ReposCreateOrUpdateFileContentsResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/migrations/source_imports/#start-an-import
   */
  "PUT /repos/:owner/:repo/import": {
    parameters: MigrationsStartImportEndpoint;
    request: MigrationsStartImportRequestOptions;
    response: OctokitResponse<
      | MigrationsStartImportResponseData
      | MigrationsStartImportResponse404Data
      | MigrationsStartImportResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/interactions/repos/#set-interaction-restrictions-for-a-repository
   */
  "PUT /repos/:owner/:repo/interaction-limits": {
    parameters: InteractionsSetRestrictionsForRepoEndpoint;
    request: InteractionsSetRestrictionsForRepoRequestOptions;
    response: OctokitResponse<InteractionsSetRestrictionsForRepoResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/issues/labels/#set-labels-for-an-issue
   */
  "PUT /repos/:owner/:repo/issues/:issue_number/labels": {
    parameters: IssuesSetLabelsEndpoint;
    request: IssuesSetLabelsRequestOptions;
    response: OctokitResponse<
      | IssuesSetLabelsResponseData
      | IssuesSetLabelsResponse410Data
      | IssuesSetLabelsResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/issues/#lock-an-issue
   */
  "PUT /repos/:owner/:repo/issues/:issue_number/lock": {
    parameters: IssuesLockEndpoint;
    request: IssuesLockRequestOptions;
    response: OctokitResponse<
      | never
      | IssuesLockResponse403Data
      | IssuesLockResponse404Data
      | IssuesLockResponse410Data
      | IssuesLockResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/activity/notifications/#mark-repository-notifications-as-read
   */
  "PUT /repos/:owner/:repo/notifications": {
    parameters: ActivityMarkRepoNotificationsAsReadEndpoint;
    request: ActivityMarkRepoNotificationsAsReadRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/repos/pages/#update-information-about-a-github-pages-site
   */
  "PUT /repos/:owner/:repo/pages": {
    parameters: ReposUpdateInformationAboutPagesSiteEndpoint;
    request: ReposUpdateInformationAboutPagesSiteRequestOptions;
    response: OctokitResponse<
      | never
      | ReposUpdateInformationAboutPagesSiteResponse400Data
      | ReposUpdateInformationAboutPagesSiteResponse400Data
      | ReposUpdateInformationAboutPagesSiteResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/pulls/#merge-a-pull-request
   */
  "PUT /repos/:owner/:repo/pulls/:pull_number/merge": {
    parameters: PullsMergeEndpoint;
    request: PullsMergeRequestOptions;
    response: OctokitResponse<
      | PullsMergeResponseData
      | PullsMergeResponse403Data
      | PullsMergeResponse404Data
      | PullsMergeResponse405Data
      | PullsMergeResponse409Data
      | PullsMergeResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/pulls/reviews/#update-a-review-for-a-pull-request
   */
  "PUT /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id": {
    parameters: PullsUpdateReviewEndpoint;
    request: PullsUpdateReviewRequestOptions;
    response: OctokitResponse<
      PullsUpdateReviewResponseData | PullsUpdateReviewResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/pulls/reviews/#dismiss-a-review-for-a-pull-request
   */
  "PUT /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/dismissals": {
    parameters: PullsDismissReviewEndpoint;
    request: PullsDismissReviewRequestOptions;
    response: OctokitResponse<
      | PullsDismissReviewResponseData
      | PullsDismissReviewResponse404Data
      | PullsDismissReviewResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/pulls/#update-a-pull-request-branch
   */
  "PUT /repos/:owner/:repo/pulls/:pull_number/update-branch": {
    parameters: PullsUpdateBranchEndpoint;
    request: PullsUpdateBranchRequestOptions;
    response: OctokitResponse<
      | PullsUpdateBranchResponseData
      | PullsUpdateBranchResponse403Data
      | PullsUpdateBranchResponse415Data
      | PullsUpdateBranchResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/activity/watching/#set-a-repository-subscription
   */
  "PUT /repos/:owner/:repo/subscription": {
    parameters: ActivitySetRepoSubscriptionEndpoint;
    request: ActivitySetRepoSubscriptionRequestOptions;
    response: OctokitResponse<ActivitySetRepoSubscriptionResponseData>;
  };
  /**
   * @see https://developer.github.com/v3/repos/#replace-all-repository-topics
   */
  "PUT /repos/:owner/:repo/topics": {
    parameters: ReposReplaceAllTopicsEndpoint;
    request: ReposReplaceAllTopicsRequestOptions;
    response: OctokitResponse<
      | ReposReplaceAllTopicsResponseData
      | ReposReplaceAllTopicsResponse404Data
      | ReposReplaceAllTopicsResponse415Data
      | ReposReplaceAllTopicsResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/repos/#enable-vulnerability-alerts
   */
  "PUT /repos/:owner/:repo/vulnerability-alerts": {
    parameters: ReposEnableVulnerabilityAlertsEndpoint;
    request: ReposEnableVulnerabilityAlertsRequestOptions;
    response: OctokitResponse<never>;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/scim/#set-scim-information-for-a-provisioned-enterprise-group
   */
  "PUT /scim/v2/enterprises/:enterprise/Groups/:scim_group_id": {
    parameters: EnterpriseAdminSetInformationForProvisionedEnterpriseGroupEndpoint;
    request: EnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequestOptions;
    response: OctokitResponse<
      EnterpriseAdminSetInformationForProvisionedEnterpriseGroupResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/enterprise-admin/scim/#set-scim-information-for-a-provisioned-enterprise-user
   */
  "PUT /scim/v2/enterprises/:enterprise/Users/:scim_user_id": {
    parameters: EnterpriseAdminSetInformationForProvisionedEnterpriseUserEndpoint;
    request: EnterpriseAdminSetInformationForProvisionedEnterpriseUserRequestOptions;
    response: OctokitResponse<
      EnterpriseAdminSetInformationForProvisionedEnterpriseUserResponseData
    >;
  };
  /**
   * @see https://developer.github.com/v3/scim/#set-scim-information-for-a-provisioned-user
   */
  "PUT /scim/v2/organizations/:org/Users/:scim_user_id": {
    parameters: ScimSetInformationForProvisionedUserEndpoint;
    request: ScimSetInformationForProvisionedUserRequestOptions;
    response: OctokitResponse<
      | ScimSetInformationForProvisionedUserResponseData
      | never
      | ScimSetInformationForProvisionedUserResponse403Data
      | ScimSetInformationForProvisionedUserResponse403Data
      | ScimSetInformationForProvisionedUserResponse404Data
      | ScimSetInformationForProvisionedUserResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/members/#add-team-member-legacy
   */
  "PUT /teams/:team_id/members/:username": {
    parameters: TeamsAddMemberLegacyEndpoint;
    request: TeamsAddMemberLegacyRequestOptions;
    response: OctokitResponse<
      | never
      | TeamsAddMemberLegacyResponse403Data
      | never
      | TeamsAddMemberLegacyResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/members/#add-or-update-team-membership-for-a-user-legacy
   */
  "PUT /teams/:team_id/memberships/:username": {
    parameters: TeamsAddOrUpdateMembershipForUserLegacyEndpoint;
    request: TeamsAddOrUpdateMembershipForUserLegacyRequestOptions;
    response: OctokitResponse<
      | TeamsAddOrUpdateMembershipForUserLegacyResponseData
      | never
      | TeamsAddOrUpdateMembershipForUserLegacyResponse404Data
      | TeamsAddOrUpdateMembershipForUserLegacyResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/#add-or-update-team-project-permissions-legacy
   */
  "PUT /teams/:team_id/projects/:project_id": {
    parameters: TeamsAddOrUpdateProjectPermissionsLegacyEndpoint;
    request: TeamsAddOrUpdateProjectPermissionsLegacyRequestOptions;
    response: OctokitResponse<
      | never
      | TeamsAddOrUpdateProjectPermissionsLegacyResponse403Data
      | TeamsAddOrUpdateProjectPermissionsLegacyResponse404Data
      | TeamsAddOrUpdateProjectPermissionsLegacyResponse415Data
      | TeamsAddOrUpdateProjectPermissionsLegacyResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/teams/#add-or-update-team-repository-permissions-legacy
   */
  "PUT /teams/:team_id/repos/:owner/:repo": {
    parameters: TeamsAddOrUpdateRepoPermissionsLegacyEndpoint;
    request: TeamsAddOrUpdateRepoPermissionsLegacyRequestOptions;
    response: OctokitResponse<
      | never
      | TeamsAddOrUpdateRepoPermissionsLegacyResponse403Data
      | TeamsAddOrUpdateRepoPermissionsLegacyResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/blocking/#block-a-user
   */
  "PUT /user/blocks/:username": {
    parameters: UsersBlockEndpoint;
    request: UsersBlockRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | UsersBlockResponse401Data
      | UsersBlockResponse403Data
      | UsersBlockResponse404Data
      | UsersBlockResponse422Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/users/followers/#follow-a-user
   */
  "PUT /user/following/:username": {
    parameters: UsersFollowEndpoint;
    request: UsersFollowRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | UsersFollowResponse401Data
      | UsersFollowResponse403Data
      | UsersFollowResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/apps/installations/#add-a-repository-to-an-app-installation
   */
  "PUT /user/installations/:installation_id/repositories/:repository_id": {
    parameters: AppsAddRepoToInstallationEndpoint;
    request: AppsAddRepoToInstallationRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | AppsAddRepoToInstallationResponse403Data
      | AppsAddRepoToInstallationResponse404Data
    >;
  };
  /**
   * @see https://developer.github.com/v3/activity/starring/#star-a-repository-for-the-authenticated-user
   */
  "PUT /user/starred/:owner/:repo": {
    parameters: ActivityStarRepoForAuthenticatedUserEndpoint;
    request: ActivityStarRepoForAuthenticatedUserRequestOptions;
    response: OctokitResponse<
      | never
      | never
      | ActivityStarRepoForAuthenticatedUserResponse401Data
      | ActivityStarRepoForAuthenticatedUserResponse403Data
      | ActivityStarRepoForAuthenticatedUserResponse404Data
    >;
  };
}

type ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgEndpoint = {
  org: string;
  /**
   * Unique identifier of the self-hosted runner group.
   */
  runner_group_id: number;

  repository_id: number;
};

type ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgRequestOptions = {
  method: "PUT";
  url: "/orgs/:org/actions/runner-groups/:runner_group_id/repositories/:repository_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsAddSelectedRepoToOrgSecretEndpoint = {
  org: string;
  /**
   * secret_name parameter
   */
  secret_name: string;
  /**
   * repository_id parameter
   */
  repository_id: number;
};

type ActionsAddSelectedRepoToOrgSecretRequestOptions = {
  method: "PUT";
  url: "/orgs/:org/actions/secrets/:secret_name/repositories/:repository_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsAddSelfHostedRunnerToGroupForOrgEndpoint = {
  org: string;
  /**
   * Unique identifier of the self-hosted runner group.
   */
  runner_group_id: number;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runner_id: number;
};

type ActionsAddSelfHostedRunnerToGroupForOrgRequestOptions = {
  method: "PUT";
  url: "/orgs/:org/actions/runner-groups/:runner_group_id/runners/:runner_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsCancelWorkflowRunEndpoint = {
  owner: string;

  repo: string;

  run_id: number;
};

type ActionsCancelWorkflowRunRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/actions/runs/:run_id/cancel";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsCreateOrUpdateOrgSecretEndpoint = {
  org: string;
  /**
   * secret_name parameter
   */
  secret_name: string;
  /**
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://developer.github.com/v3/actions/secrets/#get-an-organization-public-key) endpoint.
   */
  encrypted_value?: string;
  /**
   * ID of the key you used to encrypt the secret.
   */
  key_id?: string;
  /**
   * Configures the access that repositories have to the organization secret. Can be one of:
   * \- `all` - All repositories in an organization can access the secret.
   * \- `private` - Private repositories in an organization can access the secret.
   * \- `selected` - Only specific repositories can access the secret.
   */
  visibility?: "all" | "private" | "selected";
  /**
   * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://developer.github.com/v3/actions/secrets/#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://developer.github.com/v3/actions/secrets/#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://developer.github.com/v3/actions/secrets/#remove-selected-repository-from-an-organization-secret) endpoints.
   */
  selected_repository_ids?: string[];
};

type ActionsCreateOrUpdateOrgSecretRequestOptions = {
  method: "PUT";
  url: "/orgs/:org/actions/secrets/:secret_name";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsCreateOrUpdateRepoSecretEndpoint = {
  owner: string;

  repo: string;
  /**
   * secret_name parameter
   */
  secret_name: string;
  /**
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://developer.github.com/v3/actions/secrets/#get-a-repository-public-key) endpoint.
   */
  encrypted_value?: string;
  /**
   * ID of the key you used to encrypt the secret.
   */
  key_id?: string;
};

type ActionsCreateOrUpdateRepoSecretRequestOptions = {
  method: "PUT";
  url: "/repos/:owner/:repo/actions/secrets/:secret_name";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsCreateRegistrationTokenForOrgEndpoint = {
  org: string;
};

type ActionsCreateRegistrationTokenForOrgRequestOptions = {
  method: "POST";
  url: "/orgs/:org/actions/runners/registration-token";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Authentication Token
 */
export interface ActionsCreateRegistrationTokenForOrgResponseData {
  /**
   * The token used for authentication
   */
  token: string;
  /**
   * The time this token expires
   */
  expires_at: string;
  permissions: {
    [k: string]: unknown;
  };
  /**
   * The repositories this token has access to
   */
  repositories: Repository[];
  single_file: string;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ActionsCreateRegistrationTokenForRepoEndpoint = {
  owner: string;

  repo: string;
};

type ActionsCreateRegistrationTokenForRepoRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/actions/runners/registration-token";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Authentication Token
 */
export interface ActionsCreateRegistrationTokenForRepoResponseData {
  /**
   * The token used for authentication
   */
  token: string;
  /**
   * The time this token expires
   */
  expires_at: string;
  permissions: {
    [k: string]: unknown;
  };
  /**
   * The repositories this token has access to
   */
  repositories: Repository[];
  single_file: string;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ActionsCreateRemoveTokenForOrgEndpoint = {
  org: string;
};

type ActionsCreateRemoveTokenForOrgRequestOptions = {
  method: "POST";
  url: "/orgs/:org/actions/runners/remove-token";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Authentication Token
 */
export interface ActionsCreateRemoveTokenForOrgResponseData {
  /**
   * The token used for authentication
   */
  token: string;
  /**
   * The time this token expires
   */
  expires_at: string;
  permissions: {
    [k: string]: unknown;
  };
  /**
   * The repositories this token has access to
   */
  repositories: Repository[];
  single_file: string;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ActionsCreateRemoveTokenForRepoEndpoint = {
  owner: string;

  repo: string;
};

type ActionsCreateRemoveTokenForRepoRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/actions/runners/remove-token";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Authentication Token
 */
export interface ActionsCreateRemoveTokenForRepoResponseData {
  /**
   * The token used for authentication
   */
  token: string;
  /**
   * The time this token expires
   */
  expires_at: string;
  permissions: {
    [k: string]: unknown;
  };
  /**
   * The repositories this token has access to
   */
  repositories: Repository[];
  single_file: string;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ActionsCreateSelfHostedRunnerGroupForOrgEndpoint = {
  org: string;
  /**
   * Name of the runner group.
   */
  name: string;
  /**
   * Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories. Can be one of: `all`, `selected`, or `private`.
   */
  visibility?: "selected" | "all" | "private";
  /**
   * List of repository IDs that can access the runner group.
   */
  selected_repository_ids?: number[];
  /**
   * List of runner IDs to add to the runner group.
   */
  runners?: number[];
};

type ActionsCreateSelfHostedRunnerGroupForOrgRequestOptions = {
  method: "POST";
  url: "/orgs/:org/actions/runner-groups";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ActionsCreateSelfHostedRunnerGroupForOrgResponseData {
  id: number;
  name: string;
  visibility: string;
  default: boolean;
  selected_repositories_url: string;
  runners_url: string;
  inherited: boolean;
}

type ActionsCreateWorkflowDispatchEndpoint = {
  owner: string;

  repo: string;

  workflow_id: number;
  /**
   * The reference of the workflow run. The reference can be a branch, tag, or a commit SHA.
   */
  ref: string;
  /**
   * Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.
   */
  inputs?: ActionsCreateWorkflowDispatchParamsInputs;
};

type ActionsCreateWorkflowDispatchRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/actions/workflows/:workflow_id/dispatches";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsDeleteArtifactEndpoint = {
  owner: string;

  repo: string;
  /**
   * artifact_id parameter
   */
  artifact_id: number;
};

type ActionsDeleteArtifactRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/actions/artifacts/:artifact_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsDeleteOrgSecretEndpoint = {
  org: string;
  /**
   * secret_name parameter
   */
  secret_name: string;
};

type ActionsDeleteOrgSecretRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/actions/secrets/:secret_name";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsDeleteRepoSecretEndpoint = {
  owner: string;

  repo: string;
  /**
   * secret_name parameter
   */
  secret_name: string;
};

type ActionsDeleteRepoSecretRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/actions/secrets/:secret_name";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsDeleteSelfHostedRunnerFromOrgEndpoint = {
  org: string;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runner_id: number;
};

type ActionsDeleteSelfHostedRunnerFromOrgRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/actions/runners/:runner_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsDeleteSelfHostedRunnerFromRepoEndpoint = {
  owner: string;

  repo: string;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runner_id: number;
};

type ActionsDeleteSelfHostedRunnerFromRepoRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/actions/runners/:runner_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsDeleteSelfHostedRunnerGroupFromOrgEndpoint = {
  org: string;
  /**
   * Unique identifier of the self-hosted runner group.
   */
  runner_group_id: number;
};

type ActionsDeleteSelfHostedRunnerGroupFromOrgRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/actions/runner-groups/:runner_group_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsDeleteWorkflowRunEndpoint = {
  owner: string;

  repo: string;

  run_id: number;
};

type ActionsDeleteWorkflowRunRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/actions/runs/:run_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsDeleteWorkflowRunLogsEndpoint = {
  owner: string;

  repo: string;

  run_id: number;
};

type ActionsDeleteWorkflowRunLogsRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/actions/runs/:run_id/logs";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsDownloadArtifactEndpoint = {
  owner: string;

  repo: string;
  /**
   * artifact_id parameter
   */
  artifact_id: number;
  /**
   * archive_format parameter
   */
  archive_format: string;
};

type ActionsDownloadArtifactRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/actions/artifacts/:artifact_id/:archive_format";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsDownloadJobLogsForWorkflowRunEndpoint = {
  owner: string;

  repo: string;
  /**
   * job_id parameter
   */
  job_id: number;
};

type ActionsDownloadJobLogsForWorkflowRunRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/actions/jobs/:job_id/logs";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsDownloadWorkflowRunLogsEndpoint = {
  owner: string;

  repo: string;

  run_id: number;
};

type ActionsDownloadWorkflowRunLogsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/actions/runs/:run_id/logs";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsGetArtifactEndpoint = {
  owner: string;

  repo: string;
  /**
   * artifact_id parameter
   */
  artifact_id: number;
};

type ActionsGetArtifactRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/actions/artifacts/:artifact_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * An artifact
 */
export interface ActionsGetArtifactResponseData {
  id: number;
  node_id: string;
  /**
   * The name of the artifact.
   */
  name: string;
  /**
   * The size in bytes of the artifact.
   */
  size_in_bytes: number;
  url: string;
  archive_download_url: string;
  /**
   * Whether or not the artifact has expired.
   */
  expired: boolean;
  created_at: string;
  expires_at: string;
  updated_at: string;
}

type ActionsGetJobForWorkflowRunEndpoint = {
  owner: string;

  repo: string;
  /**
   * job_id parameter
   */
  job_id: number;
};

type ActionsGetJobForWorkflowRunRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/actions/jobs/:job_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Information of a job execution in a workflow run
 */
export interface ActionsGetJobForWorkflowRunResponseData {
  /**
   * The id of the job.
   */
  id: number;
  /**
   * The id of the associated workflow run.
   */
  run_id: number;
  run_url: string;
  node_id: string;
  /**
   * The SHA of the commit that is being run.
   */
  head_sha: string;
  url: string;
  html_url: string;
  /**
   * The phase of the lifecycle that the job is currently in.
   */
  status: "queued" | "in_progress" | "completed";
  /**
   * The outcome of the job.
   */
  conclusion: string;
  /**
   * The time that the job started, in ISO 8601 format.
   */
  started_at: string;
  /**
   * The time that the job finished, in ISO 8601 format.
   */
  completed_at: string;
  /**
   * The name of the job.
   */
  name: string;
  /**
   * Steps in this job.
   */
  steps: {
    /**
     * The phase of the lifecycle that the job is currently in.
     */
    status: "queued" | "in_progress" | "completed";
    /**
     * The outcome of the job.
     */
    conclusion: string;
    /**
     * The name of the job.
     */
    name: string;
    number: number;
    /**
     * The time that the step started, in ISO 8601 format.
     */
    started_at: string;
    /**
     * The time that the job finished, in ISO 8601 format.
     */
    completed_at: string;
  }[];
  check_run_url: string;
}

type ActionsGetOrgPublicKeyEndpoint = {
  org: string;
};

type ActionsGetOrgPublicKeyRequestOptions = {
  method: "GET";
  url: "/orgs/:org/actions/secrets/public-key";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * The public key used for setting Actions Secrets.
 */
export interface ActionsGetOrgPublicKeyResponseData {
  /**
   * The identifier for the key.
   */
  key_id: string;
  /**
   * The Base64 encoded public key.
   */
  key: string;
  id: number;
  url: string;
  title: string;
  created_at: string;
}

type ActionsGetOrgSecretEndpoint = {
  org: string;
  /**
   * secret_name parameter
   */
  secret_name: string;
};

type ActionsGetOrgSecretRequestOptions = {
  method: "GET";
  url: "/orgs/:org/actions/secrets/:secret_name";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Secrets for GitHub Actions for an organization.
 */
export interface ActionsGetOrgSecretResponseData {
  /**
   * The name of the secret.
   */
  name: string;
  created_at: string;
  updated_at: string;
  /**
   * Visibility of a secret
   */
  visibility: "all" | "private" | "selected";
  selected_repositories_url: string;
}

type ActionsGetRepoPermissionsEndpoint = {
  owner: string;

  repo: string;
};

type ActionsGetRepoPermissionsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/actions/permissions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ActionsGetRepoPermissionsResponseData {
  /**
   * Whether GitHub Actions are allowed to run on this repo.
   */
  enabled: boolean;
  /**
   * Which GitHub Actions are allowed to run on this repo when enabled is true. Either 'all', 'local_only' or 'selected'.
   */
  allowed_actions: string;
  /**
   * The URL of the selected GitHub Actions that can run. Only when allowed_actions is selected.
   */
  selected_actions_url: string;
}

type ActionsGetRepoPublicKeyEndpoint = {
  owner: string;

  repo: string;
};

type ActionsGetRepoPublicKeyRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/actions/secrets/public-key";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * The public key used for setting Actions Secrets.
 */
export interface ActionsGetRepoPublicKeyResponseData {
  /**
   * The identifier for the key.
   */
  key_id: string;
  /**
   * The Base64 encoded public key.
   */
  key: string;
  id: number;
  url: string;
  title: string;
  created_at: string;
}

type ActionsGetRepoSecretEndpoint = {
  owner: string;

  repo: string;
  /**
   * secret_name parameter
   */
  secret_name: string;
};

type ActionsGetRepoSecretRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/actions/secrets/:secret_name";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Set secrets for GitHub Actions.
 */
export interface ActionsGetRepoSecretResponseData {
  /**
   * The name of the secret.
   */
  name: string;
  created_at: string;
  updated_at: string;
}

type ActionsGetSelfHostedRunnerForOrgEndpoint = {
  org: string;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runner_id: number;
};

type ActionsGetSelfHostedRunnerForOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/actions/runners/:runner_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A self hosted runner
 */
export interface ActionsGetSelfHostedRunnerForOrgResponseData {
  /**
   * The id of the runner.
   */
  id: number;
  /**
   * The name of the runner.
   */
  name: string;
  /**
   * The Operating System of the runner.
   */
  os: string;
  /**
   * The status of the runner.
   */
  status: string;
  busy: boolean;
  labels: {
    /**
     * Unique identifier of the label.
     */
    id: number;
    /**
     * Name of the label.
     */
    name: string;
    /**
     * The type of label. Read-only labels are applied automatically when the runner is configured.
     */
    type: "read-only" | "custom";
  }[];
}

type ActionsGetSelfHostedRunnerForRepoEndpoint = {
  owner: string;

  repo: string;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runner_id: number;
};

type ActionsGetSelfHostedRunnerForRepoRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/actions/runners/:runner_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A self hosted runner
 */
export interface ActionsGetSelfHostedRunnerForRepoResponseData {
  /**
   * The id of the runner.
   */
  id: number;
  /**
   * The name of the runner.
   */
  name: string;
  /**
   * The Operating System of the runner.
   */
  os: string;
  /**
   * The status of the runner.
   */
  status: string;
  busy: boolean;
  labels: {
    /**
     * Unique identifier of the label.
     */
    id: number;
    /**
     * Name of the label.
     */
    name: string;
    /**
     * The type of label. Read-only labels are applied automatically when the runner is configured.
     */
    type: "read-only" | "custom";
  }[];
}

type ActionsGetSelfHostedRunnerGroupForOrgEndpoint = {
  org: string;
  /**
   * Unique identifier of the self-hosted runner group.
   */
  runner_group_id: number;
};

type ActionsGetSelfHostedRunnerGroupForOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/actions/runner-groups/:runner_group_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ActionsGetSelfHostedRunnerGroupForOrgResponseData {
  id: number;
  name: string;
  visibility: string;
  default: boolean;
  selected_repositories_url: string;
  runners_url: string;
  inherited: boolean;
}

type ActionsGetWorkflowEndpoint = {
  owner: string;

  repo: string;

  workflow_id: number;
};

type ActionsGetWorkflowRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/actions/workflows/:workflow_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A GitHub Actions workflow
 */
export interface ActionsGetWorkflowResponseData {
  id: number;
  node_id: string;
  name: string;
  path: string;
  state: "active" | "deleted";
  created_at: string;
  updated_at: string;
  url: string;
  html_url: string;
  badge_url: string;
  deleted_at: string;
}

type ActionsGetWorkflowRunEndpoint = {
  owner: string;

  repo: string;

  run_id: number;
};

type ActionsGetWorkflowRunRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/actions/runs/:run_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * An invocation of a workflow
 */
export interface ActionsGetWorkflowRunResponseData {
  /**
   * The ID of the workflow run.
   */
  id: number;
  node_id: string;
  head_branch: string;
  /**
   * The SHA of the head commit that points to the version of the worflow being run.
   */
  head_sha: string;
  /**
   * The auto incrementing run number for the workflow run.
   */
  run_number: number;
  event: string;
  status: string;
  conclusion: string;
  /**
   * The ID of the parent workflow.
   */
  workflow_id: number;
  /**
   * The URL to the workflow run.
   */
  url: string;
  html_url: string;
  pull_requests: PullRequestMinimal[];
  created_at: string;
  updated_at: string;
  /**
   * The URL to the jobs for the workflow run.
   */
  jobs_url: string;
  /**
   * The URL to download the logs for the workflow run.
   */
  logs_url: string;
  /**
   * The URL to the associated check suite.
   */
  check_suite_url: string;
  /**
   * The URL to the artifacts for the workflow run.
   */
  artifacts_url: string;
  /**
   * The URL to cancel the workflow run.
   */
  cancel_url: string;
  /**
   * The URL to rerun the workflow run.
   */
  rerun_url: string;
  /**
   * The URL to the workflow.
   */
  workflow_url: string;
  head_commit: SimpleCommit;
  repository: MinimalRepository;
  head_repository: MinimalRepository1;
  head_repository_id: number;
}
export interface PullRequestMinimal {
  id: number;
  number: number;
  url: string;
  head: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
  base: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
}
/**
 * Simple Commit
 */
export interface SimpleCommit {
  id: string;
  tree_id: string;
  message: string;
  timestamp: string;
  author: {
    name: string;
    email: string;
  };
  committer: {
    name: string;
    email: string;
  };
}
/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Minimal Repository
 */
export interface MinimalRepository1 {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser1;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ActionsGetWorkflowRunUsageEndpoint = {
  owner: string;

  repo: string;

  run_id: number;
};

type ActionsGetWorkflowRunUsageRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/actions/runs/:run_id/timing";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Workflow Run Usage
 */
export interface ActionsGetWorkflowRunUsageResponseData {
  billable: {
    UBUNTU: {
      total_ms: number;
      jobs: number;
    };
    MACOS: {
      total_ms: number;
      jobs: number;
    };
    WINDOWS: {
      total_ms: number;
      jobs: number;
    };
  };
  run_duration_ms: number;
}

type ActionsGetWorkflowUsageEndpoint = {
  owner: string;

  repo: string;

  workflow_id: number;
};

type ActionsGetWorkflowUsageRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/actions/workflows/:workflow_id/timing";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Workflow Usage
 */
export interface ActionsGetWorkflowUsageResponseData {
  billable: {
    UBUNTU: {
      total_ms: number;
    };
    MACOS: {
      total_ms: number;
    };
    WINDOWS: {
      total_ms: number;
    };
  };
}

type ActionsListArtifactsForRepoEndpoint = {
  owner: string;

  repo: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActionsListArtifactsForRepoRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/actions/artifacts";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ActionsListArtifactsForRepoResponseData {
  total_count: number;
  artifacts: Artifact[];
}
/**
 * An artifact
 */
export interface Artifact {
  id: number;
  node_id: string;
  /**
   * The name of the artifact.
   */
  name: string;
  /**
   * The size in bytes of the artifact.
   */
  size_in_bytes: number;
  url: string;
  archive_download_url: string;
  /**
   * Whether or not the artifact has expired.
   */
  expired: boolean;
  created_at: string;
  expires_at: string;
  updated_at: string;
}

type ActionsListJobsForWorkflowRunEndpoint = {
  owner: string;

  repo: string;

  run_id: number;
  /**
   * Filters jobs by their `completed_at` timestamp. Can be one of:
   * \* `latest`: Returns jobs from the most recent execution of the workflow run.
   * \* `all`: Returns all jobs for a workflow run, including from old executions of the workflow run.
   */
  filter?: "latest" | "all";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActionsListJobsForWorkflowRunRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/actions/runs/:run_id/jobs";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ActionsListJobsForWorkflowRunResponseData {
  total_count: number;
  jobs: Job[];
}
/**
 * Information of a job execution in a workflow run
 */
export interface Job {
  /**
   * The id of the job.
   */
  id: number;
  /**
   * The id of the associated workflow run.
   */
  run_id: number;
  run_url: string;
  node_id: string;
  /**
   * The SHA of the commit that is being run.
   */
  head_sha: string;
  url: string;
  html_url: string;
  /**
   * The phase of the lifecycle that the job is currently in.
   */
  status: "queued" | "in_progress" | "completed";
  /**
   * The outcome of the job.
   */
  conclusion: string;
  /**
   * The time that the job started, in ISO 8601 format.
   */
  started_at: string;
  /**
   * The time that the job finished, in ISO 8601 format.
   */
  completed_at: string;
  /**
   * The name of the job.
   */
  name: string;
  /**
   * Steps in this job.
   */
  steps: {
    /**
     * The phase of the lifecycle that the job is currently in.
     */
    status: "queued" | "in_progress" | "completed";
    /**
     * The outcome of the job.
     */
    conclusion: string;
    /**
     * The name of the job.
     */
    name: string;
    number: number;
    /**
     * The time that the step started, in ISO 8601 format.
     */
    started_at: string;
    /**
     * The time that the job finished, in ISO 8601 format.
     */
    completed_at: string;
  }[];
  check_run_url: string;
}

type ActionsListOrgSecretsEndpoint = {
  org: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActionsListOrgSecretsRequestOptions = {
  method: "GET";
  url: "/orgs/:org/actions/secrets";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ActionsListOrgSecretsResponseData {
  total_count: number;
  secrets: ActionsSecretForAnOrganization[];
}
/**
 * Secrets for GitHub Actions for an organization.
 */
export interface ActionsSecretForAnOrganization {
  /**
   * The name of the secret.
   */
  name: string;
  created_at: string;
  updated_at: string;
  /**
   * Visibility of a secret
   */
  visibility: "all" | "private" | "selected";
  selected_repositories_url: string;
}

type ActionsListRepoAccessToSelfHostedRunnerGroupInOrgEndpoint = {
  org: string;
  /**
   * Unique identifier of the self-hosted runner group.
   */
  runner_group_id: number;
};

type ActionsListRepoAccessToSelfHostedRunnerGroupInOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/actions/runner-groups/:runner_group_id/repositories";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponseData {
  total_count: number;
  repositories: Repository[];
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ActionsListRepoSecretsEndpoint = {
  owner: string;

  repo: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActionsListRepoSecretsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/actions/secrets";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ActionsListRepoSecretsResponseData {
  total_count: number;
  secrets: ActionsSecret[];
}
/**
 * Set secrets for GitHub Actions.
 */
export interface ActionsSecret {
  /**
   * The name of the secret.
   */
  name: string;
  created_at: string;
  updated_at: string;
}

type ActionsListRepoWorkflowsEndpoint = {
  owner: string;

  repo: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActionsListRepoWorkflowsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/actions/workflows";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ActionsListRepoWorkflowsResponseData {
  total_count: number;
  workflows: Workflow[];
}
/**
 * A GitHub Actions workflow
 */
export interface Workflow {
  id: number;
  node_id: string;
  name: string;
  path: string;
  state: "active" | "deleted";
  created_at: string;
  updated_at: string;
  url: string;
  html_url: string;
  badge_url: string;
  deleted_at: string;
}

type ActionsListRunnerApplicationsForOrgEndpoint = {
  org: string;
};

type ActionsListRunnerApplicationsForOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/actions/runners/downloads";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ActionsListRunnerApplicationsForOrgResponseData = RunnerApplication[];

/**
 * Runner Application
 */
export interface RunnerApplication {
  os: string;
  architecture: string;
  download_url: string;
  filename: string;
}

type ActionsListRunnerApplicationsForRepoEndpoint = {
  owner: string;

  repo: string;
};

type ActionsListRunnerApplicationsForRepoRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/actions/runners/downloads";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ActionsListRunnerApplicationsForRepoResponseData = RunnerApplication[];

/**
 * Runner Application
 */
export interface RunnerApplication {
  os: string;
  architecture: string;
  download_url: string;
  filename: string;
}

type ActionsListSelectedReposForOrgSecretEndpoint = {
  org: string;
  /**
   * secret_name parameter
   */
  secret_name: string;
};

type ActionsListSelectedReposForOrgSecretRequestOptions = {
  method: "GET";
  url: "/orgs/:org/actions/secrets/:secret_name/repositories";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ActionsListSelectedReposForOrgSecretResponseData {
  total_count: number;
  repositories: MinimalRepository[];
}
/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ActionsListSelfHostedRunnerGroupsForOrgEndpoint = {
  org: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActionsListSelfHostedRunnerGroupsForOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/actions/runner-groups";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ActionsListSelfHostedRunnerGroupsForOrgResponseData {
  total_count: number;
  runner_groups: {
    id: number;
    name: string;
    visibility: string;
    default: boolean;
    selected_repositories_url: string;
    runners_url: string;
    inherited: boolean;
  }[];
}

type ActionsListSelfHostedRunnersForOrgEndpoint = {
  org: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActionsListSelfHostedRunnersForOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/actions/runners";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ActionsListSelfHostedRunnersForOrgResponseData {
  total_count: number;
  runners: SelfHostedRunners[];
}
/**
 * A self hosted runner
 */
export interface SelfHostedRunners {
  /**
   * The id of the runner.
   */
  id: number;
  /**
   * The name of the runner.
   */
  name: string;
  /**
   * The Operating System of the runner.
   */
  os: string;
  /**
   * The status of the runner.
   */
  status: string;
  busy: boolean;
  labels: {
    /**
     * Unique identifier of the label.
     */
    id: number;
    /**
     * Name of the label.
     */
    name: string;
    /**
     * The type of label. Read-only labels are applied automatically when the runner is configured.
     */
    type: "read-only" | "custom";
  }[];
}

type ActionsListSelfHostedRunnersForRepoEndpoint = {
  owner: string;

  repo: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActionsListSelfHostedRunnersForRepoRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/actions/runners";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ActionsListSelfHostedRunnersForRepoResponseData {
  total_count: number;
  runners: SelfHostedRunners[];
}
/**
 * A self hosted runner
 */
export interface SelfHostedRunners {
  /**
   * The id of the runner.
   */
  id: number;
  /**
   * The name of the runner.
   */
  name: string;
  /**
   * The Operating System of the runner.
   */
  os: string;
  /**
   * The status of the runner.
   */
  status: string;
  busy: boolean;
  labels: {
    /**
     * Unique identifier of the label.
     */
    id: number;
    /**
     * Name of the label.
     */
    name: string;
    /**
     * The type of label. Read-only labels are applied automatically when the runner is configured.
     */
    type: "read-only" | "custom";
  }[];
}

type ActionsListSelfHostedRunnersInGroupForOrgEndpoint = {
  org: string;
  /**
   * Unique identifier of the self-hosted runner group.
   */
  runner_group_id: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActionsListSelfHostedRunnersInGroupForOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/actions/runner-groups/:runner_group_id/runners";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ActionsListSelfHostedRunnersInGroupForOrgResponseData {
  total_count: number;
  runners: SelfHostedRunners[];
}
/**
 * A self hosted runner
 */
export interface SelfHostedRunners {
  /**
   * The id of the runner.
   */
  id: number;
  /**
   * The name of the runner.
   */
  name: string;
  /**
   * The Operating System of the runner.
   */
  os: string;
  /**
   * The status of the runner.
   */
  status: string;
  busy: boolean;
  labels: {
    /**
     * Unique identifier of the label.
     */
    id: number;
    /**
     * Name of the label.
     */
    name: string;
    /**
     * The type of label. Read-only labels are applied automatically when the runner is configured.
     */
    type: "read-only" | "custom";
  }[];
}

type ActionsListWorkflowRunArtifactsEndpoint = {
  owner: string;

  repo: string;

  run_id: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActionsListWorkflowRunArtifactsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/actions/runs/:run_id/artifacts";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ActionsListWorkflowRunArtifactsResponseData {
  total_count: number;
  artifacts: Artifact[];
}
/**
 * An artifact
 */
export interface Artifact {
  id: number;
  node_id: string;
  /**
   * The name of the artifact.
   */
  name: string;
  /**
   * The size in bytes of the artifact.
   */
  size_in_bytes: number;
  url: string;
  archive_download_url: string;
  /**
   * Whether or not the artifact has expired.
   */
  expired: boolean;
  created_at: string;
  expires_at: string;
  updated_at: string;
}

type ActionsListWorkflowRunsEndpoint = {
  owner: string;

  repo: string;

  workflow_id: number;
  /**
   * Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
   */
  actor?: string;
  /**
   * Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
   */
  branch?: string;
  /**
   * Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
   */
  event?: string;
  /**
   * Returns workflow runs associated with the check run `status` or `conclusion` you specify. For example, a conclusion can be `success` or a status can be `completed`. For more information, see the `status` and `conclusion` options available in "[Create a check run](https://developer.github.com/v3/checks/runs/#create-a-check-run)."
   */
  status?: "completed" | "status" | "conclusion";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActionsListWorkflowRunsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/actions/workflows/:workflow_id/runs";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ActionsListWorkflowRunsResponseData {
  total_count: number;
  workflow_runs: WorkflowRun[];
}
/**
 * An invocation of a workflow
 */
export interface WorkflowRun {
  /**
   * The ID of the workflow run.
   */
  id: number;
  node_id: string;
  head_branch: string;
  /**
   * The SHA of the head commit that points to the version of the worflow being run.
   */
  head_sha: string;
  /**
   * The auto incrementing run number for the workflow run.
   */
  run_number: number;
  event: string;
  status: string;
  conclusion: string;
  /**
   * The ID of the parent workflow.
   */
  workflow_id: number;
  /**
   * The URL to the workflow run.
   */
  url: string;
  html_url: string;
  pull_requests: PullRequestMinimal[];
  created_at: string;
  updated_at: string;
  /**
   * The URL to the jobs for the workflow run.
   */
  jobs_url: string;
  /**
   * The URL to download the logs for the workflow run.
   */
  logs_url: string;
  /**
   * The URL to the associated check suite.
   */
  check_suite_url: string;
  /**
   * The URL to the artifacts for the workflow run.
   */
  artifacts_url: string;
  /**
   * The URL to cancel the workflow run.
   */
  cancel_url: string;
  /**
   * The URL to rerun the workflow run.
   */
  rerun_url: string;
  /**
   * The URL to the workflow.
   */
  workflow_url: string;
  head_commit: SimpleCommit;
  repository: MinimalRepository;
  head_repository: MinimalRepository1;
  head_repository_id: number;
}
export interface PullRequestMinimal {
  id: number;
  number: number;
  url: string;
  head: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
  base: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
}
/**
 * Simple Commit
 */
export interface SimpleCommit {
  id: string;
  tree_id: string;
  message: string;
  timestamp: string;
  author: {
    name: string;
    email: string;
  };
  committer: {
    name: string;
    email: string;
  };
}
/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Minimal Repository
 */
export interface MinimalRepository1 {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser1;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ActionsListWorkflowRunsForRepoEndpoint = {
  owner: string;

  repo: string;
  /**
   * Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
   */
  actor?: string;
  /**
   * Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
   */
  branch?: string;
  /**
   * Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
   */
  event?: string;
  /**
   * Returns workflow runs associated with the check run `status` or `conclusion` you specify. For example, a conclusion can be `success` or a status can be `completed`. For more information, see the `status` and `conclusion` options available in "[Create a check run](https://developer.github.com/v3/checks/runs/#create-a-check-run)."
   */
  status?: "completed" | "status" | "conclusion";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActionsListWorkflowRunsForRepoRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/actions/runs";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ActionsListWorkflowRunsForRepoResponseData {
  total_count: number;
  workflow_runs: WorkflowRun[];
}
/**
 * An invocation of a workflow
 */
export interface WorkflowRun {
  /**
   * The ID of the workflow run.
   */
  id: number;
  node_id: string;
  head_branch: string;
  /**
   * The SHA of the head commit that points to the version of the worflow being run.
   */
  head_sha: string;
  /**
   * The auto incrementing run number for the workflow run.
   */
  run_number: number;
  event: string;
  status: string;
  conclusion: string;
  /**
   * The ID of the parent workflow.
   */
  workflow_id: number;
  /**
   * The URL to the workflow run.
   */
  url: string;
  html_url: string;
  pull_requests: PullRequestMinimal[];
  created_at: string;
  updated_at: string;
  /**
   * The URL to the jobs for the workflow run.
   */
  jobs_url: string;
  /**
   * The URL to download the logs for the workflow run.
   */
  logs_url: string;
  /**
   * The URL to the associated check suite.
   */
  check_suite_url: string;
  /**
   * The URL to the artifacts for the workflow run.
   */
  artifacts_url: string;
  /**
   * The URL to cancel the workflow run.
   */
  cancel_url: string;
  /**
   * The URL to rerun the workflow run.
   */
  rerun_url: string;
  /**
   * The URL to the workflow.
   */
  workflow_url: string;
  head_commit: SimpleCommit;
  repository: MinimalRepository;
  head_repository: MinimalRepository1;
  head_repository_id: number;
}
export interface PullRequestMinimal {
  id: number;
  number: number;
  url: string;
  head: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
  base: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
}
/**
 * Simple Commit
 */
export interface SimpleCommit {
  id: string;
  tree_id: string;
  message: string;
  timestamp: string;
  author: {
    name: string;
    email: string;
  };
  committer: {
    name: string;
    email: string;
  };
}
/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Minimal Repository
 */
export interface MinimalRepository1 {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser1;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ActionsReRunWorkflowEndpoint = {
  owner: string;

  repo: string;

  run_id: number;
};

type ActionsReRunWorkflowRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/actions/runs/:run_id/rerun";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgEndpoint = {
  org: string;
  /**
   * Unique identifier of the self-hosted runner group.
   */
  runner_group_id: number;

  repository_id: number;
};

type ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/actions/runner-groups/:runner_group_id/repositories/:repository_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsRemoveSelectedRepoFromOrgSecretEndpoint = {
  org: string;
  /**
   * secret_name parameter
   */
  secret_name: string;
  /**
   * repository_id parameter
   */
  repository_id: number;
};

type ActionsRemoveSelectedRepoFromOrgSecretRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/actions/secrets/:secret_name/repositories/:repository_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsRemoveSelfHostedRunnerFromGroupForOrgEndpoint = {
  org: string;
  /**
   * Unique identifier of the self-hosted runner group.
   */
  runner_group_id: number;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runner_id: number;
};

type ActionsRemoveSelfHostedRunnerFromGroupForOrgRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/actions/runner-groups/:runner_group_id/runners/:runner_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgEndpoint = {
  org: string;
  /**
   * Unique identifier of the self-hosted runner group.
   */
  runner_group_id: number;
  /**
   * List of repository IDs that can access the runner group.
   */
  selected_repository_ids: number[];
};

type ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequestOptions = {
  method: "PUT";
  url: "/orgs/:org/actions/runner-groups/:runner_group_id/repositories";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsSetSelectedReposForOrgSecretEndpoint = {
  org: string;
  /**
   * secret_name parameter
   */
  secret_name: string;
  /**
   * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://developer.github.com/v3/actions/secrets/#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://developer.github.com/v3/actions/secrets/#remove-selected-repository-from-an-organization-secret) endpoints.
   */
  selected_repository_ids?: number[];
};

type ActionsSetSelectedReposForOrgSecretRequestOptions = {
  method: "PUT";
  url: "/orgs/:org/actions/secrets/:secret_name/repositories";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsSetSelfHostedRunnersInGroupForOrgEndpoint = {
  org: string;
  /**
   * Unique identifier of the self-hosted runner group.
   */
  runner_group_id: number;
  /**
   * List of runner IDs to add to the runner group.
   */
  runners: number[];
};

type ActionsSetSelfHostedRunnersInGroupForOrgRequestOptions = {
  method: "PUT";
  url: "/orgs/:org/actions/runner-groups/:runner_group_id/runners";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActionsUpdateSelfHostedRunnerGroupForOrgEndpoint = {
  org: string;
  /**
   * Unique identifier of the self-hosted runner group.
   */
  runner_group_id: number;
  /**
   * Name of the runner group.
   */
  name?: string;
  /**
   * Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories. Can be one of: `all`, `selected`, or `private`.
   */
  visibility?: "selected" | "all" | "private";
};

type ActionsUpdateSelfHostedRunnerGroupForOrgRequestOptions = {
  method: "PATCH";
  url: "/orgs/:org/actions/runner-groups/:runner_group_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ActionsUpdateSelfHostedRunnerGroupForOrgResponseData {
  id: number;
  name: string;
  visibility: string;
  default: boolean;
  selected_repositories_url: string;
  runners_url: string;
  inherited: boolean;
}

type ActivityCheckRepoIsStarredByAuthenticatedUserEndpoint = {
  owner: string;

  repo: string;
};

type ActivityCheckRepoIsStarredByAuthenticatedUserRequestOptions = {
  method: "GET";
  url: "/user/starred/:owner/:repo";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ActivityCheckRepoIsStarredByAuthenticatedUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ActivityCheckRepoIsStarredByAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ActivityCheckRepoIsStarredByAuthenticatedUserResponse404Data {
  message: string;
  documentation_url: string;
}

type ActivityDeleteRepoSubscriptionEndpoint = {
  owner: string;

  repo: string;
};

type ActivityDeleteRepoSubscriptionRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/subscription";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActivityDeleteThreadSubscriptionEndpoint = {
  /**
   * thread_id parameter
   */
  thread_id: number;
};

type ActivityDeleteThreadSubscriptionRequestOptions = {
  method: "DELETE";
  url: "/notifications/threads/:thread_id/subscription";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ActivityDeleteThreadSubscriptionResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ActivityDeleteThreadSubscriptionResponse403Data {
  message: string;
  documentation_url: string;
}

type ActivityGetFeedsEndpoint = {};

type ActivityGetFeedsRequestOptions = {
  method: "GET";
  url: "/feeds";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Feed
 */
export interface ActivityGetFeedsResponseData {
  timeline_url: string;
  user_url: string;
  current_user_public_url: string;
  current_user_url: string;
  current_user_actor_url: string;
  current_user_organization_url: string;
  current_user_organization_urls: string[];
  security_advisories_url: string;
  _links: {
    timeline: LinkWithType;
    user: LinkWithType1;
    security_advisories: LinkWithType2;
    current_user: LinkWithType3;
    current_user_public: LinkWithType4;
    current_user_actor: LinkWithType5;
    current_user_organization: LinkWithType6;
    current_user_organizations: LinkWithType7[];
  };
}
/**
 * Hypermedia Link with Type
 */
export interface LinkWithType {
  href: string;
  type: string;
}
/**
 * Hypermedia Link with Type
 */
export interface LinkWithType1 {
  href: string;
  type: string;
}
/**
 * Hypermedia Link with Type
 */
export interface LinkWithType2 {
  href: string;
  type: string;
}
/**
 * Hypermedia Link with Type
 */
export interface LinkWithType3 {
  href: string;
  type: string;
}
/**
 * Hypermedia Link with Type
 */
export interface LinkWithType4 {
  href: string;
  type: string;
}
/**
 * Hypermedia Link with Type
 */
export interface LinkWithType5 {
  href: string;
  type: string;
}
/**
 * Hypermedia Link with Type
 */
export interface LinkWithType6 {
  href: string;
  type: string;
}
/**
 * Hypermedia Link with Type
 */
export interface LinkWithType7 {
  href: string;
  type: string;
}

type ActivityGetRepoSubscriptionEndpoint = {
  owner: string;

  repo: string;
};

type ActivityGetRepoSubscriptionRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/subscription";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Repository invitations let you manage who you collaborate with.
 */
export interface ActivityGetRepoSubscriptionResponseData {
  /**
   * Determines if notifications should be received from this repository.
   */
  subscribed: boolean;
  /**
   * Determines if all notifications should be blocked from this repository.
   */
  ignored: boolean;
  reason: string;
  created_at: string;
  url: string;
  repository_url: string;
}

/**
 * Basic Error
 */
export interface ActivityGetRepoSubscriptionResponse403Data {
  message: string;
  documentation_url: string;
}

type ActivityGetThreadEndpoint = {
  /**
   * thread_id parameter
   */
  thread_id: number;
};

type ActivityGetThreadRequestOptions = {
  method: "GET";
  url: "/notifications/threads/:thread_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Thread
 */
export interface ActivityGetThreadResponseData {
  id: string;
  repository: MinimalRepository;
  subject: {
    title: string;
    url: string;
    latest_comment_url: string;
    type: string;
  };
  reason: string;
  unread: boolean;
  updated_at: string;
  last_read_at: string;
  url: string;
  subscription_url: string;
}
/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ActivityGetThreadResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ActivityGetThreadResponse403Data {
  message: string;
  documentation_url: string;
}

type ActivityGetThreadSubscriptionForAuthenticatedUserEndpoint = {
  /**
   * thread_id parameter
   */
  thread_id: number;
};

type ActivityGetThreadSubscriptionForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: "/notifications/threads/:thread_id/subscription";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Thread Subscription
 */
export interface ActivityGetThreadSubscriptionForAuthenticatedUserResponseData {
  subscribed: boolean;
  ignored: boolean;
  reason: string;
  created_at: string;
  url: string;
  thread_url: string;
  repository_url: string;
}

/**
 * Basic Error
 */
export interface ActivityGetThreadSubscriptionForAuthenticatedUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ActivityGetThreadSubscriptionForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

type ActivityListEventsForAuthenticatedUserEndpoint = {
  username: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActivityListEventsForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: "/users/:username/events";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ActivityListEventsForAuthenticatedUserResponseData = Event[];

/**
 * Event
 */
export interface Event {
  id: string;
  type: string;
  actor: Actor;
  repo: {
    id: number;
    name: string;
    url: string;
  };
  org: Actor1;
  payload: {
    action: string;
    issue: IssueSimple;
    comment: IssueComment;
    pages: {
      page_name: string;
      title: string;
      summary: string;
      action: string;
      sha: string;
      html_url: string;
    }[];
  };
  public: boolean;
  created_at: string;
}
/**
 * Actor
 */
export interface Actor {
  id: number;
  login: string;
  display_login: string;
  gravatar_id: string;
  url: string;
  avatar_url: string;
}
/**
 * Actor
 */
export interface Actor1 {
  id: number;
  login: string;
  display_login: string;
  gravatar_id: string;
  url: string;
  avatar_url: string;
}
/**
 * Issue Simple
 */
export interface IssueSimple {
  id: number;
  node_id: string;
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  number: number;
  state: string;
  title: string;
  body: string;
  user: SimpleUser;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  assignee: SimpleUser1;
  assignees: SimpleUser2[];
  milestone: Milestone;
  locked: boolean;
  active_lock_reason: string;
  comments: number;
  pull_request: {
    merged_at: string;
    diff_url: string;
    html_url: string;
    patch_url: string;
    url: string;
  };
  closed_at: string;
  created_at: string;
  updated_at: string;
  author_association: string;
  body_html: string;
  body_text: string;
  timeline_url: string;
  repository: Repository;
  performed_via_github_app: GitHubApp;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser3;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser4;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser5;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Comments provide a way for people to collaborate on an issue.
 */
export interface IssueComment {
  /**
   * Unique identifier of the issue comment
   */
  id: number;
  node_id: string;
  /**
   * URL for the issue comment
   */
  url: string;
  /**
   * Contents of the issue comment
   */
  body: string;
  body_text: string;
  body_html: string;
  html_url: string;
  user: SimpleUser6;
  created_at: string;
  updated_at: string;
  issue_url: string;
  author_association: string;
  performed_via_github_app: GitHubApp1;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser6 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp1 {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser7;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser7 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type ActivityListNotificationsForAuthenticatedUserEndpoint = {
  /**
   * If `true`, show notifications marked as read.
   */
  all?: boolean;
  /**
   * If `true`, only shows notifications in which the user is directly participating or mentioned.
   */
  participating?: boolean;
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /**
   * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  before?: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActivityListNotificationsForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: "/notifications";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ActivityListNotificationsForAuthenticatedUserResponseData = Thread[];

/**
 * Thread
 */
export interface Thread {
  id: string;
  repository: MinimalRepository;
  subject: {
    title: string;
    url: string;
    latest_comment_url: string;
    type: string;
  };
  reason: string;
  unread: boolean;
  updated_at: string;
  last_read_at: string;
  url: string;
  subscription_url: string;
}
/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ActivityListNotificationsForAuthenticatedUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ActivityListNotificationsForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ActivityListNotificationsForAuthenticatedUserResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ActivityListOrgEventsForAuthenticatedUserEndpoint = {
  username: string;

  org: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActivityListOrgEventsForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: "/users/:username/events/orgs/:org";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ActivityListOrgEventsForAuthenticatedUserResponseData = Event[];

/**
 * Event
 */
export interface Event {
  id: string;
  type: string;
  actor: Actor;
  repo: {
    id: number;
    name: string;
    url: string;
  };
  org: Actor1;
  payload: {
    action: string;
    issue: IssueSimple;
    comment: IssueComment;
    pages: {
      page_name: string;
      title: string;
      summary: string;
      action: string;
      sha: string;
      html_url: string;
    }[];
  };
  public: boolean;
  created_at: string;
}
/**
 * Actor
 */
export interface Actor {
  id: number;
  login: string;
  display_login: string;
  gravatar_id: string;
  url: string;
  avatar_url: string;
}
/**
 * Actor
 */
export interface Actor1 {
  id: number;
  login: string;
  display_login: string;
  gravatar_id: string;
  url: string;
  avatar_url: string;
}
/**
 * Issue Simple
 */
export interface IssueSimple {
  id: number;
  node_id: string;
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  number: number;
  state: string;
  title: string;
  body: string;
  user: SimpleUser;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  assignee: SimpleUser1;
  assignees: SimpleUser2[];
  milestone: Milestone;
  locked: boolean;
  active_lock_reason: string;
  comments: number;
  pull_request: {
    merged_at: string;
    diff_url: string;
    html_url: string;
    patch_url: string;
    url: string;
  };
  closed_at: string;
  created_at: string;
  updated_at: string;
  author_association: string;
  body_html: string;
  body_text: string;
  timeline_url: string;
  repository: Repository;
  performed_via_github_app: GitHubApp;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser3;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser4;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser5;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Comments provide a way for people to collaborate on an issue.
 */
export interface IssueComment {
  /**
   * Unique identifier of the issue comment
   */
  id: number;
  node_id: string;
  /**
   * URL for the issue comment
   */
  url: string;
  /**
   * Contents of the issue comment
   */
  body: string;
  body_text: string;
  body_html: string;
  html_url: string;
  user: SimpleUser6;
  created_at: string;
  updated_at: string;
  issue_url: string;
  author_association: string;
  performed_via_github_app: GitHubApp1;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser6 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp1 {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser7;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser7 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type ActivityListPublicEventsEndpoint = {
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActivityListPublicEventsRequestOptions = {
  method: "GET";
  url: "/events";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ActivityListPublicEventsResponseData = Event[];

/**
 * Event
 */
export interface Event {
  id: string;
  type: string;
  actor: Actor;
  repo: {
    id: number;
    name: string;
    url: string;
  };
  org: Actor1;
  payload: {
    action: string;
    issue: IssueSimple;
    comment: IssueComment;
    pages: {
      page_name: string;
      title: string;
      summary: string;
      action: string;
      sha: string;
      html_url: string;
    }[];
  };
  public: boolean;
  created_at: string;
}
/**
 * Actor
 */
export interface Actor {
  id: number;
  login: string;
  display_login: string;
  gravatar_id: string;
  url: string;
  avatar_url: string;
}
/**
 * Actor
 */
export interface Actor1 {
  id: number;
  login: string;
  display_login: string;
  gravatar_id: string;
  url: string;
  avatar_url: string;
}
/**
 * Issue Simple
 */
export interface IssueSimple {
  id: number;
  node_id: string;
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  number: number;
  state: string;
  title: string;
  body: string;
  user: SimpleUser;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  assignee: SimpleUser1;
  assignees: SimpleUser2[];
  milestone: Milestone;
  locked: boolean;
  active_lock_reason: string;
  comments: number;
  pull_request: {
    merged_at: string;
    diff_url: string;
    html_url: string;
    patch_url: string;
    url: string;
  };
  closed_at: string;
  created_at: string;
  updated_at: string;
  author_association: string;
  body_html: string;
  body_text: string;
  timeline_url: string;
  repository: Repository;
  performed_via_github_app: GitHubApp;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser3;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser4;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser5;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Comments provide a way for people to collaborate on an issue.
 */
export interface IssueComment {
  /**
   * Unique identifier of the issue comment
   */
  id: number;
  node_id: string;
  /**
   * URL for the issue comment
   */
  url: string;
  /**
   * Contents of the issue comment
   */
  body: string;
  body_text: string;
  body_html: string;
  html_url: string;
  user: SimpleUser6;
  created_at: string;
  updated_at: string;
  issue_url: string;
  author_association: string;
  performed_via_github_app: GitHubApp1;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser6 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp1 {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser7;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser7 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

/**
 * Basic Error
 */
export interface ActivityListPublicEventsResponse403Data {
  message: string;
  documentation_url: string;
}

export interface ActivityListPublicEventsResponse503Data {
  code: string;
  message: string;
  documentation_url: string;
}

type ActivityListPublicEventsForRepoNetworkEndpoint = {
  owner: string;

  repo: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActivityListPublicEventsForRepoNetworkRequestOptions = {
  method: "GET";
  url: "/networks/:owner/:repo/events";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ActivityListPublicEventsForRepoNetworkResponseData = Event[];

/**
 * Event
 */
export interface Event {
  id: string;
  type: string;
  actor: Actor;
  repo: {
    id: number;
    name: string;
    url: string;
  };
  org: Actor1;
  payload: {
    action: string;
    issue: IssueSimple;
    comment: IssueComment;
    pages: {
      page_name: string;
      title: string;
      summary: string;
      action: string;
      sha: string;
      html_url: string;
    }[];
  };
  public: boolean;
  created_at: string;
}
/**
 * Actor
 */
export interface Actor {
  id: number;
  login: string;
  display_login: string;
  gravatar_id: string;
  url: string;
  avatar_url: string;
}
/**
 * Actor
 */
export interface Actor1 {
  id: number;
  login: string;
  display_login: string;
  gravatar_id: string;
  url: string;
  avatar_url: string;
}
/**
 * Issue Simple
 */
export interface IssueSimple {
  id: number;
  node_id: string;
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  number: number;
  state: string;
  title: string;
  body: string;
  user: SimpleUser;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  assignee: SimpleUser1;
  assignees: SimpleUser2[];
  milestone: Milestone;
  locked: boolean;
  active_lock_reason: string;
  comments: number;
  pull_request: {
    merged_at: string;
    diff_url: string;
    html_url: string;
    patch_url: string;
    url: string;
  };
  closed_at: string;
  created_at: string;
  updated_at: string;
  author_association: string;
  body_html: string;
  body_text: string;
  timeline_url: string;
  repository: Repository;
  performed_via_github_app: GitHubApp;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser3;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser4;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser5;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Comments provide a way for people to collaborate on an issue.
 */
export interface IssueComment {
  /**
   * Unique identifier of the issue comment
   */
  id: number;
  node_id: string;
  /**
   * URL for the issue comment
   */
  url: string;
  /**
   * Contents of the issue comment
   */
  body: string;
  body_text: string;
  body_html: string;
  html_url: string;
  user: SimpleUser6;
  created_at: string;
  updated_at: string;
  issue_url: string;
  author_association: string;
  performed_via_github_app: GitHubApp1;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser6 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp1 {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser7;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser7 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

/**
 * Basic Error
 */
export interface ActivityListPublicEventsForRepoNetworkResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ActivityListPublicEventsForRepoNetworkResponse404Data {
  message: string;
  documentation_url: string;
}

type ActivityListPublicEventsForUserEndpoint = {
  username: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActivityListPublicEventsForUserRequestOptions = {
  method: "GET";
  url: "/users/:username/events/public";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ActivityListPublicEventsForUserResponseData = Event[];

/**
 * Event
 */
export interface Event {
  id: string;
  type: string;
  actor: Actor;
  repo: {
    id: number;
    name: string;
    url: string;
  };
  org: Actor1;
  payload: {
    action: string;
    issue: IssueSimple;
    comment: IssueComment;
    pages: {
      page_name: string;
      title: string;
      summary: string;
      action: string;
      sha: string;
      html_url: string;
    }[];
  };
  public: boolean;
  created_at: string;
}
/**
 * Actor
 */
export interface Actor {
  id: number;
  login: string;
  display_login: string;
  gravatar_id: string;
  url: string;
  avatar_url: string;
}
/**
 * Actor
 */
export interface Actor1 {
  id: number;
  login: string;
  display_login: string;
  gravatar_id: string;
  url: string;
  avatar_url: string;
}
/**
 * Issue Simple
 */
export interface IssueSimple {
  id: number;
  node_id: string;
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  number: number;
  state: string;
  title: string;
  body: string;
  user: SimpleUser;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  assignee: SimpleUser1;
  assignees: SimpleUser2[];
  milestone: Milestone;
  locked: boolean;
  active_lock_reason: string;
  comments: number;
  pull_request: {
    merged_at: string;
    diff_url: string;
    html_url: string;
    patch_url: string;
    url: string;
  };
  closed_at: string;
  created_at: string;
  updated_at: string;
  author_association: string;
  body_html: string;
  body_text: string;
  timeline_url: string;
  repository: Repository;
  performed_via_github_app: GitHubApp;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser3;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser4;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser5;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Comments provide a way for people to collaborate on an issue.
 */
export interface IssueComment {
  /**
   * Unique identifier of the issue comment
   */
  id: number;
  node_id: string;
  /**
   * URL for the issue comment
   */
  url: string;
  /**
   * Contents of the issue comment
   */
  body: string;
  body_text: string;
  body_html: string;
  html_url: string;
  user: SimpleUser6;
  created_at: string;
  updated_at: string;
  issue_url: string;
  author_association: string;
  performed_via_github_app: GitHubApp1;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser6 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp1 {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser7;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser7 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type ActivityListPublicOrgEventsEndpoint = {
  org: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActivityListPublicOrgEventsRequestOptions = {
  method: "GET";
  url: "/orgs/:org/events";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ActivityListPublicOrgEventsResponseData = Event[];

/**
 * Event
 */
export interface Event {
  id: string;
  type: string;
  actor: Actor;
  repo: {
    id: number;
    name: string;
    url: string;
  };
  org: Actor1;
  payload: {
    action: string;
    issue: IssueSimple;
    comment: IssueComment;
    pages: {
      page_name: string;
      title: string;
      summary: string;
      action: string;
      sha: string;
      html_url: string;
    }[];
  };
  public: boolean;
  created_at: string;
}
/**
 * Actor
 */
export interface Actor {
  id: number;
  login: string;
  display_login: string;
  gravatar_id: string;
  url: string;
  avatar_url: string;
}
/**
 * Actor
 */
export interface Actor1 {
  id: number;
  login: string;
  display_login: string;
  gravatar_id: string;
  url: string;
  avatar_url: string;
}
/**
 * Issue Simple
 */
export interface IssueSimple {
  id: number;
  node_id: string;
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  number: number;
  state: string;
  title: string;
  body: string;
  user: SimpleUser;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  assignee: SimpleUser1;
  assignees: SimpleUser2[];
  milestone: Milestone;
  locked: boolean;
  active_lock_reason: string;
  comments: number;
  pull_request: {
    merged_at: string;
    diff_url: string;
    html_url: string;
    patch_url: string;
    url: string;
  };
  closed_at: string;
  created_at: string;
  updated_at: string;
  author_association: string;
  body_html: string;
  body_text: string;
  timeline_url: string;
  repository: Repository;
  performed_via_github_app: GitHubApp;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser3;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser4;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser5;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Comments provide a way for people to collaborate on an issue.
 */
export interface IssueComment {
  /**
   * Unique identifier of the issue comment
   */
  id: number;
  node_id: string;
  /**
   * URL for the issue comment
   */
  url: string;
  /**
   * Contents of the issue comment
   */
  body: string;
  body_text: string;
  body_html: string;
  html_url: string;
  user: SimpleUser6;
  created_at: string;
  updated_at: string;
  issue_url: string;
  author_association: string;
  performed_via_github_app: GitHubApp1;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser6 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp1 {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser7;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser7 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type ActivityListReceivedEventsForUserEndpoint = {
  username: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActivityListReceivedEventsForUserRequestOptions = {
  method: "GET";
  url: "/users/:username/received_events";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ActivityListReceivedEventsForUserResponseData = Event[];

/**
 * Event
 */
export interface Event {
  id: string;
  type: string;
  actor: Actor;
  repo: {
    id: number;
    name: string;
    url: string;
  };
  org: Actor1;
  payload: {
    action: string;
    issue: IssueSimple;
    comment: IssueComment;
    pages: {
      page_name: string;
      title: string;
      summary: string;
      action: string;
      sha: string;
      html_url: string;
    }[];
  };
  public: boolean;
  created_at: string;
}
/**
 * Actor
 */
export interface Actor {
  id: number;
  login: string;
  display_login: string;
  gravatar_id: string;
  url: string;
  avatar_url: string;
}
/**
 * Actor
 */
export interface Actor1 {
  id: number;
  login: string;
  display_login: string;
  gravatar_id: string;
  url: string;
  avatar_url: string;
}
/**
 * Issue Simple
 */
export interface IssueSimple {
  id: number;
  node_id: string;
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  number: number;
  state: string;
  title: string;
  body: string;
  user: SimpleUser;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  assignee: SimpleUser1;
  assignees: SimpleUser2[];
  milestone: Milestone;
  locked: boolean;
  active_lock_reason: string;
  comments: number;
  pull_request: {
    merged_at: string;
    diff_url: string;
    html_url: string;
    patch_url: string;
    url: string;
  };
  closed_at: string;
  created_at: string;
  updated_at: string;
  author_association: string;
  body_html: string;
  body_text: string;
  timeline_url: string;
  repository: Repository;
  performed_via_github_app: GitHubApp;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser3;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser4;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser5;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Comments provide a way for people to collaborate on an issue.
 */
export interface IssueComment {
  /**
   * Unique identifier of the issue comment
   */
  id: number;
  node_id: string;
  /**
   * URL for the issue comment
   */
  url: string;
  /**
   * Contents of the issue comment
   */
  body: string;
  body_text: string;
  body_html: string;
  html_url: string;
  user: SimpleUser6;
  created_at: string;
  updated_at: string;
  issue_url: string;
  author_association: string;
  performed_via_github_app: GitHubApp1;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser6 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp1 {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser7;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser7 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type ActivityListReceivedPublicEventsForUserEndpoint = {
  username: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActivityListReceivedPublicEventsForUserRequestOptions = {
  method: "GET";
  url: "/users/:username/received_events/public";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ActivityListReceivedPublicEventsForUserResponseData = Event[];

/**
 * Event
 */
export interface Event {
  id: string;
  type: string;
  actor: Actor;
  repo: {
    id: number;
    name: string;
    url: string;
  };
  org: Actor1;
  payload: {
    action: string;
    issue: IssueSimple;
    comment: IssueComment;
    pages: {
      page_name: string;
      title: string;
      summary: string;
      action: string;
      sha: string;
      html_url: string;
    }[];
  };
  public: boolean;
  created_at: string;
}
/**
 * Actor
 */
export interface Actor {
  id: number;
  login: string;
  display_login: string;
  gravatar_id: string;
  url: string;
  avatar_url: string;
}
/**
 * Actor
 */
export interface Actor1 {
  id: number;
  login: string;
  display_login: string;
  gravatar_id: string;
  url: string;
  avatar_url: string;
}
/**
 * Issue Simple
 */
export interface IssueSimple {
  id: number;
  node_id: string;
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  number: number;
  state: string;
  title: string;
  body: string;
  user: SimpleUser;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  assignee: SimpleUser1;
  assignees: SimpleUser2[];
  milestone: Milestone;
  locked: boolean;
  active_lock_reason: string;
  comments: number;
  pull_request: {
    merged_at: string;
    diff_url: string;
    html_url: string;
    patch_url: string;
    url: string;
  };
  closed_at: string;
  created_at: string;
  updated_at: string;
  author_association: string;
  body_html: string;
  body_text: string;
  timeline_url: string;
  repository: Repository;
  performed_via_github_app: GitHubApp;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser3;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser4;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser5;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Comments provide a way for people to collaborate on an issue.
 */
export interface IssueComment {
  /**
   * Unique identifier of the issue comment
   */
  id: number;
  node_id: string;
  /**
   * URL for the issue comment
   */
  url: string;
  /**
   * Contents of the issue comment
   */
  body: string;
  body_text: string;
  body_html: string;
  html_url: string;
  user: SimpleUser6;
  created_at: string;
  updated_at: string;
  issue_url: string;
  author_association: string;
  performed_via_github_app: GitHubApp1;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser6 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp1 {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser7;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser7 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type ActivityListRepoEventsEndpoint = {
  owner: string;

  repo: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActivityListRepoEventsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/events";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ActivityListRepoEventsResponseData = Event[];

/**
 * Event
 */
export interface Event {
  id: string;
  type: string;
  actor: Actor;
  repo: {
    id: number;
    name: string;
    url: string;
  };
  org: Actor1;
  payload: {
    action: string;
    issue: IssueSimple;
    comment: IssueComment;
    pages: {
      page_name: string;
      title: string;
      summary: string;
      action: string;
      sha: string;
      html_url: string;
    }[];
  };
  public: boolean;
  created_at: string;
}
/**
 * Actor
 */
export interface Actor {
  id: number;
  login: string;
  display_login: string;
  gravatar_id: string;
  url: string;
  avatar_url: string;
}
/**
 * Actor
 */
export interface Actor1 {
  id: number;
  login: string;
  display_login: string;
  gravatar_id: string;
  url: string;
  avatar_url: string;
}
/**
 * Issue Simple
 */
export interface IssueSimple {
  id: number;
  node_id: string;
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  number: number;
  state: string;
  title: string;
  body: string;
  user: SimpleUser;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  assignee: SimpleUser1;
  assignees: SimpleUser2[];
  milestone: Milestone;
  locked: boolean;
  active_lock_reason: string;
  comments: number;
  pull_request: {
    merged_at: string;
    diff_url: string;
    html_url: string;
    patch_url: string;
    url: string;
  };
  closed_at: string;
  created_at: string;
  updated_at: string;
  author_association: string;
  body_html: string;
  body_text: string;
  timeline_url: string;
  repository: Repository;
  performed_via_github_app: GitHubApp;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser3;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser4;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser5;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Comments provide a way for people to collaborate on an issue.
 */
export interface IssueComment {
  /**
   * Unique identifier of the issue comment
   */
  id: number;
  node_id: string;
  /**
   * URL for the issue comment
   */
  url: string;
  /**
   * Contents of the issue comment
   */
  body: string;
  body_text: string;
  body_html: string;
  html_url: string;
  user: SimpleUser6;
  created_at: string;
  updated_at: string;
  issue_url: string;
  author_association: string;
  performed_via_github_app: GitHubApp1;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser6 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp1 {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser7;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser7 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type ActivityListRepoNotificationsForAuthenticatedUserEndpoint = {
  owner: string;

  repo: string;
  /**
   * If `true`, show notifications marked as read.
   */
  all?: boolean;
  /**
   * If `true`, only shows notifications in which the user is directly participating or mentioned.
   */
  participating?: boolean;
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /**
   * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  before?: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActivityListRepoNotificationsForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/notifications";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ActivityListRepoNotificationsForAuthenticatedUserResponseData = Thread[];

/**
 * Thread
 */
export interface Thread {
  id: string;
  repository: MinimalRepository;
  subject: {
    title: string;
    url: string;
    latest_comment_url: string;
    type: string;
  };
  reason: string;
  unread: boolean;
  updated_at: string;
  last_read_at: string;
  url: string;
  subscription_url: string;
}
/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ActivityListReposStarredByAuthenticatedUserEndpoint = {
  /**
   * One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
   */
  sort?: "created" | "updated";
  /**
   * One of `asc` (ascending) or `desc` (descending).
   */
  direction?: "asc" | "desc";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActivityListReposStarredByAuthenticatedUserRequestOptions = {
  method: "GET";
  url: "/user/starred";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ActivityListReposStarredByAuthenticatedUserResponseData = Repository[];

/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

export type ActivityListReposStarredByAuthenticatedUserResponse200Data = StarredRepository[];

/**
 * Starred Repository
 */
export interface StarredRepository {
  starred_at: string;
  repo: Repository;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ActivityListReposStarredByAuthenticatedUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ActivityListReposStarredByAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

type ActivityListReposStarredByUserEndpoint = {
  username: string;
  /**
   * One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
   */
  sort?: "created" | "updated";
  /**
   * One of `asc` (ascending) or `desc` (descending).
   */
  direction?: "asc" | "desc";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActivityListReposStarredByUserRequestOptions = {
  method: "GET";
  url: "/users/:username/starred";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ActivityListReposStarredByUserResponseData = Repository[];

/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

export type ActivityListReposStarredByUserResponse200Data = StarredRepository[];

/**
 * Starred Repository
 */
export interface StarredRepository {
  starred_at: string;
  repo: Repository;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ActivityListReposWatchedByUserEndpoint = {
  username: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActivityListReposWatchedByUserRequestOptions = {
  method: "GET";
  url: "/users/:username/subscriptions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ActivityListReposWatchedByUserResponseData = MinimalRepository[];

/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ActivityListStargazersForRepoEndpoint = {
  owner: string;

  repo: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActivityListStargazersForRepoRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/stargazers";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ActivityListStargazersForRepoResponseData = SimpleUser[];

/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

export type ActivityListStargazersForRepoResponse200Data = Stargazer[];

/**
 * Stargazer
 */
export interface Stargazer {
  starred_at: string;
  user: SimpleUser;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Validation Error
 */
export interface ActivityListStargazersForRepoResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ActivityListWatchedReposForAuthenticatedUserEndpoint = {
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActivityListWatchedReposForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: "/user/subscriptions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ActivityListWatchedReposForAuthenticatedUserResponseData = MinimalRepository[];

/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ActivityListWatchedReposForAuthenticatedUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ActivityListWatchedReposForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

type ActivityListWatchersForRepoEndpoint = {
  owner: string;

  repo: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ActivityListWatchersForRepoRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/subscribers";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ActivityListWatchersForRepoResponseData = SimpleUser[];

/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

type ActivityMarkNotificationsAsReadEndpoint = {
  /**
   * Describes the last point that notifications were checked.
   */
  last_read_at?: string;
  /**
   * Whether the notification has been read.
   */
  read?: boolean;
};

type ActivityMarkNotificationsAsReadRequestOptions = {
  method: "PUT";
  url: "/notifications";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ActivityMarkNotificationsAsReadResponseData {
  message: string;
}

/**
 * Basic Error
 */
export interface ActivityMarkNotificationsAsReadResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ActivityMarkNotificationsAsReadResponse403Data {
  message: string;
  documentation_url: string;
}

type ActivityMarkRepoNotificationsAsReadEndpoint = {
  owner: string;

  repo: string;
  /**
   * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
   */
  last_read_at?: string;
};

type ActivityMarkRepoNotificationsAsReadRequestOptions = {
  method: "PUT";
  url: "/repos/:owner/:repo/notifications";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ActivityMarkThreadAsReadEndpoint = {
  /**
   * thread_id parameter
   */
  thread_id: number;
};

type ActivityMarkThreadAsReadRequestOptions = {
  method: "PATCH";
  url: "/notifications/threads/:thread_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ActivityMarkThreadAsReadResponse403Data {
  message: string;
  documentation_url: string;
}

type ActivitySetRepoSubscriptionEndpoint = {
  owner: string;

  repo: string;
  /**
   * Determines if notifications should be received from this repository.
   */
  subscribed?: boolean;
  /**
   * Determines if all notifications should be blocked from this repository.
   */
  ignored?: boolean;
};

type ActivitySetRepoSubscriptionRequestOptions = {
  method: "PUT";
  url: "/repos/:owner/:repo/subscription";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Repository invitations let you manage who you collaborate with.
 */
export interface ActivitySetRepoSubscriptionResponseData {
  /**
   * Determines if notifications should be received from this repository.
   */
  subscribed: boolean;
  /**
   * Determines if all notifications should be blocked from this repository.
   */
  ignored: boolean;
  reason: string;
  created_at: string;
  url: string;
  repository_url: string;
}

type ActivitySetThreadSubscriptionEndpoint = {
  /**
   * thread_id parameter
   */
  thread_id: number;
  /**
   * Whether to block all notifications from a thread.
   */
  ignored?: boolean;
};

type ActivitySetThreadSubscriptionRequestOptions = {
  method: "PUT";
  url: "/notifications/threads/:thread_id/subscription";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Thread Subscription
 */
export interface ActivitySetThreadSubscriptionResponseData {
  subscribed: boolean;
  ignored: boolean;
  reason: string;
  created_at: string;
  url: string;
  thread_url: string;
  repository_url: string;
}

/**
 * Basic Error
 */
export interface ActivitySetThreadSubscriptionResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ActivitySetThreadSubscriptionResponse403Data {
  message: string;
  documentation_url: string;
}

type ActivityStarRepoForAuthenticatedUserEndpoint = {
  owner: string;

  repo: string;
};

type ActivityStarRepoForAuthenticatedUserRequestOptions = {
  method: "PUT";
  url: "/user/starred/:owner/:repo";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ActivityStarRepoForAuthenticatedUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ActivityStarRepoForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ActivityStarRepoForAuthenticatedUserResponse404Data {
  message: string;
  documentation_url: string;
}

type ActivityUnstarRepoForAuthenticatedUserEndpoint = {
  owner: string;

  repo: string;
};

type ActivityUnstarRepoForAuthenticatedUserRequestOptions = {
  method: "DELETE";
  url: "/user/starred/:owner/:repo";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ActivityUnstarRepoForAuthenticatedUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ActivityUnstarRepoForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ActivityUnstarRepoForAuthenticatedUserResponse404Data {
  message: string;
  documentation_url: string;
}

type AppsAddRepoToInstallationEndpoint = {
  /**
   * installation_id parameter
   */
  installation_id: number;
  /**
   * repository_id parameter
   */
  repository_id: number;
};

type AppsAddRepoToInstallationRequestOptions = {
  method: "PUT";
  url: "/user/installations/:installation_id/repositories/:repository_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface AppsAddRepoToInstallationResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface AppsAddRepoToInstallationResponse404Data {
  message: string;
  documentation_url: string;
}

type AppsCheckAuthorizationEndpoint = {
  client_id: string;

  access_token: string;
};

type AppsCheckAuthorizationRequestOptions = {
  method: "GET";
  url: "/applications/:client_id/tokens/:access_token";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type AppsCheckAuthorizationResponseData = Authorization;

/**
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
export interface Authorization {
  id: number;
  url: string;
  /**
   * A list of scopes that this authorization is in.
   */
  scopes: string[];
  token: string;
  token_last_eight: string;
  hashed_token: string;
  app: {
    client_id: string;
    name: string;
    url: string;
    [k: string]: unknown;
  };
  note: string;
  note_url: string;
  updated_at: string;
  created_at: string;
  fingerprint: string;
  user?: SimpleUser;
  installation?: ScopedInstallation;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ScopedInstallation {
  permissions: {
    [k: string]: unknown;
  };
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  single_file_name: string;
  repositories_url: string;
  account: SimpleUser1;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface AppsCheckAuthorizationResponse404Data {
  message: string;
  documentation_url: string;
}

type AppsCheckTokenEndpoint = {
  client_id: string;
  /**
   * The access_token of the OAuth application.
   */
  access_token: string;
};

type AppsCheckTokenRequestOptions = {
  method: "POST";
  url: "/applications/:client_id/token";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
export interface AppsCheckTokenResponseData {
  id: number;
  url: string;
  /**
   * A list of scopes that this authorization is in.
   */
  scopes: string[];
  token: string;
  token_last_eight: string;
  hashed_token: string;
  app: {
    client_id: string;
    name: string;
    url: string;
  };
  note: string;
  note_url: string;
  updated_at: string;
  created_at: string;
  fingerprint: string;
  user: SimpleUser;
  installation: ScopedInstallation;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ScopedInstallation {
  permissions: {
    [k: string]: unknown;
  };
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  single_file_name: string;
  repositories_url: string;
  account: SimpleUser1;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface AppsCheckTokenResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface AppsCheckTokenResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type AppsCreateContentAttachmentEndpoint = {
  /**
   * content_reference_id parameter
   */
  content_reference_id: number;
  /**
   * The title of the attachment
   */
  title: string;
  /**
   * The body of the attachment
   */
  body: string;
} & RequiredPreview<"corsair">;

type AppsCreateContentAttachmentRequestOptions = {
  method: "POST";
  url: "/content_references/:content_reference_id/attachments";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Content Reference attachments allow you to provide context around URLs posted in comments
 */
export interface AppsCreateContentAttachmentResponseData {
  /**
   * The ID of the attachment
   */
  id: number;
  /**
   * The title of the attachment
   */
  title: string;
  /**
   * The body of the attachment
   */
  body: string;
  /**
   * The node_id of the content attachment
   */
  node_id: string;
}

/**
 * Basic Error
 */
export interface AppsCreateContentAttachmentResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface AppsCreateContentAttachmentResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface AppsCreateContentAttachmentResponse410Data {
  message: string;
  documentation_url: string;
}

export interface AppsCreateContentAttachmentResponse415Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface AppsCreateContentAttachmentResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type AppsCreateFromManifestEndpoint = {
  /**
   * code parameter
   */
  code: string;
};

type AppsCreateFromManifestRequestOptions = {
  method: "POST";
  url: "/app-manifests/:code/conversions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type AppsCreateFromManifestResponseData = GitHubApp & {
  client_id: string;
  client_secret: string;
  webhook_secret: string;
  pem: string;
  [k: string]: unknown;
};

/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface AppsCreateFromManifestResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error Simple
 */
export interface AppsCreateFromManifestResponse422Data {
  message: string;
  documentation_url: string;
  errors: string[];
}

type AppsCreateInstallationAccessTokenEndpoint = {
  /**
   * installation_id parameter
   */
  installation_id: number;
  /**
   * List of repository names that the token should have access to
   */
  repositories?: string[];
  /**
   * List of repository IDs that the token should have access to
   */
  repository_ids?: number[];

  permissions?: AppsCreateInstallationAccessTokenParamsPermissions;
};

type AppsCreateInstallationAccessTokenRequestOptions = {
  method: "POST";
  url: "/app/installations/:installation_id/access_tokens";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Authentication token for a GitHub App installed on a user or org.
 */
export interface AppsCreateInstallationAccessTokenResponseData {
  token: string;
  expires_at: string;
  permissions: {
    issues: string;
    contents: string;
    metadata: string;
    single_file: string;
  };
  repository_selection: "all" | "selected";
  repositories: Repository[];
  single_file: string;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface AppsCreateInstallationAccessTokenResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface AppsCreateInstallationAccessTokenResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface AppsCreateInstallationAccessTokenResponse404Data {
  message: string;
  documentation_url: string;
}

export interface AppsCreateInstallationAccessTokenResponse415Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface AppsCreateInstallationAccessTokenResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type AppsDeleteAuthorizationEndpoint = {
  client_id: string;
  /**
   * The OAuth access token used to authenticate to the GitHub API.
   */
  access_token?: string;
};

type AppsDeleteAuthorizationRequestOptions = {
  method: "DELETE";
  url: "/applications/:client_id/grant";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Validation Error
 */
export interface AppsDeleteAuthorizationResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type AppsDeleteInstallationEndpoint = {
  /**
   * installation_id parameter
   */
  installation_id: number;
};

type AppsDeleteInstallationRequestOptions = {
  method: "DELETE";
  url: "/app/installations/:installation_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface AppsDeleteInstallationResponse404Data {
  message: string;
  documentation_url: string;
}

type AppsDeleteTokenEndpoint = {
  client_id: string;
  /**
   * The OAuth access token used to authenticate to the GitHub API.
   */
  access_token?: string;
};

type AppsDeleteTokenRequestOptions = {
  method: "DELETE";
  url: "/applications/:client_id/token";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Validation Error
 */
export interface AppsDeleteTokenResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type AppsGetAuthenticatedEndpoint = {};

type AppsGetAuthenticatedRequestOptions = {
  method: "GET";
  url: "/app";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface AppsGetAuthenticatedResponseData {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug: string;
  node_id: string;
  owner: SimpleUser;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues: string;
    checks: string;
    metadata: string;
    contents: string;
    deployments: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count: number;
  client_id: string;
  client_secret: string;
  webhook_secret: string;
  pem: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type AppsGetBySlugEndpoint = {
  /**
   * app_slug parameter
   */
  app_slug: string;
};

type AppsGetBySlugRequestOptions = {
  method: "GET";
  url: "/apps/:app_slug";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface AppsGetBySlugResponseData {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug: string;
  node_id: string;
  owner: SimpleUser;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues: string;
    checks: string;
    metadata: string;
    contents: string;
    deployments: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count: number;
  client_id: string;
  client_secret: string;
  webhook_secret: string;
  pem: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface AppsGetBySlugResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface AppsGetBySlugResponse404Data {
  message: string;
  documentation_url: string;
}

export interface AppsGetBySlugResponse415Data {
  message: string;
  documentation_url: string;
}

type AppsGetInstallationEndpoint = {
  /**
   * installation_id parameter
   */
  installation_id: number;
};

type AppsGetInstallationRequestOptions = {
  method: "GET";
  url: "/app/installations/:installation_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Installation
 */
export interface AppsGetInstallationResponseData {
  /**
   * The ID of the installation.
   */
  id: number;
  account: SimpleUser | Enterprise;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  access_tokens_url: string;
  repositories_url: string;
  html_url: string;
  app_id: number;
  /**
   * The ID of the user or organization this token is being scoped to.
   */
  target_id: number;
  target_type: string;
  permissions: {
    deployments: string;
    checks: string;
    metadata: string;
    contents: string;
    pull_requests: string;
    statuses: string;
    issues: string;
    organization_administration: string;
  };
  events: string[];
  created_at: string;
  updated_at: string;
  single_file_name: string;
  app_slug: string;
  suspended_by: SimpleUser1;
  suspended_at: string;
  contact_email: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * An enterprise account
 */
export interface Enterprise {
  /**
   * A short description of the enterprise.
   */
  description?: string;
  html_url: string;
  /**
   * The enterprise's website URL.
   */
  website_url?: string;
  /**
   * Unique identifier of the enterprise
   */
  id: number;
  node_id: string;
  /**
   * The name of the enterprise.
   */
  name: string;
  /**
   * The slug url identifier for the enterprise.
   */
  slug: string;
  created_at: string;
  updated_at: string;
  avatar_url: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface AppsGetInstallationResponse404Data {
  message: string;
  documentation_url: string;
}

export interface AppsGetInstallationResponse415Data {
  message: string;
  documentation_url: string;
}

type AppsGetOrgInstallationEndpoint = {
  org: string;
};

type AppsGetOrgInstallationRequestOptions = {
  method: "GET";
  url: "/orgs/:org/installation";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Installation
 */
export interface AppsGetOrgInstallationResponseData {
  /**
   * The ID of the installation.
   */
  id: number;
  account: SimpleUser | Enterprise;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  access_tokens_url: string;
  repositories_url: string;
  html_url: string;
  app_id: number;
  /**
   * The ID of the user or organization this token is being scoped to.
   */
  target_id: number;
  target_type: string;
  permissions: {
    deployments: string;
    checks: string;
    metadata: string;
    contents: string;
    pull_requests: string;
    statuses: string;
    issues: string;
    organization_administration: string;
  };
  events: string[];
  created_at: string;
  updated_at: string;
  single_file_name: string;
  app_slug: string;
  suspended_by: SimpleUser1;
  suspended_at: string;
  contact_email: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * An enterprise account
 */
export interface Enterprise {
  /**
   * A short description of the enterprise.
   */
  description?: string;
  html_url: string;
  /**
   * The enterprise's website URL.
   */
  website_url?: string;
  /**
   * Unique identifier of the enterprise
   */
  id: number;
  node_id: string;
  /**
   * The name of the enterprise.
   */
  name: string;
  /**
   * The slug url identifier for the enterprise.
   */
  slug: string;
  created_at: string;
  updated_at: string;
  avatar_url: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type AppsGetRepoInstallationEndpoint = {
  owner: string;

  repo: string;
};

type AppsGetRepoInstallationRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/installation";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Installation
 */
export interface AppsGetRepoInstallationResponseData {
  /**
   * The ID of the installation.
   */
  id: number;
  account: SimpleUser | Enterprise;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  access_tokens_url: string;
  repositories_url: string;
  html_url: string;
  app_id: number;
  /**
   * The ID of the user or organization this token is being scoped to.
   */
  target_id: number;
  target_type: string;
  permissions: {
    deployments: string;
    checks: string;
    metadata: string;
    contents: string;
    pull_requests: string;
    statuses: string;
    issues: string;
    organization_administration: string;
  };
  events: string[];
  created_at: string;
  updated_at: string;
  single_file_name: string;
  app_slug: string;
  suspended_by: SimpleUser1;
  suspended_at: string;
  contact_email: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * An enterprise account
 */
export interface Enterprise {
  /**
   * A short description of the enterprise.
   */
  description?: string;
  html_url: string;
  /**
   * The enterprise's website URL.
   */
  website_url?: string;
  /**
   * Unique identifier of the enterprise
   */
  id: number;
  node_id: string;
  /**
   * The name of the enterprise.
   */
  name: string;
  /**
   * The slug url identifier for the enterprise.
   */
  slug: string;
  created_at: string;
  updated_at: string;
  avatar_url: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface AppsGetRepoInstallationResponse404Data {
  message: string;
  documentation_url: string;
}

type AppsGetSubscriptionPlanForAccountEndpoint = {
  /**
   * account_id parameter
   */
  account_id: number;
};

type AppsGetSubscriptionPlanForAccountRequestOptions = {
  method: "GET";
  url: "/marketplace_listing/accounts/:account_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Marketplace Purchase
 */
export interface AppsGetSubscriptionPlanForAccountResponseData {
  url: string;
  type: string;
  id: number;
  login: string;
  organization_billing_email: string;
  marketplace_pending_change: {
    is_installed: boolean;
    effective_date: string;
    unit_count: number;
    id: number;
    plan: MarketplaceListingPlan;
  };
  marketplace_purchase: {
    billing_cycle: string;
    next_billing_date: string;
    is_installed: boolean;
    unit_count: number;
    on_free_trial: boolean;
    free_trial_ends_on: string;
    updated_at: string;
    plan: MarketplaceListingPlan1;
  };
}
/**
 * Marketplace Listing Plan
 */
export interface MarketplaceListingPlan {
  url: string;
  accounts_url: string;
  id: number;
  number: number;
  name: string;
  description: string;
  monthly_price_in_cents: number;
  yearly_price_in_cents: number;
  price_model: string;
  has_free_trial: boolean;
  unit_name: string;
  state: string;
  bullets: string[];
}
/**
 * Marketplace Listing Plan
 */
export interface MarketplaceListingPlan1 {
  url: string;
  accounts_url: string;
  id: number;
  number: number;
  name: string;
  description: string;
  monthly_price_in_cents: number;
  yearly_price_in_cents: number;
  price_model: string;
  has_free_trial: boolean;
  unit_name: string;
  state: string;
  bullets: string[];
}

/**
 * Basic Error
 */
export interface AppsGetSubscriptionPlanForAccountResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface AppsGetSubscriptionPlanForAccountResponse404Data {
  message: string;
  documentation_url: string;
}

type AppsGetSubscriptionPlanForAccountStubbedEndpoint = {
  /**
   * account_id parameter
   */
  account_id: number;
};

type AppsGetSubscriptionPlanForAccountStubbedRequestOptions = {
  method: "GET";
  url: "/marketplace_listing/stubbed/accounts/:account_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Marketplace Purchase
 */
export interface AppsGetSubscriptionPlanForAccountStubbedResponseData {
  url: string;
  type: string;
  id: number;
  login: string;
  organization_billing_email: string;
  marketplace_pending_change: {
    is_installed: boolean;
    effective_date: string;
    unit_count: number;
    id: number;
    plan: MarketplaceListingPlan;
  };
  marketplace_purchase: {
    billing_cycle: string;
    next_billing_date: string;
    is_installed: boolean;
    unit_count: number;
    on_free_trial: boolean;
    free_trial_ends_on: string;
    updated_at: string;
    plan: MarketplaceListingPlan1;
  };
}
/**
 * Marketplace Listing Plan
 */
export interface MarketplaceListingPlan {
  url: string;
  accounts_url: string;
  id: number;
  number: number;
  name: string;
  description: string;
  monthly_price_in_cents: number;
  yearly_price_in_cents: number;
  price_model: string;
  has_free_trial: boolean;
  unit_name: string;
  state: string;
  bullets: string[];
}
/**
 * Marketplace Listing Plan
 */
export interface MarketplaceListingPlan1 {
  url: string;
  accounts_url: string;
  id: number;
  number: number;
  name: string;
  description: string;
  monthly_price_in_cents: number;
  yearly_price_in_cents: number;
  price_model: string;
  has_free_trial: boolean;
  unit_name: string;
  state: string;
  bullets: string[];
}

/**
 * Basic Error
 */
export interface AppsGetSubscriptionPlanForAccountStubbedResponse401Data {
  message: string;
  documentation_url: string;
}

type AppsGetUserInstallationEndpoint = {
  username: string;
};

type AppsGetUserInstallationRequestOptions = {
  method: "GET";
  url: "/users/:username/installation";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Installation
 */
export interface AppsGetUserInstallationResponseData {
  /**
   * The ID of the installation.
   */
  id: number;
  account: SimpleUser | Enterprise;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  access_tokens_url: string;
  repositories_url: string;
  html_url: string;
  app_id: number;
  /**
   * The ID of the user or organization this token is being scoped to.
   */
  target_id: number;
  target_type: string;
  permissions: {
    deployments: string;
    checks: string;
    metadata: string;
    contents: string;
    pull_requests: string;
    statuses: string;
    issues: string;
    organization_administration: string;
  };
  events: string[];
  created_at: string;
  updated_at: string;
  single_file_name: string;
  app_slug: string;
  suspended_by: SimpleUser1;
  suspended_at: string;
  contact_email: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * An enterprise account
 */
export interface Enterprise {
  /**
   * A short description of the enterprise.
   */
  description?: string;
  html_url: string;
  /**
   * The enterprise's website URL.
   */
  website_url?: string;
  /**
   * Unique identifier of the enterprise
   */
  id: number;
  node_id: string;
  /**
   * The name of the enterprise.
   */
  name: string;
  /**
   * The slug url identifier for the enterprise.
   */
  slug: string;
  created_at: string;
  updated_at: string;
  avatar_url: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type AppsListAccountsForPlanEndpoint = {
  /**
   * plan_id parameter
   */
  plan_id: number;
  /**
   * One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
   */
  sort?: "created" | "updated";
  /**
   * To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.
   */
  direction?: "asc" | "desc";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type AppsListAccountsForPlanRequestOptions = {
  method: "GET";
  url: "/marketplace_listing/plans/:plan_id/accounts";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type AppsListAccountsForPlanResponseData = MarketplacePurchase[];

/**
 * Marketplace Purchase
 */
export interface MarketplacePurchase {
  url: string;
  type: string;
  id: number;
  login: string;
  organization_billing_email: string;
  marketplace_pending_change: {
    is_installed: boolean;
    effective_date: string;
    unit_count: number;
    id: number;
    plan: MarketplaceListingPlan;
  };
  marketplace_purchase: {
    billing_cycle: string;
    next_billing_date: string;
    is_installed: boolean;
    unit_count: number;
    on_free_trial: boolean;
    free_trial_ends_on: string;
    updated_at: string;
    plan: MarketplaceListingPlan1;
  };
}
/**
 * Marketplace Listing Plan
 */
export interface MarketplaceListingPlan {
  url: string;
  accounts_url: string;
  id: number;
  number: number;
  name: string;
  description: string;
  monthly_price_in_cents: number;
  yearly_price_in_cents: number;
  price_model: string;
  has_free_trial: boolean;
  unit_name: string;
  state: string;
  bullets: string[];
}
/**
 * Marketplace Listing Plan
 */
export interface MarketplaceListingPlan1 {
  url: string;
  accounts_url: string;
  id: number;
  number: number;
  name: string;
  description: string;
  monthly_price_in_cents: number;
  yearly_price_in_cents: number;
  price_model: string;
  has_free_trial: boolean;
  unit_name: string;
  state: string;
  bullets: string[];
}

/**
 * Basic Error
 */
export interface AppsListAccountsForPlanResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface AppsListAccountsForPlanResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface AppsListAccountsForPlanResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type AppsListAccountsForPlanStubbedEndpoint = {
  /**
   * plan_id parameter
   */
  plan_id: number;
  /**
   * One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
   */
  sort?: "created" | "updated";
  /**
   * To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.
   */
  direction?: "asc" | "desc";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type AppsListAccountsForPlanStubbedRequestOptions = {
  method: "GET";
  url: "/marketplace_listing/stubbed/plans/:plan_id/accounts";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type AppsListAccountsForPlanStubbedResponseData = MarketplacePurchase[];

/**
 * Marketplace Purchase
 */
export interface MarketplacePurchase {
  url: string;
  type: string;
  id: number;
  login: string;
  organization_billing_email: string;
  marketplace_pending_change: {
    is_installed: boolean;
    effective_date: string;
    unit_count: number;
    id: number;
    plan: MarketplaceListingPlan;
  };
  marketplace_purchase: {
    billing_cycle: string;
    next_billing_date: string;
    is_installed: boolean;
    unit_count: number;
    on_free_trial: boolean;
    free_trial_ends_on: string;
    updated_at: string;
    plan: MarketplaceListingPlan1;
  };
}
/**
 * Marketplace Listing Plan
 */
export interface MarketplaceListingPlan {
  url: string;
  accounts_url: string;
  id: number;
  number: number;
  name: string;
  description: string;
  monthly_price_in_cents: number;
  yearly_price_in_cents: number;
  price_model: string;
  has_free_trial: boolean;
  unit_name: string;
  state: string;
  bullets: string[];
}
/**
 * Marketplace Listing Plan
 */
export interface MarketplaceListingPlan1 {
  url: string;
  accounts_url: string;
  id: number;
  number: number;
  name: string;
  description: string;
  monthly_price_in_cents: number;
  yearly_price_in_cents: number;
  price_model: string;
  has_free_trial: boolean;
  unit_name: string;
  state: string;
  bullets: string[];
}

/**
 * Basic Error
 */
export interface AppsListAccountsForPlanStubbedResponse401Data {
  message: string;
  documentation_url: string;
}

type AppsListInstallationReposForAuthenticatedUserEndpoint = {
  /**
   * installation_id parameter
   */
  installation_id: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type AppsListInstallationReposForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: "/user/installations/:installation_id/repositories";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface AppsListInstallationReposForAuthenticatedUserResponseData {
  total_count: number;
  repository_selection: string;
  repositories: Repository[];
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface AppsListInstallationReposForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface AppsListInstallationReposForAuthenticatedUserResponse404Data {
  message: string;
  documentation_url: string;
}

type AppsListInstallationsEndpoint = {
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;

  outdated?: string;
};

type AppsListInstallationsRequestOptions = {
  method: "GET";
  url: "/app/installations";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type AppsListInstallationsResponseData = Installation[];

/**
 * Installation
 */
export interface Installation {
  /**
   * The ID of the installation.
   */
  id: number;
  account: SimpleUser | Enterprise;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  access_tokens_url: string;
  repositories_url: string;
  html_url: string;
  app_id: number;
  /**
   * The ID of the user or organization this token is being scoped to.
   */
  target_id: number;
  target_type: string;
  permissions: {
    deployments: string;
    checks: string;
    metadata: string;
    contents: string;
    pull_requests: string;
    statuses: string;
    issues: string;
    organization_administration: string;
  };
  events: string[];
  created_at: string;
  updated_at: string;
  single_file_name: string;
  app_slug: string;
  suspended_by: SimpleUser1;
  suspended_at: string;
  contact_email: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * An enterprise account
 */
export interface Enterprise {
  /**
   * A short description of the enterprise.
   */
  description?: string;
  html_url: string;
  /**
   * The enterprise's website URL.
   */
  website_url?: string;
  /**
   * Unique identifier of the enterprise
   */
  id: number;
  node_id: string;
  /**
   * The name of the enterprise.
   */
  name: string;
  /**
   * The slug url identifier for the enterprise.
   */
  slug: string;
  created_at: string;
  updated_at: string;
  avatar_url: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type AppsListInstallationsForAuthenticatedUserEndpoint = {
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type AppsListInstallationsForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: "/user/installations";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface AppsListInstallationsForAuthenticatedUserResponseData {
  total_count: number;
  installations: Installation[];
}
/**
 * Installation
 */
export interface Installation {
  /**
   * The ID of the installation.
   */
  id: number;
  account: SimpleUser | Enterprise;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  access_tokens_url: string;
  repositories_url: string;
  html_url: string;
  app_id: number;
  /**
   * The ID of the user or organization this token is being scoped to.
   */
  target_id: number;
  target_type: string;
  permissions: {
    deployments: string;
    checks: string;
    metadata: string;
    contents: string;
    pull_requests: string;
    statuses: string;
    issues: string;
    organization_administration: string;
  };
  events: string[];
  created_at: string;
  updated_at: string;
  single_file_name: string;
  app_slug: string;
  suspended_by: SimpleUser1;
  suspended_at: string;
  contact_email: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * An enterprise account
 */
export interface Enterprise {
  /**
   * A short description of the enterprise.
   */
  description?: string;
  html_url: string;
  /**
   * The enterprise's website URL.
   */
  website_url?: string;
  /**
   * Unique identifier of the enterprise
   */
  id: number;
  node_id: string;
  /**
   * The name of the enterprise.
   */
  name: string;
  /**
   * The slug url identifier for the enterprise.
   */
  slug: string;
  created_at: string;
  updated_at: string;
  avatar_url: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface AppsListInstallationsForAuthenticatedUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface AppsListInstallationsForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

export interface AppsListInstallationsForAuthenticatedUserResponse415Data {
  message: string;
  documentation_url: string;
}

type AppsListPlansEndpoint = {
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type AppsListPlansRequestOptions = {
  method: "GET";
  url: "/marketplace_listing/plans";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type AppsListPlansResponseData = MarketplaceListingPlan[];

/**
 * Marketplace Listing Plan
 */
export interface MarketplaceListingPlan {
  url: string;
  accounts_url: string;
  id: number;
  number: number;
  name: string;
  description: string;
  monthly_price_in_cents: number;
  yearly_price_in_cents: number;
  price_model: string;
  has_free_trial: boolean;
  unit_name: string;
  state: string;
  bullets: string[];
}

/**
 * Basic Error
 */
export interface AppsListPlansResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface AppsListPlansResponse404Data {
  message: string;
  documentation_url: string;
}

type AppsListPlansStubbedEndpoint = {
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type AppsListPlansStubbedRequestOptions = {
  method: "GET";
  url: "/marketplace_listing/stubbed/plans";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type AppsListPlansStubbedResponseData = MarketplaceListingPlan[];

/**
 * Marketplace Listing Plan
 */
export interface MarketplaceListingPlan {
  url: string;
  accounts_url: string;
  id: number;
  number: number;
  name: string;
  description: string;
  monthly_price_in_cents: number;
  yearly_price_in_cents: number;
  price_model: string;
  has_free_trial: boolean;
  unit_name: string;
  state: string;
  bullets: string[];
}

/**
 * Basic Error
 */
export interface AppsListPlansStubbedResponse401Data {
  message: string;
  documentation_url: string;
}

type AppsListReposAccessibleToInstallationEndpoint = {
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type AppsListReposAccessibleToInstallationRequestOptions = {
  method: "GET";
  url: "/installation/repositories";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface AppsListReposAccessibleToInstallationResponseData {
  total_count: number;
  repositories: Repository[];
  repository_selection: string;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface AppsListReposAccessibleToInstallationResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface AppsListReposAccessibleToInstallationResponse403Data {
  message: string;
  documentation_url: string;
}

type AppsListSubscriptionsForAuthenticatedUserEndpoint = {
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type AppsListSubscriptionsForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: "/user/marketplace_purchases";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type AppsListSubscriptionsForAuthenticatedUserResponseData = UserMarketplacePurchase[];

/**
 * User Marketplace Purchase
 */
export interface UserMarketplacePurchase {
  billing_cycle: string;
  next_billing_date: string;
  unit_count: number;
  on_free_trial: boolean;
  free_trial_ends_on: string;
  updated_at: string;
  account: MarketplaceAccount;
  plan: MarketplaceListingPlan;
}
export interface MarketplaceAccount {
  url: string;
  id: number;
  type: string;
  node_id: string;
  login: string;
  email: string;
  organization_billing_email: string;
}
/**
 * Marketplace Listing Plan
 */
export interface MarketplaceListingPlan {
  url: string;
  accounts_url: string;
  id: number;
  number: number;
  name: string;
  description: string;
  monthly_price_in_cents: number;
  yearly_price_in_cents: number;
  price_model: string;
  has_free_trial: boolean;
  unit_name: string;
  state: string;
  bullets: string[];
}

/**
 * Basic Error
 */
export interface AppsListSubscriptionsForAuthenticatedUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface AppsListSubscriptionsForAuthenticatedUserResponse404Data {
  message: string;
  documentation_url: string;
}

type AppsListSubscriptionsForAuthenticatedUserStubbedEndpoint = {
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type AppsListSubscriptionsForAuthenticatedUserStubbedRequestOptions = {
  method: "GET";
  url: "/user/marketplace_purchases/stubbed";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type AppsListSubscriptionsForAuthenticatedUserStubbedResponseData = UserMarketplacePurchase[];

/**
 * User Marketplace Purchase
 */
export interface UserMarketplacePurchase {
  billing_cycle: string;
  next_billing_date: string;
  unit_count: number;
  on_free_trial: boolean;
  free_trial_ends_on: string;
  updated_at: string;
  account: MarketplaceAccount;
  plan: MarketplaceListingPlan;
}
export interface MarketplaceAccount {
  url: string;
  id: number;
  type: string;
  node_id: string;
  login: string;
  email: string;
  organization_billing_email: string;
}
/**
 * Marketplace Listing Plan
 */
export interface MarketplaceListingPlan {
  url: string;
  accounts_url: string;
  id: number;
  number: number;
  name: string;
  description: string;
  monthly_price_in_cents: number;
  yearly_price_in_cents: number;
  price_model: string;
  has_free_trial: boolean;
  unit_name: string;
  state: string;
  bullets: string[];
}

/**
 * Basic Error
 */
export interface AppsListSubscriptionsForAuthenticatedUserStubbedResponse401Data {
  message: string;
  documentation_url: string;
}

type AppsRemoveRepoFromInstallationEndpoint = {
  /**
   * installation_id parameter
   */
  installation_id: number;
  /**
   * repository_id parameter
   */
  repository_id: number;
};

type AppsRemoveRepoFromInstallationRequestOptions = {
  method: "DELETE";
  url: "/user/installations/:installation_id/repositories/:repository_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface AppsRemoveRepoFromInstallationResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface AppsRemoveRepoFromInstallationResponse404Data {
  message: string;
  documentation_url: string;
}

type AppsResetAuthorizationEndpoint = {
  client_id: string;

  access_token: string;
};

type AppsResetAuthorizationRequestOptions = {
  method: "POST";
  url: "/applications/:client_id/tokens/:access_token";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
export interface AppsResetAuthorizationResponseData {
  id: number;
  url: string;
  /**
   * A list of scopes that this authorization is in.
   */
  scopes: string[];
  token: string;
  token_last_eight: string;
  hashed_token: string;
  app: {
    client_id: string;
    name: string;
    url: string;
  };
  note: string;
  note_url: string;
  updated_at: string;
  created_at: string;
  fingerprint: string;
  user: SimpleUser;
  installation: ScopedInstallation;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ScopedInstallation {
  permissions: {
    [k: string]: unknown;
  };
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  single_file_name: string;
  repositories_url: string;
  account: SimpleUser1;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type AppsResetTokenEndpoint = {
  client_id: string;
  /**
   * The access_token of the OAuth application.
   */
  access_token: string;
};

type AppsResetTokenRequestOptions = {
  method: "PATCH";
  url: "/applications/:client_id/token";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
export interface AppsResetTokenResponseData {
  id: number;
  url: string;
  /**
   * A list of scopes that this authorization is in.
   */
  scopes: string[];
  token: string;
  token_last_eight: string;
  hashed_token: string;
  app: {
    client_id: string;
    name: string;
    url: string;
  };
  note: string;
  note_url: string;
  updated_at: string;
  created_at: string;
  fingerprint: string;
  user: SimpleUser;
  installation: ScopedInstallation;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ScopedInstallation {
  permissions: {
    [k: string]: unknown;
  };
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  single_file_name: string;
  repositories_url: string;
  account: SimpleUser1;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Validation Error
 */
export interface AppsResetTokenResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type AppsRevokeAuthorizationForApplicationEndpoint = {
  client_id: string;

  access_token: string;
};

type AppsRevokeAuthorizationForApplicationRequestOptions = {
  method: "DELETE";
  url: "/applications/:client_id/tokens/:access_token";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type AppsRevokeGrantForApplicationEndpoint = {
  client_id: string;

  access_token: string;
};

type AppsRevokeGrantForApplicationRequestOptions = {
  method: "DELETE";
  url: "/applications/:client_id/grants/:access_token";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type AppsRevokeInstallationAccessTokenEndpoint = {};

type AppsRevokeInstallationAccessTokenRequestOptions = {
  method: "DELETE";
  url: "/installation/token";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type AppsSuspendInstallationEndpoint = {
  /**
   * installation_id parameter
   */
  installation_id: number;
};

type AppsSuspendInstallationRequestOptions = {
  method: "PUT";
  url: "/app/installations/:installation_id/suspended";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface AppsSuspendInstallationResponse404Data {
  message: string;
  documentation_url: string;
}

type AppsUnsuspendInstallationEndpoint = {
  /**
   * installation_id parameter
   */
  installation_id: number;
};

type AppsUnsuspendInstallationRequestOptions = {
  method: "DELETE";
  url: "/app/installations/:installation_id/suspended";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface AppsUnsuspendInstallationResponse404Data {
  message: string;
  documentation_url: string;
}

type BillingGetGithubActionsBillingGheEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
};

type BillingGetGithubActionsBillingGheRequestOptions = {
  method: "GET";
  url: "/enterprises/:enterprise/settings/billing/actions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface BillingGetGithubActionsBillingGheResponseData {
  /**
   * The sum of the free and paid GitHub Actions minutes used.
   */
  total_minutes_used: number;
  /**
   * The total paid GitHub Actions minutes used.
   */
  total_paid_minutes_used: number;
  /**
   * The amount of free GitHub Actions minutes available.
   */
  included_minutes: number;
  minutes_used_breakdown: {
    /**
     * Total minutes used on Ubuntu runner machines.
     */
    UBUNTU: number;
    /**
     * Total minutes used on macOS runner machines.
     */
    MACOS: number;
    /**
     * Total minutes used on Windows runner machines.
     */
    WINDOWS: number;
  };
}

type BillingGetGithubActionsBillingOrgEndpoint = {
  org: string;
};

type BillingGetGithubActionsBillingOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/settings/billing/actions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface BillingGetGithubActionsBillingOrgResponseData {
  /**
   * The sum of the free and paid GitHub Actions minutes used.
   */
  total_minutes_used: number;
  /**
   * The total paid GitHub Actions minutes used.
   */
  total_paid_minutes_used: number;
  /**
   * The amount of free GitHub Actions minutes available.
   */
  included_minutes: number;
  minutes_used_breakdown: {
    /**
     * Total minutes used on Ubuntu runner machines.
     */
    UBUNTU: number;
    /**
     * Total minutes used on macOS runner machines.
     */
    MACOS: number;
    /**
     * Total minutes used on Windows runner machines.
     */
    WINDOWS: number;
  };
}

type BillingGetGithubActionsBillingUserEndpoint = {
  username: string;
};

type BillingGetGithubActionsBillingUserRequestOptions = {
  method: "GET";
  url: "/users/:username/settings/billing/actions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface BillingGetGithubActionsBillingUserResponseData {
  /**
   * The sum of the free and paid GitHub Actions minutes used.
   */
  total_minutes_used: number;
  /**
   * The total paid GitHub Actions minutes used.
   */
  total_paid_minutes_used: number;
  /**
   * The amount of free GitHub Actions minutes available.
   */
  included_minutes: number;
  minutes_used_breakdown: {
    /**
     * Total minutes used on Ubuntu runner machines.
     */
    UBUNTU: number;
    /**
     * Total minutes used on macOS runner machines.
     */
    MACOS: number;
    /**
     * Total minutes used on Windows runner machines.
     */
    WINDOWS: number;
  };
}

type BillingGetGithubPackagesBillingGheEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
};

type BillingGetGithubPackagesBillingGheRequestOptions = {
  method: "GET";
  url: "/enterprises/:enterprise/settings/billing/packages";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface BillingGetGithubPackagesBillingGheResponseData {
  /**
   * Sum of the free and paid storage space (GB) for GitHuub Packages.
   */
  total_gigabytes_bandwidth_used: number;
  /**
   * Total paid storage space (GB) for GitHuub Packages.
   */
  total_paid_gigabytes_bandwidth_used: number;
  /**
   * Free storage space (GB) for GitHub Packages.
   */
  included_gigabytes_bandwidth: number;
}

type BillingGetGithubPackagesBillingOrgEndpoint = {
  org: string;
};

type BillingGetGithubPackagesBillingOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/settings/billing/packages";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface BillingGetGithubPackagesBillingOrgResponseData {
  /**
   * Sum of the free and paid storage space (GB) for GitHuub Packages.
   */
  total_gigabytes_bandwidth_used: number;
  /**
   * Total paid storage space (GB) for GitHuub Packages.
   */
  total_paid_gigabytes_bandwidth_used: number;
  /**
   * Free storage space (GB) for GitHub Packages.
   */
  included_gigabytes_bandwidth: number;
}

type BillingGetGithubPackagesBillingUserEndpoint = {
  username: string;
};

type BillingGetGithubPackagesBillingUserRequestOptions = {
  method: "GET";
  url: "/users/:username/settings/billing/packages";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface BillingGetGithubPackagesBillingUserResponseData {
  /**
   * Sum of the free and paid storage space (GB) for GitHuub Packages.
   */
  total_gigabytes_bandwidth_used: number;
  /**
   * Total paid storage space (GB) for GitHuub Packages.
   */
  total_paid_gigabytes_bandwidth_used: number;
  /**
   * Free storage space (GB) for GitHub Packages.
   */
  included_gigabytes_bandwidth: number;
}

type BillingGetSharedStorageBillingGheEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
};

type BillingGetSharedStorageBillingGheRequestOptions = {
  method: "GET";
  url: "/enterprises/:enterprise/settings/billing/shared-storage";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface BillingGetSharedStorageBillingGheResponseData {
  /**
   * Numbers of days left in billing cycle.
   */
  days_left_in_billing_cycle: number;
  /**
   * Estimated storage space (GB) used in billing cycle.
   */
  estimated_paid_storage_for_month: number;
  /**
   * Estimated sum of free and paid storage space (GB) used in billing cycle.
   */
  estimated_storage_for_month: number;
}

type BillingGetSharedStorageBillingOrgEndpoint = {
  org: string;
};

type BillingGetSharedStorageBillingOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/settings/billing/shared-storage";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface BillingGetSharedStorageBillingOrgResponseData {
  /**
   * Numbers of days left in billing cycle.
   */
  days_left_in_billing_cycle: number;
  /**
   * Estimated storage space (GB) used in billing cycle.
   */
  estimated_paid_storage_for_month: number;
  /**
   * Estimated sum of free and paid storage space (GB) used in billing cycle.
   */
  estimated_storage_for_month: number;
}

type BillingGetSharedStorageBillingUserEndpoint = {
  username: string;
};

type BillingGetSharedStorageBillingUserRequestOptions = {
  method: "GET";
  url: "/users/:username/settings/billing/shared-storage";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface BillingGetSharedStorageBillingUserResponseData {
  /**
   * Numbers of days left in billing cycle.
   */
  days_left_in_billing_cycle: number;
  /**
   * Estimated storage space (GB) used in billing cycle.
   */
  estimated_paid_storage_for_month: number;
  /**
   * Estimated sum of free and paid storage space (GB) used in billing cycle.
   */
  estimated_storage_for_month: number;
}

type ChecksCreateEndpoint = {
  owner: string;

  repo: string;
  /**
   * The name of the check. For example, "code-coverage".
   */
  name: string;
  /**
   * The SHA of the commit.
   */
  head_sha: string;
  /**
   * The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.
   */
  details_url?: string;
  /**
   * A reference for the run on the integrator's system.
   */
  external_id?: string;
  /**
   * The current status. Can be one of `queued`, `in_progress`, or `completed`.
   */
  status?: "queued" | "in_progress" | "completed";
  /**
   * The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  started_at?: string;
  /**
   * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `success`, `failure`, `neutral`, `cancelled`, `skipped`, `timed_out`, or `action_required`. When the conclusion is `action_required`, additional details should be provided on the site specified by `details_url`.
   * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. Only GitHub can change a check run conclusion to `stale`.
   */
  conclusion?:
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required";
  /**
   * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  completed_at?: string;
  /**
   * Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://developer.github.com/v3/checks/runs/#output-object) description.
   */
  output?: ChecksCreateParamsOutput;
  /**
   * Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://developer.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://developer.github.com/v3/checks/runs/#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions)." To learn more about check runs and requested actions, see "[Check runs and requested actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions)."
   */
  actions?: ChecksCreateParamsActions[];
} & RequiredPreview<"antiope">;

type ChecksCreateRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/check-runs";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A check performed on the code of a given code change
 */
export interface ChecksCreateResponseData {
  /**
   * The id of the check.
   */
  id: number;
  /**
   * The SHA of the commit that is being checked.
   */
  head_sha: string;
  node_id: string;
  external_id: string;
  url: string;
  html_url: string;
  details_url: string;
  /**
   * The phase of the lifecycle that the check is currently in.
   */
  status: "queued" | "in_progress" | "completed";
  conclusion: string;
  started_at: string;
  completed_at: string;
  output: {
    title: string;
    summary: string;
    text: string;
    annotations_count: number;
    annotations_url: string;
  };
  /**
   * The name of the check.
   */
  name: string;
  check_suite: {
    id: number;
  };
  app: GitHubApp;
  pull_requests: PullRequestMinimal[];
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface PullRequestMinimal {
  id: number;
  number: number;
  url: string;
  head: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
  base: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
}

type ChecksCreateSuiteEndpoint = {
  owner: string;

  repo: string;
  /**
   * The sha of the head commit.
   */
  head_sha: string;
} & RequiredPreview<"antiope">;

type ChecksCreateSuiteRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/check-suites";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A suite of checks performed on the code of a given code change
 */
export interface ChecksCreateSuiteResponseData {
  id: number;
  node_id: string;
  head_branch: string;
  /**
   * The SHA of the head commit that is being checked.
   */
  head_sha: string;
  status: string;
  conclusion: string;
  url: string;
  before: string;
  after: string;
  pull_requests: PullRequestMinimal[];
  app: GitHubApp;
  repository: MinimalRepository;
  created_at: string;
  updated_at: string;
  head_commit: SimpleCommit;
  latest_check_runs_count: number;
  check_runs_url: string;
}
export interface PullRequestMinimal {
  id: number;
  number: number;
  url: string;
  head: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
  base: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser1;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple Commit
 */
export interface SimpleCommit {
  id: string;
  tree_id: string;
  message: string;
  timestamp: string;
  author: {
    name: string;
    email: string;
  };
  committer: {
    name: string;
    email: string;
  };
}

type ChecksGetEndpoint = {
  owner: string;

  repo: string;
  /**
   * check_run_id parameter
   */
  check_run_id: number;
} & RequiredPreview<"antiope">;

type ChecksGetRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/check-runs/:check_run_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A check performed on the code of a given code change
 */
export interface ChecksGetResponseData {
  /**
   * The id of the check.
   */
  id: number;
  /**
   * The SHA of the commit that is being checked.
   */
  head_sha: string;
  node_id: string;
  external_id: string;
  url: string;
  html_url: string;
  details_url: string;
  /**
   * The phase of the lifecycle that the check is currently in.
   */
  status: "queued" | "in_progress" | "completed";
  conclusion: string;
  started_at: string;
  completed_at: string;
  output: {
    title: string;
    summary: string;
    text: string;
    annotations_count: number;
    annotations_url: string;
  };
  /**
   * The name of the check.
   */
  name: string;
  check_suite: {
    id: number;
  };
  app: GitHubApp;
  pull_requests: PullRequestMinimal[];
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface PullRequestMinimal {
  id: number;
  number: number;
  url: string;
  head: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
  base: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
}

type ChecksGetSuiteEndpoint = {
  owner: string;

  repo: string;
  /**
   * check_suite_id parameter
   */
  check_suite_id: number;
} & RequiredPreview<"antiope">;

type ChecksGetSuiteRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/check-suites/:check_suite_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A suite of checks performed on the code of a given code change
 */
export interface ChecksGetSuiteResponseData {
  id: number;
  node_id: string;
  head_branch: string;
  /**
   * The SHA of the head commit that is being checked.
   */
  head_sha: string;
  status: string;
  conclusion: string;
  url: string;
  before: string;
  after: string;
  pull_requests: PullRequestMinimal[];
  app: GitHubApp;
  repository: MinimalRepository;
  created_at: string;
  updated_at: string;
  head_commit: SimpleCommit;
  latest_check_runs_count: number;
  check_runs_url: string;
}
export interface PullRequestMinimal {
  id: number;
  number: number;
  url: string;
  head: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
  base: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser1;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple Commit
 */
export interface SimpleCommit {
  id: string;
  tree_id: string;
  message: string;
  timestamp: string;
  author: {
    name: string;
    email: string;
  };
  committer: {
    name: string;
    email: string;
  };
}

type ChecksListAnnotationsEndpoint = {
  owner: string;

  repo: string;
  /**
   * check_run_id parameter
   */
  check_run_id: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"antiope">;

type ChecksListAnnotationsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/check-runs/:check_run_id/annotations";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ChecksListAnnotationsResponseData = CheckAnnotation[];

/**
 * Check Annotation
 */
export interface CheckAnnotation {
  path: string;
  start_line: number;
  end_line: number;
  start_column: number;
  end_column: number;
  annotation_level: string;
  title: string;
  message: string;
  raw_details: string;
  blob_href: string;
}

type ChecksListForRefEndpoint = {
  owner: string;

  repo: string;
  /**
   * ref+ parameter
   */
  ref: string;
  /**
   * Returns check runs with the specified `name`.
   */
  check_name?: string;
  /**
   * Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.
   */
  status?: "queued" | "in_progress" | "completed";
  /**
   * Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.
   */
  filter?: "latest" | "all";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"antiope">;

type ChecksListForRefRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/commits/:ref/check-runs";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ChecksListForRefResponseData {
  total_count: number;
  check_runs: CheckRun[];
}
/**
 * A check performed on the code of a given code change
 */
export interface CheckRun {
  /**
   * The id of the check.
   */
  id: number;
  /**
   * The SHA of the commit that is being checked.
   */
  head_sha: string;
  node_id: string;
  external_id: string;
  url: string;
  html_url: string;
  details_url: string;
  /**
   * The phase of the lifecycle that the check is currently in.
   */
  status: "queued" | "in_progress" | "completed";
  conclusion: string;
  started_at: string;
  completed_at: string;
  output: {
    title: string;
    summary: string;
    text: string;
    annotations_count: number;
    annotations_url: string;
  };
  /**
   * The name of the check.
   */
  name: string;
  check_suite: {
    id: number;
  };
  app: GitHubApp;
  pull_requests: PullRequestMinimal[];
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface PullRequestMinimal {
  id: number;
  number: number;
  url: string;
  head: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
  base: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
}

type ChecksListForSuiteEndpoint = {
  owner: string;

  repo: string;
  /**
   * check_suite_id parameter
   */
  check_suite_id: number;
  /**
   * Returns check runs with the specified `name`.
   */
  check_name?: string;
  /**
   * Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.
   */
  status?: "queued" | "in_progress" | "completed";
  /**
   * Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.
   */
  filter?: "latest" | "all";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"antiope">;

type ChecksListForSuiteRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/check-suites/:check_suite_id/check-runs";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ChecksListForSuiteResponseData {
  total_count: number;
  check_runs: CheckRun[];
}
/**
 * A check performed on the code of a given code change
 */
export interface CheckRun {
  /**
   * The id of the check.
   */
  id: number;
  /**
   * The SHA of the commit that is being checked.
   */
  head_sha: string;
  node_id: string;
  external_id: string;
  url: string;
  html_url: string;
  details_url: string;
  /**
   * The phase of the lifecycle that the check is currently in.
   */
  status: "queued" | "in_progress" | "completed";
  conclusion: string;
  started_at: string;
  completed_at: string;
  output: {
    title: string;
    summary: string;
    text: string;
    annotations_count: number;
    annotations_url: string;
  };
  /**
   * The name of the check.
   */
  name: string;
  check_suite: {
    id: number;
  };
  app: GitHubApp;
  pull_requests: PullRequestMinimal[];
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface PullRequestMinimal {
  id: number;
  number: number;
  url: string;
  head: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
  base: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
}

type ChecksListSuitesForRefEndpoint = {
  owner: string;

  repo: string;
  /**
   * ref+ parameter
   */
  ref: string;
  /**
   * Filters check suites by GitHub App `id`.
   */
  app_id?: number;
  /**
   * Returns check runs with the specified `name`.
   */
  check_name?: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"antiope">;

type ChecksListSuitesForRefRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/commits/:ref/check-suites";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ChecksListSuitesForRefResponseData {
  total_count: number;
  check_suites: CheckSuite[];
}
/**
 * A suite of checks performed on the code of a given code change
 */
export interface CheckSuite {
  id: number;
  node_id: string;
  head_branch: string;
  /**
   * The SHA of the head commit that is being checked.
   */
  head_sha: string;
  status: string;
  conclusion: string;
  url: string;
  before: string;
  after: string;
  pull_requests: PullRequestMinimal[];
  app: GitHubApp;
  repository: MinimalRepository;
  created_at: string;
  updated_at: string;
  head_commit: SimpleCommit;
  latest_check_runs_count: number;
  check_runs_url: string;
}
export interface PullRequestMinimal {
  id: number;
  number: number;
  url: string;
  head: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
  base: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser1;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple Commit
 */
export interface SimpleCommit {
  id: string;
  tree_id: string;
  message: string;
  timestamp: string;
  author: {
    name: string;
    email: string;
  };
  committer: {
    name: string;
    email: string;
  };
}

type ChecksRerequestSuiteEndpoint = {
  owner: string;

  repo: string;
  /**
   * check_suite_id parameter
   */
  check_suite_id: number;
} & RequiredPreview<"antiope">;

type ChecksRerequestSuiteRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/check-suites/:check_suite_id/rerequest";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ChecksSetSuitesPreferencesEndpoint = {
  owner: string;

  repo: string;
  /**
   * Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [`auto_trigger_checks` object](https://developer.github.com/v3/checks/suites/#auto_trigger_checks-object) description for details.
   */
  auto_trigger_checks?: ChecksSetSuitesPreferencesParamsAutoTriggerChecks[];
} & RequiredPreview<"antiope">;

type ChecksSetSuitesPreferencesRequestOptions = {
  method: "PATCH";
  url: "/repos/:owner/:repo/check-suites/preferences";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Check suite configuration preferences for a repository.
 */
export interface ChecksSetSuitesPreferencesResponseData {
  preferences: {
    auto_trigger_checks: {
      app_id: number;
      setting: boolean;
    }[];
  };
  repository: Repository;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ChecksUpdateEndpoint = {
  owner: string;

  repo: string;
  /**
   * check_run_id parameter
   */
  check_run_id: number;
  /**
   * The name of the check. For example, "code-coverage".
   */
  name?: string;
  /**
   * The URL of the integrator's site that has the full details of the check.
   */
  details_url?: string;
  /**
   * A reference for the run on the integrator's system.
   */
  external_id?: string;
  /**
   * This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  started_at?: string;
  /**
   * The current status. Can be one of `queued`, `in_progress`, or `completed`.
   */
  status?: "queued" | "in_progress" | "completed";
  /**
   * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `success`, `failure`, `neutral`, `cancelled`, `skipped`, `timed_out`, or `action_required`.
   * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. Only GitHub can change a check run conclusion to `stale`.
   */
  conclusion?:
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required";
  /**
   * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  completed_at?: string;
  /**
   * Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://developer.github.com/v3/checks/runs/#output-object-1) description.
   */
  output?: ChecksUpdateParamsOutput;
  /**
   * Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://developer.github.com/v3/checks/runs/#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions)."
   */
  actions?: ChecksUpdateParamsActions[];
} & RequiredPreview<"antiope">;

type ChecksUpdateRequestOptions = {
  method: "PATCH";
  url: "/repos/:owner/:repo/check-runs/:check_run_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A check performed on the code of a given code change
 */
export interface ChecksUpdateResponseData {
  /**
   * The id of the check.
   */
  id: number;
  /**
   * The SHA of the commit that is being checked.
   */
  head_sha: string;
  node_id: string;
  external_id: string;
  url: string;
  html_url: string;
  details_url: string;
  /**
   * The phase of the lifecycle that the check is currently in.
   */
  status: "queued" | "in_progress" | "completed";
  conclusion: string;
  started_at: string;
  completed_at: string;
  output: {
    title: string;
    summary: string;
    text: string;
    annotations_count: number;
    annotations_url: string;
  };
  /**
   * The name of the check.
   */
  name: string;
  check_suite: {
    id: number;
  };
  app: GitHubApp;
  pull_requests: PullRequestMinimal[];
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface PullRequestMinimal {
  id: number;
  number: number;
  url: string;
  head: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
  base: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
}

type CodeScanningGetAlertEndpoint = {
  owner: string;

  repo: string;
  /**
   * alert_number parameter
   */
  alert_number: number;
  /**
   * @deprecated "alert_id" is deprecated. Use "alert_number" instead
   */
  alert_id?: any;
};

type CodeScanningGetAlertRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/code-scanning/alerts/:alert_number";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface CodeScanningGetAlertResponseData {
  /**
   * The code scanning alert number.
   */
  number: number;
  /**
   * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  created_at: string;
  /**
   * The REST API URL of the alert resource.
   */
  url: string;
  /**
   * The GitHub URL of the alert resource.
   */
  html_url: string;
  instances: unknown[];
  /**
   * State of a code scanning alert.
   */
  state: "open" | "dismissed" | "fixed";
  dismissed_by: SimpleUser | null;
  /**
   * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  dismissed_at: string;
  /**
   * **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
   */
  dismissed_reason: ("false positive" | "won't fix" | "used in tests") | null;
  rule: {
    /**
     * A unique identifier for the rule used to detect the alert.
     */
    id: string;
    /**
     * The severity of the alert.
     */
    severity: "none" | "note" | "warning" | "error";
    /**
     * A short description of the rule used to detect the alert.
     */
    description: string;
  };
  tool: {
    /**
     * The name of the tool used to generate the code scanning analysis alert.
     */
    name: string;
    /**
     * The version of the tool used to detect the alert.
     */
    version: string;
  };
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface CodeScanningGetAlertResponse404Data {
  message: string;
  documentation_url: string;
}

export interface CodeScanningGetAlertResponse503Data {
  code: string;
  message: string;
  documentation_url: string;
}

type CodeScanningListAlertsForRepoEndpoint = {
  owner: string;

  repo: string;
  /**
   * Set to `open`, `fixed`, or `dismissed` to list code scanning alerts in a specific state.
   */
  state?: "open" | "dismissed" | "fixed";
  /**
   * Set a full Git reference to list alerts for a specific branch. The `ref` must be formatted as `refs/heads/<branch name>`.
   */
  ref?: string;
};

type CodeScanningListAlertsForRepoRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/code-scanning/alerts";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type CodeScanningListAlertsForRepoResponseData = {
  /**
   * The code scanning alert number.
   */
  number: number;
  /**
   * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  created_at: string;
  /**
   * The REST API URL of the alert resource.
   */
  url: string;
  /**
   * The GitHub URL of the alert resource.
   */
  html_url: string;
  /**
   * State of a code scanning alert.
   */
  state: "open" | "dismissed" | "fixed";
  dismissed_by: SimpleUser | null;
  /**
   * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  dismissed_at: string;
  /**
   * **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
   */
  dismissed_reason: ("false positive" | "won't fix" | "used in tests") | null;
  rule: {
    /**
     * A unique identifier for the rule used to detect the alert.
     */
    id: string;
    /**
     * The severity of the alert.
     */
    severity: "none" | "note" | "warning" | "error";
    /**
     * A short description of the rule used to detect the alert.
     */
    description: string;
  };
  tool: {
    /**
     * The name of the tool used to generate the code scanning analysis alert.
     */
    name: string;
    /**
     * The version of the tool used to detect the alert.
     */
    version: string;
  };
}[];

/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

export interface CodeScanningListAlertsForRepoResponse503Data {
  code: string;
  message: string;
  documentation_url: string;
}

type CodeScanningListRecentAnalysesEndpoint = {
  owner: string;

  repo: string;
  /**
   * Set a full Git reference to list alerts for a specific branch. The `ref` must be formatted as `refs/heads/<branch name>`.
   */
  ref?: string;
  /**
   * Set a single code scanning tool name to filter alerts by tool.
   */
  tool_name?: string;
};

type CodeScanningListRecentAnalysesRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/code-scanning/analyses";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type CodeScanningListRecentAnalysesResponseData = {
  /**
   * The commit SHA of the code scanning analysis file.
   */
  commit_sha: string;
  /**
   * The full Git reference of the code scanning analysis file, formatted as `refs/heads/<branch name>`.
   */
  ref: string;
  /**
   * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
   */
  analysis_key: string;
  /**
   * The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  created_at: string;
  /**
   * The name of the tool used to generate the code scanning analysis alert.
   */
  tool_name: string;
  error: string;
  /**
   * Identifies the variable values associated with the environment in which this analysis was performed.
   */
  environment: string;
}[];

type CodeScanningUpdateAlertEndpoint = {
  owner: string;

  repo: string;
  /**
   * The code scanning alert number.
   */
  alert_number: number;
  /**
   * Sets the state of the code scanning alert. Can be one of `open` or `dismissed`. You must provide `dismissed_reason` when you set the state to `dismissed`.
   */
  state: "open" | "dismissed";
  /**
   * **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
   */
  dismissed_reason?: string | null;
};

type CodeScanningUpdateAlertRequestOptions = {
  method: "PATCH";
  url: "/repos/:owner/:repo/code-scanning/alerts/:alert_number";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface CodeScanningUpdateAlertResponseData {
  /**
   * The code scanning alert number.
   */
  number: number;
  /**
   * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  created_at: string;
  /**
   * The REST API URL of the alert resource.
   */
  url: string;
  /**
   * The GitHub URL of the alert resource.
   */
  html_url: string;
  instances: unknown[];
  /**
   * State of a code scanning alert.
   */
  state: "open" | "dismissed" | "fixed";
  dismissed_by: SimpleUser | null;
  /**
   * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  dismissed_at: string;
  /**
   * **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
   */
  dismissed_reason: ("false positive" | "won't fix" | "used in tests") | null;
  rule: {
    /**
     * A unique identifier for the rule used to detect the alert.
     */
    id: string;
    /**
     * The severity of the alert.
     */
    severity: "none" | "note" | "warning" | "error";
    /**
     * A short description of the rule used to detect the alert.
     */
    description: string;
  };
  tool: {
    /**
     * The name of the tool used to generate the code scanning analysis alert.
     */
    name: string;
    /**
     * The version of the tool used to detect the alert.
     */
    version: string;
  };
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type CodeScanningUploadSarifEndpoint = {
  owner: string;

  repo: string;
  /**
   * The commit SHA of the code scanning analysis file.
   */
  commit_sha: string;
  /**
   * The full Git reference of the code scanning analysis file, formatted as `refs/heads/<branch name>`.
   */
  ref: string;
  /**
   * A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string.
   */
  sarif: string;
  /**
   * The base directory used in the analysis, as it appears in the SARIF file.
   * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
   */
  checkout_uri?: string;
  /**
   * The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  started_at?: string;
  /**
   * The name of the tool used to generate the code scanning analysis alert.
   */
  tool_name: string;
};

type CodeScanningUploadSarifRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/code-scanning/sarifs";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type CodesOfConductGetAllCodesOfConductEndpoint = {} & RequiredPreview<
  "scarlet-witch"
>;

type CodesOfConductGetAllCodesOfConductRequestOptions = {
  method: "GET";
  url: "/codes_of_conduct";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type CodesOfConductGetAllCodesOfConductResponseData = CodeOfConduct[];

/**
 * Code Of Conduct
 */
export interface CodeOfConduct {
  key: string;
  name: string;
  url: string;
  body: string;
  html_url: string;
}

export interface CodesOfConductGetAllCodesOfConductResponse415Data {
  message: string;
  documentation_url: string;
}

type CodesOfConductGetConductCodeEndpoint = {
  /**
   * key parameter
   */
  key: string;
} & RequiredPreview<"scarlet-witch">;

type CodesOfConductGetConductCodeRequestOptions = {
  method: "GET";
  url: "/codes_of_conduct/:key";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Code Of Conduct
 */
export interface CodesOfConductGetConductCodeResponseData {
  key: string;
  name: string;
  url: string;
  body: string;
  html_url: string;
}

/**
 * Basic Error
 */
export interface CodesOfConductGetConductCodeResponse404Data {
  message: string;
  documentation_url: string;
}

export interface CodesOfConductGetConductCodeResponse415Data {
  message: string;
  documentation_url: string;
}

type CodesOfConductGetForRepoEndpoint = {
  owner: string;

  repo: string;
} & RequiredPreview<"scarlet-witch">;

type CodesOfConductGetForRepoRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/community/code_of_conduct";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Code Of Conduct
 */
export interface CodesOfConductGetForRepoResponseData {
  key: string;
  name: string;
  url: string;
  body: string;
  html_url: string;
}

type EmojisGetEndpoint = {};

type EmojisGetRequestOptions = {
  method: "GET";
  url: "/emojis";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface EmojisGetResponseData {
  [k: string]: string;
}

type EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * Unique identifier of the self-hosted runner group.
   */
  runner_group_id: number;
  /**
   * Unique identifier of an organization.
   */
  org_id: number;
};

type EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseRequestOptions = {
  method: "PUT";
  url: "/enterprises/:enterprise/actions/runner-groups/:runner_group_id/organizations/:org_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * Unique identifier of the self-hosted runner group.
   */
  runner_group_id: number;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runner_id: number;
};

type EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequestOptions = {
  method: "PUT";
  url: "/enterprises/:enterprise/actions/runner-groups/:runner_group_id/runners/:runner_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type EnterpriseAdminCreateRegistrationTokenForEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
};

type EnterpriseAdminCreateRegistrationTokenForEnterpriseRequestOptions = {
  method: "POST";
  url: "/enterprises/:enterprise/actions/runners/registration-token";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Authentication Token
 */
export interface EnterpriseAdminCreateRegistrationTokenForEnterpriseResponseData {
  /**
   * The token used for authentication
   */
  token: string;
  /**
   * The time this token expires
   */
  expires_at: string;
  permissions: {
    [k: string]: unknown;
  };
  /**
   * The repositories this token has access to
   */
  repositories: Repository[];
  single_file: string;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type EnterpriseAdminCreateRemoveTokenForEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
};

type EnterpriseAdminCreateRemoveTokenForEnterpriseRequestOptions = {
  method: "POST";
  url: "/enterprises/:enterprise/actions/runners/remove-token";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Authentication Token
 */
export interface EnterpriseAdminCreateRemoveTokenForEnterpriseResponseData {
  /**
   * The token used for authentication
   */
  token: string;
  /**
   * The time this token expires
   */
  expires_at: string;
  permissions: {
    [k: string]: unknown;
  };
  /**
   * The repositories this token has access to
   */
  repositories: Repository[];
  single_file: string;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * Name of the runner group.
   */
  name: string;
  /**
   * Visibility of a runner group. You can select all organizations or select individual organization. Can be one of: `all` or `selected`
   */
  visibility?: "selected" | "all";
  /**
   * List of organization IDs that can access the runner group.
   */
  selected_organization_ids?: number[];
  /**
   * List of runner IDs to add to the runner group.
   */
  runners?: number[];
};

type EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequestOptions = {
  method: "POST";
  url: "/enterprises/:enterprise/actions/runner-groups";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponseData {
  id: number;
  name: string;
  visibility: string;
  default: boolean;
  selected_organizations_url: string;
  runners_url: string;
}

type EnterpriseAdminDeleteScimGroupFromEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * Identifier generated by the GitHub SCIM endpoint.
   */
  scim_group_id: string;
};

type EnterpriseAdminDeleteScimGroupFromEnterpriseRequestOptions = {
  method: "DELETE";
  url: "/scim/v2/enterprises/:enterprise/Groups/:scim_group_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runner_id: number;
};

type EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequestOptions = {
  method: "DELETE";
  url: "/enterprises/:enterprise/actions/runners/:runner_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * Unique identifier of the self-hosted runner group.
   */
  runner_group_id: number;
};

type EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequestOptions = {
  method: "DELETE";
  url: "/enterprises/:enterprise/actions/runner-groups/:runner_group_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type EnterpriseAdminDeleteUserFromEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * scim_user_id parameter
   */
  scim_user_id: string;
};

type EnterpriseAdminDeleteUserFromEnterpriseRequestOptions = {
  method: "DELETE";
  url: "/scim/v2/enterprises/:enterprise/Users/:scim_user_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type EnterpriseAdminGetProvisioningInformationForEnterpriseGroupEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * Identifier generated by the GitHub SCIM endpoint.
   */
  scim_group_id: string;
};

type EnterpriseAdminGetProvisioningInformationForEnterpriseGroupRequestOptions = {
  method: "GET";
  url: "/scim/v2/enterprises/:enterprise/Groups/:scim_group_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface EnterpriseAdminGetProvisioningInformationForEnterpriseGroupResponseData {
  schemas: string[];
  id: string;
  externalId: string;
  displayName: string;
  members: {
    value: string;
    $ref: string;
    display: string;
  }[];
  meta: {
    resourceType: string;
    created: string;
    lastModified: string;
    location: string;
  };
}

type EnterpriseAdminGetProvisioningInformationForEnterpriseUserEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * scim_user_id parameter
   */
  scim_user_id: string;
};

type EnterpriseAdminGetProvisioningInformationForEnterpriseUserRequestOptions = {
  method: "GET";
  url: "/scim/v2/enterprises/:enterprise/Users/:scim_user_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface EnterpriseAdminGetProvisioningInformationForEnterpriseUserResponseData {
  schemas: string[];
  id: string;
  externalId: string;
  userName: string;
  name: {
    givenName: string;
    familyName: string;
  };
  emails: {
    value: string;
    type: string;
    primary: boolean;
  }[];
  groups: {
    value: string;
  }[];
  active: boolean;
  meta: {
    resourceType: string;
    created: string;
    lastModified: string;
    location: string;
  };
}

type EnterpriseAdminGetSelfHostedRunnerForEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runner_id: number;
};

type EnterpriseAdminGetSelfHostedRunnerForEnterpriseRequestOptions = {
  method: "GET";
  url: "/enterprises/:enterprise/actions/runners/:runner_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A self hosted runner
 */
export interface EnterpriseAdminGetSelfHostedRunnerForEnterpriseResponseData {
  /**
   * The id of the runner.
   */
  id: number;
  /**
   * The name of the runner.
   */
  name: string;
  /**
   * The Operating System of the runner.
   */
  os: string;
  /**
   * The status of the runner.
   */
  status: string;
  busy: boolean;
  labels: {
    /**
     * Unique identifier of the label.
     */
    id: number;
    /**
     * Name of the label.
     */
    name: string;
    /**
     * The type of label. Read-only labels are applied automatically when the runner is configured.
     */
    type: "read-only" | "custom";
  }[];
}

type EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * Unique identifier of the self-hosted runner group.
   */
  runner_group_id: number;
};

type EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequestOptions = {
  method: "GET";
  url: "/enterprises/:enterprise/actions/runner-groups/:runner_group_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponseData {
  id: number;
  name: string;
  visibility: string;
  default: boolean;
  selected_organizations_url: string;
  runners_url: string;
}

type EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * Unique identifier of the self-hosted runner group.
   */
  runner_group_id: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequestOptions = {
  method: "GET";
  url: "/enterprises/:enterprise/actions/runner-groups/:runner_group_id/organizations";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponseData {
  total_count: number;
  organizations: OrganizationSimple[];
}
/**
 * Organization Simple
 */
export interface OrganizationSimple {
  login: string;
  id: number;
  node_id: string;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
}

type EnterpriseAdminListProvisionedGroupsEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * Used for pagination: the index of the first result to return.
   */
  startIndex?: number;
  /**
   * Used for pagination: the number of results to return.
   */
  count?: number;
};

type EnterpriseAdminListProvisionedGroupsEnterpriseRequestOptions = {
  method: "GET";
  url: "/scim/v2/enterprises/:enterprise/Groups";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface EnterpriseAdminListProvisionedGroupsEnterpriseResponseData {
  schemas: string[];
  totalResults: number;
  itemsPerPage: number;
  startIndex: number;
  Resources: {
    schemas: string[];
    id: string;
    externalId: string;
    displayName: string;
    members: {
      value: string;
      $ref: string;
      display: string;
    }[];
    meta: {
      resourceType: string;
      created: string;
      lastModified: string;
      location: string;
    };
  }[];
}

type EnterpriseAdminListProvisionedIdentitiesEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * Used for pagination: the index of the first result to return.
   */
  startIndex?: number;
  /**
   * Used for pagination: the number of results to return.
   */
  count?: number;
};

type EnterpriseAdminListProvisionedIdentitiesEnterpriseRequestOptions = {
  method: "GET";
  url: "/scim/v2/enterprises/:enterprise/Users";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface EnterpriseAdminListProvisionedIdentitiesEnterpriseResponseData {
  schemas: string[];
  totalResults: number;
  itemsPerPage: number;
  startIndex: number;
  Resources: {
    schemas: string[];
    id: string;
    externalId: string;
    userName: string;
    name: {
      givenName: string;
      familyName: string;
    };
    emails: {
      value: string;
      primary: boolean;
      type: string;
    }[];
    groups: {
      value: string;
    }[];
    active: boolean;
    meta: {
      resourceType: string;
      created: string;
      lastModified: string;
      location: string;
    };
  }[];
}

type EnterpriseAdminListRunnerApplicationsForEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
};

type EnterpriseAdminListRunnerApplicationsForEnterpriseRequestOptions = {
  method: "GET";
  url: "/enterprises/:enterprise/actions/runners/downloads";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type EnterpriseAdminListRunnerApplicationsForEnterpriseResponseData = RunnerApplication[];

/**
 * Runner Application
 */
export interface RunnerApplication {
  os: string;
  architecture: string;
  download_url: string;
  filename: string;
}

type EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequestOptions = {
  method: "GET";
  url: "/enterprises/:enterprise/actions/runner-groups";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponseData {
  total_count: number;
  runner_groups: {
    id: number;
    name: string;
    visibility: string;
    default: boolean;
    selected_organizations_url: string;
    runners_url: string;
  }[];
}

type EnterpriseAdminListSelfHostedRunnersForEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type EnterpriseAdminListSelfHostedRunnersForEnterpriseRequestOptions = {
  method: "GET";
  url: "/enterprises/:enterprise/actions/runners";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface EnterpriseAdminListSelfHostedRunnersForEnterpriseResponseData {
  total_count: number;
  runners: SelfHostedRunners[];
}
/**
 * A self hosted runner
 */
export interface SelfHostedRunners {
  /**
   * The id of the runner.
   */
  id: number;
  /**
   * The name of the runner.
   */
  name: string;
  /**
   * The Operating System of the runner.
   */
  os: string;
  /**
   * The status of the runner.
   */
  status: string;
  busy: boolean;
  labels: {
    /**
     * Unique identifier of the label.
     */
    id: number;
    /**
     * Name of the label.
     */
    name: string;
    /**
     * The type of label. Read-only labels are applied automatically when the runner is configured.
     */
    type: "read-only" | "custom";
  }[];
}

type EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * Unique identifier of the self-hosted runner group.
   */
  runner_group_id: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequestOptions = {
  method: "GET";
  url: "/enterprises/:enterprise/actions/runner-groups/:runner_group_id/runners";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponseData {
  total_count: number;
  runners: SelfHostedRunners[];
}
/**
 * A self hosted runner
 */
export interface SelfHostedRunners {
  /**
   * The id of the runner.
   */
  id: number;
  /**
   * The name of the runner.
   */
  name: string;
  /**
   * The Operating System of the runner.
   */
  os: string;
  /**
   * The status of the runner.
   */
  status: string;
  busy: boolean;
  labels: {
    /**
     * Unique identifier of the label.
     */
    id: number;
    /**
     * Name of the label.
     */
    name: string;
    /**
     * The type of label. Read-only labels are applied automatically when the runner is configured.
     */
    type: "read-only" | "custom";
  }[];
}

type EnterpriseAdminProvisionAndInviteEnterpriseGroupEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * The SCIM schema URIs.
   */
  schemas: string[];
  /**
   * The name of the SCIM group. This must match the GitHub organization that the group maps to.
   */
  displayName: string;

  members?: EnterpriseAdminProvisionAndInviteEnterpriseGroupParamsMembers[];
};

type EnterpriseAdminProvisionAndInviteEnterpriseGroupRequestOptions = {
  method: "POST";
  url: "/scim/v2/enterprises/:enterprise/Groups";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface EnterpriseAdminProvisionAndInviteEnterpriseGroupResponseData {
  schemas: string[];
  id: string;
  externalId: string;
  displayName: string;
  members: {
    value: string;
    $ref: string;
    display: string;
  }[];
  meta: {
    resourceType: string;
    created: string;
    lastModified: string;
    location: string;
  };
}

type EnterpriseAdminProvisionAndInviteEnterpriseUserEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * The SCIM schema URIs.
   */
  schemas: string[];
  /**
   * The username for the user.
   */
  userName: string;

  name: EnterpriseAdminProvisionAndInviteEnterpriseUserParamsName;
  /**
   * List of user emails.
   */
  emails: EnterpriseAdminProvisionAndInviteEnterpriseUserParamsEmails[];
  /**
   * List of SCIM group IDs the user is a member of.
   */
  groups?: EnterpriseAdminProvisionAndInviteEnterpriseUserParamsGroups[];
};

type EnterpriseAdminProvisionAndInviteEnterpriseUserRequestOptions = {
  method: "POST";
  url: "/scim/v2/enterprises/:enterprise/Users";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface EnterpriseAdminProvisionAndInviteEnterpriseUserResponseData {
  schemas: string[];
  id: string;
  externalId: string;
  userName: string;
  name: {
    givenName: string;
    familyName: string;
  };
  emails: {
    value: string;
    type: string;
    primary: boolean;
  }[];
  groups: {
    value: string;
  }[];
  active: boolean;
  meta: {
    resourceType: string;
    created: string;
    lastModified: string;
    location: string;
  };
}

type EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * Unique identifier of the self-hosted runner group.
   */
  runner_group_id: number;
  /**
   * Unique identifier of an organization.
   */
  org_id: number;
};

type EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseRequestOptions = {
  method: "DELETE";
  url: "/enterprises/:enterprise/actions/runner-groups/:runner_group_id/organizations/:org_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * Unique identifier of the self-hosted runner group.
   */
  runner_group_id: number;
  /**
   * Unique identifier of the self-hosted runner.
   */
  runner_id: number;
};

type EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequestOptions = {
  method: "DELETE";
  url: "/enterprises/:enterprise/actions/runner-groups/:runner_group_id/runners/:runner_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type EnterpriseAdminSetInformationForProvisionedEnterpriseGroupEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * Identifier generated by the GitHub SCIM endpoint.
   */
  scim_group_id: string;
  /**
   * The SCIM schema URIs.
   */
  schemas: string[];
  /**
   * The name of the SCIM group. This must match the GitHub organization that the group maps to.
   */
  displayName: string;

  members?: EnterpriseAdminSetInformationForProvisionedEnterpriseGroupParamsMembers[];
};

type EnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequestOptions = {
  method: "PUT";
  url: "/scim/v2/enterprises/:enterprise/Groups/:scim_group_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface EnterpriseAdminSetInformationForProvisionedEnterpriseGroupResponseData {
  schemas: string[];
  id: string;
  externalId: string;
  displayName: string;
  members: {
    value: string;
    $ref: string;
    display: string;
  }[];
  meta: {
    resourceType: string;
    created: string;
    lastModified: string;
    location: string;
  };
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseUserEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * scim_user_id parameter
   */
  scim_user_id: string;
  /**
   * The SCIM schema URIs.
   */
  schemas: string[];
  /**
   * The username for the user.
   */
  userName: string;

  name: EnterpriseAdminSetInformationForProvisionedEnterpriseUserParamsName;
  /**
   * List of user emails.
   */
  emails: EnterpriseAdminSetInformationForProvisionedEnterpriseUserParamsEmails[];
  /**
   * List of SCIM group IDs the user is a member of.
   */
  groups?: EnterpriseAdminSetInformationForProvisionedEnterpriseUserParamsGroups[];
};

type EnterpriseAdminSetInformationForProvisionedEnterpriseUserRequestOptions = {
  method: "PUT";
  url: "/scim/v2/enterprises/:enterprise/Users/:scim_user_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface EnterpriseAdminSetInformationForProvisionedEnterpriseUserResponseData {
  schemas: string[];
  id: string;
  externalId: string;
  userName: string;
  name: {
    givenName: string;
    familyName: string;
  };
  emails: {
    value: string;
    type: string;
    primary: boolean;
  }[];
  groups: {
    value: string;
  }[];
  active: boolean;
  meta: {
    resourceType: string;
    created: string;
    lastModified: string;
    location: string;
  };
}

type EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * Unique identifier of the self-hosted runner group.
   */
  runner_group_id: number;
  /**
   * List of organization IDs that can access the runner group.
   */
  selected_organization_ids: number[];
};

type EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequestOptions = {
  method: "PUT";
  url: "/enterprises/:enterprise/actions/runner-groups/:runner_group_id/organizations";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * Unique identifier of the self-hosted runner group.
   */
  runner_group_id: number;
  /**
   * List of runner IDs to add to the runner group.
   */
  runners: number[];
};

type EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequestOptions = {
  method: "PUT";
  url: "/enterprises/:enterprise/actions/runner-groups/:runner_group_id/runners";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type EnterpriseAdminUpdateAttributeForEnterpriseGroupEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * Identifier generated by the GitHub SCIM endpoint.
   */
  scim_group_id: string;
  /**
   * The SCIM schema URIs.
   */
  schemas: string[];
  /**
   * Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
   */
  Operations: EnterpriseAdminUpdateAttributeForEnterpriseGroupParamsOperations[];
};

type EnterpriseAdminUpdateAttributeForEnterpriseGroupRequestOptions = {
  method: "PATCH";
  url: "/scim/v2/enterprises/:enterprise/Groups/:scim_group_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface EnterpriseAdminUpdateAttributeForEnterpriseGroupResponseData {
  schemas: string[];
  id: string;
  externalId: string;
  displayName: string;
  members: {
    value: string;
    $ref: string;
    display: string;
  }[];
  meta: {
    resourceType: string;
    created: string;
    lastModified: string;
    location: string;
  };
}

type EnterpriseAdminUpdateAttributeForEnterpriseUserEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * scim_user_id parameter
   */
  scim_user_id: string;
  /**
   * The SCIM schema URIs.
   */
  schemas: string[];
  /**
   * Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
   */
  Operations: EnterpriseAdminUpdateAttributeForEnterpriseUserParamsOperations[];
};

type EnterpriseAdminUpdateAttributeForEnterpriseUserRequestOptions = {
  method: "PATCH";
  url: "/scim/v2/enterprises/:enterprise/Users/:scim_user_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface EnterpriseAdminUpdateAttributeForEnterpriseUserResponseData {
  schemas: string[];
  id: string;
  externalId: string;
  userName: string;
  name: {
    givenName: string;
    familyName: string;
  };
  emails: {
    value: string;
    type: string;
    primary: boolean;
  }[];
  groups: {
    value: string;
  }[];
  active: boolean;
  meta: {
    resourceType: string;
    created: string;
    lastModified: string;
    location: string;
  };
}

type EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseEndpoint = {
  /**
   * Unique identifier of the GitHub Enterprise Cloud instance.
   */
  enterprise: string;
  /**
   * Unique identifier of the self-hosted runner group.
   */
  runner_group_id: number;
  /**
   * Name of the runner group.
   */
  name?: string;
  /**
   * Visibility of a runner group. You can select all organizations or select individual organizations. Can be one of: `all` or `selected`
   */
  visibility?: "selected" | "all";
};

type EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequestOptions = {
  method: "PATCH";
  url: "/enterprises/:enterprise/actions/runner-groups/:runner_group_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponseData {
  id: number;
  name: string;
  visibility: string;
  default: boolean;
  selected_organizations_url: string;
  runners_url: string;
}

type GistsCheckIsStarredEndpoint = {
  /**
   * gist_id parameter
   */
  gist_id: string;
};

type GistsCheckIsStarredRequestOptions = {
  method: "GET";
  url: "/gists/:gist_id/star";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface GistsCheckIsStarredResponse403Data {
  message: string;
  documentation_url: string;
}

export interface GistsCheckIsStarredResponse404Data {}

type GistsCreateEndpoint = {
  /**
   * Description of the gist
   */
  description?: string;
  /**
   * Names and content for the files that make up the gist
   */
  files: GistsCreateParamsFiles;

  public?: any;
};

type GistsCreateRequestOptions = {
  method: "POST";
  url: "/gists";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Gist Full
 */
export type GistsCreateResponseData = GistSimple & {
  forks?: {
    user?: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type?: string;
      site_admin?: boolean;
      [k: string]: unknown;
    };
    url?: string;
    id?: string;
    created_at?: string;
    updated_at?: string;
    [k: string]: unknown;
  }[];
  history?: {
    url?: string;
    version?: string;
    user?: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type?: string;
      site_admin?: boolean;
      [k: string]: unknown;
    };
    change_status?: {
      deletions?: number;
      additions?: number;
      total?: number;
      [k: string]: unknown;
    };
    committed_at?: string;
    [k: string]: unknown;
  }[];
  fork_of?: GistSimple1;
  url?: string;
  forks_url?: string;
  commits_url?: string;
  id?: string;
  node_id?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  created_at?: string;
  updated_at?: string;
  description?: string;
  comments?: number;
  comments_url?: string;
  [k: string]: unknown;
};

/**
 * Gist Simple
 */
export interface GistSimple {
  url?: string;
  forks_url?: string;
  commits_url?: string;
  id?: string;
  node_id?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  files?: {
    [k: string]: {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      truncated?: boolean;
      content?: string;
      [k: string]: unknown;
    };
  };
  public?: boolean;
  created_at?: string;
  updated_at?: string;
  description?: string;
  comments?: number;
  user?: string;
  comments_url?: string;
  owner?: SimpleUser;
  truncated?: boolean;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Gist Simple
 */
export interface GistSimple1 {
  url?: string;
  forks_url?: string;
  commits_url?: string;
  id?: string;
  node_id?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  files?: {
    [k: string]: {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      truncated?: boolean;
      content?: string;
      [k: string]: unknown;
    };
  };
  public?: boolean;
  created_at?: string;
  updated_at?: string;
  description?: string;
  comments?: number;
  user?: string;
  comments_url?: string;
  owner?: SimpleUser1;
  truncated?: boolean;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface GistsCreateResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface GistsCreateResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface GistsCreateResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type GistsCreateCommentEndpoint = {
  /**
   * gist_id parameter
   */
  gist_id: string;
  /**
   * The comment text.
   */
  body: string;
};

type GistsCreateCommentRequestOptions = {
  method: "POST";
  url: "/gists/:gist_id/comments";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A comment made to a gist.
 */
export interface GistsCreateCommentResponseData {
  id: number;
  node_id: string;
  url: string;
  /**
   * The comment text.
   */
  body: string;
  user: SimpleUser;
  created_at: string;
  updated_at: string;
  author_association: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface GistsCreateCommentResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface GistsCreateCommentResponse404Data {
  message: string;
  documentation_url: string;
}

type GistsDeleteEndpoint = {
  /**
   * gist_id parameter
   */
  gist_id: string;
};

type GistsDeleteRequestOptions = {
  method: "DELETE";
  url: "/gists/:gist_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface GistsDeleteResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface GistsDeleteResponse404Data {
  message: string;
  documentation_url: string;
}

type GistsDeleteCommentEndpoint = {
  /**
   * gist_id parameter
   */
  gist_id: string;
  /**
   * comment_id parameter
   */
  comment_id: number;
};

type GistsDeleteCommentRequestOptions = {
  method: "DELETE";
  url: "/gists/:gist_id/comments/:comment_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface GistsDeleteCommentResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface GistsDeleteCommentResponse404Data {
  message: string;
  documentation_url: string;
}

type GistsForkEndpoint = {
  /**
   * gist_id parameter
   */
  gist_id: string;
};

type GistsForkRequestOptions = {
  method: "POST";
  url: "/gists/:gist_id/forks";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Base Gist
 */
export interface GistsForkResponseData {
  url: string;
  forks_url: string;
  commits_url: string;
  id: string;
  node_id: string;
  git_pull_url: string;
  git_push_url: string;
  html_url: string;
  files: {
    [k: string]: {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      [k: string]: unknown;
    };
  };
  public: boolean;
  created_at: string;
  updated_at: string;
  description: string;
  comments: number;
  user: SimpleUser;
  comments_url: string;
  owner: SimpleUser1;
  truncated: boolean;
  forks: unknown[];
  history: unknown[];
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface GistsForkResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface GistsForkResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface GistsForkResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type GistsGetEndpoint = {
  /**
   * gist_id parameter
   */
  gist_id: string;
};

type GistsGetRequestOptions = {
  method: "GET";
  url: "/gists/:gist_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Gist Full
 */
export type GistsGetResponseData = GistSimple & {
  forks?: {
    user?: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type?: string;
      site_admin?: boolean;
      [k: string]: unknown;
    };
    url?: string;
    id?: string;
    created_at?: string;
    updated_at?: string;
    [k: string]: unknown;
  }[];
  history?: {
    url?: string;
    version?: string;
    user?: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type?: string;
      site_admin?: boolean;
      [k: string]: unknown;
    };
    change_status?: {
      deletions?: number;
      additions?: number;
      total?: number;
      [k: string]: unknown;
    };
    committed_at?: string;
    [k: string]: unknown;
  }[];
  fork_of?: GistSimple1;
  url?: string;
  forks_url?: string;
  commits_url?: string;
  id?: string;
  node_id?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  created_at?: string;
  updated_at?: string;
  description?: string;
  comments?: number;
  comments_url?: string;
  [k: string]: unknown;
};

/**
 * Gist Simple
 */
export interface GistSimple {
  url?: string;
  forks_url?: string;
  commits_url?: string;
  id?: string;
  node_id?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  files?: {
    [k: string]: {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      truncated?: boolean;
      content?: string;
      [k: string]: unknown;
    };
  };
  public?: boolean;
  created_at?: string;
  updated_at?: string;
  description?: string;
  comments?: number;
  user?: string;
  comments_url?: string;
  owner?: SimpleUser;
  truncated?: boolean;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Gist Simple
 */
export interface GistSimple1 {
  url?: string;
  forks_url?: string;
  commits_url?: string;
  id?: string;
  node_id?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  files?: {
    [k: string]: {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      truncated?: boolean;
      content?: string;
      [k: string]: unknown;
    };
  };
  public?: boolean;
  created_at?: string;
  updated_at?: string;
  description?: string;
  comments?: number;
  user?: string;
  comments_url?: string;
  owner?: SimpleUser1;
  truncated?: boolean;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

export interface GistsGetResponse403Data {
  block: {
    reason: string;
    created_at: string;
    html_url: string;
  };
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface GistsGetResponse404Data {
  message: string;
  documentation_url: string;
}

type GistsGetCommentEndpoint = {
  /**
   * gist_id parameter
   */
  gist_id: string;
  /**
   * comment_id parameter
   */
  comment_id: number;
};

type GistsGetCommentRequestOptions = {
  method: "GET";
  url: "/gists/:gist_id/comments/:comment_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A comment made to a gist.
 */
export interface GistsGetCommentResponseData {
  id: number;
  node_id: string;
  url: string;
  /**
   * The comment text.
   */
  body: string;
  user: SimpleUser;
  created_at: string;
  updated_at: string;
  author_association: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

export interface GistsGetCommentResponse403Data {
  block: {
    reason: string;
    created_at: string;
    html_url: string;
  };
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface GistsGetCommentResponse404Data {
  message: string;
  documentation_url: string;
}

type GistsGetRevisionEndpoint = {
  /**
   * gist_id parameter
   */
  gist_id: string;
  /**
   * sha parameter
   */
  sha: string;
};

type GistsGetRevisionRequestOptions = {
  method: "GET";
  url: "/gists/:gist_id/:sha";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Gist Full
 */
export type GistsGetRevisionResponseData = GistSimple & {
  forks?: {
    user?: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type?: string;
      site_admin?: boolean;
      [k: string]: unknown;
    };
    url?: string;
    id?: string;
    created_at?: string;
    updated_at?: string;
    [k: string]: unknown;
  }[];
  history?: {
    url?: string;
    version?: string;
    user?: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type?: string;
      site_admin?: boolean;
      [k: string]: unknown;
    };
    change_status?: {
      deletions?: number;
      additions?: number;
      total?: number;
      [k: string]: unknown;
    };
    committed_at?: string;
    [k: string]: unknown;
  }[];
  fork_of?: GistSimple1;
  url?: string;
  forks_url?: string;
  commits_url?: string;
  id?: string;
  node_id?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  created_at?: string;
  updated_at?: string;
  description?: string;
  comments?: number;
  comments_url?: string;
  [k: string]: unknown;
};

/**
 * Gist Simple
 */
export interface GistSimple {
  url?: string;
  forks_url?: string;
  commits_url?: string;
  id?: string;
  node_id?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  files?: {
    [k: string]: {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      truncated?: boolean;
      content?: string;
      [k: string]: unknown;
    };
  };
  public?: boolean;
  created_at?: string;
  updated_at?: string;
  description?: string;
  comments?: number;
  user?: string;
  comments_url?: string;
  owner?: SimpleUser;
  truncated?: boolean;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Gist Simple
 */
export interface GistSimple1 {
  url?: string;
  forks_url?: string;
  commits_url?: string;
  id?: string;
  node_id?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  files?: {
    [k: string]: {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      truncated?: boolean;
      content?: string;
      [k: string]: unknown;
    };
  };
  public?: boolean;
  created_at?: string;
  updated_at?: string;
  description?: string;
  comments?: number;
  user?: string;
  comments_url?: string;
  owner?: SimpleUser1;
  truncated?: boolean;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface GistsGetRevisionResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface GistsGetRevisionResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface GistsGetRevisionResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type GistsListEndpoint = {
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type GistsListRequestOptions = {
  method: "GET";
  url: "/gists";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type GistsListResponseData = BaseGist[];

/**
 * Base Gist
 */
export interface BaseGist {
  url: string;
  forks_url: string;
  commits_url: string;
  id: string;
  node_id: string;
  git_pull_url: string;
  git_push_url: string;
  html_url: string;
  files: {
    [k: string]: {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      [k: string]: unknown;
    };
  };
  public: boolean;
  created_at: string;
  updated_at: string;
  description: string;
  comments: number;
  user: SimpleUser;
  comments_url: string;
  owner: SimpleUser1;
  truncated: boolean;
  forks: unknown[];
  history: unknown[];
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface GistsListResponse403Data {
  message: string;
  documentation_url: string;
}

type GistsListCommentsEndpoint = {
  /**
   * gist_id parameter
   */
  gist_id: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type GistsListCommentsRequestOptions = {
  method: "GET";
  url: "/gists/:gist_id/comments";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type GistsListCommentsResponseData = GistComment[];

/**
 * A comment made to a gist.
 */
export interface GistComment {
  id: number;
  node_id: string;
  url: string;
  /**
   * The comment text.
   */
  body: string;
  user: SimpleUser;
  created_at: string;
  updated_at: string;
  author_association: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface GistsListCommentsResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface GistsListCommentsResponse404Data {
  message: string;
  documentation_url: string;
}

type GistsListCommitsEndpoint = {
  /**
   * gist_id parameter
   */
  gist_id: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type GistsListCommitsRequestOptions = {
  method: "GET";
  url: "/gists/:gist_id/commits";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type GistsListCommitsResponseData = GistCommit[];

/**
 * Gist Commit
 */
export interface GistCommit {
  url: string;
  version: string;
  user: SimpleUser;
  change_status: {
    total: number;
    additions: number;
    deletions: number;
  };
  committed_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface GistsListCommitsResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface GistsListCommitsResponse404Data {
  message: string;
  documentation_url: string;
}

type GistsListForUserEndpoint = {
  username: string;
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type GistsListForUserRequestOptions = {
  method: "GET";
  url: "/users/:username/gists";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type GistsListForUserResponseData = BaseGist[];

/**
 * Base Gist
 */
export interface BaseGist {
  url: string;
  forks_url: string;
  commits_url: string;
  id: string;
  node_id: string;
  git_pull_url: string;
  git_push_url: string;
  html_url: string;
  files: {
    [k: string]: {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      [k: string]: unknown;
    };
  };
  public: boolean;
  created_at: string;
  updated_at: string;
  description: string;
  comments: number;
  user: SimpleUser;
  comments_url: string;
  owner: SimpleUser1;
  truncated: boolean;
  forks: unknown[];
  history: unknown[];
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Validation Error
 */
export interface GistsListForUserResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type GistsListForksEndpoint = {
  /**
   * gist_id parameter
   */
  gist_id: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type GistsListForksRequestOptions = {
  method: "GET";
  url: "/gists/:gist_id/forks";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Gist Full
 */
export type GistFull = GistSimple & {
  forks?: {
    user?: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type?: string;
      site_admin?: boolean;
      [k: string]: unknown;
    };
    url?: string;
    id?: string;
    created_at?: string;
    updated_at?: string;
    [k: string]: unknown;
  }[];
  history?: {
    url?: string;
    version?: string;
    user?: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type?: string;
      site_admin?: boolean;
      [k: string]: unknown;
    };
    change_status?: {
      deletions?: number;
      additions?: number;
      total?: number;
      [k: string]: unknown;
    };
    committed_at?: string;
    [k: string]: unknown;
  }[];
  fork_of?: GistSimple1;
  url?: string;
  forks_url?: string;
  commits_url?: string;
  id?: string;
  node_id?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  created_at?: string;
  updated_at?: string;
  description?: string;
  comments?: number;
  comments_url?: string;
  [k: string]: unknown;
};
export type GistsListForksResponseData = GistFull[];

/**
 * Gist Simple
 */
export interface GistSimple {
  url?: string;
  forks_url?: string;
  commits_url?: string;
  id?: string;
  node_id?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  files?: {
    [k: string]: {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      truncated?: boolean;
      content?: string;
      [k: string]: unknown;
    };
  };
  public?: boolean;
  created_at?: string;
  updated_at?: string;
  description?: string;
  comments?: number;
  user?: string;
  comments_url?: string;
  owner?: SimpleUser;
  truncated?: boolean;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Gist Simple
 */
export interface GistSimple1 {
  url?: string;
  forks_url?: string;
  commits_url?: string;
  id?: string;
  node_id?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  files?: {
    [k: string]: {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      truncated?: boolean;
      content?: string;
      [k: string]: unknown;
    };
  };
  public?: boolean;
  created_at?: string;
  updated_at?: string;
  description?: string;
  comments?: number;
  user?: string;
  comments_url?: string;
  owner?: SimpleUser1;
  truncated?: boolean;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface GistsListForksResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface GistsListForksResponse404Data {
  message: string;
  documentation_url: string;
}

type GistsListPublicEndpoint = {
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type GistsListPublicRequestOptions = {
  method: "GET";
  url: "/gists/public";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type GistsListPublicResponseData = BaseGist[];

/**
 * Base Gist
 */
export interface BaseGist {
  url: string;
  forks_url: string;
  commits_url: string;
  id: string;
  node_id: string;
  git_pull_url: string;
  git_push_url: string;
  html_url: string;
  files: {
    [k: string]: {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      [k: string]: unknown;
    };
  };
  public: boolean;
  created_at: string;
  updated_at: string;
  description: string;
  comments: number;
  user: SimpleUser;
  comments_url: string;
  owner: SimpleUser1;
  truncated: boolean;
  forks: unknown[];
  history: unknown[];
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface GistsListPublicResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface GistsListPublicResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type GistsListStarredEndpoint = {
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type GistsListStarredRequestOptions = {
  method: "GET";
  url: "/gists/starred";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type GistsListStarredResponseData = BaseGist[];

/**
 * Base Gist
 */
export interface BaseGist {
  url: string;
  forks_url: string;
  commits_url: string;
  id: string;
  node_id: string;
  git_pull_url: string;
  git_push_url: string;
  html_url: string;
  files: {
    [k: string]: {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      [k: string]: unknown;
    };
  };
  public: boolean;
  created_at: string;
  updated_at: string;
  description: string;
  comments: number;
  user: SimpleUser;
  comments_url: string;
  owner: SimpleUser1;
  truncated: boolean;
  forks: unknown[];
  history: unknown[];
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface GistsListStarredResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface GistsListStarredResponse403Data {
  message: string;
  documentation_url: string;
}

type GistsStarEndpoint = {
  /**
   * gist_id parameter
   */
  gist_id: string;
};

type GistsStarRequestOptions = {
  method: "PUT";
  url: "/gists/:gist_id/star";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface GistsStarResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface GistsStarResponse404Data {
  message: string;
  documentation_url: string;
}

type GistsUnstarEndpoint = {
  /**
   * gist_id parameter
   */
  gist_id: string;
};

type GistsUnstarRequestOptions = {
  method: "DELETE";
  url: "/gists/:gist_id/star";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface GistsUnstarResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface GistsUnstarResponse404Data {
  message: string;
  documentation_url: string;
}

type GistsUpdateEndpoint = {
  /**
   * gist_id parameter
   */
  gist_id: string;
  /**
   * Description of the gist
   */
  description?: string;
  /**
   * Names of files to be updated
   */
  files?: GistsUpdateParamsFiles;
};

type GistsUpdateRequestOptions = {
  method: "PATCH";
  url: "/gists/:gist_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Gist Full
 */
export type GistsUpdateResponseData = GistSimple & {
  forks?: {
    user?: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type?: string;
      site_admin?: boolean;
      [k: string]: unknown;
    };
    url?: string;
    id?: string;
    created_at?: string;
    updated_at?: string;
    [k: string]: unknown;
  }[];
  history?: {
    url?: string;
    version?: string;
    user?: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type?: string;
      site_admin?: boolean;
      [k: string]: unknown;
    };
    change_status?: {
      deletions?: number;
      additions?: number;
      total?: number;
      [k: string]: unknown;
    };
    committed_at?: string;
    [k: string]: unknown;
  }[];
  fork_of?: GistSimple1;
  url?: string;
  forks_url?: string;
  commits_url?: string;
  id?: string;
  node_id?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  created_at?: string;
  updated_at?: string;
  description?: string;
  comments?: number;
  comments_url?: string;
  [k: string]: unknown;
};

/**
 * Gist Simple
 */
export interface GistSimple {
  url?: string;
  forks_url?: string;
  commits_url?: string;
  id?: string;
  node_id?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  files?: {
    [k: string]: {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      truncated?: boolean;
      content?: string;
      [k: string]: unknown;
    };
  };
  public?: boolean;
  created_at?: string;
  updated_at?: string;
  description?: string;
  comments?: number;
  user?: string;
  comments_url?: string;
  owner?: SimpleUser;
  truncated?: boolean;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Gist Simple
 */
export interface GistSimple1 {
  url?: string;
  forks_url?: string;
  commits_url?: string;
  id?: string;
  node_id?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  files?: {
    [k: string]: {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      truncated?: boolean;
      content?: string;
      [k: string]: unknown;
    };
  };
  public?: boolean;
  created_at?: string;
  updated_at?: string;
  description?: string;
  comments?: number;
  user?: string;
  comments_url?: string;
  owner?: SimpleUser1;
  truncated?: boolean;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface GistsUpdateResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface GistsUpdateResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type GistsUpdateCommentEndpoint = {
  /**
   * gist_id parameter
   */
  gist_id: string;
  /**
   * comment_id parameter
   */
  comment_id: number;
  /**
   * The comment text.
   */
  body: string;
};

type GistsUpdateCommentRequestOptions = {
  method: "PATCH";
  url: "/gists/:gist_id/comments/:comment_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A comment made to a gist.
 */
export interface GistsUpdateCommentResponseData {
  id: number;
  node_id: string;
  url: string;
  /**
   * The comment text.
   */
  body: string;
  user: SimpleUser;
  created_at: string;
  updated_at: string;
  author_association: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface GistsUpdateCommentResponse404Data {
  message: string;
  documentation_url: string;
}

type GitCreateBlobEndpoint = {
  owner: string;

  repo: string;
  /**
   * The new blob's content.
   */
  content: string;
  /**
   * The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
   */
  encoding?: string;
};

type GitCreateBlobRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/git/blobs";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Short Blob
 */
export interface GitCreateBlobResponseData {
  url: string;
  sha: string;
}

/**
 * Basic Error
 */
export interface GitCreateBlobResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface GitCreateBlobResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface GitCreateBlobResponse409Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface GitCreateBlobResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type GitCreateCommitEndpoint = {
  owner: string;

  repo: string;
  /**
   * The commit message
   */
  message: string;
  /**
   * The SHA of the tree object this commit points to
   */
  tree: string;
  /**
   * The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.
   */
  parents?: string[];
  /**
   * Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.
   */
  author?: GitCreateCommitParamsAuthor;
  /**
   * Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.
   */
  committer?: GitCreateCommitParamsCommitter;
  /**
   * The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.
   */
  signature?: string;
};

type GitCreateCommitRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/git/commits";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Low-level Git commit operations within a repository
 */
export interface GitCreateCommitResponseData {
  /**
   * SHA for the commit
   */
  sha: string;
  node_id: string;
  url: string;
  /**
   * Identifying information for the git-user
   */
  author: {
    /**
     * Timestamp of the commit
     */
    date: string;
    /**
     * Git email address of the user
     */
    email: string;
    /**
     * Name of the git user
     */
    name: string;
  };
  /**
   * Identifying information for the git-user
   */
  committer: {
    /**
     * Timestamp of the commit
     */
    date: string;
    /**
     * Git email address of the user
     */
    email: string;
    /**
     * Name of the git user
     */
    name: string;
  };
  /**
   * Message describing the purpose of the commit
   */
  message: string;
  tree: {
    /**
     * SHA for the commit
     */
    sha: string;
    url: string;
  };
  parents: {
    /**
     * SHA for the commit
     */
    sha: string;
    url: string;
    html_url: string;
  }[];
  verification: {
    verified: boolean;
    reason: string;
    signature: string;
    payload: string;
  };
  html_url: string;
}

/**
 * Basic Error
 */
export interface GitCreateCommitResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface GitCreateCommitResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type GitCreateRefEndpoint = {
  owner: string;

  repo: string;
  /**
   * The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.
   */
  ref: string;
  /**
   * The SHA1 value for this reference.
   */
  sha: string;

  key?: string;
};

type GitCreateRefRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/git/refs";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Git references within a repository
 */
export interface GitCreateRefResponseData {
  ref: string;
  node_id: string;
  url: string;
  object: {
    type: string;
    /**
     * SHA for the reference
     */
    sha: string;
    url: string;
  };
}

/**
 * Validation Error
 */
export interface GitCreateRefResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type GitCreateTagEndpoint = {
  owner: string;

  repo: string;
  /**
   * The tag's name. This is typically a version (e.g., "v0.0.1").
   */
  tag: string;
  /**
   * The tag message.
   */
  message: string;
  /**
   * The SHA of the git object this is tagging.
   */
  object: string;
  /**
   * The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
   */
  type: "commit" | "tree" | "blob";
  /**
   * An object with information about the individual creating the tag.
   */
  tagger?: GitCreateTagParamsTagger;
};

type GitCreateTagRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/git/tags";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Metadata for a Git tag
 */
export interface GitCreateTagResponseData {
  node_id: string;
  /**
   * Name of the tag
   */
  tag: string;
  sha: string;
  /**
   * URL for the tag
   */
  url: string;
  /**
   * Message describing the purpose of the tag
   */
  message: string;
  tagger: {
    date: string;
    email: string;
    name: string;
  };
  object: {
    sha: string;
    type: string;
    url: string;
  };
  verification: Verification;
}
export interface Verification {
  verified: boolean;
  reason: string;
  payload: string;
  signature: string;
}

/**
 * Validation Error
 */
export interface GitCreateTagResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type GitCreateTreeEndpoint = {
  owner: string;

  repo: string;
  /**
   * Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
   */
  tree: GitCreateTreeParamsTree[];
  /**
   * The SHA1 of the tree you want to update with new data. If you don't set this, the commit will be created on top of everything; however, it will only contain your change, the rest of your files will show up as deleted.
   */
  base_tree?: string;
};

type GitCreateTreeRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/git/trees";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * The hierarchy between files in a Git repository.
 */
export interface GitCreateTreeResponseData {
  sha: string;
  url: string;
  truncated: boolean;
  /**
   * Objects specifying a tree structure
   */
  tree: {
    path: string;
    mode: string;
    type: string;
    sha: string;
    size: number;
    url: string;
  }[];
}

/**
 * Basic Error
 */
export interface GitCreateTreeResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface GitCreateTreeResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface GitCreateTreeResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type GitDeleteRefEndpoint = {
  owner: string;

  repo: string;
  /**
   * ref+ parameter
   */
  ref: string;
};

type GitDeleteRefRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/git/refs/:ref";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Validation Error
 */
export interface GitDeleteRefResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type GitGetBlobEndpoint = {
  owner: string;

  repo: string;
  /**
   * file_sha parameter
   */
  file_sha: string;
};

type GitGetBlobRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/git/blobs/:file_sha";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Blob
 */
export interface GitGetBlobResponseData {
  content: string;
  encoding: string;
  url: string;
  sha: string;
  size: number;
  node_id: string;
  highlighted_content: string;
}

/**
 * Basic Error
 */
export interface GitGetBlobResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface GitGetBlobResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface GitGetBlobResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type GitGetCommitEndpoint = {
  owner: string;

  repo: string;
  /**
   * commit_sha+ parameter
   */
  commit_sha: string;
};

type GitGetCommitRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/git/commits/:commit_sha";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Low-level Git commit operations within a repository
 */
export interface GitGetCommitResponseData {
  /**
   * SHA for the commit
   */
  sha: string;
  node_id: string;
  url: string;
  /**
   * Identifying information for the git-user
   */
  author: {
    /**
     * Timestamp of the commit
     */
    date: string;
    /**
     * Git email address of the user
     */
    email: string;
    /**
     * Name of the git user
     */
    name: string;
  };
  /**
   * Identifying information for the git-user
   */
  committer: {
    /**
     * Timestamp of the commit
     */
    date: string;
    /**
     * Git email address of the user
     */
    email: string;
    /**
     * Name of the git user
     */
    name: string;
  };
  /**
   * Message describing the purpose of the commit
   */
  message: string;
  tree: {
    /**
     * SHA for the commit
     */
    sha: string;
    url: string;
  };
  parents: {
    /**
     * SHA for the commit
     */
    sha: string;
    url: string;
    html_url: string;
  }[];
  verification: {
    verified: boolean;
    reason: string;
    signature: string;
    payload: string;
  };
  html_url: string;
}

/**
 * Basic Error
 */
export interface GitGetCommitResponse404Data {
  message: string;
  documentation_url: string;
}

type GitGetRefEndpoint = {
  owner: string;

  repo: string;
  /**
   * ref+ parameter
   */
  ref: string;
};

type GitGetRefRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/git/ref/:ref";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Git references within a repository
 */
export interface GitGetRefResponseData {
  ref: string;
  node_id: string;
  url: string;
  object: {
    type: string;
    /**
     * SHA for the reference
     */
    sha: string;
    url: string;
  };
}

/**
 * Basic Error
 */
export interface GitGetRefResponse404Data {
  message: string;
  documentation_url: string;
}

type GitGetTagEndpoint = {
  owner: string;

  repo: string;
  /**
   * tag_sha parameter
   */
  tag_sha: string;
};

type GitGetTagRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/git/tags/:tag_sha";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Metadata for a Git tag
 */
export interface GitGetTagResponseData {
  node_id: string;
  /**
   * Name of the tag
   */
  tag: string;
  sha: string;
  /**
   * URL for the tag
   */
  url: string;
  /**
   * Message describing the purpose of the tag
   */
  message: string;
  tagger: {
    date: string;
    email: string;
    name: string;
  };
  object: {
    sha: string;
    type: string;
    url: string;
  };
  verification: Verification;
}
export interface Verification {
  verified: boolean;
  reason: string;
  payload: string;
  signature: string;
}

/**
 * Basic Error
 */
export interface GitGetTagResponse404Data {
  message: string;
  documentation_url: string;
}

type GitGetTreeEndpoint = {
  owner: string;

  repo: string;
  /**
   * tree_sha parameter
   */
  tree_sha: string;
  /**
   * Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent recursively returning objects or subtrees.
   */
  recursive?: string;
};

type GitGetTreeRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/git/trees/:tree_sha";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * The hierarchy between files in a Git repository.
 */
export interface GitGetTreeResponseData {
  sha: string;
  url: string;
  truncated: boolean;
  /**
   * Objects specifying a tree structure
   */
  tree: {
    path: string;
    mode: string;
    type: string;
    sha: string;
    size: number;
    url: string;
  }[];
}

/**
 * Basic Error
 */
export interface GitGetTreeResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface GitGetTreeResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type GitListMatchingRefsEndpoint = {
  owner: string;

  repo: string;
  /**
   * ref+ parameter
   */
  ref: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type GitListMatchingRefsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/git/matching-refs/:ref";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type GitListMatchingRefsResponseData = GitReference[];

/**
 * Git references within a repository
 */
export interface GitReference {
  ref: string;
  node_id: string;
  url: string;
  object: {
    type: string;
    /**
     * SHA for the reference
     */
    sha: string;
    url: string;
  };
}

type GitUpdateRefEndpoint = {
  owner: string;

  repo: string;
  /**
   * ref+ parameter
   */
  ref: string;
  /**
   * The SHA1 value to set this reference to
   */
  sha: string;
  /**
   * Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.
   */
  force?: boolean;
};

type GitUpdateRefRequestOptions = {
  method: "PATCH";
  url: "/repos/:owner/:repo/git/refs/:ref";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Git references within a repository
 */
export interface GitUpdateRefResponseData {
  ref: string;
  node_id: string;
  url: string;
  object: {
    type: string;
    /**
     * SHA for the reference
     */
    sha: string;
    url: string;
  };
}

/**
 * Validation Error
 */
export interface GitUpdateRefResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type GitignoreGetAllTemplatesEndpoint = {};

type GitignoreGetAllTemplatesRequestOptions = {
  method: "GET";
  url: "/gitignore/templates";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type GitignoreGetAllTemplatesResponseData = string[];

type GitignoreGetTemplateEndpoint = {
  /**
   * name parameter
   */
  name: string;
};

type GitignoreGetTemplateRequestOptions = {
  method: "GET";
  url: "/gitignore/templates/:name";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Gitignore Template
 */
export interface GitignoreGetTemplateResponseData {
  name: string;
  source: string;
}

type InteractionsGetRestrictionsForOrgEndpoint = {
  org: string;
} & RequiredPreview<"sombra">;

type InteractionsGetRestrictionsForOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/interaction-limits";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Interaction limit settings.
 */
export interface InteractionsGetRestrictionsForOrgResponseData {
  /**
   * The interaction limit to enable.
   */
  limit: "existing_users" | "contributors_only" | "collaborators_only";
  origin: string;
  expires_at: string;
}

type InteractionsGetRestrictionsForRepoEndpoint = {
  owner: string;

  repo: string;
} & RequiredPreview<"sombra">;

type InteractionsGetRestrictionsForRepoRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/interaction-limits";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Interaction limit settings.
 */
export interface InteractionsGetRestrictionsForRepoResponseData {
  /**
   * The interaction limit to enable.
   */
  limit: "existing_users" | "contributors_only" | "collaborators_only";
  origin: string;
  expires_at: string;
}

type InteractionsRemoveRestrictionsForOrgEndpoint = {
  org: string;
} & RequiredPreview<"sombra">;

type InteractionsRemoveRestrictionsForOrgRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/interaction-limits";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type InteractionsRemoveRestrictionsForRepoEndpoint = {
  owner: string;

  repo: string;
} & RequiredPreview<"sombra">;

type InteractionsRemoveRestrictionsForRepoRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/interaction-limits";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type InteractionsSetRestrictionsForOrgEndpoint = {
  org: string;
  /**
   * Specifies the group of GitHub users who can comment, open issues, or create pull requests in public repositories for the given organization. Must be one of: `existing_users`, `contributors_only`, or `collaborators_only`.
   */
  limit: "existing_users" | "contributors_only" | "collaborators_only";
} & RequiredPreview<"sombra">;

type InteractionsSetRestrictionsForOrgRequestOptions = {
  method: "PUT";
  url: "/orgs/:org/interaction-limits";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Interaction limit settings.
 */
export interface InteractionsSetRestrictionsForOrgResponseData {
  /**
   * The interaction limit to enable.
   */
  limit: "existing_users" | "contributors_only" | "collaborators_only";
  origin: string;
  expires_at: string;
}

/**
 * Validation Error
 */
export interface InteractionsSetRestrictionsForOrgResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type InteractionsSetRestrictionsForRepoEndpoint = {
  owner: string;

  repo: string;
  /**
   * Specifies the group of GitHub users who can comment, open issues, or create pull requests for the given repository. Must be one of: `existing_users`, `contributors_only`, or `collaborators_only`.
   */
  limit: "existing_users" | "contributors_only" | "collaborators_only";
} & RequiredPreview<"sombra">;

type InteractionsSetRestrictionsForRepoRequestOptions = {
  method: "PUT";
  url: "/repos/:owner/:repo/interaction-limits";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Interaction limit settings.
 */
export interface InteractionsSetRestrictionsForRepoResponseData {
  /**
   * The interaction limit to enable.
   */
  limit: "existing_users" | "contributors_only" | "collaborators_only";
  origin: string;
  expires_at: string;
}

type IssuesAddAssigneesEndpoint = {
  owner: string;

  repo: string;
  /**
   * issue_number parameter
   */
  issue_number: number;
  /**
   * Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._
   */
  assignees?: string[];
};

type IssuesAddAssigneesRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/issues/:issue_number/assignees";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Issue Simple
 */
export interface IssuesAddAssigneesResponseData {
  id: number;
  node_id: string;
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  number: number;
  state: string;
  title: string;
  body: string;
  user: SimpleUser;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  assignee: SimpleUser1;
  assignees: SimpleUser2[];
  milestone: Milestone;
  locked: boolean;
  active_lock_reason: string;
  comments: number;
  pull_request: {
    merged_at: string;
    diff_url: string;
    html_url: string;
    patch_url: string;
    url: string;
  };
  closed_at: string;
  created_at: string;
  updated_at: string;
  author_association: string;
  body_html: string;
  body_text: string;
  timeline_url: string;
  repository: Repository;
  performed_via_github_app: GitHubApp;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser3;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser4;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser5;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type IssuesAddLabelsEndpoint = {
  owner: string;

  repo: string;
  /**
   * issue_number parameter
   */
  issue_number: number;
  /**
   * The name of the label to add to the issue. Must contain at least one label. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.
   */
  labels: string[];
};

type IssuesAddLabelsRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/issues/:issue_number/labels";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type IssuesAddLabelsResponseData = Label[];

/**
 * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 */
export interface Label {
  id: number;
  node_id: string;
  /**
   * URL for the label
   */
  url: string;
  /**
   * The name of the label.
   */
  name: string;
  description: string;
  /**
   * 6-character hex code, without the leading #, identifying the color
   */
  color: string;
  default: boolean;
}

/**
 * Basic Error
 */
export interface IssuesAddLabelsResponse410Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface IssuesAddLabelsResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type IssuesCheckUserCanBeAssignedEndpoint = {
  owner: string;

  repo: string;
  /**
   * assignee parameter
   */
  assignee: string;
};

type IssuesCheckUserCanBeAssignedRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/assignees/:assignee";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface IssuesCheckUserCanBeAssignedResponse404Data {
  message: string;
  documentation_url: string;
}

type IssuesCreateEndpoint = {
  owner: string;

  repo: string;
  /**
   * The title of the issue.
   */
  title: string;
  /**
   * The contents of the issue.
   */
  body?: string;
  /**
   * Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
   */
  assignee?: string | null;
  /**
   * The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._
   */
  milestone?: number | null;
  /**
   * Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
   */
  labels?: undefined[];
  /**
   * Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
   */
  assignees?: string[];
};

type IssuesCreateRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/issues";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
export interface IssuesCreateResponseData {
  id: number;
  node_id: string;
  /**
   * URL for the issue
   */
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  /**
   * Number uniquely identifying the issue within its repository
   */
  number: number;
  /**
   * State of the issue; either 'open' or 'closed'
   */
  state: string;
  /**
   * Title of the issue
   */
  title: string;
  /**
   * Contents of the issue
   */
  body: string;
  user: SimpleUser;
  /**
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   */
  labels: (
    | string
    | {
        id?: number;
        node_id?: string;
        url?: string;
        name?: string;
        description?: string;
        color?: string;
        default?: boolean;
        [k: string]: unknown;
      }
  )[];
  assignee: SimpleUser1;
  assignees: SimpleUser2[];
  milestone: Milestone;
  locked: boolean;
  active_lock_reason: string;
  comments: number;
  pull_request: {
    merged_at: string;
    diff_url: string;
    html_url: string;
    patch_url: string;
    url: string;
  };
  closed_at: string;
  created_at: string;
  updated_at: string;
  closed_by: SimpleUser4;
  body_html: string;
  body_text: string;
  timeline_url: string;
  repository: Repository;
  performed_via_github_app: GitHubApp;
  author_association: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser3;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser5;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser6;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser6 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

/**
 * Basic Error
 */
export interface IssuesCreateResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface IssuesCreateResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface IssuesCreateResponse410Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface IssuesCreateResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

export interface IssuesCreateResponse503Data {
  code: string;
  message: string;
  documentation_url: string;
}

type IssuesCreateCommentEndpoint = {
  owner: string;

  repo: string;
  /**
   * issue_number parameter
   */
  issue_number: number;
  /**
   * The contents of the comment.
   */
  body: string;
};

type IssuesCreateCommentRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/issues/:issue_number/comments";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Comments provide a way for people to collaborate on an issue.
 */
export interface IssuesCreateCommentResponseData {
  /**
   * Unique identifier of the issue comment
   */
  id: number;
  node_id: string;
  /**
   * URL for the issue comment
   */
  url: string;
  /**
   * Contents of the issue comment
   */
  body: string;
  body_text: string;
  body_html: string;
  html_url: string;
  user: SimpleUser;
  created_at: string;
  updated_at: string;
  issue_url: string;
  author_association: string;
  performed_via_github_app: GitHubApp;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser1;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

/**
 * Basic Error
 */
export interface IssuesCreateCommentResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface IssuesCreateCommentResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface IssuesCreateCommentResponse410Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface IssuesCreateCommentResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type IssuesCreateLabelEndpoint = {
  owner: string;

  repo: string;
  /**
   * The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/).
   */
  name: string;
  /**
   * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
   */
  color?: string;
  /**
   * A short description of the label.
   */
  description?: string;
};

type IssuesCreateLabelRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/labels";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 */
export interface IssuesCreateLabelResponseData {
  id: number;
  node_id: string;
  /**
   * URL for the label
   */
  url: string;
  /**
   * The name of the label.
   */
  name: string;
  description: string;
  /**
   * 6-character hex code, without the leading #, identifying the color
   */
  color: string;
  default: boolean;
}

/**
 * Basic Error
 */
export interface IssuesCreateLabelResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface IssuesCreateLabelResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type IssuesCreateMilestoneEndpoint = {
  owner: string;

  repo: string;
  /**
   * The title of the milestone.
   */
  title: string;
  /**
   * The state of the milestone. Either `open` or `closed`.
   */
  state?: "open" | "closed";
  /**
   * A description of the milestone.
   */
  description?: string;
  /**
   * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  due_on?: string;
};

type IssuesCreateMilestoneRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/milestones";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A collection of related issues and pull requests.
 */
export interface IssuesCreateMilestoneResponseData {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface IssuesCreateMilestoneResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface IssuesCreateMilestoneResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type IssuesDeleteCommentEndpoint = {
  owner: string;

  repo: string;
  /**
   * comment_id parameter
   */
  comment_id: number;
};

type IssuesDeleteCommentRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/issues/comments/:comment_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type IssuesDeleteLabelEndpoint = {
  owner: string;

  repo: string;
  /**
   * name parameter
   */
  name: string;
};

type IssuesDeleteLabelRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/labels/:name";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type IssuesDeleteMilestoneEndpoint = {
  owner: string;

  repo: string;
  /**
   * milestone_number parameter
   */
  milestone_number: number;
};

type IssuesDeleteMilestoneRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/milestones/:milestone_number";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface IssuesDeleteMilestoneResponse404Data {
  message: string;
  documentation_url: string;
}

type IssuesGetEndpoint = {
  owner: string;

  repo: string;
  /**
   * issue_number parameter
   */
  issue_number: number;
};

type IssuesGetRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/issues/:issue_number";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
export interface IssuesGetResponseData {
  id: number;
  node_id: string;
  /**
   * URL for the issue
   */
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  /**
   * Number uniquely identifying the issue within its repository
   */
  number: number;
  /**
   * State of the issue; either 'open' or 'closed'
   */
  state: string;
  /**
   * Title of the issue
   */
  title: string;
  /**
   * Contents of the issue
   */
  body: string;
  user: SimpleUser;
  /**
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   */
  labels: (
    | string
    | {
        id?: number;
        node_id?: string;
        url?: string;
        name?: string;
        description?: string;
        color?: string;
        default?: boolean;
        [k: string]: unknown;
      }
  )[];
  assignee: SimpleUser1;
  assignees: SimpleUser2[];
  milestone: Milestone;
  locked: boolean;
  active_lock_reason: string;
  comments: number;
  pull_request: {
    merged_at: string;
    diff_url: string;
    html_url: string;
    patch_url: string;
    url: string;
  };
  closed_at: string;
  created_at: string;
  updated_at: string;
  closed_by: SimpleUser4;
  body_html: string;
  body_text: string;
  timeline_url: string;
  repository: Repository;
  performed_via_github_app: GitHubApp;
  author_association: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser3;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser5;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser6;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser6 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

/**
 * Basic Error
 */
export interface IssuesGetResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface IssuesGetResponse410Data {
  message: string;
  documentation_url: string;
}

type IssuesGetCommentEndpoint = {
  owner: string;

  repo: string;
  /**
   * comment_id parameter
   */
  comment_id: number;
};

type IssuesGetCommentRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/issues/comments/:comment_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Comments provide a way for people to collaborate on an issue.
 */
export interface IssuesGetCommentResponseData {
  /**
   * Unique identifier of the issue comment
   */
  id: number;
  node_id: string;
  /**
   * URL for the issue comment
   */
  url: string;
  /**
   * Contents of the issue comment
   */
  body: string;
  body_text: string;
  body_html: string;
  html_url: string;
  user: SimpleUser;
  created_at: string;
  updated_at: string;
  issue_url: string;
  author_association: string;
  performed_via_github_app: GitHubApp;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser1;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

/**
 * Basic Error
 */
export interface IssuesGetCommentResponse404Data {
  message: string;
  documentation_url: string;
}

type IssuesGetEventEndpoint = {
  owner: string;

  repo: string;
  /**
   * event_id parameter
   */
  event_id: number;
};

type IssuesGetEventRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/issues/events/:event_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Issue Event
 */
export interface IssuesGetEventResponseData {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  issue: IssueSimple;
  label: IssueEventLabel;
  assignee: SimpleUser7;
  assigner: SimpleUser8;
  review_requester: SimpleUser9;
  requested_reviewer: SimpleUser10;
  requested_team: Team;
  dismissed_review: IssueEventDismissedReview;
  milestone: IssueEventMilestone;
  project_card: IssueEventProjectCard;
  rename: IssueEventRename;
  author_association: string;
  lock_reason: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Issue Simple
 */
export interface IssueSimple {
  id: number;
  node_id: string;
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  number: number;
  state: string;
  title: string;
  body: string;
  user: SimpleUser1;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  assignee: SimpleUser2;
  assignees: SimpleUser3[];
  milestone: Milestone;
  locked: boolean;
  active_lock_reason: string;
  comments: number;
  pull_request: {
    merged_at: string;
    diff_url: string;
    html_url: string;
    patch_url: string;
    url: string;
  };
  closed_at: string;
  created_at: string;
  updated_at: string;
  author_association: string;
  body_html: string;
  body_text: string;
  timeline_url: string;
  repository: Repository;
  performed_via_github_app: GitHubApp;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser4;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser5;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser6;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser6 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Issue Event Label
 */
export interface IssueEventLabel {
  name: string;
  color: string;
}
/**
 * Simple User
 */
export interface SimpleUser7 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser8 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser9 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser10 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string;
  privacy: string;
  permission: string;
  url: string;
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}
export interface IssueEventDismissedReview {
  state: string;
  review_id: number;
  dismissal_message: string;
  dismissal_commit_id: string;
}
/**
 * Issue Event Milestone
 */
export interface IssueEventMilestone {
  title: string;
}
/**
 * Issue Event Project Card
 */
export interface IssueEventProjectCard {
  url: string;
  id: number;
  project_url: string;
  project_id: number;
  column_name: string;
  previous_column_name: string;
}
/**
 * Issue Event Rename
 */
export interface IssueEventRename {
  from: string;
  to: string;
}

/**
 * Basic Error
 */
export interface IssuesGetEventResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface IssuesGetEventResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface IssuesGetEventResponse410Data {
  message: string;
  documentation_url: string;
}

type IssuesGetLabelEndpoint = {
  owner: string;

  repo: string;
  /**
   * name parameter
   */
  name: string;
};

type IssuesGetLabelRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/labels/:name";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 */
export interface IssuesGetLabelResponseData {
  id: number;
  node_id: string;
  /**
   * URL for the label
   */
  url: string;
  /**
   * The name of the label.
   */
  name: string;
  description: string;
  /**
   * 6-character hex code, without the leading #, identifying the color
   */
  color: string;
  default: boolean;
}

/**
 * Basic Error
 */
export interface IssuesGetLabelResponse404Data {
  message: string;
  documentation_url: string;
}

type IssuesGetMilestoneEndpoint = {
  owner: string;

  repo: string;
  /**
   * milestone_number parameter
   */
  milestone_number: number;
};

type IssuesGetMilestoneRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/milestones/:milestone_number";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A collection of related issues and pull requests.
 */
export interface IssuesGetMilestoneResponseData {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface IssuesGetMilestoneResponse404Data {
  message: string;
  documentation_url: string;
}

type IssuesListEndpoint = {
  /**
   * Indicates which sorts of issues to return. Can be one of:
   * \* `assigned`: Issues assigned to you
   * \* `created`: Issues created by you
   * \* `mentioned`: Issues mentioning you
   * \* `subscribed`: Issues you're subscribed to updates for
   * \* `all`: All issues the authenticated user can see, regardless of participation or creation
   */
  filter?: "assigned" | "created" | "mentioned" | "subscribed" | "all";
  /**
   * Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
   */
  state?: "open" | "closed" | "all";
  /**
   * A list of comma separated label names. Example: `bug,ui,@high`
   */
  labels?: string;
  /**
   * What to sort results by. Can be either `created`, `updated`, `comments`.
   */
  sort?: "created" | "updated" | "comments";
  /**
   * One of `asc` (ascending) or `desc` (descending).
   */
  direction?: "asc" | "desc";
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;

  collab?: boolean;

  orgs?: boolean;

  owned?: boolean;

  pulls?: boolean;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type IssuesListRequestOptions = {
  method: "GET";
  url: "/issues";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type IssuesListResponseData = Issue[];

/**
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
export interface Issue {
  id: number;
  node_id: string;
  /**
   * URL for the issue
   */
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  /**
   * Number uniquely identifying the issue within its repository
   */
  number: number;
  /**
   * State of the issue; either 'open' or 'closed'
   */
  state: string;
  /**
   * Title of the issue
   */
  title: string;
  /**
   * Contents of the issue
   */
  body: string;
  user: SimpleUser;
  /**
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   */
  labels: (
    | string
    | {
        id?: number;
        node_id?: string;
        url?: string;
        name?: string;
        description?: string;
        color?: string;
        default?: boolean;
        [k: string]: unknown;
      }
  )[];
  assignee: SimpleUser1;
  assignees: SimpleUser2[];
  milestone: Milestone;
  locked: boolean;
  active_lock_reason: string;
  comments: number;
  pull_request: {
    merged_at: string;
    diff_url: string;
    html_url: string;
    patch_url: string;
    url: string;
  };
  closed_at: string;
  created_at: string;
  updated_at: string;
  closed_by: SimpleUser4;
  body_html: string;
  body_text: string;
  timeline_url: string;
  repository: Repository;
  performed_via_github_app: GitHubApp;
  author_association: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser3;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser5;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser6;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser6 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

/**
 * Basic Error
 */
export interface IssuesListResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface IssuesListResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type IssuesListAssigneesEndpoint = {
  owner: string;

  repo: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type IssuesListAssigneesRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/assignees";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type IssuesListAssigneesResponseData = SimpleUser[];

/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

/**
 * Basic Error
 */
export interface IssuesListAssigneesResponse404Data {
  message: string;
  documentation_url: string;
}

type IssuesListCommentsEndpoint = {
  owner: string;

  repo: string;
  /**
   * issue_number parameter
   */
  issue_number: number;
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type IssuesListCommentsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/issues/:issue_number/comments";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type IssuesListCommentsResponseData = IssueComment[];

/**
 * Comments provide a way for people to collaborate on an issue.
 */
export interface IssueComment {
  /**
   * Unique identifier of the issue comment
   */
  id: number;
  node_id: string;
  /**
   * URL for the issue comment
   */
  url: string;
  /**
   * Contents of the issue comment
   */
  body: string;
  body_text: string;
  body_html: string;
  html_url: string;
  user: SimpleUser;
  created_at: string;
  updated_at: string;
  issue_url: string;
  author_association: string;
  performed_via_github_app: GitHubApp;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser1;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

/**
 * Basic Error
 */
export interface IssuesListCommentsResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface IssuesListCommentsResponse410Data {
  message: string;
  documentation_url: string;
}

type IssuesListCommentsForRepoEndpoint = {
  owner: string;

  repo: string;
  /**
   * One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
   */
  sort?: "created" | "updated";
  /**
   * Either `asc` or `desc`. Ignored without the `sort` parameter.
   */
  direction?: "asc" | "desc";
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type IssuesListCommentsForRepoRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/issues/comments";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type IssuesListCommentsForRepoResponseData = IssueComment[];

/**
 * Comments provide a way for people to collaborate on an issue.
 */
export interface IssueComment {
  /**
   * Unique identifier of the issue comment
   */
  id: number;
  node_id: string;
  /**
   * URL for the issue comment
   */
  url: string;
  /**
   * Contents of the issue comment
   */
  body: string;
  body_text: string;
  body_html: string;
  html_url: string;
  user: SimpleUser;
  created_at: string;
  updated_at: string;
  issue_url: string;
  author_association: string;
  performed_via_github_app: GitHubApp;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser1;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

/**
 * Basic Error
 */
export interface IssuesListCommentsForRepoResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface IssuesListCommentsForRepoResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type IssuesListEventsEndpoint = {
  owner: string;

  repo: string;
  /**
   * issue_number parameter
   */
  issue_number: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type IssuesListEventsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/issues/:issue_number/events";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type IssuesListEventsResponseData = IssueEventForIssue[];

/**
 * Issue Event for Issue
 */
export interface IssueEventForIssue {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  sha: string;
  html_url: string;
  message: string;
  issue_url: string;
  updated_at: string;
  author_association: string;
  body: string;
  lock_reason: string;
  submitted_at: string;
  state: string;
  pull_request_url: string;
  body_html: string;
  body_text: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

/**
 * Basic Error
 */
export interface IssuesListEventsResponse410Data {
  message: string;
  documentation_url: string;
}

type IssuesListEventsForRepoEndpoint = {
  owner: string;

  repo: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type IssuesListEventsForRepoRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/issues/events";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type IssuesListEventsForRepoResponseData = IssueEvent[];

/**
 * Issue Event
 */
export interface IssueEvent {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  issue: IssueSimple;
  label: IssueEventLabel;
  assignee: SimpleUser7;
  assigner: SimpleUser8;
  review_requester: SimpleUser9;
  requested_reviewer: SimpleUser10;
  requested_team: Team;
  dismissed_review: IssueEventDismissedReview;
  milestone: IssueEventMilestone;
  project_card: IssueEventProjectCard;
  rename: IssueEventRename;
  author_association: string;
  lock_reason: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Issue Simple
 */
export interface IssueSimple {
  id: number;
  node_id: string;
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  number: number;
  state: string;
  title: string;
  body: string;
  user: SimpleUser1;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  assignee: SimpleUser2;
  assignees: SimpleUser3[];
  milestone: Milestone;
  locked: boolean;
  active_lock_reason: string;
  comments: number;
  pull_request: {
    merged_at: string;
    diff_url: string;
    html_url: string;
    patch_url: string;
    url: string;
  };
  closed_at: string;
  created_at: string;
  updated_at: string;
  author_association: string;
  body_html: string;
  body_text: string;
  timeline_url: string;
  repository: Repository;
  performed_via_github_app: GitHubApp;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser4;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser5;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser6;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser6 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Issue Event Label
 */
export interface IssueEventLabel {
  name: string;
  color: string;
}
/**
 * Simple User
 */
export interface SimpleUser7 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser8 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser9 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser10 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string;
  privacy: string;
  permission: string;
  url: string;
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}
export interface IssueEventDismissedReview {
  state: string;
  review_id: number;
  dismissal_message: string;
  dismissal_commit_id: string;
}
/**
 * Issue Event Milestone
 */
export interface IssueEventMilestone {
  title: string;
}
/**
 * Issue Event Project Card
 */
export interface IssueEventProjectCard {
  url: string;
  id: number;
  project_url: string;
  project_id: number;
  column_name: string;
  previous_column_name: string;
}
/**
 * Issue Event Rename
 */
export interface IssueEventRename {
  from: string;
  to: string;
}

/**
 * Validation Error
 */
export interface IssuesListEventsForRepoResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type IssuesListEventsForTimelineEndpoint = {
  owner: string;

  repo: string;
  /**
   * issue_number parameter
   */
  issue_number: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"mockingbird">;

type IssuesListEventsForTimelineRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/issues/:issue_number/timeline";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type IssuesListEventsForTimelineResponseData = IssueEventForIssue[];

/**
 * Issue Event for Issue
 */
export interface IssueEventForIssue {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string;
  commit_url: string;
  created_at: string;
  sha: string;
  html_url: string;
  message: string;
  issue_url: string;
  updated_at: string;
  author_association: string;
  body: string;
  lock_reason: string;
  submitted_at: string;
  state: string;
  pull_request_url: string;
  body_html: string;
  body_text: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

/**
 * Basic Error
 */
export interface IssuesListEventsForTimelineResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface IssuesListEventsForTimelineResponse410Data {
  message: string;
  documentation_url: string;
}

export interface IssuesListEventsForTimelineResponse415Data {
  message: string;
  documentation_url: string;
}

type IssuesListForAuthenticatedUserEndpoint = {
  /**
   * Indicates which sorts of issues to return. Can be one of:
   * \* `assigned`: Issues assigned to you
   * \* `created`: Issues created by you
   * \* `mentioned`: Issues mentioning you
   * \* `subscribed`: Issues you're subscribed to updates for
   * \* `all`: All issues the authenticated user can see, regardless of participation or creation
   */
  filter?: "assigned" | "created" | "mentioned" | "subscribed" | "all";
  /**
   * Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
   */
  state?: "open" | "closed" | "all";
  /**
   * A list of comma separated label names. Example: `bug,ui,@high`
   */
  labels?: string;
  /**
   * What to sort results by. Can be either `created`, `updated`, `comments`.
   */
  sort?: "created" | "updated" | "comments";
  /**
   * One of `asc` (ascending) or `desc` (descending).
   */
  direction?: "asc" | "desc";
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type IssuesListForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: "/user/issues";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type IssuesListForAuthenticatedUserResponseData = Issue[];

/**
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
export interface Issue {
  id: number;
  node_id: string;
  /**
   * URL for the issue
   */
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  /**
   * Number uniquely identifying the issue within its repository
   */
  number: number;
  /**
   * State of the issue; either 'open' or 'closed'
   */
  state: string;
  /**
   * Title of the issue
   */
  title: string;
  /**
   * Contents of the issue
   */
  body: string;
  user: SimpleUser;
  /**
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   */
  labels: (
    | string
    | {
        id?: number;
        node_id?: string;
        url?: string;
        name?: string;
        description?: string;
        color?: string;
        default?: boolean;
        [k: string]: unknown;
      }
  )[];
  assignee: SimpleUser1;
  assignees: SimpleUser2[];
  milestone: Milestone;
  locked: boolean;
  active_lock_reason: string;
  comments: number;
  pull_request: {
    merged_at: string;
    diff_url: string;
    html_url: string;
    patch_url: string;
    url: string;
  };
  closed_at: string;
  created_at: string;
  updated_at: string;
  closed_by: SimpleUser4;
  body_html: string;
  body_text: string;
  timeline_url: string;
  repository: Repository;
  performed_via_github_app: GitHubApp;
  author_association: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser3;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser5;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser6;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser6 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

/**
 * Basic Error
 */
export interface IssuesListForAuthenticatedUserResponse404Data {
  message: string;
  documentation_url: string;
}

type IssuesListForOrgEndpoint = {
  org: string;
  /**
   * Indicates which sorts of issues to return. Can be one of:
   * \* `assigned`: Issues assigned to you
   * \* `created`: Issues created by you
   * \* `mentioned`: Issues mentioning you
   * \* `subscribed`: Issues you're subscribed to updates for
   * \* `all`: All issues the authenticated user can see, regardless of participation or creation
   */
  filter?: "assigned" | "created" | "mentioned" | "subscribed" | "all";
  /**
   * Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
   */
  state?: "open" | "closed" | "all";
  /**
   * A list of comma separated label names. Example: `bug,ui,@high`
   */
  labels?: string;
  /**
   * What to sort results by. Can be either `created`, `updated`, `comments`.
   */
  sort?: "created" | "updated" | "comments";
  /**
   * One of `asc` (ascending) or `desc` (descending).
   */
  direction?: "asc" | "desc";
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type IssuesListForOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/issues";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type IssuesListForOrgResponseData = Issue[];

/**
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
export interface Issue {
  id: number;
  node_id: string;
  /**
   * URL for the issue
   */
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  /**
   * Number uniquely identifying the issue within its repository
   */
  number: number;
  /**
   * State of the issue; either 'open' or 'closed'
   */
  state: string;
  /**
   * Title of the issue
   */
  title: string;
  /**
   * Contents of the issue
   */
  body: string;
  user: SimpleUser;
  /**
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   */
  labels: (
    | string
    | {
        id?: number;
        node_id?: string;
        url?: string;
        name?: string;
        description?: string;
        color?: string;
        default?: boolean;
        [k: string]: unknown;
      }
  )[];
  assignee: SimpleUser1;
  assignees: SimpleUser2[];
  milestone: Milestone;
  locked: boolean;
  active_lock_reason: string;
  comments: number;
  pull_request: {
    merged_at: string;
    diff_url: string;
    html_url: string;
    patch_url: string;
    url: string;
  };
  closed_at: string;
  created_at: string;
  updated_at: string;
  closed_by: SimpleUser4;
  body_html: string;
  body_text: string;
  timeline_url: string;
  repository: Repository;
  performed_via_github_app: GitHubApp;
  author_association: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser3;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser5;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser6;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser6 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

/**
 * Basic Error
 */
export interface IssuesListForOrgResponse404Data {
  message: string;
  documentation_url: string;
}

type IssuesListForRepoEndpoint = {
  owner: string;

  repo: string;
  /**
   * If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.
   */
  milestone?: string;
  /**
   * Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
   */
  state?: "open" | "closed" | "all";
  /**
   * Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.
   */
  assignee?: string;
  /**
   * The user that created the issue.
   */
  creator?: string;
  /**
   * A user that's mentioned in the issue.
   */
  mentioned?: string;
  /**
   * A list of comma separated label names. Example: `bug,ui,@high`
   */
  labels?: string;
  /**
   * What to sort results by. Can be either `created`, `updated`, `comments`.
   */
  sort?: "created" | "updated" | "comments";
  /**
   * One of `asc` (ascending) or `desc` (descending).
   */
  direction?: "asc" | "desc";
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type IssuesListForRepoRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/issues";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type IssuesListForRepoResponseData = IssueSimple[];

/**
 * Issue Simple
 */
export interface IssueSimple {
  id: number;
  node_id: string;
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  number: number;
  state: string;
  title: string;
  body: string;
  user: SimpleUser;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  assignee: SimpleUser1;
  assignees: SimpleUser2[];
  milestone: Milestone;
  locked: boolean;
  active_lock_reason: string;
  comments: number;
  pull_request: {
    merged_at: string;
    diff_url: string;
    html_url: string;
    patch_url: string;
    url: string;
  };
  closed_at: string;
  created_at: string;
  updated_at: string;
  author_association: string;
  body_html: string;
  body_text: string;
  timeline_url: string;
  repository: Repository;
  performed_via_github_app: GitHubApp;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser3;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser4;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser5;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface IssuesListForRepoResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface IssuesListForRepoResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type IssuesListLabelsForMilestoneEndpoint = {
  owner: string;

  repo: string;
  /**
   * milestone_number parameter
   */
  milestone_number: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type IssuesListLabelsForMilestoneRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/milestones/:milestone_number/labels";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type IssuesListLabelsForMilestoneResponseData = Label[];

/**
 * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 */
export interface Label {
  id: number;
  node_id: string;
  /**
   * URL for the label
   */
  url: string;
  /**
   * The name of the label.
   */
  name: string;
  description: string;
  /**
   * 6-character hex code, without the leading #, identifying the color
   */
  color: string;
  default: boolean;
}

type IssuesListLabelsForRepoEndpoint = {
  owner: string;

  repo: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type IssuesListLabelsForRepoRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/labels";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type IssuesListLabelsForRepoResponseData = Label[];

/**
 * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 */
export interface Label {
  id: number;
  node_id: string;
  /**
   * URL for the label
   */
  url: string;
  /**
   * The name of the label.
   */
  name: string;
  description: string;
  /**
   * 6-character hex code, without the leading #, identifying the color
   */
  color: string;
  default: boolean;
}

/**
 * Basic Error
 */
export interface IssuesListLabelsForRepoResponse404Data {
  message: string;
  documentation_url: string;
}

type IssuesListLabelsOnIssueEndpoint = {
  owner: string;

  repo: string;
  /**
   * issue_number parameter
   */
  issue_number: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type IssuesListLabelsOnIssueRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/issues/:issue_number/labels";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type IssuesListLabelsOnIssueResponseData = Label[];

/**
 * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 */
export interface Label {
  id: number;
  node_id: string;
  /**
   * URL for the label
   */
  url: string;
  /**
   * The name of the label.
   */
  name: string;
  description: string;
  /**
   * 6-character hex code, without the leading #, identifying the color
   */
  color: string;
  default: boolean;
}

/**
 * Basic Error
 */
export interface IssuesListLabelsOnIssueResponse410Data {
  message: string;
  documentation_url: string;
}

type IssuesListMilestonesEndpoint = {
  owner: string;

  repo: string;
  /**
   * The state of the milestone. Either `open`, `closed`, or `all`.
   */
  state?: "open" | "closed" | "all";
  /**
   * What to sort results by. Either `due_on` or `completeness`.
   */
  sort?: "due_on" | "completeness";
  /**
   * The direction of the sort. Either `asc` or `desc`.
   */
  direction?: "asc" | "desc";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type IssuesListMilestonesRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/milestones";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type IssuesListMilestonesResponseData = Milestone[];

/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface IssuesListMilestonesResponse404Data {
  message: string;
  documentation_url: string;
}

type IssuesLockEndpoint = {
  owner: string;

  repo: string;
  /**
   * issue_number parameter
   */
  issue_number: number;
  /**
   * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
   * \* `off-topic`
   * \* `too heated`
   * \* `resolved`
   * \* `spam`
   */
  lock_reason?: "off-topic" | "too heated" | "resolved" | "spam";
};

type IssuesLockRequestOptions = {
  method: "PUT";
  url: "/repos/:owner/:repo/issues/:issue_number/lock";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface IssuesLockResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface IssuesLockResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface IssuesLockResponse410Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface IssuesLockResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type IssuesRemoveAllLabelsEndpoint = {
  owner: string;

  repo: string;
  /**
   * issue_number parameter
   */
  issue_number: number;
};

type IssuesRemoveAllLabelsRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/issues/:issue_number/labels";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface IssuesRemoveAllLabelsResponse410Data {
  message: string;
  documentation_url: string;
}

type IssuesRemoveAssigneesEndpoint = {
  owner: string;

  repo: string;
  /**
   * issue_number parameter
   */
  issue_number: number;
  /**
   * Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._
   */
  assignees?: string[];
};

type IssuesRemoveAssigneesRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/issues/:issue_number/assignees";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Issue Simple
 */
export interface IssuesRemoveAssigneesResponseData {
  id: number;
  node_id: string;
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  number: number;
  state: string;
  title: string;
  body: string;
  user: SimpleUser;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  assignee: SimpleUser1;
  assignees: SimpleUser2[];
  milestone: Milestone;
  locked: boolean;
  active_lock_reason: string;
  comments: number;
  pull_request: {
    merged_at: string;
    diff_url: string;
    html_url: string;
    patch_url: string;
    url: string;
  };
  closed_at: string;
  created_at: string;
  updated_at: string;
  author_association: string;
  body_html: string;
  body_text: string;
  timeline_url: string;
  repository: Repository;
  performed_via_github_app: GitHubApp;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser3;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser4;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser5;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type IssuesRemoveLabelEndpoint = {
  owner: string;

  repo: string;
  /**
   * issue_number parameter
   */
  issue_number: number;
  /**
   * name parameter
   */
  name: string;
};

type IssuesRemoveLabelRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/issues/:issue_number/labels/:name";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type IssuesRemoveLabelResponseData = Label[];

/**
 * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 */
export interface Label {
  id: number;
  node_id: string;
  /**
   * URL for the label
   */
  url: string;
  /**
   * The name of the label.
   */
  name: string;
  description: string;
  /**
   * 6-character hex code, without the leading #, identifying the color
   */
  color: string;
  default: boolean;
}

/**
 * Basic Error
 */
export interface IssuesRemoveLabelResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface IssuesRemoveLabelResponse410Data {
  message: string;
  documentation_url: string;
}

type IssuesSetLabelsEndpoint = {
  owner: string;

  repo: string;
  /**
   * issue_number parameter
   */
  issue_number: number;
  /**
   * The names of the labels to add to the issue. You can pass an empty array to remove all labels. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.
   */
  labels?: string[];
};

type IssuesSetLabelsRequestOptions = {
  method: "PUT";
  url: "/repos/:owner/:repo/issues/:issue_number/labels";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type IssuesSetLabelsResponseData = Label[];

/**
 * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 */
export interface Label {
  id: number;
  node_id: string;
  /**
   * URL for the label
   */
  url: string;
  /**
   * The name of the label.
   */
  name: string;
  description: string;
  /**
   * 6-character hex code, without the leading #, identifying the color
   */
  color: string;
  default: boolean;
}

/**
 * Basic Error
 */
export interface IssuesSetLabelsResponse410Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface IssuesSetLabelsResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type IssuesUnlockEndpoint = {
  owner: string;

  repo: string;
  /**
   * issue_number parameter
   */
  issue_number: number;
};

type IssuesUnlockRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/issues/:issue_number/lock";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface IssuesUnlockResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface IssuesUnlockResponse404Data {
  message: string;
  documentation_url: string;
}

type IssuesUpdateEndpoint = {
  owner: string;

  repo: string;
  /**
   * issue_number parameter
   */
  issue_number: number;
  /**
   * The title of the issue.
   */
  title?: string;
  /**
   * The contents of the issue.
   */
  body?: string;
  /**
   * Login for the user that this issue should be assigned to. **This field is deprecated.**
   */
  assignee?: string;
  /**
   * State of the issue. Either `open` or `closed`.
   */
  state?: "open" | "closed";
  /**
   * The `number` of the milestone to associate this issue with or `null` to remove current. _NOTE: Only users with push access can set the milestone for issues. The milestone is silently dropped otherwise._
   */
  milestone?: number | null;
  /**
   * Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._
   */
  labels?: undefined[];
  /**
   * Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
   */
  assignees?: string[];
};

type IssuesUpdateRequestOptions = {
  method: "PATCH";
  url: "/repos/:owner/:repo/issues/:issue_number";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
export interface IssuesUpdateResponseData {
  id: number;
  node_id: string;
  /**
   * URL for the issue
   */
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  /**
   * Number uniquely identifying the issue within its repository
   */
  number: number;
  /**
   * State of the issue; either 'open' or 'closed'
   */
  state: string;
  /**
   * Title of the issue
   */
  title: string;
  /**
   * Contents of the issue
   */
  body: string;
  user: SimpleUser;
  /**
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   */
  labels: (
    | string
    | {
        id?: number;
        node_id?: string;
        url?: string;
        name?: string;
        description?: string;
        color?: string;
        default?: boolean;
        [k: string]: unknown;
      }
  )[];
  assignee: SimpleUser1;
  assignees: SimpleUser2[];
  milestone: Milestone;
  locked: boolean;
  active_lock_reason: string;
  comments: number;
  pull_request: {
    merged_at: string;
    diff_url: string;
    html_url: string;
    patch_url: string;
    url: string;
  };
  closed_at: string;
  created_at: string;
  updated_at: string;
  closed_by: SimpleUser4;
  body_html: string;
  body_text: string;
  timeline_url: string;
  repository: Repository;
  performed_via_github_app: GitHubApp;
  author_association: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser3;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser5;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser6;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser6 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

/**
 * Basic Error
 */
export interface IssuesUpdateResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface IssuesUpdateResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface IssuesUpdateResponse410Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface IssuesUpdateResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

export interface IssuesUpdateResponse503Data {
  code: string;
  message: string;
  documentation_url: string;
}

type IssuesUpdateCommentEndpoint = {
  owner: string;

  repo: string;
  /**
   * comment_id parameter
   */
  comment_id: number;
  /**
   * The contents of the comment.
   */
  body: string;
};

type IssuesUpdateCommentRequestOptions = {
  method: "PATCH";
  url: "/repos/:owner/:repo/issues/comments/:comment_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Comments provide a way for people to collaborate on an issue.
 */
export interface IssuesUpdateCommentResponseData {
  /**
   * Unique identifier of the issue comment
   */
  id: number;
  node_id: string;
  /**
   * URL for the issue comment
   */
  url: string;
  /**
   * Contents of the issue comment
   */
  body: string;
  body_text: string;
  body_html: string;
  html_url: string;
  user: SimpleUser;
  created_at: string;
  updated_at: string;
  issue_url: string;
  author_association: string;
  performed_via_github_app: GitHubApp;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser1;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

/**
 * Validation Error
 */
export interface IssuesUpdateCommentResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type IssuesUpdateLabelEndpoint = {
  owner: string;

  repo: string;
  /**
   * name parameter
   */
  name: string;
  /**
   * The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/).
   */
  new_name?: string;
  /**
   * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
   */
  color?: string;
  /**
   * A short description of the label.
   */
  description?: string;
};

type IssuesUpdateLabelRequestOptions = {
  method: "PATCH";
  url: "/repos/:owner/:repo/labels/:name";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 */
export interface IssuesUpdateLabelResponseData {
  id: number;
  node_id: string;
  /**
   * URL for the label
   */
  url: string;
  /**
   * The name of the label.
   */
  name: string;
  description: string;
  /**
   * 6-character hex code, without the leading #, identifying the color
   */
  color: string;
  default: boolean;
}

type IssuesUpdateMilestoneEndpoint = {
  owner: string;

  repo: string;
  /**
   * milestone_number parameter
   */
  milestone_number: number;
  /**
   * The title of the milestone.
   */
  title?: string;
  /**
   * The state of the milestone. Either `open` or `closed`.
   */
  state?: "open" | "closed";
  /**
   * A description of the milestone.
   */
  description?: string;
  /**
   * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  due_on?: string;
};

type IssuesUpdateMilestoneRequestOptions = {
  method: "PATCH";
  url: "/repos/:owner/:repo/milestones/:milestone_number";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A collection of related issues and pull requests.
 */
export interface IssuesUpdateMilestoneResponseData {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type LicensesGetEndpoint = {
  /**
   * license parameter
   */
  license: string;
};

type LicensesGetRequestOptions = {
  method: "GET";
  url: "/licenses/:license";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * License
 */
export interface LicensesGetResponseData {
  key: string;
  name: string;
  spdx_id: string;
  url: string;
  node_id: string;
  html_url: string;
  description: string;
  implementation: string;
  permissions: string[];
  conditions: string[];
  limitations: string[];
  body: string;
  featured: boolean;
}

/**
 * Basic Error
 */
export interface LicensesGetResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface LicensesGetResponse404Data {
  message: string;
  documentation_url: string;
}

type LicensesGetAllCommonlyUsedEndpoint = {
  featured?: boolean;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
};

type LicensesGetAllCommonlyUsedRequestOptions = {
  method: "GET";
  url: "/licenses";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type LicensesGetAllCommonlyUsedResponseData = LicenseSimple[];

/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url: string;
}

type LicensesGetForRepoEndpoint = {
  owner: string;

  repo: string;
};

type LicensesGetForRepoRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/license";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * License Content
 */
export interface LicensesGetForRepoResponseData {
  name: string;
  path: string;
  sha: string;
  size: number;
  url: string;
  html_url: string;
  git_url: string;
  download_url: string;
  type: string;
  content: string;
  encoding: string;
  _links: {
    git: string;
    html: string;
    self: string;
  };
  license: LicenseSimple;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}

type MarkdownRenderEndpoint = {
  /**
   * The Markdown text to render in HTML.
   */
  text: string;
  /**
   * The rendering mode.
   */
  mode?: "markdown" | "gfm";
  /**
   * The repository context to use when creating references in `gfm` mode.
   */
  context?: string;
};

type MarkdownRenderRequestOptions = {
  method: "POST";
  url: "/markdown";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type MarkdownRenderRawEndpoint = {
  /**
   * raw markdown text
   */
  data: string;
} & { headers: { "content-type": "text/plain; charset=utf-8" } };

type MarkdownRenderRawRequestOptions = {
  method: "POST";
  url: "/markdown/raw";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type MarkdownRenderRawResponseData = string;

type MetaGetEndpoint = {};

type MetaGetRequestOptions = {
  method: "GET";
  url: "/meta";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Api Overview
 */
export interface MetaGetResponseData {
  verifiable_password_authentication: boolean;
  ssh_key_fingerprints: {
    MD5_RSA: string;
    MD5_DSA: string;
    SHA256_RSA: string;
    SHA256_DSA: string;
  };
  hooks: string[];
  web: string[];
  api: string[];
  git: string[];
  pages: string[];
  importer: string[];
  github_services_sha: string;
  installed_version: string;
}

type MetaGetOctocatEndpoint = {
  /**
   * The words to show in Octocat's speech bubble
   */
  s?: string;
};

type MetaGetOctocatRequestOptions = {
  method: "GET";
  url: "/octocat";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type MetaGetOctocatResponseData = string;

type MetaGetZenEndpoint = {};

type MetaGetZenRequestOptions = {
  method: "GET";
  url: "/zen";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type MetaGetZenResponseData = string;

type MetaRootEndpoint = {};

type MetaRootRequestOptions = {
  method: "GET";
  url: "/";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface MetaRootResponseData {
  current_user_url: string;
  current_user_authorizations_html_url: string;
  authorizations_url: string;
  code_search_url: string;
  commit_search_url: string;
  emails_url: string;
  emojis_url: string;
  events_url: string;
  feeds_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  hub_url: string;
  issue_search_url: string;
  issues_url: string;
  keys_url: string;
  label_search_url: string;
  notifications_url: string;
  organization_url: string;
  organization_repositories_url: string;
  organization_teams_url: string;
  public_gists_url: string;
  rate_limit_url: string;
  repository_url: string;
  repository_search_url: string;
  current_user_repositories_url: string;
  starred_url: string;
  starred_gists_url: string;
  topic_search_url: string;
  user_url: string;
  user_organizations_url: string;
  user_repositories_url: string;
  user_search_url: string;
}

type MigrationsCancelImportEndpoint = {
  owner: string;

  repo: string;
};

type MigrationsCancelImportRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/import";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type MigrationsDeleteArchiveForAuthenticatedUserEndpoint = {
  /**
   * migration_id parameter
   */
  migration_id: number;
} & RequiredPreview<"wyandotte">;

type MigrationsDeleteArchiveForAuthenticatedUserRequestOptions = {
  method: "DELETE";
  url: "/user/migrations/:migration_id/archive";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface MigrationsDeleteArchiveForAuthenticatedUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface MigrationsDeleteArchiveForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface MigrationsDeleteArchiveForAuthenticatedUserResponse404Data {
  message: string;
  documentation_url: string;
}

type MigrationsDeleteArchiveForOrgEndpoint = {
  org: string;
  /**
   * migration_id parameter
   */
  migration_id: number;
} & RequiredPreview<"wyandotte">;

type MigrationsDeleteArchiveForOrgRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/migrations/:migration_id/archive";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface MigrationsDeleteArchiveForOrgResponse404Data {
  message: string;
  documentation_url: string;
}

type MigrationsDownloadArchiveForOrgEndpoint = {
  org: string;
  /**
   * migration_id parameter
   */
  migration_id: number;
} & RequiredPreview<"wyandotte">;

type MigrationsDownloadArchiveForOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/migrations/:migration_id/archive";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface MigrationsDownloadArchiveForOrgResponse404Data {
  message: string;
  documentation_url: string;
}

type MigrationsGetArchiveForAuthenticatedUserEndpoint = {
  /**
   * migration_id parameter
   */
  migration_id: number;
} & RequiredPreview<"wyandotte">;

type MigrationsGetArchiveForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: "/user/migrations/:migration_id/archive";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface MigrationsGetArchiveForAuthenticatedUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface MigrationsGetArchiveForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

type MigrationsGetCommitAuthorsEndpoint = {
  owner: string;

  repo: string;
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
};

type MigrationsGetCommitAuthorsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/import/authors";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type MigrationsGetCommitAuthorsResponseData = PorterAuthor[];

/**
 * Porter Author
 */
export interface PorterAuthor {
  id: number;
  remote_id: string;
  remote_name: string;
  email: string;
  name: string;
  url: string;
  import_url: string;
}

/**
 * Basic Error
 */
export interface MigrationsGetCommitAuthorsResponse404Data {
  message: string;
  documentation_url: string;
}

type MigrationsGetImportStatusEndpoint = {
  owner: string;

  repo: string;
};

type MigrationsGetImportStatusRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/import";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A repository import from an external source.
 */
export interface MigrationsGetImportStatusResponseData {
  vcs: string;
  use_lfs: string;
  /**
   * The URL of the originating repository.
   */
  vcs_url: string;
  svc_root: string;
  tfvc_project: string;
  status:
    | "auth"
    | "error"
    | "none"
    | "detecting"
    | "choose"
    | "auth_failed"
    | "importing"
    | "mapping"
    | "waiting_to_push"
    | "pushing"
    | "complete"
    | "setup"
    | "unknown"
    | "detection_found_multiple"
    | "detection_found_nothing"
    | "detection_needs_auth";
  status_text: string;
  failed_step: string;
  error_message: string;
  import_percent: number;
  commit_count: number;
  push_percent: number;
  has_large_files: boolean;
  large_files_size: number;
  large_files_count: number;
  project_choices: {
    vcs: string;
    tfvc_project: string;
    human_name: string;
  }[];
  message: string;
  authors_count: number;
  url: string;
  html_url: string;
  authors_url: string;
  repository_url: string;
  svn_root: string;
}

/**
 * Basic Error
 */
export interface MigrationsGetImportStatusResponse404Data {
  message: string;
  documentation_url: string;
}

type MigrationsGetLargeFilesEndpoint = {
  owner: string;

  repo: string;
};

type MigrationsGetLargeFilesRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/import/large_files";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type MigrationsGetLargeFilesResponseData = PorterLargeFile[];

/**
 * Porter Large File
 */
export interface PorterLargeFile {
  ref_name: string;
  path: string;
  oid: string;
  size: number;
}

type MigrationsGetStatusForAuthenticatedUserEndpoint = {
  /**
   * migration_id parameter
   */
  migration_id: number;

  exclude?: array;
} & RequiredPreview<"wyandotte">;

type MigrationsGetStatusForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: "/user/migrations/:migration_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A migration.
 */
export interface MigrationsGetStatusForAuthenticatedUserResponseData {
  id: number;
  owner: SimpleUser;
  guid: string;
  state: string;
  lock_repositories: boolean;
  exclude_attachments: boolean;
  repositories: Repository[];
  url: string;
  created_at: string;
  updated_at: string;
  node_id: string;
  archive_url: string;
  exclude: unknown[];
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser1;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface MigrationsGetStatusForAuthenticatedUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface MigrationsGetStatusForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface MigrationsGetStatusForAuthenticatedUserResponse404Data {
  message: string;
  documentation_url: string;
}

type MigrationsGetStatusForOrgEndpoint = {
  org: string;
  /**
   * migration_id parameter
   */
  migration_id: number;
} & RequiredPreview<"wyandotte">;

type MigrationsGetStatusForOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/migrations/:migration_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A migration.
 */
export interface MigrationsGetStatusForOrgResponseData {
  id: number;
  owner: SimpleUser;
  guid: string;
  state: string;
  lock_repositories: boolean;
  exclude_attachments: boolean;
  repositories: Repository[];
  url: string;
  created_at: string;
  updated_at: string;
  node_id: string;
  archive_url: string;
  exclude: unknown[];
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser1;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface MigrationsGetStatusForOrgResponse404Data {
  message: string;
  documentation_url: string;
}

type MigrationsListForAuthenticatedUserEndpoint = {
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"wyandotte">;

type MigrationsListForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: "/user/migrations";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type MigrationsListForAuthenticatedUserResponseData = Migration[];

/**
 * A migration.
 */
export interface Migration {
  id: number;
  owner: SimpleUser;
  guid: string;
  state: string;
  lock_repositories: boolean;
  exclude_attachments: boolean;
  repositories: Repository[];
  url: string;
  created_at: string;
  updated_at: string;
  node_id: string;
  archive_url: string;
  exclude: unknown[];
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser1;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface MigrationsListForAuthenticatedUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface MigrationsListForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

type MigrationsListForOrgEndpoint = {
  org: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"wyandotte">;

type MigrationsListForOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/migrations";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type MigrationsListForOrgResponseData = Migration[];

/**
 * A migration.
 */
export interface Migration {
  id: number;
  owner: SimpleUser;
  guid: string;
  state: string;
  lock_repositories: boolean;
  exclude_attachments: boolean;
  repositories: Repository[];
  url: string;
  created_at: string;
  updated_at: string;
  node_id: string;
  archive_url: string;
  exclude: unknown[];
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser1;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type MigrationsListReposForOrgEndpoint = {
  org: string;
  /**
   * migration_id parameter
   */
  migration_id: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"wyandotte">;

type MigrationsListReposForOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/migrations/:migration_id/repositories";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type MigrationsListReposForOrgResponseData = MinimalRepository[];

/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface MigrationsListReposForOrgResponse404Data {
  message: string;
  documentation_url: string;
}

type MigrationsListReposForUserEndpoint = {
  /**
   * migration_id parameter
   */
  migration_id: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"wyandotte">;

type MigrationsListReposForUserRequestOptions = {
  method: "GET";
  url: "/user/migrations/:migration_id/repositories";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type MigrationsListReposForUserResponseData = MinimalRepository[];

/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface MigrationsListReposForUserResponse404Data {
  message: string;
  documentation_url: string;
}

type MigrationsMapCommitAuthorEndpoint = {
  owner: string;

  repo: string;
  /**
   * author_id parameter
   */
  author_id: number;
  /**
   * The new Git author email.
   */
  email?: string;
  /**
   * The new Git author name.
   */
  name?: string;

  remote_id?: string;
};

type MigrationsMapCommitAuthorRequestOptions = {
  method: "PATCH";
  url: "/repos/:owner/:repo/import/authors/:author_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Porter Author
 */
export interface MigrationsMapCommitAuthorResponseData {
  id: number;
  remote_id: string;
  remote_name: string;
  email: string;
  name: string;
  url: string;
  import_url: string;
}

/**
 * Basic Error
 */
export interface MigrationsMapCommitAuthorResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface MigrationsMapCommitAuthorResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type MigrationsSetLfsPreferenceEndpoint = {
  owner: string;

  repo: string;
  /**
   * Can be one of `opt_in` (large files will be stored using Git LFS) or `opt_out` (large files will be removed during the import).
   */
  use_lfs: "opt_in" | "opt_out";
};

type MigrationsSetLfsPreferenceRequestOptions = {
  method: "PATCH";
  url: "/repos/:owner/:repo/import/lfs";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A repository import from an external source.
 */
export interface MigrationsSetLfsPreferenceResponseData {
  vcs: string;
  use_lfs: string;
  /**
   * The URL of the originating repository.
   */
  vcs_url: string;
  svc_root: string;
  tfvc_project: string;
  status:
    | "auth"
    | "error"
    | "none"
    | "detecting"
    | "choose"
    | "auth_failed"
    | "importing"
    | "mapping"
    | "waiting_to_push"
    | "pushing"
    | "complete"
    | "setup"
    | "unknown"
    | "detection_found_multiple"
    | "detection_found_nothing"
    | "detection_needs_auth";
  status_text: string;
  failed_step: string;
  error_message: string;
  import_percent: number;
  commit_count: number;
  push_percent: number;
  has_large_files: boolean;
  large_files_size: number;
  large_files_count: number;
  project_choices: {
    vcs: string;
    tfvc_project: string;
    human_name: string;
  }[];
  message: string;
  authors_count: number;
  url: string;
  html_url: string;
  authors_url: string;
  repository_url: string;
  svn_root: string;
}

/**
 * Validation Error
 */
export interface MigrationsSetLfsPreferenceResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type MigrationsStartForAuthenticatedUserEndpoint = {
  /**
   * Lock the repositories being migrated at the start of the migration
   */
  lock_repositories?: boolean;
  /**
   * Do not include attachments in the migration
   */
  exclude_attachments?: boolean;
  /**
   * Exclude attributes from the API response to improve performance
   */
  exclude?: string[];

  repositories: string[];
};

type MigrationsStartForAuthenticatedUserRequestOptions = {
  method: "POST";
  url: "/user/migrations";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A migration.
 */
export interface MigrationsStartForAuthenticatedUserResponseData {
  id: number;
  owner: SimpleUser;
  guid: string;
  state: string;
  lock_repositories: boolean;
  exclude_attachments: boolean;
  repositories: Repository[];
  url: string;
  created_at: string;
  updated_at: string;
  node_id: string;
  archive_url: string;
  exclude: unknown[];
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser1;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface MigrationsStartForAuthenticatedUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface MigrationsStartForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface MigrationsStartForAuthenticatedUserResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type MigrationsStartForOrgEndpoint = {
  org: string;
  /**
   * A list of arrays indicating which repositories should be migrated.
   */
  repositories: string[];
  /**
   * Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
   */
  lock_repositories?: boolean;
  /**
   * Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
   */
  exclude_attachments?: boolean;

  exclude?: string[];
};

type MigrationsStartForOrgRequestOptions = {
  method: "POST";
  url: "/orgs/:org/migrations";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A migration.
 */
export interface MigrationsStartForOrgResponseData {
  id: number;
  owner: SimpleUser;
  guid: string;
  state: string;
  lock_repositories: boolean;
  exclude_attachments: boolean;
  repositories: Repository[];
  url: string;
  created_at: string;
  updated_at: string;
  node_id: string;
  archive_url: string;
  exclude: unknown[];
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser1;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface MigrationsStartForOrgResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface MigrationsStartForOrgResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type MigrationsStartImportEndpoint = {
  owner: string;

  repo: string;
  /**
   * The URL of the originating repository.
   */
  vcs_url: string;
  /**
   * The originating VCS type. Can be one of `subversion`, `git`, `mercurial`, or `tfvc`. Please be aware that without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
   */
  vcs?: "subversion" | "git" | "mercurial" | "tfvc";
  /**
   * If authentication is required, the username to provide to `vcs_url`.
   */
  vcs_username?: string;
  /**
   * If authentication is required, the password to provide to `vcs_url`.
   */
  vcs_password?: string;
  /**
   * For a tfvc import, the name of the project that is being imported.
   */
  tfvc_project?: string;
};

type MigrationsStartImportRequestOptions = {
  method: "PUT";
  url: "/repos/:owner/:repo/import";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A repository import from an external source.
 */
export interface MigrationsStartImportResponseData {
  vcs: string;
  use_lfs: string;
  /**
   * The URL of the originating repository.
   */
  vcs_url: string;
  svc_root: string;
  tfvc_project: string;
  status:
    | "auth"
    | "error"
    | "none"
    | "detecting"
    | "choose"
    | "auth_failed"
    | "importing"
    | "mapping"
    | "waiting_to_push"
    | "pushing"
    | "complete"
    | "setup"
    | "unknown"
    | "detection_found_multiple"
    | "detection_found_nothing"
    | "detection_needs_auth";
  status_text: string;
  failed_step: string;
  error_message: string;
  import_percent: number;
  commit_count: number;
  push_percent: number;
  has_large_files: boolean;
  large_files_size: number;
  large_files_count: number;
  project_choices: {
    vcs: string;
    tfvc_project: string;
    human_name: string;
  }[];
  message: string;
  authors_count: number;
  url: string;
  html_url: string;
  authors_url: string;
  repository_url: string;
  svn_root: string;
}

/**
 * Basic Error
 */
export interface MigrationsStartImportResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface MigrationsStartImportResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type MigrationsUnlockRepoForAuthenticatedUserEndpoint = {
  /**
   * migration_id parameter
   */
  migration_id: number;
  /**
   * repo_name parameter
   */
  repo_name: string;
} & RequiredPreview<"wyandotte">;

type MigrationsUnlockRepoForAuthenticatedUserRequestOptions = {
  method: "DELETE";
  url: "/user/migrations/:migration_id/repos/:repo_name/lock";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface MigrationsUnlockRepoForAuthenticatedUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface MigrationsUnlockRepoForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface MigrationsUnlockRepoForAuthenticatedUserResponse404Data {
  message: string;
  documentation_url: string;
}

type MigrationsUnlockRepoForOrgEndpoint = {
  org: string;
  /**
   * migration_id parameter
   */
  migration_id: number;
  /**
   * repo_name parameter
   */
  repo_name: string;
} & RequiredPreview<"wyandotte">;

type MigrationsUnlockRepoForOrgRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/migrations/:migration_id/repos/:repo_name/lock";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface MigrationsUnlockRepoForOrgResponse404Data {
  message: string;
  documentation_url: string;
}

type MigrationsUpdateImportEndpoint = {
  owner: string;

  repo: string;
  /**
   * The username to provide to the originating repository.
   */
  vcs_username?: string;
  /**
   * The password to provide to the originating repository.
   */
  vcs_password?: string;

  vcs?: string;

  tfvc_project?: string;
};

type MigrationsUpdateImportRequestOptions = {
  method: "PATCH";
  url: "/repos/:owner/:repo/import";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A repository import from an external source.
 */
export interface MigrationsUpdateImportResponseData {
  vcs: string;
  use_lfs: string;
  /**
   * The URL of the originating repository.
   */
  vcs_url: string;
  svc_root: string;
  tfvc_project: string;
  status:
    | "auth"
    | "error"
    | "none"
    | "detecting"
    | "choose"
    | "auth_failed"
    | "importing"
    | "mapping"
    | "waiting_to_push"
    | "pushing"
    | "complete"
    | "setup"
    | "unknown"
    | "detection_found_multiple"
    | "detection_found_nothing"
    | "detection_needs_auth";
  status_text: string;
  failed_step: string;
  error_message: string;
  import_percent: number;
  commit_count: number;
  push_percent: number;
  has_large_files: boolean;
  large_files_size: number;
  large_files_count: number;
  project_choices: {
    vcs: string;
    tfvc_project: string;
    human_name: string;
  }[];
  message: string;
  authors_count: number;
  url: string;
  html_url: string;
  authors_url: string;
  repository_url: string;
  svn_root: string;
}

type OauthAuthorizationsCreateAuthorizationEndpoint = {
  /**
   * A list of scopes that this authorization is in.
   */
  scopes?: string[] | null;
  /**
   * A note to remind you what the OAuth token is for.
   */
  note?: string;
  /**
   * A URL to remind you what app the OAuth token is for.
   */
  note_url?: string;
  /**
   * The OAuth app client key for which to create the token.
   */
  client_id?: string;
  /**
   * The OAuth app client secret for which to create the token.
   */
  client_secret?: string;
  /**
   * A unique string to distinguish an authorization from others created for the same client ID and user.
   */
  fingerprint?: string;
};

type OauthAuthorizationsCreateAuthorizationRequestOptions = {
  method: "POST";
  url: "/authorizations";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
export interface OauthAuthorizationsCreateAuthorizationResponseData {
  id: number;
  url: string;
  /**
   * A list of scopes that this authorization is in.
   */
  scopes: string[];
  token: string;
  token_last_eight: string;
  hashed_token: string;
  app: {
    client_id: string;
    name: string;
    url: string;
  };
  note: string;
  note_url: string;
  updated_at: string;
  created_at: string;
  fingerprint: string;
  user: SimpleUser;
  installation: ScopedInstallation;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ScopedInstallation {
  permissions: {
    [k: string]: unknown;
  };
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  single_file_name: string;
  repositories_url: string;
  account: SimpleUser1;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface OauthAuthorizationsCreateAuthorizationResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface OauthAuthorizationsCreateAuthorizationResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface OauthAuthorizationsCreateAuthorizationResponse410Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface OauthAuthorizationsCreateAuthorizationResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type OauthAuthorizationsDeleteAuthorizationEndpoint = {
  /**
   * authorization_id parameter
   */
  authorization_id: number;
};

type OauthAuthorizationsDeleteAuthorizationRequestOptions = {
  method: "DELETE";
  url: "/authorizations/:authorization_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface OauthAuthorizationsDeleteAuthorizationResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface OauthAuthorizationsDeleteAuthorizationResponse403Data {
  message: string;
  documentation_url: string;
}

type OauthAuthorizationsDeleteGrantEndpoint = {
  /**
   * grant_id parameter
   */
  grant_id: number;
};

type OauthAuthorizationsDeleteGrantRequestOptions = {
  method: "DELETE";
  url: "/applications/grants/:grant_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface OauthAuthorizationsDeleteGrantResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface OauthAuthorizationsDeleteGrantResponse403Data {
  message: string;
  documentation_url: string;
}

type OauthAuthorizationsGetAuthorizationEndpoint = {
  /**
   * authorization_id parameter
   */
  authorization_id: number;
};

type OauthAuthorizationsGetAuthorizationRequestOptions = {
  method: "GET";
  url: "/authorizations/:authorization_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
export interface OauthAuthorizationsGetAuthorizationResponseData {
  id: number;
  url: string;
  /**
   * A list of scopes that this authorization is in.
   */
  scopes: string[];
  token: string;
  token_last_eight: string;
  hashed_token: string;
  app: {
    client_id: string;
    name: string;
    url: string;
  };
  note: string;
  note_url: string;
  updated_at: string;
  created_at: string;
  fingerprint: string;
  user: SimpleUser;
  installation: ScopedInstallation;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ScopedInstallation {
  permissions: {
    [k: string]: unknown;
  };
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  single_file_name: string;
  repositories_url: string;
  account: SimpleUser1;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface OauthAuthorizationsGetAuthorizationResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface OauthAuthorizationsGetAuthorizationResponse403Data {
  message: string;
  documentation_url: string;
}

type OauthAuthorizationsGetGrantEndpoint = {
  /**
   * grant_id parameter
   */
  grant_id: number;
};

type OauthAuthorizationsGetGrantRequestOptions = {
  method: "GET";
  url: "/applications/grants/:grant_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * The authorization associated with an OAuth Access.
 */
export interface OauthAuthorizationsGetGrantResponseData {
  id: number;
  url: string;
  app: {
    client_id: string;
    name: string;
    url: string;
  };
  created_at: string;
  updated_at: string;
  scopes: string[];
  user: SimpleUser;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface OauthAuthorizationsGetGrantResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface OauthAuthorizationsGetGrantResponse403Data {
  message: string;
  documentation_url: string;
}

type OauthAuthorizationsGetOrCreateAuthorizationForAppEndpoint = {
  client_id: string;
  /**
   * The OAuth app client secret for which to create the token.
   */
  client_secret: string;
  /**
   * A list of scopes that this authorization is in.
   */
  scopes?: string[] | null;
  /**
   * A note to remind you what the OAuth token is for.
   */
  note?: string;
  /**
   * A URL to remind you what app the OAuth token is for.
   */
  note_url?: string;
  /**
   * A unique string to distinguish an authorization from others created for the same client ID and user.
   */
  fingerprint?: string;
};

type OauthAuthorizationsGetOrCreateAuthorizationForAppRequestOptions = {
  method: "PUT";
  url: "/authorizations/clients/:client_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
export interface OauthAuthorizationsGetOrCreateAuthorizationForAppResponseData {
  id: number;
  url: string;
  /**
   * A list of scopes that this authorization is in.
   */
  scopes: string[];
  token: string;
  token_last_eight: string;
  hashed_token: string;
  app: {
    client_id: string;
    name: string;
    url: string;
  };
  note: string;
  note_url: string;
  updated_at: string;
  created_at: string;
  fingerprint: string;
  user: SimpleUser;
  installation: ScopedInstallation;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ScopedInstallation {
  permissions: {
    [k: string]: unknown;
  };
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  single_file_name: string;
  repositories_url: string;
  account: SimpleUser1;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
export interface OauthAuthorizationsGetOrCreateAuthorizationForAppResponse201Data {
  id: number;
  url: string;
  /**
   * A list of scopes that this authorization is in.
   */
  scopes: string[];
  token: string;
  token_last_eight: string;
  hashed_token: string;
  app: {
    client_id: string;
    name: string;
    url: string;
  };
  note: string;
  note_url: string;
  updated_at: string;
  created_at: string;
  fingerprint: string;
  user: SimpleUser;
  installation: ScopedInstallation;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ScopedInstallation {
  permissions: {
    [k: string]: unknown;
  };
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  single_file_name: string;
  repositories_url: string;
  account: SimpleUser1;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface OauthAuthorizationsGetOrCreateAuthorizationForAppResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface OauthAuthorizationsGetOrCreateAuthorizationForAppResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface OauthAuthorizationsGetOrCreateAuthorizationForAppResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintEndpoint = {
  client_id: string;
  /**
   * fingerprint parameter
   */
  fingerprint: string;
  /**
   * The OAuth app client secret for which to create the token.
   */
  client_secret: string;
  /**
   * A list of scopes that this authorization is in.
   */
  scopes?: string[] | null;
  /**
   * A note to remind you what the OAuth token is for.
   */
  note?: string;
  /**
   * A URL to remind you what app the OAuth token is for.
   */
  note_url?: string;
};

type OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRequestOptions = {
  method: "PUT";
  url: "/authorizations/clients/:client_id/:fingerprint";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
export interface OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponseData {
  id: number;
  url: string;
  /**
   * A list of scopes that this authorization is in.
   */
  scopes: string[];
  token: string;
  token_last_eight: string;
  hashed_token: string;
  app: {
    client_id: string;
    name: string;
    url: string;
  };
  note: string;
  note_url: string;
  updated_at: string;
  created_at: string;
  fingerprint: string;
  user: SimpleUser;
  installation: ScopedInstallation;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ScopedInstallation {
  permissions: {
    [k: string]: unknown;
  };
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  single_file_name: string;
  repositories_url: string;
  account: SimpleUser1;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
export interface OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponse201Data {
  id: number;
  url: string;
  /**
   * A list of scopes that this authorization is in.
   */
  scopes: string[];
  token: string;
  token_last_eight: string;
  hashed_token: string;
  app: {
    client_id: string;
    name: string;
    url: string;
  };
  note: string;
  note_url: string;
  updated_at: string;
  created_at: string;
  fingerprint: string;
  user: SimpleUser;
  installation: ScopedInstallation;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ScopedInstallation {
  permissions: {
    [k: string]: unknown;
  };
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  single_file_name: string;
  repositories_url: string;
  account: SimpleUser1;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Validation Error
 */
export interface OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type OauthAuthorizationsListAuthorizationsEndpoint = {
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type OauthAuthorizationsListAuthorizationsRequestOptions = {
  method: "GET";
  url: "/authorizations";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type OauthAuthorizationsListAuthorizationsResponseData = Authorization[];

/**
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
export interface Authorization {
  id: number;
  url: string;
  /**
   * A list of scopes that this authorization is in.
   */
  scopes: string[];
  token: string;
  token_last_eight: string;
  hashed_token: string;
  app: {
    client_id: string;
    name: string;
    url: string;
  };
  note: string;
  note_url: string;
  updated_at: string;
  created_at: string;
  fingerprint: string;
  user: SimpleUser;
  installation: ScopedInstallation;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ScopedInstallation {
  permissions: {
    [k: string]: unknown;
  };
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  single_file_name: string;
  repositories_url: string;
  account: SimpleUser1;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface OauthAuthorizationsListAuthorizationsResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface OauthAuthorizationsListAuthorizationsResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface OauthAuthorizationsListAuthorizationsResponse404Data {
  message: string;
  documentation_url: string;
}

type OauthAuthorizationsListGrantsEndpoint = {
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type OauthAuthorizationsListGrantsRequestOptions = {
  method: "GET";
  url: "/applications/grants";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type OauthAuthorizationsListGrantsResponseData = ApplicationGrant[];

/**
 * The authorization associated with an OAuth Access.
 */
export interface ApplicationGrant {
  id: number;
  url: string;
  app: {
    client_id: string;
    name: string;
    url: string;
  };
  created_at: string;
  updated_at: string;
  scopes: string[];
  user: SimpleUser;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface OauthAuthorizationsListGrantsResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface OauthAuthorizationsListGrantsResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface OauthAuthorizationsListGrantsResponse404Data {
  message: string;
  documentation_url: string;
}

type OauthAuthorizationsUpdateAuthorizationEndpoint = {
  /**
   * authorization_id parameter
   */
  authorization_id: number;
  /**
   * A list of scopes that this authorization is in.
   */
  scopes?: string[] | null;
  /**
   * A list of scopes to add to this authorization.
   */
  add_scopes?: string[];
  /**
   * A list of scopes to remove from this authorization.
   */
  remove_scopes?: string[];
  /**
   * A note to remind you what the OAuth token is for.
   */
  note?: string;
  /**
   * A URL to remind you what app the OAuth token is for.
   */
  note_url?: string;
  /**
   * A unique string to distinguish an authorization from others created for the same client ID and user.
   */
  fingerprint?: string;
};

type OauthAuthorizationsUpdateAuthorizationRequestOptions = {
  method: "PATCH";
  url: "/authorizations/:authorization_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
export interface OauthAuthorizationsUpdateAuthorizationResponseData {
  id: number;
  url: string;
  /**
   * A list of scopes that this authorization is in.
   */
  scopes: string[];
  token: string;
  token_last_eight: string;
  hashed_token: string;
  app: {
    client_id: string;
    name: string;
    url: string;
  };
  note: string;
  note_url: string;
  updated_at: string;
  created_at: string;
  fingerprint: string;
  user: SimpleUser;
  installation: ScopedInstallation;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ScopedInstallation {
  permissions: {
    [k: string]: unknown;
  };
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  single_file_name: string;
  repositories_url: string;
  account: SimpleUser1;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Validation Error
 */
export interface OauthAuthorizationsUpdateAuthorizationResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type OrgsBlockUserEndpoint = {
  org: string;

  username: string;
};

type OrgsBlockUserRequestOptions = {
  method: "PUT";
  url: "/orgs/:org/blocks/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Validation Error
 */
export interface OrgsBlockUserResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type OrgsCheckBlockedUserEndpoint = {
  org: string;

  username: string;
};

type OrgsCheckBlockedUserRequestOptions = {
  method: "GET";
  url: "/orgs/:org/blocks/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface OrgsCheckBlockedUserResponse404Data {
  message: string;
  documentation_url: string;
}

type OrgsCheckMembershipForUserEndpoint = {
  org: string;

  username: string;
};

type OrgsCheckMembershipForUserRequestOptions = {
  method: "GET";
  url: "/orgs/:org/members/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type OrgsCheckPublicMembershipForUserEndpoint = {
  org: string;

  username: string;
};

type OrgsCheckPublicMembershipForUserRequestOptions = {
  method: "GET";
  url: "/orgs/:org/public_members/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type OrgsConvertMemberToOutsideCollaboratorEndpoint = {
  org: string;

  username: string;
};

type OrgsConvertMemberToOutsideCollaboratorRequestOptions = {
  method: "PUT";
  url: "/orgs/:org/outside_collaborators/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface OrgsConvertMemberToOutsideCollaboratorResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface OrgsConvertMemberToOutsideCollaboratorResponse404Data {
  message: string;
  documentation_url: string;
}

type OrgsCreateInvitationEndpoint = {
  org: string;
  /**
   * **Required unless you provide `email`**. GitHub user ID for the person you are inviting.
   */
  invitee_id?: number;
  /**
   * **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.
   */
  email?: string;
  /**
   * Specify role for new member. Can be one of:
   * \* `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.
   * \* `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.
   * \* `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.
   */
  role?: "admin" | "direct_member" | "billing_manager";
  /**
   * Specify IDs for the teams you want to invite new members to.
   */
  team_ids?: number[];
};

type OrgsCreateInvitationRequestOptions = {
  method: "POST";
  url: "/orgs/:org/invitations";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Organization Invitation
 */
export interface OrgsCreateInvitationResponseData {
  id: number;
  login: string;
  email: string;
  role: string;
  created_at: string;
  inviter: SimpleUser;
  team_count: number;
  invitation_team_url: string;
  node_id: string;
  invitation_teams_url: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

/**
 * Basic Error
 */
export interface OrgsCreateInvitationResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface OrgsCreateInvitationResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type OrgsCreateWebhookEndpoint = {
  org: string;
  /**
   * Must be passed as "web".
   */
  name: string;
  /**
   * Key/value pairs to provide settings for this webhook. [These are defined below](https://developer.github.com/v3/orgs/hooks/#create-hook-config-params).
   */
  config: OrgsCreateWebhookParamsConfig;
  /**
   * Determines what [events](https://developer.github.com/webhooks/event-payloads) the hook is triggered for.
   */
  events?: string[];
  /**
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   */
  active?: boolean;
};

type OrgsCreateWebhookRequestOptions = {
  method: "POST";
  url: "/orgs/:org/hooks";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Org Hook
 */
export interface OrgsCreateWebhookResponseData {
  id: number;
  url: string;
  ping_url: string;
  name: string;
  events: string[];
  active: boolean;
  config: {
    url: string;
    insecure_ssl: string;
    content_type: string;
    secret: string;
  };
  updated_at: string;
  created_at: string;
  type: string;
}

/**
 * Basic Error
 */
export interface OrgsCreateWebhookResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface OrgsCreateWebhookResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type OrgsDeleteWebhookEndpoint = {
  org: string;

  hook_id: number;
};

type OrgsDeleteWebhookRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/hooks/:hook_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface OrgsDeleteWebhookResponse404Data {
  message: string;
  documentation_url: string;
}

type OrgsGetEndpoint = {
  org: string;
};

type OrgsGetRequestOptions = {
  method: "GET";
  url: "/orgs/:org";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Organization Full
 */
export interface OrgsGetResponseData {
  login: string;
  id: number;
  node_id: string;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
  name: string;
  company: string;
  blog: string;
  location: string;
  email: string;
  twitter_username: string;
  is_verified: boolean;
  has_organization_projects: boolean;
  has_repository_projects: boolean;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  html_url: string;
  created_at: string;
  type: string;
  total_private_repos: number;
  owned_private_repos: number;
  private_gists: number;
  disk_usage: number;
  collaborators: number;
  billing_email: string;
  plan: {
    name: string;
    space: number;
    private_repos: number;
    filled_seats: number;
    seats: number;
  };
  default_repository_permission: string;
  members_can_create_repositories: boolean;
  two_factor_requirement_enabled: boolean;
  members_allowed_repository_creation_type: string;
  members_can_create_public_repositories: boolean;
  members_can_create_private_repositories: boolean;
  members_can_create_internal_repositories: boolean;
  members_can_create_pages: boolean;
  updated_at: string;
}

/**
 * Basic Error
 */
export interface OrgsGetResponse404Data {
  message: string;
  documentation_url: string;
}

type OrgsGetMembershipForAuthenticatedUserEndpoint = {
  org: string;
};

type OrgsGetMembershipForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: "/user/memberships/orgs/:org";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Org Membership
 */
export interface OrgsGetMembershipForAuthenticatedUserResponseData {
  url: string;
  state: string;
  role: string;
  organization_url: string;
  organization: OrganizationSimple;
  user: SimpleUser;
  permissions: {
    can_create_repository: boolean;
  };
}
/**
 * Organization Simple
 */
export interface OrganizationSimple {
  login: string;
  id: number;
  node_id: string;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface OrgsGetMembershipForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface OrgsGetMembershipForAuthenticatedUserResponse404Data {
  message: string;
  documentation_url: string;
}

type OrgsGetMembershipForUserEndpoint = {
  org: string;

  username: string;
};

type OrgsGetMembershipForUserRequestOptions = {
  method: "GET";
  url: "/orgs/:org/memberships/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Org Membership
 */
export interface OrgsGetMembershipForUserResponseData {
  url: string;
  state: string;
  role: string;
  organization_url: string;
  organization: OrganizationSimple;
  user: SimpleUser;
  permissions: {
    can_create_repository: boolean;
  };
}
/**
 * Organization Simple
 */
export interface OrganizationSimple {
  login: string;
  id: number;
  node_id: string;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface OrgsGetMembershipForUserResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface OrgsGetMembershipForUserResponse404Data {
  message: string;
  documentation_url: string;
}

type OrgsGetWebhookEndpoint = {
  org: string;

  hook_id: number;
};

type OrgsGetWebhookRequestOptions = {
  method: "GET";
  url: "/orgs/:org/hooks/:hook_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Org Hook
 */
export interface OrgsGetWebhookResponseData {
  id: number;
  url: string;
  ping_url: string;
  name: string;
  events: string[];
  active: boolean;
  config: {
    url: string;
    insecure_ssl: string;
    content_type: string;
    secret: string;
  };
  updated_at: string;
  created_at: string;
  type: string;
}

/**
 * Basic Error
 */
export interface OrgsGetWebhookResponse404Data {
  message: string;
  documentation_url: string;
}

type OrgsListEndpoint = {
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
};

type OrgsListRequestOptions = {
  method: "GET";
  url: "/organizations";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type OrgsListResponseData = OrganizationSimple[];

/**
 * Organization Simple
 */
export interface OrganizationSimple {
  login: string;
  id: number;
  node_id: string;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
}

type OrgsListAppInstallationsEndpoint = {
  org: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type OrgsListAppInstallationsRequestOptions = {
  method: "GET";
  url: "/orgs/:org/installations";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface OrgsListAppInstallationsResponseData {
  total_count: number;
  installations: Installation[];
}
/**
 * Installation
 */
export interface Installation {
  /**
   * The ID of the installation.
   */
  id: number;
  account: SimpleUser | Enterprise;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";
  access_tokens_url: string;
  repositories_url: string;
  html_url: string;
  app_id: number;
  /**
   * The ID of the user or organization this token is being scoped to.
   */
  target_id: number;
  target_type: string;
  permissions: {
    deployments: string;
    checks: string;
    metadata: string;
    contents: string;
    pull_requests: string;
    statuses: string;
    issues: string;
    organization_administration: string;
  };
  events: string[];
  created_at: string;
  updated_at: string;
  single_file_name: string;
  app_slug: string;
  suspended_by: SimpleUser1;
  suspended_at: string;
  contact_email: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * An enterprise account
 */
export interface Enterprise {
  /**
   * A short description of the enterprise.
   */
  description?: string;
  html_url: string;
  /**
   * The enterprise's website URL.
   */
  website_url?: string;
  /**
   * Unique identifier of the enterprise
   */
  id: number;
  node_id: string;
  /**
   * The name of the enterprise.
   */
  name: string;
  /**
   * The slug url identifier for the enterprise.
   */
  slug: string;
  created_at: string;
  updated_at: string;
  avatar_url: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type OrgsListBlockedUsersEndpoint = {
  org: string;
};

type OrgsListBlockedUsersRequestOptions = {
  method: "GET";
  url: "/orgs/:org/blocks";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type OrgsListBlockedUsersResponseData = SimpleUser[];

/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

export interface OrgsListBlockedUsersResponse415Data {
  message: string;
  documentation_url: string;
}

type OrgsListForAuthenticatedUserEndpoint = {
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type OrgsListForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: "/user/orgs";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type OrgsListForAuthenticatedUserResponseData = OrganizationSimple[];

/**
 * Organization Simple
 */
export interface OrganizationSimple {
  login: string;
  id: number;
  node_id: string;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
}

/**
 * Basic Error
 */
export interface OrgsListForAuthenticatedUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface OrgsListForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

type OrgsListForUserEndpoint = {
  username: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type OrgsListForUserRequestOptions = {
  method: "GET";
  url: "/users/:username/orgs";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type OrgsListForUserResponseData = OrganizationSimple[];

/**
 * Organization Simple
 */
export interface OrganizationSimple {
  login: string;
  id: number;
  node_id: string;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
}

type OrgsListInvitationTeamsEndpoint = {
  org: string;
  /**
   * invitation_id parameter
   */
  invitation_id: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type OrgsListInvitationTeamsRequestOptions = {
  method: "GET";
  url: "/orgs/:org/invitations/:invitation_id/teams";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type OrgsListInvitationTeamsResponseData = Team[];

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string;
  privacy: string;
  permission: string;
  url: string;
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface OrgsListInvitationTeamsResponse404Data {
  message: string;
  documentation_url: string;
}

type OrgsListMembersEndpoint = {
  org: string;
  /**
   * Filter members returned in the list. Can be one of:
   * \* `2fa_disabled` - Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.
   * \* `all` - All members the authenticated user can see.
   */
  filter?: "2fa_disabled" | "all";
  /**
   * Filter members returned by their role. Can be one of:
   * \* `all` - All members of the organization, regardless of role.
   * \* `admin` - Organization owners.
   * \* `member` - Non-owner organization members.
   */
  role?: "all" | "admin" | "member";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type OrgsListMembersRequestOptions = {
  method: "GET";
  url: "/orgs/:org/members";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type OrgsListMembersResponseData = SimpleUser[];

/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

/**
 * Validation Error
 */
export interface OrgsListMembersResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type OrgsListMembershipsForAuthenticatedUserEndpoint = {
  /**
   * Indicates the state of the memberships to return. Can be either `active` or `pending`. If not specified, the API returns both active and pending memberships.
   */
  state?: "active" | "pending";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type OrgsListMembershipsForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: "/user/memberships/orgs";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type OrgsListMembershipsForAuthenticatedUserResponseData = OrgMembership[];

/**
 * Org Membership
 */
export interface OrgMembership {
  url: string;
  state: string;
  role: string;
  organization_url: string;
  organization: OrganizationSimple;
  user: SimpleUser;
  permissions: {
    can_create_repository: boolean;
  };
}
/**
 * Organization Simple
 */
export interface OrganizationSimple {
  login: string;
  id: number;
  node_id: string;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface OrgsListMembershipsForAuthenticatedUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface OrgsListMembershipsForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface OrgsListMembershipsForAuthenticatedUserResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type OrgsListOutsideCollaboratorsEndpoint = {
  org: string;
  /**
   * Filter the list of outside collaborators. Can be one of:
   * \* `2fa_disabled`: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.
   * \* `all`: All outside collaborators.
   */
  filter?: "2fa_disabled" | "all";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type OrgsListOutsideCollaboratorsRequestOptions = {
  method: "GET";
  url: "/orgs/:org/outside_collaborators";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type OrgsListOutsideCollaboratorsResponseData = SimpleUser[];

/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

type OrgsListPendingInvitationsEndpoint = {
  org: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type OrgsListPendingInvitationsRequestOptions = {
  method: "GET";
  url: "/orgs/:org/invitations";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type OrgsListPendingInvitationsResponseData = OrganizationInvitation[];

/**
 * Organization Invitation
 */
export interface OrganizationInvitation {
  id: number;
  login: string;
  email: string;
  role: string;
  created_at: string;
  inviter: SimpleUser;
  team_count: number;
  invitation_team_url: string;
  node_id: string;
  invitation_teams_url: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

/**
 * Basic Error
 */
export interface OrgsListPendingInvitationsResponse404Data {
  message: string;
  documentation_url: string;
}

type OrgsListPublicMembersEndpoint = {
  org: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type OrgsListPublicMembersRequestOptions = {
  method: "GET";
  url: "/orgs/:org/public_members";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type OrgsListPublicMembersResponseData = SimpleUser[];

/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

type OrgsListSamlSsoAuthorizationsEndpoint = {
  org: string;
};

type OrgsListSamlSsoAuthorizationsRequestOptions = {
  method: "GET";
  url: "/orgs/:org/credential-authorizations";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type OrgsListSamlSsoAuthorizationsResponseData = CredentialAuthorization[];

/**
 * Credential Authorization
 */
export interface CredentialAuthorization {
  /**
   * User login that owns the underlying credential.
   */
  login: string;
  /**
   * Unique identifier for the credential.
   */
  credential_id: number;
  /**
   * Human-readable description of the credential type.
   */
  credential_type: string;
  /**
   * Last eight characters of the credential. Only included in responses with credential_type of personal access token.
   */
  token_last_eight: string;
  /**
   * Date when the credential was authorized for use.
   */
  credential_authorized_at: string;
  /**
   * List of oauth scopes the token has been granted.
   */
  scopes: string[];
  /**
   * Unique string to distinguish the credential. Only included in responses with credential_type of SSH Key.
   */
  fingerprint: string;
  /**
   * Date when the credential was last accessed. May be null if it was never accessed
   */
  credential_accessed_at: string;
}

type OrgsListWebhooksEndpoint = {
  org: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type OrgsListWebhooksRequestOptions = {
  method: "GET";
  url: "/orgs/:org/hooks";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type OrgsListWebhooksResponseData = OrgHook[];

/**
 * Org Hook
 */
export interface OrgHook {
  id: number;
  url: string;
  ping_url: string;
  name: string;
  events: string[];
  active: boolean;
  config: {
    url: string;
    insecure_ssl: string;
    content_type: string;
    secret: string;
  };
  updated_at: string;
  created_at: string;
  type: string;
}

/**
 * Basic Error
 */
export interface OrgsListWebhooksResponse404Data {
  message: string;
  documentation_url: string;
}

type OrgsPingWebhookEndpoint = {
  org: string;

  hook_id: number;
};

type OrgsPingWebhookRequestOptions = {
  method: "POST";
  url: "/orgs/:org/hooks/:hook_id/pings";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface OrgsPingWebhookResponse404Data {
  message: string;
  documentation_url: string;
}

type OrgsRemoveMemberEndpoint = {
  org: string;

  username: string;
};

type OrgsRemoveMemberRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/members/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface OrgsRemoveMemberResponse403Data {
  message: string;
  documentation_url: string;
}

type OrgsRemoveMembershipForUserEndpoint = {
  org: string;

  username: string;
};

type OrgsRemoveMembershipForUserRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/memberships/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface OrgsRemoveMembershipForUserResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface OrgsRemoveMembershipForUserResponse404Data {
  message: string;
  documentation_url: string;
}

type OrgsRemoveOutsideCollaboratorEndpoint = {
  org: string;

  username: string;
};

type OrgsRemoveOutsideCollaboratorRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/outside_collaborators/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface OrgsRemoveOutsideCollaboratorResponse422Data {
  message: string;
  documentation_url: string;
}

type OrgsRemovePublicMembershipForAuthenticatedUserEndpoint = {
  org: string;

  username: string;
};

type OrgsRemovePublicMembershipForAuthenticatedUserRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/public_members/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type OrgsRemoveSamlSsoAuthorizationEndpoint = {
  org: string;
  /**
   * credential_id parameter
   */
  credential_id: number;
};

type OrgsRemoveSamlSsoAuthorizationRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/credential-authorizations/:credential_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface OrgsRemoveSamlSsoAuthorizationResponse404Data {
  message: string;
  documentation_url: string;
}

type OrgsSetMembershipForUserEndpoint = {
  org: string;

  username: string;
  /**
   * The role to give the user in the organization. Can be one of:
   * \* `admin` - The user will become an owner of the organization.
   * \* `member` - The user will become a non-owner member of the organization.
   */
  role?: "admin" | "member";
};

type OrgsSetMembershipForUserRequestOptions = {
  method: "PUT";
  url: "/orgs/:org/memberships/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Org Membership
 */
export interface OrgsSetMembershipForUserResponseData {
  url: string;
  state: string;
  role: string;
  organization_url: string;
  organization: OrganizationSimple;
  user: SimpleUser;
  permissions: {
    can_create_repository: boolean;
  };
}
/**
 * Organization Simple
 */
export interface OrganizationSimple {
  login: string;
  id: number;
  node_id: string;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface OrgsSetMembershipForUserResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface OrgsSetMembershipForUserResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type OrgsSetPublicMembershipForAuthenticatedUserEndpoint = {
  org: string;

  username: string;
};

type OrgsSetPublicMembershipForAuthenticatedUserRequestOptions = {
  method: "PUT";
  url: "/orgs/:org/public_members/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface OrgsSetPublicMembershipForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

type OrgsUnblockUserEndpoint = {
  org: string;

  username: string;
};

type OrgsUnblockUserRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/blocks/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type OrgsUpdateEndpoint = {
  org: string;
  /**
   * Billing email address. This address is not publicized.
   */
  billing_email?: string;
  /**
   * The company name.
   */
  company?: string;
  /**
   * The publicly visible email address.
   */
  email?: string;
  /**
   * The Twitter username of the company.
   */
  twitter_username?: string;
  /**
   * The location.
   */
  location?: string;
  /**
   * The shorthand name of the company.
   */
  name?: string;
  /**
   * The description of the company.
   */
  description?: string;
  /**
   * Toggles whether an organization can use organization projects.
   */
  has_organization_projects?: boolean;
  /**
   * Toggles whether repositories that belong to the organization can use repository projects.
   */
  has_repository_projects?: boolean;
  /**
   * Default permission level members have for organization repositories:
   * \* `read` - can pull, but not push to or administer this repository.
   * \* `write` - can pull and push, but not administer this repository.
   * \* `admin` - can pull, push, and administer this repository.
   * \* `none` - no permissions granted by default.
   */
  default_repository_permission?: "read" | "write" | "admin" | "none";
  /**
   * Toggles the ability of non-admin organization members to create repositories. Can be one of:
   * \* `true` - all organization members can create repositories.
   * \* `false` - only organization owners can create repositories.
   * Default: `true`
   * **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
   */
  members_can_create_repositories?: boolean;
  /**
   * Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:
   * \* `true` - all organization members can create internal repositories.
   * \* `false` - only organization owners can create internal repositories.
   * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
   */
  members_can_create_internal_repositories?: boolean;
  /**
   * Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:
   * \* `true` - all organization members can create private repositories.
   * \* `false` - only organization owners can create private repositories.
   * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
   */
  members_can_create_private_repositories?: boolean;
  /**
   * Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:
   * \* `true` - all organization members can create public repositories.
   * \* `false` - only organization owners can create public repositories.
   * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
   */
  members_can_create_public_repositories?: boolean;
  /**
   * Specifies which types of repositories non-admin organization members can create. Can be one of:
   * \* `all` - all organization members can create public and private repositories.
   * \* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.
   * \* `none` - only admin members can create repositories.
   * **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See [this note](https://developer.github.com/v3/orgs/#members_can_create_repositories) for details.
   */
  members_allowed_repository_creation_type?: "all" | "private" | "none";
  /**
   * Toggles whether organization members can create GitHub Pages sites. Can be one of:
   * \* `true` - all organization members can create GitHub Pages sites.
   * \* `false` - no organization members can create GitHub Pages sites. Existing published sites will not be impacted.
   * Default: `true`.
   */
  members_can_create_pages?: boolean;

  blog?: string;
};

type OrgsUpdateRequestOptions = {
  method: "PATCH";
  url: "/orgs/:org";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Organization Full
 */
export interface OrgsUpdateResponseData {
  login: string;
  id: number;
  node_id: string;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
  name: string;
  company: string;
  blog: string;
  location: string;
  email: string;
  twitter_username: string;
  is_verified: boolean;
  has_organization_projects: boolean;
  has_repository_projects: boolean;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  html_url: string;
  created_at: string;
  type: string;
  total_private_repos: number;
  owned_private_repos: number;
  private_gists: number;
  disk_usage: number;
  collaborators: number;
  billing_email: string;
  plan: {
    name: string;
    space: number;
    private_repos: number;
    filled_seats: number;
    seats: number;
  };
  default_repository_permission: string;
  members_can_create_repositories: boolean;
  two_factor_requirement_enabled: boolean;
  members_allowed_repository_creation_type: string;
  members_can_create_public_repositories: boolean;
  members_can_create_private_repositories: boolean;
  members_can_create_internal_repositories: boolean;
  members_can_create_pages: boolean;
  updated_at: string;
}

/**
 * Basic Error
 */
export interface OrgsUpdateResponse409Data {
  message: string;
  documentation_url: string;
}

export interface OrgsUpdateResponse415Data {
  message: string;
  documentation_url: string;
}

export type OrgsUpdateResponse422Data = ValidationError | ValidationErrorSimple;

/**
 * Validation Error
 */
export interface ValidationError {
  message: string;
  documentation_url: string;
  errors?: {
    resource?: string;
    field?: string;
    message?: string;
    code: string;
    index?: number;
    value?: string | number | string[];
    [k: string]: unknown;
  }[];
  [k: string]: unknown;
}
/**
 * Validation Error Simple
 */
export interface ValidationErrorSimple {
  message: string;
  documentation_url: string;
  errors?: string[];
  [k: string]: unknown;
}

type OrgsUpdateMembershipForAuthenticatedUserEndpoint = {
  org: string;
  /**
   * The state that the membership should be in. Only `"active"` will be accepted.
   */
  state: "active";
};

type OrgsUpdateMembershipForAuthenticatedUserRequestOptions = {
  method: "PATCH";
  url: "/user/memberships/orgs/:org";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Org Membership
 */
export interface OrgsUpdateMembershipForAuthenticatedUserResponseData {
  url: string;
  state: string;
  role: string;
  organization_url: string;
  organization: OrganizationSimple;
  user: SimpleUser;
  permissions: {
    can_create_repository: boolean;
  };
}
/**
 * Organization Simple
 */
export interface OrganizationSimple {
  login: string;
  id: number;
  node_id: string;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface OrgsUpdateMembershipForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface OrgsUpdateMembershipForAuthenticatedUserResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface OrgsUpdateMembershipForAuthenticatedUserResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type OrgsUpdateWebhookEndpoint = {
  org: string;

  hook_id: number;
  /**
   * Key/value pairs to provide settings for this webhook. [These are defined below](https://developer.github.com/v3/orgs/hooks/#update-hook-config-params).
   */
  config?: OrgsUpdateWebhookParamsConfig;
  /**
   * Determines what [events](https://developer.github.com/webhooks/event-payloads) the hook is triggered for.
   */
  events?: string[];
  /**
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   */
  active?: boolean;

  name?: string;
};

type OrgsUpdateWebhookRequestOptions = {
  method: "PATCH";
  url: "/orgs/:org/hooks/:hook_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Org Hook
 */
export interface OrgsUpdateWebhookResponseData {
  id: number;
  url: string;
  ping_url: string;
  name: string;
  events: string[];
  active: boolean;
  config: {
    url: string;
    insecure_ssl: string;
    content_type: string;
    secret: string;
  };
  updated_at: string;
  created_at: string;
  type: string;
}

/**
 * Basic Error
 */
export interface OrgsUpdateWebhookResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface OrgsUpdateWebhookResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ProjectsAddCollaboratorEndpoint = {
  project_id: number;

  username: string;
  /**
   * The permission to grant the collaborator.
   */
  permission?: "read" | "write" | "admin";
} & RequiredPreview<"inertia">;

type ProjectsAddCollaboratorRequestOptions = {
  method: "PUT";
  url: "/projects/:project_id/collaborators/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ProjectsAddCollaboratorResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsAddCollaboratorResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsAddCollaboratorResponse404Data {
  message: string;
  documentation_url: string;
}

export interface ProjectsAddCollaboratorResponse415Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ProjectsAddCollaboratorResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ProjectsCreateCardEndpoint = {
  /**
   * column_id parameter
   */
  column_id: number;
  /**
   * The project card's note
   */
  note: string | null;
  /**
   * The unique identifier of the content associated with the card
   */
  content_id: number;
  /**
   * The piece of content associated with the card
   */
  content_type: string;
} & RequiredPreview<"inertia">;

type ProjectsCreateCardRequestOptions = {
  method: "POST";
  url: "/projects/columns/:column_id/cards";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Project cards represent a scope of work.
 */
export interface ProjectsCreateCardResponseData {
  url: string;
  /**
   * The project card's ID
   */
  id: number;
  node_id: string;
  note: string;
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  /**
   * Whether or not the card is archived
   */
  archived: boolean;
  column_url: string;
  content_url: string;
  project_url: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ProjectsCreateCardResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsCreateCardResponse403Data {
  message: string;
  documentation_url: string;
}

export type ProjectsCreateCardResponse422Data =
  | ValidationError
  | ValidationErrorSimple;

/**
 * Validation Error
 */
export interface ValidationError {
  message: string;
  documentation_url: string;
  errors?: {
    resource?: string;
    field?: string;
    message?: string;
    code: string;
    index?: number;
    value?: string | number | string[];
    [k: string]: unknown;
  }[];
  [k: string]: unknown;
}
/**
 * Validation Error Simple
 */
export interface ValidationErrorSimple {
  message: string;
  documentation_url: string;
  errors?: string[];
  [k: string]: unknown;
}

export interface ProjectsCreateCardResponse503Data {
  code: string;
  message: string;
  documentation_url: string;
  errors: {
    code: string;
    message: string;
  }[];
}

type ProjectsCreateColumnEndpoint = {
  project_id: number;
  /**
   * Name of the project column
   */
  name: string;
} & RequiredPreview<"inertia">;

type ProjectsCreateColumnRequestOptions = {
  method: "POST";
  url: "/projects/:project_id/columns";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Project columns contain cards of work.
 */
export interface ProjectsCreateColumnResponseData {
  url: string;
  project_url: string;
  cards_url: string;
  /**
   * The unique identifier of the project column
   */
  id: number;
  node_id: string;
  /**
   * Name of the project column
   */
  name: string;
  created_at: string;
  updated_at: string;
}

/**
 * Basic Error
 */
export interface ProjectsCreateColumnResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsCreateColumnResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error Simple
 */
export interface ProjectsCreateColumnResponse422Data {
  message: string;
  documentation_url: string;
  errors: string[];
}

type ProjectsCreateForAuthenticatedUserEndpoint = {
  /**
   * Name of the project
   */
  name: string;
  /**
   * Body of the project
   */
  body?: string | null;
} & RequiredPreview<"inertia">;

type ProjectsCreateForAuthenticatedUserRequestOptions = {
  method: "POST";
  url: "/user/projects";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Projects are a way to organize columns and cards of work.
 */
export interface ProjectsCreateForAuthenticatedUserResponseData {
  owner_url: string;
  url: string;
  html_url: string;
  columns_url: string;
  id: number;
  node_id: string;
  /**
   * Name of the project
   */
  name: string;
  /**
   * Body of the project
   */
  body: string;
  number: number;
  /**
   * State of the project; either 'open' or 'closed'
   */
  state: string;
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  /**
   * The baseline permission that all organization members have on this project
   */
  organization_permission: "read" | "write" | "admin" | "none";
  /**
   * Whether or not this project can be seen by everyone.
   */
  private: boolean;
  cards_url: string;
  permissions: {
    read: boolean;
    write: boolean;
    admin: boolean;
  };
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ProjectsCreateForAuthenticatedUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsCreateForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

export interface ProjectsCreateForAuthenticatedUserResponse415Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error Simple
 */
export interface ProjectsCreateForAuthenticatedUserResponse422Data {
  message: string;
  documentation_url: string;
  errors: string[];
}

type ProjectsCreateForOrgEndpoint = {
  org: string;
  /**
   * The name of the project.
   */
  name: string;
  /**
   * The description of the project.
   */
  body?: string;
} & RequiredPreview<"inertia">;

type ProjectsCreateForOrgRequestOptions = {
  method: "POST";
  url: "/orgs/:org/projects";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Projects are a way to organize columns and cards of work.
 */
export interface ProjectsCreateForOrgResponseData {
  owner_url: string;
  url: string;
  html_url: string;
  columns_url: string;
  id: number;
  node_id: string;
  /**
   * Name of the project
   */
  name: string;
  /**
   * Body of the project
   */
  body: string;
  number: number;
  /**
   * State of the project; either 'open' or 'closed'
   */
  state: string;
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  /**
   * The baseline permission that all organization members have on this project
   */
  organization_permission: "read" | "write" | "admin" | "none";
  /**
   * Whether or not this project can be seen by everyone.
   */
  private: boolean;
  cards_url: string;
  permissions: {
    read: boolean;
    write: boolean;
    admin: boolean;
  };
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ProjectsCreateForOrgResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsCreateForOrgResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsCreateForOrgResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsCreateForOrgResponse410Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error Simple
 */
export interface ProjectsCreateForOrgResponse422Data {
  message: string;
  documentation_url: string;
  errors: string[];
}

type ProjectsCreateForRepoEndpoint = {
  owner: string;

  repo: string;
  /**
   * The name of the project.
   */
  name: string;
  /**
   * The description of the project.
   */
  body?: string;
} & RequiredPreview<"inertia">;

type ProjectsCreateForRepoRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/projects";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Projects are a way to organize columns and cards of work.
 */
export interface ProjectsCreateForRepoResponseData {
  owner_url: string;
  url: string;
  html_url: string;
  columns_url: string;
  id: number;
  node_id: string;
  /**
   * Name of the project
   */
  name: string;
  /**
   * Body of the project
   */
  body: string;
  number: number;
  /**
   * State of the project; either 'open' or 'closed'
   */
  state: string;
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  /**
   * The baseline permission that all organization members have on this project
   */
  organization_permission: "read" | "write" | "admin" | "none";
  /**
   * Whether or not this project can be seen by everyone.
   */
  private: boolean;
  cards_url: string;
  permissions: {
    read: boolean;
    write: boolean;
    admin: boolean;
  };
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ProjectsCreateForRepoResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsCreateForRepoResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsCreateForRepoResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsCreateForRepoResponse410Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error Simple
 */
export interface ProjectsCreateForRepoResponse422Data {
  message: string;
  documentation_url: string;
  errors: string[];
}

type ProjectsDeleteEndpoint = {
  project_id: number;
} & RequiredPreview<"inertia">;

type ProjectsDeleteRequestOptions = {
  method: "DELETE";
  url: "/projects/:project_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ProjectsDeleteResponse401Data {
  message: string;
  documentation_url: string;
}

export interface ProjectsDeleteResponse403Data {
  message: string;
  documentation_url: string;
  errors: string[];
}

/**
 * Basic Error
 */
export interface ProjectsDeleteResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsDeleteResponse410Data {
  message: string;
  documentation_url: string;
}

type ProjectsDeleteCardEndpoint = {
  /**
   * card_id parameter
   */
  card_id: number;
} & RequiredPreview<"inertia">;

type ProjectsDeleteCardRequestOptions = {
  method: "DELETE";
  url: "/projects/columns/cards/:card_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ProjectsDeleteCardResponse401Data {
  message: string;
  documentation_url: string;
}

export interface ProjectsDeleteCardResponse403Data {
  message: string;
  documentation_url: string;
  errors: string[];
}

/**
 * Basic Error
 */
export interface ProjectsDeleteCardResponse404Data {
  message: string;
  documentation_url: string;
}

type ProjectsDeleteColumnEndpoint = {
  /**
   * column_id parameter
   */
  column_id: number;
} & RequiredPreview<"inertia">;

type ProjectsDeleteColumnRequestOptions = {
  method: "DELETE";
  url: "/projects/columns/:column_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ProjectsDeleteColumnResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsDeleteColumnResponse403Data {
  message: string;
  documentation_url: string;
}

type ProjectsGetEndpoint = {
  project_id: number;
} & RequiredPreview<"inertia">;

type ProjectsGetRequestOptions = {
  method: "GET";
  url: "/projects/:project_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Projects are a way to organize columns and cards of work.
 */
export interface ProjectsGetResponseData {
  owner_url: string;
  url: string;
  html_url: string;
  columns_url: string;
  id: number;
  node_id: string;
  /**
   * Name of the project
   */
  name: string;
  /**
   * Body of the project
   */
  body: string;
  number: number;
  /**
   * State of the project; either 'open' or 'closed'
   */
  state: string;
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  /**
   * The baseline permission that all organization members have on this project
   */
  organization_permission: "read" | "write" | "admin" | "none";
  /**
   * Whether or not this project can be seen by everyone.
   */
  private: boolean;
  cards_url: string;
  permissions: {
    read: boolean;
    write: boolean;
    admin: boolean;
  };
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ProjectsGetResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsGetResponse403Data {
  message: string;
  documentation_url: string;
}

type ProjectsGetCardEndpoint = {
  /**
   * card_id parameter
   */
  card_id: number;
} & RequiredPreview<"inertia">;

type ProjectsGetCardRequestOptions = {
  method: "GET";
  url: "/projects/columns/cards/:card_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Project cards represent a scope of work.
 */
export interface ProjectsGetCardResponseData {
  url: string;
  /**
   * The project card's ID
   */
  id: number;
  node_id: string;
  note: string;
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  /**
   * Whether or not the card is archived
   */
  archived: boolean;
  column_url: string;
  content_url: string;
  project_url: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ProjectsGetCardResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsGetCardResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsGetCardResponse404Data {
  message: string;
  documentation_url: string;
}

type ProjectsGetColumnEndpoint = {
  /**
   * column_id parameter
   */
  column_id: number;
} & RequiredPreview<"inertia">;

type ProjectsGetColumnRequestOptions = {
  method: "GET";
  url: "/projects/columns/:column_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Project columns contain cards of work.
 */
export interface ProjectsGetColumnResponseData {
  url: string;
  project_url: string;
  cards_url: string;
  /**
   * The unique identifier of the project column
   */
  id: number;
  node_id: string;
  /**
   * Name of the project column
   */
  name: string;
  created_at: string;
  updated_at: string;
}

/**
 * Basic Error
 */
export interface ProjectsGetColumnResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsGetColumnResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsGetColumnResponse404Data {
  message: string;
  documentation_url: string;
}

type ProjectsGetPermissionForUserEndpoint = {
  project_id: number;

  username: string;
} & RequiredPreview<"inertia">;

type ProjectsGetPermissionForUserRequestOptions = {
  method: "GET";
  url: "/projects/:project_id/collaborators/:username/permission";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Repository Collaborator Permission
 */
export interface ProjectsGetPermissionForUserResponseData {
  permission: string;
  user: SimpleUser;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ProjectsGetPermissionForUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsGetPermissionForUserResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsGetPermissionForUserResponse404Data {
  message: string;
  documentation_url: string;
}

export interface ProjectsGetPermissionForUserResponse415Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ProjectsGetPermissionForUserResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ProjectsListCardsEndpoint = {
  /**
   * column_id parameter
   */
  column_id: number;
  /**
   * Filters the project cards that are returned by the card's state. Can be one of `all`,`archived`, or `not_archived`.
   */
  archived_state?: "all" | "archived" | "not_archived";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"inertia">;

type ProjectsListCardsRequestOptions = {
  method: "GET";
  url: "/projects/columns/:column_id/cards";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ProjectsListCardsResponseData = ProjectCard[];

/**
 * Project cards represent a scope of work.
 */
export interface ProjectCard {
  url: string;
  /**
   * The project card's ID
   */
  id: number;
  node_id: string;
  note: string;
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  /**
   * Whether or not the card is archived
   */
  archived: boolean;
  column_url: string;
  content_url: string;
  project_url: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ProjectsListCardsResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsListCardsResponse403Data {
  message: string;
  documentation_url: string;
}

type ProjectsListCollaboratorsEndpoint = {
  project_id: number;
  /**
   * Filters the collaborators by their affiliation. Can be one of:
   * \* `outside`: Outside collaborators of a project that are not a member of the project's organization.
   * \* `direct`: Collaborators with permissions to a project, regardless of organization membership status.
   * \* `all`: All collaborators the authenticated user can see.
   */
  affiliation?: "outside" | "direct" | "all";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"inertia">;

type ProjectsListCollaboratorsRequestOptions = {
  method: "GET";
  url: "/projects/:project_id/collaborators";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ProjectsListCollaboratorsResponseData = SimpleUser[];

/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

/**
 * Basic Error
 */
export interface ProjectsListCollaboratorsResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsListCollaboratorsResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsListCollaboratorsResponse404Data {
  message: string;
  documentation_url: string;
}

export interface ProjectsListCollaboratorsResponse415Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ProjectsListCollaboratorsResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ProjectsListColumnsEndpoint = {
  project_id: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"inertia">;

type ProjectsListColumnsRequestOptions = {
  method: "GET";
  url: "/projects/:project_id/columns";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ProjectsListColumnsResponseData = ProjectColumn[];

/**
 * Project columns contain cards of work.
 */
export interface ProjectColumn {
  url: string;
  project_url: string;
  cards_url: string;
  /**
   * The unique identifier of the project column
   */
  id: number;
  node_id: string;
  /**
   * Name of the project column
   */
  name: string;
  created_at: string;
  updated_at: string;
}

/**
 * Basic Error
 */
export interface ProjectsListColumnsResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsListColumnsResponse403Data {
  message: string;
  documentation_url: string;
}

type ProjectsListForOrgEndpoint = {
  org: string;
  /**
   * Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
   */
  state?: "open" | "closed" | "all";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"inertia">;

type ProjectsListForOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/projects";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ProjectsListForOrgResponseData = Project[];

/**
 * Projects are a way to organize columns and cards of work.
 */
export interface Project {
  owner_url: string;
  url: string;
  html_url: string;
  columns_url: string;
  id: number;
  node_id: string;
  /**
   * Name of the project
   */
  name: string;
  /**
   * Body of the project
   */
  body: string;
  number: number;
  /**
   * State of the project; either 'open' or 'closed'
   */
  state: string;
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  /**
   * The baseline permission that all organization members have on this project
   */
  organization_permission: "read" | "write" | "admin" | "none";
  /**
   * Whether or not this project can be seen by everyone.
   */
  private: boolean;
  cards_url: string;
  permissions: {
    read: boolean;
    write: boolean;
    admin: boolean;
  };
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Validation Error Simple
 */
export interface ProjectsListForOrgResponse422Data {
  message: string;
  documentation_url: string;
  errors: string[];
}

type ProjectsListForRepoEndpoint = {
  owner: string;

  repo: string;
  /**
   * Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
   */
  state?: "open" | "closed" | "all";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"inertia">;

type ProjectsListForRepoRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/projects";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ProjectsListForRepoResponseData = Project[];

/**
 * Projects are a way to organize columns and cards of work.
 */
export interface Project {
  owner_url: string;
  url: string;
  html_url: string;
  columns_url: string;
  id: number;
  node_id: string;
  /**
   * Name of the project
   */
  name: string;
  /**
   * Body of the project
   */
  body: string;
  number: number;
  /**
   * State of the project; either 'open' or 'closed'
   */
  state: string;
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  /**
   * The baseline permission that all organization members have on this project
   */
  organization_permission: "read" | "write" | "admin" | "none";
  /**
   * Whether or not this project can be seen by everyone.
   */
  private: boolean;
  cards_url: string;
  permissions: {
    read: boolean;
    write: boolean;
    admin: boolean;
  };
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ProjectsListForRepoResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsListForRepoResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsListForRepoResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsListForRepoResponse410Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error Simple
 */
export interface ProjectsListForRepoResponse422Data {
  message: string;
  documentation_url: string;
  errors: string[];
}

type ProjectsListForUserEndpoint = {
  username: string;
  /**
   * Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
   */
  state?: "open" | "closed" | "all";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"inertia">;

type ProjectsListForUserRequestOptions = {
  method: "GET";
  url: "/users/:username/projects";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ProjectsListForUserResponseData = Project[];

/**
 * Projects are a way to organize columns and cards of work.
 */
export interface Project {
  owner_url: string;
  url: string;
  html_url: string;
  columns_url: string;
  id: number;
  node_id: string;
  /**
   * Name of the project
   */
  name: string;
  /**
   * Body of the project
   */
  body: string;
  number: number;
  /**
   * State of the project; either 'open' or 'closed'
   */
  state: string;
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  /**
   * The baseline permission that all organization members have on this project
   */
  organization_permission: "read" | "write" | "admin" | "none";
  /**
   * Whether or not this project can be seen by everyone.
   */
  private: boolean;
  cards_url: string;
  permissions: {
    read: boolean;
    write: boolean;
    admin: boolean;
  };
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

export interface ProjectsListForUserResponse415Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ProjectsListForUserResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ProjectsMoveCardEndpoint = {
  /**
   * card_id parameter
   */
  card_id: number;
  /**
   * The position of the card in a column
   */
  position: string;
  /**
   * The unique identifier of the column the card should be moved to
   */
  column_id?: number;
} & RequiredPreview<"inertia">;

type ProjectsMoveCardRequestOptions = {
  method: "POST";
  url: "/projects/columns/cards/:card_id/moves";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ProjectsMoveCardResponseData {}

/**
 * Basic Error
 */
export interface ProjectsMoveCardResponse401Data {
  message: string;
  documentation_url: string;
}

export interface ProjectsMoveCardResponse403Data {
  message: string;
  documentation_url: string;
  errors: {
    code: string;
    message: string;
    resource: string;
    field: string;
  }[];
}

/**
 * Validation Error
 */
export interface ProjectsMoveCardResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

export interface ProjectsMoveCardResponse503Data {
  code: string;
  message: string;
  documentation_url: string;
  errors: {
    code: string;
    message: string;
  }[];
}

type ProjectsMoveColumnEndpoint = {
  /**
   * column_id parameter
   */
  column_id: number;
  /**
   * The position of the column in a project
   */
  position: string;
} & RequiredPreview<"inertia">;

type ProjectsMoveColumnRequestOptions = {
  method: "POST";
  url: "/projects/columns/:column_id/moves";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ProjectsMoveColumnResponseData {}

/**
 * Basic Error
 */
export interface ProjectsMoveColumnResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsMoveColumnResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error Simple
 */
export interface ProjectsMoveColumnResponse422Data {
  message: string;
  documentation_url: string;
  errors: string[];
}

type ProjectsRemoveCollaboratorEndpoint = {
  project_id: number;

  username: string;
} & RequiredPreview<"inertia">;

type ProjectsRemoveCollaboratorRequestOptions = {
  method: "DELETE";
  url: "/projects/:project_id/collaborators/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ProjectsRemoveCollaboratorResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsRemoveCollaboratorResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsRemoveCollaboratorResponse404Data {
  message: string;
  documentation_url: string;
}

export interface ProjectsRemoveCollaboratorResponse415Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ProjectsRemoveCollaboratorResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ProjectsUpdateEndpoint = {
  project_id: number;
  /**
   * Name of the project
   */
  name?: string;
  /**
   * Body of the project
   */
  body?: string | null;
  /**
   * State of the project; either 'open' or 'closed'
   */
  state?: string;
  /**
   * The baseline permission that all organization members have on this project
   */
  organization_permission?: "read" | "write" | "admin" | "none";
  /**
   * Whether or not this project can be seen by everyone.
   */
  private?: boolean;
} & RequiredPreview<"inertia">;

type ProjectsUpdateRequestOptions = {
  method: "PATCH";
  url: "/projects/:project_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Projects are a way to organize columns and cards of work.
 */
export interface ProjectsUpdateResponseData {
  owner_url: string;
  url: string;
  html_url: string;
  columns_url: string;
  id: number;
  node_id: string;
  /**
   * Name of the project
   */
  name: string;
  /**
   * Body of the project
   */
  body: string;
  number: number;
  /**
   * State of the project; either 'open' or 'closed'
   */
  state: string;
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  /**
   * The baseline permission that all organization members have on this project
   */
  organization_permission: "read" | "write" | "admin" | "none";
  /**
   * Whether or not this project can be seen by everyone.
   */
  private: boolean;
  cards_url: string;
  permissions: {
    read: boolean;
    write: boolean;
    admin: boolean;
  };
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ProjectsUpdateResponse401Data {
  message: string;
  documentation_url: string;
}

export interface ProjectsUpdateResponse403Data {
  message: string;
  documentation_url: string;
  errors: string[];
}

/**
 * Basic Error
 */
export interface ProjectsUpdateResponse410Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error Simple
 */
export interface ProjectsUpdateResponse422Data {
  message: string;
  documentation_url: string;
  errors: string[];
}

type ProjectsUpdateCardEndpoint = {
  /**
   * card_id parameter
   */
  card_id: number;
  /**
   * The project card's note
   */
  note?: string | null;
  /**
   * Whether or not the card is archived
   */
  archived?: boolean;
} & RequiredPreview<"inertia">;

type ProjectsUpdateCardRequestOptions = {
  method: "PATCH";
  url: "/projects/columns/cards/:card_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Project cards represent a scope of work.
 */
export interface ProjectsUpdateCardResponseData {
  url: string;
  /**
   * The project card's ID
   */
  id: number;
  node_id: string;
  note: string;
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  /**
   * Whether or not the card is archived
   */
  archived: boolean;
  column_url: string;
  content_url: string;
  project_url: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ProjectsUpdateCardResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsUpdateCardResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsUpdateCardResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error Simple
 */
export interface ProjectsUpdateCardResponse422Data {
  message: string;
  documentation_url: string;
  errors: string[];
}

type ProjectsUpdateColumnEndpoint = {
  /**
   * column_id parameter
   */
  column_id: number;
  /**
   * Name of the project column
   */
  name: string;
} & RequiredPreview<"inertia">;

type ProjectsUpdateColumnRequestOptions = {
  method: "PATCH";
  url: "/projects/columns/:column_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Project columns contain cards of work.
 */
export interface ProjectsUpdateColumnResponseData {
  url: string;
  project_url: string;
  cards_url: string;
  /**
   * The unique identifier of the project column
   */
  id: number;
  node_id: string;
  /**
   * Name of the project column
   */
  name: string;
  created_at: string;
  updated_at: string;
}

/**
 * Basic Error
 */
export interface ProjectsUpdateColumnResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ProjectsUpdateColumnResponse403Data {
  message: string;
  documentation_url: string;
}

type PullsCheckIfMergedEndpoint = {
  owner: string;

  repo: string;

  pull_number: number;
};

type PullsCheckIfMergedRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/pulls/:pull_number/merge";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type PullsCreateEndpoint = {
  owner: string;

  repo: string;
  /**
   * The title of the new pull request.
   */
  title?: string;
  /**
   * The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.
   */
  head: string;
  /**
   * The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
   */
  base: string;
  /**
   * The contents of the pull request.
   */
  body?: string;
  /**
   * Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
   */
  maintainer_can_modify?: boolean;
  /**
   * Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://help.github.com/en/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more.
   */
  draft?: boolean;

  issue?: number;
};

type PullsCreateRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/pulls";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
 */
export interface PullsCreateResponseData {
  url: string;
  id: number;
  node_id: string;
  html_url: string;
  diff_url: string;
  patch_url: string;
  issue_url: string;
  commits_url: string;
  review_comments_url: string;
  review_comment_url: string;
  comments_url: string;
  statuses_url: string;
  /**
   * Number uniquely identifying the pull request within its repository.
   */
  number: number;
  /**
   * State of this Pull Request. Either `open` or `closed`.
   */
  state: "open" | "closed";
  locked: boolean;
  /**
   * The title of the pull request.
   */
  title: string;
  user: SimpleUser;
  body: string;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  milestone: Milestone;
  active_lock_reason: string;
  created_at: string;
  updated_at: string;
  closed_at: string;
  merged_at: string;
  merge_commit_sha: string;
  assignee: SimpleUser2;
  assignees: SimpleUser3[];
  requested_reviewers: SimpleUser4[];
  requested_teams: TeamSimple[];
  head: {
    label: string;
    ref: string;
    repo: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      id: number;
      node_id: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      name: string;
      notifications_url: string;
      owner: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        node_id: string;
        login: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
      clone_url: string;
      default_branch: string;
      forks: number;
      forks_count: number;
      git_url: string;
      has_downloads: boolean;
      has_issues: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      has_pages: boolean;
      homepage: string;
      language: string;
      master_branch: string;
      archived: boolean;
      disabled: boolean;
      mirror_url: string;
      open_issues: number;
      open_issues_count: number;
      permissions: {
        admin: boolean;
        pull: boolean;
        push: boolean;
      };
      temp_clone_token: string;
      allow_merge_commit: boolean;
      allow_squash_merge: boolean;
      allow_rebase_merge: boolean;
      license: {
        key: string;
        name: string;
        url: string;
        spdx_id: string;
        node_id: string;
      };
      pushed_at: string;
      size: number;
      ssh_url: string;
      stargazers_count: number;
      svn_url: string;
      topics: string[];
      watchers: number;
      watchers_count: number;
      created_at: string;
      updated_at: string;
    };
    sha: string;
    user: {
      avatar_url: string;
      events_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string;
      html_url: string;
      id: number;
      node_id: string;
      login: string;
      organizations_url: string;
      received_events_url: string;
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      subscriptions_url: string;
      type: string;
      url: string;
    };
  };
  base: {
    label: string;
    ref: string;
    repo: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      id: number;
      node_id: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      name: string;
      notifications_url: string;
      owner: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        node_id: string;
        login: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
      clone_url: string;
      default_branch: string;
      forks: number;
      forks_count: number;
      git_url: string;
      has_downloads: boolean;
      has_issues: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      has_pages: boolean;
      homepage: string;
      language: string;
      master_branch: string;
      archived: boolean;
      disabled: boolean;
      mirror_url: string;
      open_issues: number;
      open_issues_count: number;
      permissions: {
        admin: boolean;
        pull: boolean;
        push: boolean;
      };
      temp_clone_token: string;
      allow_merge_commit: boolean;
      allow_squash_merge: boolean;
      allow_rebase_merge: boolean;
      license: LicenseSimple;
      pushed_at: string;
      size: number;
      ssh_url: string;
      stargazers_count: number;
      svn_url: string;
      topics: string[];
      watchers: number;
      watchers_count: number;
      created_at: string;
      updated_at: string;
    };
    sha: string;
    user: {
      avatar_url: string;
      events_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string;
      html_url: string;
      id: number;
      node_id: string;
      login: string;
      organizations_url: string;
      received_events_url: string;
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      subscriptions_url: string;
      type: string;
      url: string;
    };
  };
  _links: {
    comments: Link;
    commits: Link1;
    statuses: Link2;
    html: Link3;
    issue: Link4;
    review_comments: Link5;
    review_comment: Link6;
    self: Link7;
  };
  author_association: string;
  /**
   * Indicates whether or not the pull request is a draft.
   */
  draft: boolean;
  merged: boolean;
  mergeable: boolean;
  rebaseable: boolean;
  mergeable_state: string;
  merged_by: SimpleUser5;
  comments: number;
  review_comments: number;
  /**
   * Indicates whether maintainers can modify the pull request.
   */
  maintainer_can_modify: boolean;
  commits: number;
  additions: number;
  deletions: number;
  changed_files: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser1;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Hypermedia Link
 */
export interface Link {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link1 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link2 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link3 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link4 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link5 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link6 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link7 {
  href: string;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface PullsCreateResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface PullsCreateResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type PullsCreateReplyForReviewCommentEndpoint = {
  owner: string;

  repo: string;

  pull_number: number;
  /**
   * comment_id parameter
   */
  comment_id: number;
  /**
   * The text of the review comment.
   */
  body: string;
};

type PullsCreateReplyForReviewCommentRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/pulls/:pull_number/comments/:comment_id/replies";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
 */
export interface PullsCreateReplyForReviewCommentResponseData {
  /**
   * URL for the pull request review comment
   */
  url: string;
  /**
   * The ID of the pull request review to which the comment belongs.
   */
  pull_request_review_id: number;
  /**
   * The ID of the pull request review comment.
   */
  id: number;
  /**
   * The node ID of the pull request review comment.
   */
  node_id: string;
  /**
   * The diff of the line that the comment refers to.
   */
  diff_hunk: string;
  /**
   * The relative path of the file to which the comment applies.
   */
  path: string;
  /**
   * The line index in the diff to which the comment applies.
   */
  position: number;
  /**
   * The index of the original line in the diff to which the comment applies.
   */
  original_position: number;
  /**
   * The SHA of the commit to which the comment applies.
   */
  commit_id: string;
  /**
   * The SHA of the original commit to which the comment applies.
   */
  original_commit_id: string;
  /**
   * The comment ID to reply to.
   */
  in_reply_to_id: number;
  user: SimpleUser;
  /**
   * The text of the comment.
   */
  body: string;
  created_at: string;
  updated_at: string;
  /**
   * HTML URL for the pull request review comment.
   */
  html_url: string;
  /**
   * URL for the pull request that the review comment belongs to.
   */
  pull_request_url: string;
  /**
   * How the author of the comment is associated with the pull request.
   */
  author_association: string;
  _links: {
    self: {
      href: string;
    };
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  /**
   * The first line of the range for a multi-line comment.
   */
  start_line: number;
  /**
   * The first line of the range for a multi-line comment.
   */
  original_start_line: number;
  /**
   * The side of the first line of the range for a multi-line comment.
   */
  start_side: "LEFT" | "RIGHT";
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  line: number;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  original_line: number;
  /**
   * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
   */
  side: "LEFT" | "RIGHT";
  reactions: ReactionRollup;
  body_html: string;
  body_text: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

/**
 * Basic Error
 */
export interface PullsCreateReplyForReviewCommentResponse404Data {
  message: string;
  documentation_url: string;
}

type PullsCreateReviewEndpoint = {
  owner: string;

  repo: string;

  pull_number: number;
  /**
   * The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.
   */
  commit_id?: string;
  /**
   * **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.
   */
  body?: string;
  /**
   * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://developer.github.com/v3/pulls/reviews/#submit-a-review-for-a-pull-request) when you are ready.
   */
  event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
  /**
   * Use the following table to specify the location, destination, and contents of the draft review comment.
   */
  comments?: PullsCreateReviewParamsComments[];
};

type PullsCreateReviewRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/pulls/:pull_number/reviews";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Pull Request Reviews are reviews on pull requests.
 */
export interface PullsCreateReviewResponseData {
  /**
   * Unique identifier of the review
   */
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The text of the review.
   */
  body: string;
  state: string;
  html_url: string;
  pull_request_url: string;
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  submitted_at: string;
  /**
   * A commit SHA for the review.
   */
  commit_id: string;
  body_html: string;
  body_text: string;
  author_association: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface PullsCreateReviewResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error Simple
 */
export interface PullsCreateReviewResponse422Data {
  message: string;
  documentation_url: string;
  errors: string[];
}

type PullsCreateReviewCommentEndpoint = {
  owner: string;

  repo: string;

  pull_number: number;
  /**
   * The text of the review comment.
   */
  body: string;
  /**
   * The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.
   */
  commit_id?: string;
  /**
   * The relative path to the file that necessitates a comment.
   */
  path: string;
  /**
   * **Required without `comfort-fade` preview**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.
   */
  position?: number;
  /**
   * **Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://help.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
   */
  side?: "LEFT" | "RIGHT";
  /**
   * **Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
   */
  line?: number;
  /**
   * **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.
   */
  start_line?: number;
  /**
   * **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
   */
  start_side?: "LEFT" | "RIGHT" | "side";

  in_reply_to?: number;
};

type PullsCreateReviewCommentRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/pulls/:pull_number/comments";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
 */
export interface PullsCreateReviewCommentResponseData {
  /**
   * URL for the pull request review comment
   */
  url: string;
  /**
   * The ID of the pull request review to which the comment belongs.
   */
  pull_request_review_id: number;
  /**
   * The ID of the pull request review comment.
   */
  id: number;
  /**
   * The node ID of the pull request review comment.
   */
  node_id: string;
  /**
   * The diff of the line that the comment refers to.
   */
  diff_hunk: string;
  /**
   * The relative path of the file to which the comment applies.
   */
  path: string;
  /**
   * The line index in the diff to which the comment applies.
   */
  position: number;
  /**
   * The index of the original line in the diff to which the comment applies.
   */
  original_position: number;
  /**
   * The SHA of the commit to which the comment applies.
   */
  commit_id: string;
  /**
   * The SHA of the original commit to which the comment applies.
   */
  original_commit_id: string;
  /**
   * The comment ID to reply to.
   */
  in_reply_to_id: number;
  user: SimpleUser;
  /**
   * The text of the comment.
   */
  body: string;
  created_at: string;
  updated_at: string;
  /**
   * HTML URL for the pull request review comment.
   */
  html_url: string;
  /**
   * URL for the pull request that the review comment belongs to.
   */
  pull_request_url: string;
  /**
   * How the author of the comment is associated with the pull request.
   */
  author_association: string;
  _links: {
    self: {
      href: string;
    };
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  /**
   * The first line of the range for a multi-line comment.
   */
  start_line: number;
  /**
   * The first line of the range for a multi-line comment.
   */
  original_start_line: number;
  /**
   * The side of the first line of the range for a multi-line comment.
   */
  start_side: "LEFT" | "RIGHT";
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  line: number;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  original_line: number;
  /**
   * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
   */
  side: "LEFT" | "RIGHT";
  reactions: ReactionRollup;
  body_html: string;
  body_text: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

/**
 * Basic Error
 */
export interface PullsCreateReviewCommentResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface PullsCreateReviewCommentResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type PullsDeletePendingReviewEndpoint = {
  owner: string;

  repo: string;

  pull_number: number;
  /**
   * review_id parameter
   */
  review_id: number;
};

type PullsDeletePendingReviewRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Pull Request Reviews are reviews on pull requests.
 */
export interface PullsDeletePendingReviewResponseData {
  /**
   * Unique identifier of the review
   */
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The text of the review.
   */
  body: string;
  state: string;
  html_url: string;
  pull_request_url: string;
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  submitted_at: string;
  /**
   * A commit SHA for the review.
   */
  commit_id: string;
  body_html: string;
  body_text: string;
  author_association: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface PullsDeletePendingReviewResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error Simple
 */
export interface PullsDeletePendingReviewResponse422Data {
  message: string;
  documentation_url: string;
  errors: string[];
}

type PullsDeleteReviewCommentEndpoint = {
  owner: string;

  repo: string;
  /**
   * comment_id parameter
   */
  comment_id: number;
};

type PullsDeleteReviewCommentRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/pulls/comments/:comment_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface PullsDeleteReviewCommentResponse404Data {
  message: string;
  documentation_url: string;
}

type PullsDismissReviewEndpoint = {
  owner: string;

  repo: string;

  pull_number: number;
  /**
   * review_id parameter
   */
  review_id: number;
  /**
   * The message for the pull request review dismissal
   */
  message: string;

  event?: string;
};

type PullsDismissReviewRequestOptions = {
  method: "PUT";
  url: "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/dismissals";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Pull Request Reviews are reviews on pull requests.
 */
export interface PullsDismissReviewResponseData {
  /**
   * Unique identifier of the review
   */
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The text of the review.
   */
  body: string;
  state: string;
  html_url: string;
  pull_request_url: string;
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  submitted_at: string;
  /**
   * A commit SHA for the review.
   */
  commit_id: string;
  body_html: string;
  body_text: string;
  author_association: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface PullsDismissReviewResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error Simple
 */
export interface PullsDismissReviewResponse422Data {
  message: string;
  documentation_url: string;
  errors: string[];
}

type PullsGetEndpoint = {
  owner: string;

  repo: string;

  pull_number: number;
};

type PullsGetRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/pulls/:pull_number";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
 */
export interface PullsGetResponseData {
  url: string;
  id: number;
  node_id: string;
  html_url: string;
  diff_url: string;
  patch_url: string;
  issue_url: string;
  commits_url: string;
  review_comments_url: string;
  review_comment_url: string;
  comments_url: string;
  statuses_url: string;
  /**
   * Number uniquely identifying the pull request within its repository.
   */
  number: number;
  /**
   * State of this Pull Request. Either `open` or `closed`.
   */
  state: "open" | "closed";
  locked: boolean;
  /**
   * The title of the pull request.
   */
  title: string;
  user: SimpleUser;
  body: string;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  milestone: Milestone;
  active_lock_reason: string;
  created_at: string;
  updated_at: string;
  closed_at: string;
  merged_at: string;
  merge_commit_sha: string;
  assignee: SimpleUser2;
  assignees: SimpleUser3[];
  requested_reviewers: SimpleUser4[];
  requested_teams: TeamSimple[];
  head: {
    label: string;
    ref: string;
    repo: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      id: number;
      node_id: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      name: string;
      notifications_url: string;
      owner: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        node_id: string;
        login: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
      clone_url: string;
      default_branch: string;
      forks: number;
      forks_count: number;
      git_url: string;
      has_downloads: boolean;
      has_issues: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      has_pages: boolean;
      homepage: string;
      language: string;
      master_branch: string;
      archived: boolean;
      disabled: boolean;
      mirror_url: string;
      open_issues: number;
      open_issues_count: number;
      permissions: {
        admin: boolean;
        pull: boolean;
        push: boolean;
      };
      temp_clone_token: string;
      allow_merge_commit: boolean;
      allow_squash_merge: boolean;
      allow_rebase_merge: boolean;
      license: {
        key: string;
        name: string;
        url: string;
        spdx_id: string;
        node_id: string;
      };
      pushed_at: string;
      size: number;
      ssh_url: string;
      stargazers_count: number;
      svn_url: string;
      topics: string[];
      watchers: number;
      watchers_count: number;
      created_at: string;
      updated_at: string;
    };
    sha: string;
    user: {
      avatar_url: string;
      events_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string;
      html_url: string;
      id: number;
      node_id: string;
      login: string;
      organizations_url: string;
      received_events_url: string;
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      subscriptions_url: string;
      type: string;
      url: string;
    };
  };
  base: {
    label: string;
    ref: string;
    repo: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      id: number;
      node_id: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      name: string;
      notifications_url: string;
      owner: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        node_id: string;
        login: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
      clone_url: string;
      default_branch: string;
      forks: number;
      forks_count: number;
      git_url: string;
      has_downloads: boolean;
      has_issues: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      has_pages: boolean;
      homepage: string;
      language: string;
      master_branch: string;
      archived: boolean;
      disabled: boolean;
      mirror_url: string;
      open_issues: number;
      open_issues_count: number;
      permissions: {
        admin: boolean;
        pull: boolean;
        push: boolean;
      };
      temp_clone_token: string;
      allow_merge_commit: boolean;
      allow_squash_merge: boolean;
      allow_rebase_merge: boolean;
      license: LicenseSimple;
      pushed_at: string;
      size: number;
      ssh_url: string;
      stargazers_count: number;
      svn_url: string;
      topics: string[];
      watchers: number;
      watchers_count: number;
      created_at: string;
      updated_at: string;
    };
    sha: string;
    user: {
      avatar_url: string;
      events_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string;
      html_url: string;
      id: number;
      node_id: string;
      login: string;
      organizations_url: string;
      received_events_url: string;
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      subscriptions_url: string;
      type: string;
      url: string;
    };
  };
  _links: {
    comments: Link;
    commits: Link1;
    statuses: Link2;
    html: Link3;
    issue: Link4;
    review_comments: Link5;
    review_comment: Link6;
    self: Link7;
  };
  author_association: string;
  /**
   * Indicates whether or not the pull request is a draft.
   */
  draft: boolean;
  merged: boolean;
  mergeable: boolean;
  rebaseable: boolean;
  mergeable_state: string;
  merged_by: SimpleUser5;
  comments: number;
  review_comments: number;
  /**
   * Indicates whether maintainers can modify the pull request.
   */
  maintainer_can_modify: boolean;
  commits: number;
  additions: number;
  deletions: number;
  changed_files: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser1;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Hypermedia Link
 */
export interface Link {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link1 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link2 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link3 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link4 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link5 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link6 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link7 {
  href: string;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface PullsGetResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface PullsGetResponse500Data {
  message: string;
  documentation_url: string;
}

type PullsGetReviewEndpoint = {
  owner: string;

  repo: string;

  pull_number: number;
  /**
   * review_id parameter
   */
  review_id: number;
};

type PullsGetReviewRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Pull Request Reviews are reviews on pull requests.
 */
export interface PullsGetReviewResponseData {
  /**
   * Unique identifier of the review
   */
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The text of the review.
   */
  body: string;
  state: string;
  html_url: string;
  pull_request_url: string;
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  submitted_at: string;
  /**
   * A commit SHA for the review.
   */
  commit_id: string;
  body_html: string;
  body_text: string;
  author_association: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface PullsGetReviewResponse404Data {
  message: string;
  documentation_url: string;
}

type PullsGetReviewCommentEndpoint = {
  owner: string;

  repo: string;
  /**
   * comment_id parameter
   */
  comment_id: number;
};

type PullsGetReviewCommentRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/pulls/comments/:comment_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
 */
export interface PullsGetReviewCommentResponseData {
  /**
   * URL for the pull request review comment
   */
  url: string;
  /**
   * The ID of the pull request review to which the comment belongs.
   */
  pull_request_review_id: number;
  /**
   * The ID of the pull request review comment.
   */
  id: number;
  /**
   * The node ID of the pull request review comment.
   */
  node_id: string;
  /**
   * The diff of the line that the comment refers to.
   */
  diff_hunk: string;
  /**
   * The relative path of the file to which the comment applies.
   */
  path: string;
  /**
   * The line index in the diff to which the comment applies.
   */
  position: number;
  /**
   * The index of the original line in the diff to which the comment applies.
   */
  original_position: number;
  /**
   * The SHA of the commit to which the comment applies.
   */
  commit_id: string;
  /**
   * The SHA of the original commit to which the comment applies.
   */
  original_commit_id: string;
  /**
   * The comment ID to reply to.
   */
  in_reply_to_id: number;
  user: SimpleUser;
  /**
   * The text of the comment.
   */
  body: string;
  created_at: string;
  updated_at: string;
  /**
   * HTML URL for the pull request review comment.
   */
  html_url: string;
  /**
   * URL for the pull request that the review comment belongs to.
   */
  pull_request_url: string;
  /**
   * How the author of the comment is associated with the pull request.
   */
  author_association: string;
  _links: {
    self: {
      href: string;
    };
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  /**
   * The first line of the range for a multi-line comment.
   */
  start_line: number;
  /**
   * The first line of the range for a multi-line comment.
   */
  original_start_line: number;
  /**
   * The side of the first line of the range for a multi-line comment.
   */
  start_side: "LEFT" | "RIGHT";
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  line: number;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  original_line: number;
  /**
   * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
   */
  side: "LEFT" | "RIGHT";
  reactions: ReactionRollup;
  body_html: string;
  body_text: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

/**
 * Basic Error
 */
export interface PullsGetReviewCommentResponse404Data {
  message: string;
  documentation_url: string;
}

type PullsListEndpoint = {
  owner: string;

  repo: string;
  /**
   * Either `open`, `closed`, or `all` to filter by state.
   */
  state?: "open" | "closed" | "all";
  /**
   * Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
   */
  head?: string;
  /**
   * Filter pulls by base branch name. Example: `gh-pages`.
   */
  base?: string;
  /**
   * What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month).
   */
  sort?: "created" | "updated" | "popularity" | "long-running";
  /**
   * The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
   */
  direction?: "asc" | "desc";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type PullsListRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/pulls";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type PullsListResponseData = PullRequestSimple[];

/**
 * Pull Request Simple
 */
export interface PullRequestSimple {
  url: string;
  id: number;
  node_id: string;
  html_url: string;
  diff_url: string;
  patch_url: string;
  issue_url: string;
  commits_url: string;
  review_comments_url: string;
  review_comment_url: string;
  comments_url: string;
  statuses_url: string;
  number: number;
  state: string;
  locked: boolean;
  title: string;
  user: SimpleUser;
  body: string;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  milestone: Milestone;
  active_lock_reason: string;
  created_at: string;
  updated_at: string;
  closed_at: string;
  merged_at: string;
  merge_commit_sha: string;
  assignee: SimpleUser2;
  assignees: SimpleUser3[];
  requested_reviewers: SimpleUser4[];
  requested_teams: TeamSimple[];
  head: {
    label: string;
    ref: string;
    repo: Repository;
    sha: string;
    user: SimpleUser6;
  };
  base: {
    label: string;
    ref: string;
    repo: Repository1;
    sha: string;
    user: SimpleUser8;
  };
  _links: {
    comments: Link;
    commits: Link1;
    statuses: Link2;
    html: Link3;
    issue: Link4;
    review_comments: Link5;
    review_comment: Link6;
    self: Link7;
  };
  author_association: string;
  /**
   * Indicates whether or not the pull request is a draft.
   */
  draft: boolean;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser1;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn: string;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser5;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser6 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository1 {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple1;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser7;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple1 {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser7 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser8 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Hypermedia Link
 */
export interface Link {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link1 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link2 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link3 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link4 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link5 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link6 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link7 {
  href: string;
}

/**
 * Validation Error
 */
export interface PullsListResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type PullsListCommentsForReviewEndpoint = {
  owner: string;

  repo: string;

  pull_number: number;
  /**
   * review_id parameter
   */
  review_id: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type PullsListCommentsForReviewRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/comments";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type PullsListCommentsForReviewResponseData = LegacyReviewComment[];

/**
 * Legacy Review Comment
 */
export interface LegacyReviewComment {
  url: string;
  pull_request_review_id: number;
  id: number;
  node_id: string;
  diff_hunk: string;
  path: string;
  position: number;
  original_position: number;
  commit_id: string;
  original_commit_id: string;
  in_reply_to_id: number;
  user: SimpleUser;
  body: string;
  created_at: string;
  updated_at: string;
  html_url: string;
  pull_request_url: string;
  author_association: string;
  _links: {
    self: Link;
    html: Link1;
    pull_request: Link2;
  };
  body_text: string;
  body_html: string;
  /**
   * The side of the first line of the range for a multi-line comment.
   */
  side: "LEFT" | "RIGHT";
  /**
   * The side of the first line of the range for a multi-line comment.
   */
  start_side: "LEFT" | "RIGHT";
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  line: number;
  /**
   * The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  original_line: number;
  /**
   * The first line of the range for a multi-line comment.
   */
  start_line: number;
  /**
   * The original first line of the range for a multi-line comment.
   */
  original_start_line: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Hypermedia Link
 */
export interface Link {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link1 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link2 {
  href: string;
}

/**
 * Basic Error
 */
export interface PullsListCommentsForReviewResponse404Data {
  message: string;
  documentation_url: string;
}

type PullsListCommitsEndpoint = {
  owner: string;

  repo: string;

  pull_number: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type PullsListCommitsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/pulls/:pull_number/commits";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type PullsListCommitsResponseData = SimpleCommit[];

/**
 * Simple Commit
 */
export interface SimpleCommit {
  id: string;
  tree_id: string;
  message: string;
  timestamp: string;
  author: {
    name: string;
    email: string;
  };
  committer: {
    name: string;
    email: string;
  };
}

type PullsListFilesEndpoint = {
  owner: string;

  repo: string;

  pull_number: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type PullsListFilesRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/pulls/:pull_number/files";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type PullsListFilesResponseData = DiffEntry[];

/**
 * Diff Entry
 */
export interface DiffEntry {
  sha: string;
  filename: string;
  status: string;
  additions: number;
  deletions: number;
  changes: number;
  blob_url: string;
  raw_url: string;
  contents_url: string;
  patch: string;
  previous_filename: string;
}

/**
 * Validation Error
 */
export interface PullsListFilesResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

/**
 * Basic Error
 */
export interface PullsListFilesResponse500Data {
  message: string;
  documentation_url: string;
}

type PullsListRequestedReviewersEndpoint = {
  owner: string;

  repo: string;

  pull_number: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type PullsListRequestedReviewersRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/pulls/:pull_number/requested_reviewers";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Pull Request Review Request
 */
export interface PullsListRequestedReviewersResponseData {
  users: {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  }[];
  teams: {
    id: number;
    node_id: string;
    url: string;
    html_url: string;
    name: string;
    slug: string;
    description: string;
    privacy: string;
    permission: string;
    members_url: string;
    repositories_url: string;
    parent: string;
  }[];
}

type PullsListReviewCommentsEndpoint = {
  owner: string;

  repo: string;

  pull_number: number;
  /**
   * One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
   */
  sort?: "created" | "updated";
  /**
   * Can be either `asc` or `desc`. Ignored without `sort` parameter.
   */
  direction?: "asc" | "desc";
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type PullsListReviewCommentsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/pulls/:pull_number/comments";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type PullsListReviewCommentsResponseData = PullRequestReviewComment[];

/**
 * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
 */
export interface PullRequestReviewComment {
  /**
   * URL for the pull request review comment
   */
  url: string;
  /**
   * The ID of the pull request review to which the comment belongs.
   */
  pull_request_review_id: number;
  /**
   * The ID of the pull request review comment.
   */
  id: number;
  /**
   * The node ID of the pull request review comment.
   */
  node_id: string;
  /**
   * The diff of the line that the comment refers to.
   */
  diff_hunk: string;
  /**
   * The relative path of the file to which the comment applies.
   */
  path: string;
  /**
   * The line index in the diff to which the comment applies.
   */
  position: number;
  /**
   * The index of the original line in the diff to which the comment applies.
   */
  original_position: number;
  /**
   * The SHA of the commit to which the comment applies.
   */
  commit_id: string;
  /**
   * The SHA of the original commit to which the comment applies.
   */
  original_commit_id: string;
  /**
   * The comment ID to reply to.
   */
  in_reply_to_id: number;
  user: SimpleUser;
  /**
   * The text of the comment.
   */
  body: string;
  created_at: string;
  updated_at: string;
  /**
   * HTML URL for the pull request review comment.
   */
  html_url: string;
  /**
   * URL for the pull request that the review comment belongs to.
   */
  pull_request_url: string;
  /**
   * How the author of the comment is associated with the pull request.
   */
  author_association: string;
  _links: {
    self: {
      href: string;
    };
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  /**
   * The first line of the range for a multi-line comment.
   */
  start_line: number;
  /**
   * The first line of the range for a multi-line comment.
   */
  original_start_line: number;
  /**
   * The side of the first line of the range for a multi-line comment.
   */
  start_side: "LEFT" | "RIGHT";
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  line: number;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  original_line: number;
  /**
   * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
   */
  side: "LEFT" | "RIGHT";
  reactions: ReactionRollup;
  body_html: string;
  body_text: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type PullsListReviewCommentsForRepoEndpoint = {
  owner: string;

  repo: string;
  /**
   * One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
   */
  sort?: "created" | "updated";
  /**
   * Can be either `asc` or `desc`. Ignored without `sort` parameter.
   */
  direction?: "asc" | "desc";
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type PullsListReviewCommentsForRepoRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/pulls/comments";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type PullsListReviewCommentsForRepoResponseData = PullRequestReviewComment[];

/**
 * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
 */
export interface PullRequestReviewComment {
  /**
   * URL for the pull request review comment
   */
  url: string;
  /**
   * The ID of the pull request review to which the comment belongs.
   */
  pull_request_review_id: number;
  /**
   * The ID of the pull request review comment.
   */
  id: number;
  /**
   * The node ID of the pull request review comment.
   */
  node_id: string;
  /**
   * The diff of the line that the comment refers to.
   */
  diff_hunk: string;
  /**
   * The relative path of the file to which the comment applies.
   */
  path: string;
  /**
   * The line index in the diff to which the comment applies.
   */
  position: number;
  /**
   * The index of the original line in the diff to which the comment applies.
   */
  original_position: number;
  /**
   * The SHA of the commit to which the comment applies.
   */
  commit_id: string;
  /**
   * The SHA of the original commit to which the comment applies.
   */
  original_commit_id: string;
  /**
   * The comment ID to reply to.
   */
  in_reply_to_id: number;
  user: SimpleUser;
  /**
   * The text of the comment.
   */
  body: string;
  created_at: string;
  updated_at: string;
  /**
   * HTML URL for the pull request review comment.
   */
  html_url: string;
  /**
   * URL for the pull request that the review comment belongs to.
   */
  pull_request_url: string;
  /**
   * How the author of the comment is associated with the pull request.
   */
  author_association: string;
  _links: {
    self: {
      href: string;
    };
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  /**
   * The first line of the range for a multi-line comment.
   */
  start_line: number;
  /**
   * The first line of the range for a multi-line comment.
   */
  original_start_line: number;
  /**
   * The side of the first line of the range for a multi-line comment.
   */
  start_side: "LEFT" | "RIGHT";
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  line: number;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  original_line: number;
  /**
   * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
   */
  side: "LEFT" | "RIGHT";
  reactions: ReactionRollup;
  body_html: string;
  body_text: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type PullsListReviewsEndpoint = {
  owner: string;

  repo: string;

  pull_number: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type PullsListReviewsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/pulls/:pull_number/reviews";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type PullsListReviewsResponseData = PullRequestReview[];

/**
 * Pull Request Reviews are reviews on pull requests.
 */
export interface PullRequestReview {
  /**
   * Unique identifier of the review
   */
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The text of the review.
   */
  body: string;
  state: string;
  html_url: string;
  pull_request_url: string;
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  submitted_at: string;
  /**
   * A commit SHA for the review.
   */
  commit_id: string;
  body_html: string;
  body_text: string;
  author_association: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type PullsMergeEndpoint = {
  owner: string;

  repo: string;

  pull_number: number;
  /**
   * Title for the automatic commit message.
   */
  commit_title?: string;
  /**
   * Extra detail to append to automatic commit message.
   */
  commit_message?: string;
  /**
   * SHA that pull request head must match to allow merge.
   */
  sha?: string;
  /**
   * Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.
   */
  merge_method?: "merge" | "squash" | "rebase";
};

type PullsMergeRequestOptions = {
  method: "PUT";
  url: "/repos/:owner/:repo/pulls/:pull_number/merge";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Pull Request Merge Result
 */
export interface PullsMergeResponseData {
  sha: string;
  merged: boolean;
  message: string;
}

/**
 * Basic Error
 */
export interface PullsMergeResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface PullsMergeResponse404Data {
  message: string;
  documentation_url: string;
}

export interface PullsMergeResponse405Data {
  message: string;
  documentation_url: string;
}

export interface PullsMergeResponse409Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface PullsMergeResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type PullsRemoveRequestedReviewersEndpoint = {
  owner: string;

  repo: string;

  pull_number: number;
  /**
   * An array of user `login`s that will be removed.
   */
  reviewers?: string[];
  /**
   * An array of team `slug`s that will be removed.
   */
  team_reviewers?: string[];
};

type PullsRemoveRequestedReviewersRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/pulls/:pull_number/requested_reviewers";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Validation Error
 */
export interface PullsRemoveRequestedReviewersResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type PullsRequestReviewersEndpoint = {
  owner: string;

  repo: string;

  pull_number: number;
  /**
   * An array of user `login`s that will be requested.
   */
  reviewers?: string[];
  /**
   * An array of team `slug`s that will be requested.
   */
  team_reviewers?: string[];
};

type PullsRequestReviewersRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/pulls/:pull_number/requested_reviewers";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Pull Request Simple
 */
export interface PullsRequestReviewersResponseData {
  url: string;
  id: number;
  node_id: string;
  html_url: string;
  diff_url: string;
  patch_url: string;
  issue_url: string;
  commits_url: string;
  review_comments_url: string;
  review_comment_url: string;
  comments_url: string;
  statuses_url: string;
  number: number;
  state: string;
  locked: boolean;
  title: string;
  user: SimpleUser;
  body: string;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  milestone: Milestone;
  active_lock_reason: string;
  created_at: string;
  updated_at: string;
  closed_at: string;
  merged_at: string;
  merge_commit_sha: string;
  assignee: SimpleUser2;
  assignees: SimpleUser3[];
  requested_reviewers: SimpleUser4[];
  requested_teams: TeamSimple[];
  head: {
    label: string;
    ref: string;
    repo: Repository;
    sha: string;
    user: SimpleUser6;
  };
  base: {
    label: string;
    ref: string;
    repo: Repository1;
    sha: string;
    user: SimpleUser8;
  };
  _links: {
    comments: Link;
    commits: Link1;
    statuses: Link2;
    html: Link3;
    issue: Link4;
    review_comments: Link5;
    review_comment: Link6;
    self: Link7;
  };
  author_association: string;
  /**
   * Indicates whether or not the pull request is a draft.
   */
  draft: boolean;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser1;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn: string;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser5;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser6 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository1 {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple1;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser7;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple1 {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser7 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser8 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Hypermedia Link
 */
export interface Link {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link1 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link2 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link3 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link4 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link5 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link6 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link7 {
  href: string;
}

/**
 * Basic Error
 */
export interface PullsRequestReviewersResponse403Data {
  message: string;
  documentation_url: string;
}

type PullsSubmitReviewEndpoint = {
  owner: string;

  repo: string;

  pull_number: number;
  /**
   * review_id parameter
   */
  review_id: number;
  /**
   * The body text of the pull request review
   */
  body?: string;
  /**
   * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
   */
  event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
};

type PullsSubmitReviewRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/events";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Pull Request Reviews are reviews on pull requests.
 */
export interface PullsSubmitReviewResponseData {
  /**
   * Unique identifier of the review
   */
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The text of the review.
   */
  body: string;
  state: string;
  html_url: string;
  pull_request_url: string;
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  submitted_at: string;
  /**
   * A commit SHA for the review.
   */
  commit_id: string;
  body_html: string;
  body_text: string;
  author_association: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface PullsSubmitReviewResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface PullsSubmitReviewResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error Simple
 */
export interface PullsSubmitReviewResponse422Data {
  message: string;
  documentation_url: string;
  errors: string[];
}

type PullsUpdateEndpoint = {
  owner: string;

  repo: string;

  pull_number: number;
  /**
   * The title of the pull request.
   */
  title?: string;
  /**
   * The contents of the pull request.
   */
  body?: string;
  /**
   * State of this Pull Request. Either `open` or `closed`.
   */
  state?: "open" | "closed";
  /**
   * The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
   */
  base?: string;
  /**
   * Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
   */
  maintainer_can_modify?: boolean;
};

type PullsUpdateRequestOptions = {
  method: "PATCH";
  url: "/repos/:owner/:repo/pulls/:pull_number";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
 */
export interface PullsUpdateResponseData {
  url: string;
  id: number;
  node_id: string;
  html_url: string;
  diff_url: string;
  patch_url: string;
  issue_url: string;
  commits_url: string;
  review_comments_url: string;
  review_comment_url: string;
  comments_url: string;
  statuses_url: string;
  /**
   * Number uniquely identifying the pull request within its repository.
   */
  number: number;
  /**
   * State of this Pull Request. Either `open` or `closed`.
   */
  state: "open" | "closed";
  locked: boolean;
  /**
   * The title of the pull request.
   */
  title: string;
  user: SimpleUser;
  body: string;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  milestone: Milestone;
  active_lock_reason: string;
  created_at: string;
  updated_at: string;
  closed_at: string;
  merged_at: string;
  merge_commit_sha: string;
  assignee: SimpleUser2;
  assignees: SimpleUser3[];
  requested_reviewers: SimpleUser4[];
  requested_teams: TeamSimple[];
  head: {
    label: string;
    ref: string;
    repo: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      id: number;
      node_id: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      name: string;
      notifications_url: string;
      owner: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        node_id: string;
        login: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
      clone_url: string;
      default_branch: string;
      forks: number;
      forks_count: number;
      git_url: string;
      has_downloads: boolean;
      has_issues: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      has_pages: boolean;
      homepage: string;
      language: string;
      master_branch: string;
      archived: boolean;
      disabled: boolean;
      mirror_url: string;
      open_issues: number;
      open_issues_count: number;
      permissions: {
        admin: boolean;
        pull: boolean;
        push: boolean;
      };
      temp_clone_token: string;
      allow_merge_commit: boolean;
      allow_squash_merge: boolean;
      allow_rebase_merge: boolean;
      license: {
        key: string;
        name: string;
        url: string;
        spdx_id: string;
        node_id: string;
      };
      pushed_at: string;
      size: number;
      ssh_url: string;
      stargazers_count: number;
      svn_url: string;
      topics: string[];
      watchers: number;
      watchers_count: number;
      created_at: string;
      updated_at: string;
    };
    sha: string;
    user: {
      avatar_url: string;
      events_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string;
      html_url: string;
      id: number;
      node_id: string;
      login: string;
      organizations_url: string;
      received_events_url: string;
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      subscriptions_url: string;
      type: string;
      url: string;
    };
  };
  base: {
    label: string;
    ref: string;
    repo: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      id: number;
      node_id: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      name: string;
      notifications_url: string;
      owner: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        node_id: string;
        login: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
      clone_url: string;
      default_branch: string;
      forks: number;
      forks_count: number;
      git_url: string;
      has_downloads: boolean;
      has_issues: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      has_pages: boolean;
      homepage: string;
      language: string;
      master_branch: string;
      archived: boolean;
      disabled: boolean;
      mirror_url: string;
      open_issues: number;
      open_issues_count: number;
      permissions: {
        admin: boolean;
        pull: boolean;
        push: boolean;
      };
      temp_clone_token: string;
      allow_merge_commit: boolean;
      allow_squash_merge: boolean;
      allow_rebase_merge: boolean;
      license: LicenseSimple;
      pushed_at: string;
      size: number;
      ssh_url: string;
      stargazers_count: number;
      svn_url: string;
      topics: string[];
      watchers: number;
      watchers_count: number;
      created_at: string;
      updated_at: string;
    };
    sha: string;
    user: {
      avatar_url: string;
      events_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string;
      html_url: string;
      id: number;
      node_id: string;
      login: string;
      organizations_url: string;
      received_events_url: string;
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      subscriptions_url: string;
      type: string;
      url: string;
    };
  };
  _links: {
    comments: Link;
    commits: Link1;
    statuses: Link2;
    html: Link3;
    issue: Link4;
    review_comments: Link5;
    review_comment: Link6;
    self: Link7;
  };
  author_association: string;
  /**
   * Indicates whether or not the pull request is a draft.
   */
  draft: boolean;
  merged: boolean;
  mergeable: boolean;
  rebaseable: boolean;
  mergeable_state: string;
  merged_by: SimpleUser5;
  comments: number;
  review_comments: number;
  /**
   * Indicates whether maintainers can modify the pull request.
   */
  maintainer_can_modify: boolean;
  commits: number;
  additions: number;
  deletions: number;
  changed_files: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser1;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Hypermedia Link
 */
export interface Link {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link1 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link2 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link3 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link4 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link5 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link6 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link7 {
  href: string;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface PullsUpdateResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface PullsUpdateResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type PullsUpdateBranchEndpoint = {
  owner: string;

  repo: string;

  pull_number: number;
  /**
   * The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://developer.github.com/v3/repos/commits/#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.
   */
  expected_head_sha?: string;
} & RequiredPreview<"lydian">;

type PullsUpdateBranchRequestOptions = {
  method: "PUT";
  url: "/repos/:owner/:repo/pulls/:pull_number/update-branch";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface PullsUpdateBranchResponseData {
  message: string;
  url: string;
}

/**
 * Basic Error
 */
export interface PullsUpdateBranchResponse403Data {
  message: string;
  documentation_url: string;
}

export interface PullsUpdateBranchResponse415Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface PullsUpdateBranchResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type PullsUpdateReviewEndpoint = {
  owner: string;

  repo: string;

  pull_number: number;
  /**
   * review_id parameter
   */
  review_id: number;
  /**
   * The body text of the pull request review.
   */
  body: string;
};

type PullsUpdateReviewRequestOptions = {
  method: "PUT";
  url: "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Pull Request Reviews are reviews on pull requests.
 */
export interface PullsUpdateReviewResponseData {
  /**
   * Unique identifier of the review
   */
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The text of the review.
   */
  body: string;
  state: string;
  html_url: string;
  pull_request_url: string;
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  submitted_at: string;
  /**
   * A commit SHA for the review.
   */
  commit_id: string;
  body_html: string;
  body_text: string;
  author_association: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Validation Error Simple
 */
export interface PullsUpdateReviewResponse422Data {
  message: string;
  documentation_url: string;
  errors: string[];
}

type PullsUpdateReviewCommentEndpoint = {
  owner: string;

  repo: string;
  /**
   * comment_id parameter
   */
  comment_id: number;
  /**
   * The text of the reply to the review comment.
   */
  body: string;
};

type PullsUpdateReviewCommentRequestOptions = {
  method: "PATCH";
  url: "/repos/:owner/:repo/pulls/comments/:comment_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
 */
export interface PullsUpdateReviewCommentResponseData {
  /**
   * URL for the pull request review comment
   */
  url: string;
  /**
   * The ID of the pull request review to which the comment belongs.
   */
  pull_request_review_id: number;
  /**
   * The ID of the pull request review comment.
   */
  id: number;
  /**
   * The node ID of the pull request review comment.
   */
  node_id: string;
  /**
   * The diff of the line that the comment refers to.
   */
  diff_hunk: string;
  /**
   * The relative path of the file to which the comment applies.
   */
  path: string;
  /**
   * The line index in the diff to which the comment applies.
   */
  position: number;
  /**
   * The index of the original line in the diff to which the comment applies.
   */
  original_position: number;
  /**
   * The SHA of the commit to which the comment applies.
   */
  commit_id: string;
  /**
   * The SHA of the original commit to which the comment applies.
   */
  original_commit_id: string;
  /**
   * The comment ID to reply to.
   */
  in_reply_to_id: number;
  user: SimpleUser;
  /**
   * The text of the comment.
   */
  body: string;
  created_at: string;
  updated_at: string;
  /**
   * HTML URL for the pull request review comment.
   */
  html_url: string;
  /**
   * URL for the pull request that the review comment belongs to.
   */
  pull_request_url: string;
  /**
   * How the author of the comment is associated with the pull request.
   */
  author_association: string;
  _links: {
    self: {
      href: string;
    };
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  /**
   * The first line of the range for a multi-line comment.
   */
  start_line: number;
  /**
   * The first line of the range for a multi-line comment.
   */
  original_start_line: number;
  /**
   * The side of the first line of the range for a multi-line comment.
   */
  start_side: "LEFT" | "RIGHT";
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  line: number;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  original_line: number;
  /**
   * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
   */
  side: "LEFT" | "RIGHT";
  reactions: ReactionRollup;
  body_html: string;
  body_text: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type RateLimitGetEndpoint = {};

type RateLimitGetRequestOptions = {
  method: "GET";
  url: "/rate_limit";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Rate Limit Overview
 */
export interface RateLimitGetResponseData {
  resources: {
    core: RateLimit;
    graphql: RateLimit1;
    search: RateLimit2;
    source_import: RateLimit3;
    integration_manifest: RateLimit4;
    code_scanning_upload: RateLimit5;
  };
  rate: RateLimit6;
}
export interface RateLimit {
  limit: number;
  remaining: number;
  reset: number;
}
export interface RateLimit1 {
  limit: number;
  remaining: number;
  reset: number;
}
export interface RateLimit2 {
  limit: number;
  remaining: number;
  reset: number;
}
export interface RateLimit3 {
  limit: number;
  remaining: number;
  reset: number;
}
export interface RateLimit4 {
  limit: number;
  remaining: number;
  reset: number;
}
export interface RateLimit5 {
  limit: number;
  remaining: number;
  reset: number;
}
export interface RateLimit6 {
  limit: number;
  remaining: number;
  reset: number;
}

/**
 * Basic Error
 */
export interface RateLimitGetResponse404Data {
  message: string;
  documentation_url: string;
}

type ReactionsCreateForCommitCommentEndpoint = {
  owner: string;

  repo: string;
  /**
   * comment_id parameter
   */
  comment_id: number;
  /**
   * The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the commit comment.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
} & RequiredPreview<"squirrel-girl">;

type ReactionsCreateForCommitCommentRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/comments/:comment_id/reactions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export interface ReactionsCreateForCommitCommentResponseData {
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The reaction to use
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  created_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export interface ReactionsCreateForCommitCommentResponse201Data {
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The reaction to use
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  created_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

export interface ReactionsCreateForCommitCommentResponse415Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReactionsCreateForCommitCommentResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReactionsCreateForIssueEndpoint = {
  owner: string;

  repo: string;
  /**
   * issue_number parameter
   */
  issue_number: number;
  /**
   * The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the issue.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
} & RequiredPreview<"squirrel-girl">;

type ReactionsCreateForIssueRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/issues/:issue_number/reactions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export interface ReactionsCreateForIssueResponseData {
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The reaction to use
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  created_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

export interface ReactionsCreateForIssueResponse415Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReactionsCreateForIssueResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReactionsCreateForIssueCommentEndpoint = {
  owner: string;

  repo: string;
  /**
   * comment_id parameter
   */
  comment_id: number;
  /**
   * The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the issue comment.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
} & RequiredPreview<"squirrel-girl">;

type ReactionsCreateForIssueCommentRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/issues/comments/:comment_id/reactions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export interface ReactionsCreateForIssueCommentResponseData {
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The reaction to use
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  created_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export interface ReactionsCreateForIssueCommentResponse201Data {
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The reaction to use
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  created_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

export interface ReactionsCreateForIssueCommentResponse415Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReactionsCreateForIssueCommentResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReactionsCreateForPullRequestReviewCommentEndpoint = {
  owner: string;

  repo: string;
  /**
   * comment_id parameter
   */
  comment_id: number;
  /**
   * The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the pull request review comment.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
} & RequiredPreview<"squirrel-girl">;

type ReactionsCreateForPullRequestReviewCommentRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/pulls/comments/:comment_id/reactions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export interface ReactionsCreateForPullRequestReviewCommentResponseData {
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The reaction to use
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  created_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export interface ReactionsCreateForPullRequestReviewCommentResponse201Data {
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The reaction to use
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  created_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

export interface ReactionsCreateForPullRequestReviewCommentResponse415Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReactionsCreateForPullRequestReviewCommentResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReactionsCreateForTeamDiscussionCommentInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  discussion_number: number;

  comment_number: number;
  /**
   * The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion comment.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
} & RequiredPreview<"squirrel-girl">;

type ReactionsCreateForTeamDiscussionCommentInOrgRequestOptions = {
  method: "POST";
  url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export interface ReactionsCreateForTeamDiscussionCommentInOrgResponseData {
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The reaction to use
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  created_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReactionsCreateForTeamDiscussionCommentLegacyEndpoint = {
  team_id: number;

  discussion_number: number;

  comment_number: number;
  /**
   * The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion comment.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
} & RequiredPreview<"squirrel-girl">;

type ReactionsCreateForTeamDiscussionCommentLegacyRequestOptions = {
  method: "POST";
  url: "/teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export interface ReactionsCreateForTeamDiscussionCommentLegacyResponseData {
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The reaction to use
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  created_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReactionsCreateForTeamDiscussionInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  discussion_number: number;
  /**
   * The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
} & RequiredPreview<"squirrel-girl">;

type ReactionsCreateForTeamDiscussionInOrgRequestOptions = {
  method: "POST";
  url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export interface ReactionsCreateForTeamDiscussionInOrgResponseData {
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The reaction to use
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  created_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReactionsCreateForTeamDiscussionLegacyEndpoint = {
  team_id: number;

  discussion_number: number;
  /**
   * The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
} & RequiredPreview<"squirrel-girl">;

type ReactionsCreateForTeamDiscussionLegacyRequestOptions = {
  method: "POST";
  url: "/teams/:team_id/discussions/:discussion_number/reactions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export interface ReactionsCreateForTeamDiscussionLegacyResponseData {
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The reaction to use
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  created_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReactionsDeleteForCommitCommentEndpoint = {
  owner: string;

  repo: string;
  /**
   * comment_id parameter
   */
  comment_id: number;

  reaction_id: number;
} & RequiredPreview<"squirrel-girl">;

type ReactionsDeleteForCommitCommentRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/comments/:comment_id/reactions/:reaction_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ReactionsDeleteForIssueEndpoint = {
  owner: string;

  repo: string;
  /**
   * issue_number parameter
   */
  issue_number: number;

  reaction_id: number;
} & RequiredPreview<"squirrel-girl">;

type ReactionsDeleteForIssueRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/issues/:issue_number/reactions/:reaction_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ReactionsDeleteForIssueCommentEndpoint = {
  owner: string;

  repo: string;
  /**
   * comment_id parameter
   */
  comment_id: number;

  reaction_id: number;
} & RequiredPreview<"squirrel-girl">;

type ReactionsDeleteForIssueCommentRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/issues/comments/:comment_id/reactions/:reaction_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ReactionsDeleteForPullRequestCommentEndpoint = {
  owner: string;

  repo: string;
  /**
   * comment_id parameter
   */
  comment_id: number;

  reaction_id: number;
} & RequiredPreview<"squirrel-girl">;

type ReactionsDeleteForPullRequestCommentRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/pulls/comments/:comment_id/reactions/:reaction_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ReactionsDeleteForTeamDiscussionEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  discussion_number: number;

  reaction_id: number;
} & RequiredPreview<"squirrel-girl">;

type ReactionsDeleteForTeamDiscussionRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions/:reaction_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ReactionsDeleteForTeamDiscussionCommentEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  discussion_number: number;

  comment_number: number;

  reaction_id: number;
} & RequiredPreview<"squirrel-girl">;

type ReactionsDeleteForTeamDiscussionCommentRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ReactionsDeleteLegacyEndpoint = {
  reaction_id: number;
} & RequiredPreview<"squirrel-girl">;

type ReactionsDeleteLegacyRequestOptions = {
  method: "DELETE";
  url: "/reactions/:reaction_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ReactionsDeleteLegacyResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReactionsDeleteLegacyResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReactionsDeleteLegacyResponse410Data {
  message: string;
  documentation_url: string;
}

export interface ReactionsDeleteLegacyResponse415Data {
  message: string;
  documentation_url: string;
}

type ReactionsListForCommitCommentEndpoint = {
  owner: string;

  repo: string;
  /**
   * comment_id parameter
   */
  comment_id: number;
  /**
   * Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a commit comment.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"squirrel-girl">;

type ReactionsListForCommitCommentRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/comments/:comment_id/reactions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReactionsListForCommitCommentResponseData = Reaction[];

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export interface Reaction {
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The reaction to use
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  created_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReactionsListForCommitCommentResponse404Data {
  message: string;
  documentation_url: string;
}

export interface ReactionsListForCommitCommentResponse415Data {
  message: string;
  documentation_url: string;
}

type ReactionsListForIssueEndpoint = {
  owner: string;

  repo: string;
  /**
   * issue_number parameter
   */
  issue_number: number;
  /**
   * Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to an issue.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"squirrel-girl">;

type ReactionsListForIssueRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/issues/:issue_number/reactions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReactionsListForIssueResponseData = Reaction[];

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export interface Reaction {
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The reaction to use
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  created_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReactionsListForIssueResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReactionsListForIssueResponse410Data {
  message: string;
  documentation_url: string;
}

export interface ReactionsListForIssueResponse415Data {
  message: string;
  documentation_url: string;
}

type ReactionsListForIssueCommentEndpoint = {
  owner: string;

  repo: string;
  /**
   * comment_id parameter
   */
  comment_id: number;
  /**
   * Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to an issue comment.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"squirrel-girl">;

type ReactionsListForIssueCommentRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/issues/comments/:comment_id/reactions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReactionsListForIssueCommentResponseData = Reaction[];

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export interface Reaction {
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The reaction to use
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  created_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReactionsListForIssueCommentResponse404Data {
  message: string;
  documentation_url: string;
}

export interface ReactionsListForIssueCommentResponse415Data {
  message: string;
  documentation_url: string;
}

type ReactionsListForPullRequestReviewCommentEndpoint = {
  owner: string;

  repo: string;
  /**
   * comment_id parameter
   */
  comment_id: number;
  /**
   * Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a pull request review comment.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"squirrel-girl">;

type ReactionsListForPullRequestReviewCommentRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/pulls/comments/:comment_id/reactions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReactionsListForPullRequestReviewCommentResponseData = Reaction[];

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export interface Reaction {
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The reaction to use
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  created_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReactionsListForPullRequestReviewCommentResponse404Data {
  message: string;
  documentation_url: string;
}

export interface ReactionsListForPullRequestReviewCommentResponse415Data {
  message: string;
  documentation_url: string;
}

type ReactionsListForTeamDiscussionCommentInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  discussion_number: number;

  comment_number: number;
  /**
   * Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"squirrel-girl">;

type ReactionsListForTeamDiscussionCommentInOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReactionsListForTeamDiscussionCommentInOrgResponseData = Reaction[];

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export interface Reaction {
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The reaction to use
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  created_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReactionsListForTeamDiscussionCommentLegacyEndpoint = {
  team_id: number;

  discussion_number: number;

  comment_number: number;
  /**
   * Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"squirrel-girl">;

type ReactionsListForTeamDiscussionCommentLegacyRequestOptions = {
  method: "GET";
  url: "/teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReactionsListForTeamDiscussionCommentLegacyResponseData = Reaction[];

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export interface Reaction {
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The reaction to use
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  created_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReactionsListForTeamDiscussionInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  discussion_number: number;
  /**
   * Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"squirrel-girl">;

type ReactionsListForTeamDiscussionInOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReactionsListForTeamDiscussionInOrgResponseData = Reaction[];

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export interface Reaction {
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The reaction to use
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  created_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReactionsListForTeamDiscussionLegacyEndpoint = {
  team_id: number;

  discussion_number: number;
  /**
   * Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"squirrel-girl">;

type ReactionsListForTeamDiscussionLegacyRequestOptions = {
  method: "GET";
  url: "/teams/:team_id/discussions/:discussion_number/reactions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReactionsListForTeamDiscussionLegacyResponseData = Reaction[];

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export interface Reaction {
  id: number;
  node_id: string;
  user: SimpleUser;
  /**
   * The reaction to use
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  created_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReposAcceptInvitationEndpoint = {
  /**
   * invitation_id parameter
   */
  invitation_id: number;
};

type ReposAcceptInvitationRequestOptions = {
  method: "PATCH";
  url: "/user/repository_invitations/:invitation_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ReposAcceptInvitationResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposAcceptInvitationResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposAcceptInvitationResponse409Data {
  message: string;
  documentation_url: string;
}

type ReposAddAppAccessRestrictionsEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
  /**
   * apps parameter
   */
  apps: string[];
};

type ReposAddAppAccessRestrictionsRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposAddAppAccessRestrictionsResponseData = GitHubApp[];

/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug: string;
  node_id: string;
  owner: SimpleUser;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues: string;
    checks: string;
    metadata: string;
    contents: string;
    deployments: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count: number;
  client_id: string;
  client_secret: string;
  webhook_secret: string;
  pem: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Validation Error
 */
export interface ReposAddAppAccessRestrictionsResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposAddCollaboratorEndpoint = {
  owner: string;

  repo: string;

  username: string;
  /**
   * The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:
   * \* `pull` - can pull, but not push to or administer this repository.
   * \* `push` - can pull and push, but not administer this repository.
   * \* `admin` - can pull, push and administer this repository.
   * \* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
   * \* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.
   */
  permission?: "pull" | "push" | "admin" | "maintain" | "triage";

  permissions?: string;
};

type ReposAddCollaboratorRequestOptions = {
  method: "PUT";
  url: "/repos/:owner/:repo/collaborators/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Repository invitations let you manage who you collaborate with.
 */
export interface ReposAddCollaboratorResponseData {
  /**
   * Unique identifier of the repository invitation.
   */
  id: number;
  repository: MinimalRepository;
  invitee: SimpleUser1;
  inviter: SimpleUser2;
  /**
   * The permission associated with the invitation.
   */
  permissions: "read" | "write" | "admin";
  created_at: string;
  /**
   * URL for the repository invitation
   */
  url: string;
  html_url: string;
  node_id: string;
}
/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposAddCollaboratorResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReposAddCollaboratorResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposAddStatusCheckContextsEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
  /**
   * contexts parameter
   */
  contexts: string[];
};

type ReposAddStatusCheckContextsRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposAddStatusCheckContextsResponseData = string[];

/**
 * Basic Error
 */
export interface ReposAddStatusCheckContextsResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposAddStatusCheckContextsResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReposAddStatusCheckContextsResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposAddTeamAccessRestrictionsEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
  /**
   * teams parameter
   */
  teams: string[];
};

type ReposAddTeamAccessRestrictionsRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposAddTeamAccessRestrictionsResponseData = Team[];

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string;
  privacy: string;
  permission: string;
  url: string;
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}

/**
 * Validation Error
 */
export interface ReposAddTeamAccessRestrictionsResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposAddUserAccessRestrictionsEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
  /**
   * users parameter
   */
  users: string[];
};

type ReposAddUserAccessRestrictionsRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/users";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposAddUserAccessRestrictionsResponseData = SimpleUser[];

/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

/**
 * Validation Error
 */
export interface ReposAddUserAccessRestrictionsResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposCheckCollaboratorEndpoint = {
  owner: string;

  repo: string;

  username: string;
};

type ReposCheckCollaboratorRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/collaborators/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ReposCheckVulnerabilityAlertsEndpoint = {
  owner: string;

  repo: string;
} & RequiredPreview<"dorian">;

type ReposCheckVulnerabilityAlertsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/vulnerability-alerts";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ReposCompareCommitsEndpoint = {
  owner: string;

  repo: string;
  /**
   * base parameter
   */
  base: string;
  /**
   * head parameter
   */
  head: string;
};

type ReposCompareCommitsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/compare/:base...:head";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Commit Comparison
 */
export interface ReposCompareCommitsResponseData {
  url: string;
  html_url: string;
  permalink_url: string;
  diff_url: string;
  patch_url: string;
  base_commit: Commit;
  merge_base_commit: Commit1;
  status: "diverged" | "ahead" | "behind" | "identical";
  ahead_by: number;
  behind_by: number;
  total_commits: number;
  commits: Commit2[];
  files: DiffEntry[];
}
/**
 * Commit
 */
export interface Commit {
  url: string;
  sha: string;
  node_id: string;
  html_url: string;
  comments_url: string;
  commit: {
    url: string;
    author: GitUser;
    committer: GitUser1;
    message: string;
    comment_count: number;
    tree: {
      sha: string;
      url: string;
    };
    verification: Verification;
  };
  author: SimpleUser;
  committer: SimpleUser1;
  parents: {
    sha: string;
    url: string;
    html_url: string;
  }[];
  stats: {
    additions: number;
    deletions: number;
    total: number;
  };
  files: {
    filename: string;
    additions: number;
    deletions: number;
    changes: number;
    status: string;
    raw_url: string;
    blob_url: string;
    patch: string;
    sha: string;
    contents_url: string;
    previous_filename: string;
  }[];
}
/**
 * Metaproperties for Git author/committer information.
 */
export interface GitUser {
  name?: string;
  email?: string;
  date?: string;
  [k: string]: unknown;
}
/**
 * Metaproperties for Git author/committer information.
 */
export interface GitUser1 {
  name?: string;
  email?: string;
  date?: string;
  [k: string]: unknown;
}
export interface Verification {
  verified: boolean;
  reason: string;
  payload: string;
  signature: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Commit
 */
export interface Commit1 {
  url: string;
  sha: string;
  node_id: string;
  html_url: string;
  comments_url: string;
  commit: {
    url: string;
    author: GitUser2;
    committer: GitUser3;
    message: string;
    comment_count: number;
    tree: {
      sha: string;
      url: string;
    };
    verification: Verification1;
  };
  author: SimpleUser2;
  committer: SimpleUser3;
  parents: {
    sha: string;
    url: string;
    html_url: string;
  }[];
  stats: {
    additions: number;
    deletions: number;
    total: number;
  };
  files: {
    filename: string;
    additions: number;
    deletions: number;
    changes: number;
    status: string;
    raw_url: string;
    blob_url: string;
    patch: string;
    sha: string;
    contents_url: string;
    previous_filename: string;
  }[];
}
/**
 * Metaproperties for Git author/committer information.
 */
export interface GitUser2 {
  name?: string;
  email?: string;
  date?: string;
  [k: string]: unknown;
}
/**
 * Metaproperties for Git author/committer information.
 */
export interface GitUser3 {
  name?: string;
  email?: string;
  date?: string;
  [k: string]: unknown;
}
export interface Verification1 {
  verified: boolean;
  reason: string;
  payload: string;
  signature: string;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Commit
 */
export interface Commit2 {
  url: string;
  sha: string;
  node_id: string;
  html_url: string;
  comments_url: string;
  commit: {
    url: string;
    author: GitUser4;
    committer: GitUser5;
    message: string;
    comment_count: number;
    tree: {
      sha: string;
      url: string;
    };
    verification: Verification2;
  };
  author: SimpleUser4;
  committer: SimpleUser5;
  parents: {
    sha: string;
    url: string;
    html_url: string;
  }[];
  stats: {
    additions: number;
    deletions: number;
    total: number;
  };
  files: {
    filename: string;
    additions: number;
    deletions: number;
    changes: number;
    status: string;
    raw_url: string;
    blob_url: string;
    patch: string;
    sha: string;
    contents_url: string;
    previous_filename: string;
  }[];
}
/**
 * Metaproperties for Git author/committer information.
 */
export interface GitUser4 {
  name?: string;
  email?: string;
  date?: string;
  [k: string]: unknown;
}
/**
 * Metaproperties for Git author/committer information.
 */
export interface GitUser5 {
  name?: string;
  email?: string;
  date?: string;
  [k: string]: unknown;
}
export interface Verification2 {
  verified: boolean;
  reason: string;
  payload: string;
  signature: string;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Diff Entry
 */
export interface DiffEntry {
  sha: string;
  filename: string;
  status: string;
  additions: number;
  deletions: number;
  changes: number;
  blob_url: string;
  raw_url: string;
  contents_url: string;
  patch: string;
  previous_filename: string;
}

/**
 * Basic Error
 */
export interface ReposCompareCommitsResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposCompareCommitsResponse500Data {
  message: string;
  documentation_url: string;
}

type ReposCreateCommitCommentEndpoint = {
  owner: string;

  repo: string;
  /**
   * commit_sha+ parameter
   */
  commit_sha: string;
  /**
   * The contents of the comment.
   */
  body: string;
  /**
   * Relative path of the file to comment on.
   */
  path?: string;
  /**
   * Line index in the diff to comment on.
   */
  position?: number;
  /**
   * **Deprecated**. Use **position** parameter instead. Line number in the file to comment on.
   */
  line?: number;
};

type ReposCreateCommitCommentRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/commits/:commit_sha/comments";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Commit Comment
 */
export interface ReposCreateCommitCommentResponseData {
  html_url: string;
  url: string;
  id: number;
  node_id: string;
  body: string;
  path: string;
  position: number;
  line: number;
  commit_id: string;
  user: SimpleUser;
  created_at: string;
  updated_at: string;
  author_association: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

/**
 * Basic Error
 */
export interface ReposCreateCommitCommentResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReposCreateCommitCommentResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposCreateCommitSignatureProtectionEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
} & RequiredPreview<"zzzax">;

type ReposCreateCommitSignatureProtectionRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/branches/:branch/protection/required_signatures";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Protected Branch Admin Enforced
 */
export interface ReposCreateCommitSignatureProtectionResponseData {
  url: string;
  enabled: boolean;
}

/**
 * Basic Error
 */
export interface ReposCreateCommitSignatureProtectionResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposCreateCommitStatusEndpoint = {
  owner: string;

  repo: string;
  /**
   * sha parameter
   */
  sha: string;
  /**
   * The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.
   */
  state: "error" | "failure" | "pending" | "success";
  /**
   * The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
   * For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:
   * `http://ci.example.com/user/repo/build/sha`
   */
  target_url?: string;
  /**
   * A short description of the status.
   */
  description?: string;
  /**
   * A string label to differentiate this status from the status of other systems.
   */
  context?: string;
};

type ReposCreateCommitStatusRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/statuses/:sha";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * The status of a commit.
 */
export interface ReposCreateCommitStatusResponseData {
  url: string;
  avatar_url: string;
  id: number;
  node_id: string;
  state: string;
  description: string;
  target_url: string;
  context: string;
  created_at: string;
  updated_at: string;
  creator: SimpleUser;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

type ReposCreateDeployKeyEndpoint = {
  owner: string;

  repo: string;
  /**
   * A name for the key.
   */
  title?: string;
  /**
   * The contents of the key.
   */
  key: string;
  /**
   * If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.
   *
   * Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://help.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://help.github.com/articles/permission-levels-for-a-user-account-repository/)."
   */
  read_only?: boolean;
};

type ReposCreateDeployKeyRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/keys";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * An SSH key granting access to a single repository.
 */
export interface ReposCreateDeployKeyResponseData {
  id: number;
  key: string;
  url: string;
  title: string;
  verified: boolean;
  created_at: string;
  read_only: boolean;
}

/**
 * Validation Error
 */
export interface ReposCreateDeployKeyResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposCreateDeploymentEndpoint = {
  owner: string;

  repo: string;
  /**
   * The ref to deploy. This can be a branch, tag, or SHA.
   */
  ref: string;
  /**
   * Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
   */
  task?: string;
  /**
   * Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
   */
  auto_merge?: boolean;
  /**
   * The [status](https://developer.github.com/v3/repos/statuses/) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
   */
  required_contexts?: string[];
  /**
   * JSON payload with extra information about the deployment.
   */
  payload?: string;
  /**
   * Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
   */
  environment?: string;
  /**
   * Short description of the deployment.
   */
  description?: string | null;
  /**
   * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
   * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.
   */
  transient_environment?: boolean;
  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
   * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.
   */
  production_environment?: boolean;

  created_at?: string;
};

type ReposCreateDeploymentRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/deployments";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A request for a specific ref(branch,sha,tag) to be deployed
 */
export interface ReposCreateDeploymentResponseData {
  url: string;
  /**
   * Unique identifier of the deployment
   */
  id: number;
  node_id: string;
  sha: string;
  /**
   * The ref to deploy. This can be a branch, tag, or sha.
   */
  ref: string;
  /**
   * Parameter to specify a task to execute
   */
  task: string;
  payload: {};
  original_environment: string;
  /**
   * Name for the target deployment environment.
   */
  environment: string;
  description: string;
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  statuses_url: string;
  repository_url: string;
  /**
   * Specifies if the given environment is will no longer exist at some point in hte future. Default: false.
   */
  transient_environment: boolean;
  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   */
  production_environment: boolean;
  performed_via_github_app: GitHubApp;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser1;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

export interface ReposCreateDeploymentResponse202Data {
  message: string;
}

export interface ReposCreateDeploymentResponse409Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReposCreateDeploymentResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposCreateDeploymentStatusEndpoint = {
  owner: string;

  repo: string;
  /**
   * deployment_id parameter
   */
  deployment_id: number;
  /**
   * The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued` `pending`, or `success`. **Note:** To use the `inactive` state, you must provide the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. To use the `in_progress` and `queued` states, you must provide the [`application/vnd.github.flash-preview+json`](https://developer.github.com/v3/previews/#deployment-statuses) custom media type. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
   */
  state:
    | "error"
    | "failure"
    | "inactive"
    | "in_progress"
    | "queued"
    | "pending"
    | "success";
  /**
   * The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.
   */
  target_url?: string;
  /**
   * The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
   * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.
   */
  log_url?: string;
  /**
   * A short description of the status. The maximum description length is 140 characters.
   */
  description?: string;
  /**
   * Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. **Note:** This parameter requires you to use the [`application/vnd.github.flash-preview+json`](https://developer.github.com/v3/previews/#deployment-statuses) custom media type.
   */
  environment?: "production" | "staging" | "qa";
  /**
   * Sets the URL for accessing your environment. Default: `""`
   * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.
   */
  environment_url?: string;
  /**
   * Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
   * **Note:** To add an `inactive` status to `production` environments, you must use the [`application/vnd.github.flash-preview+json`](https://developer.github.com/v3/previews/#deployment-statuses) custom media type.
   * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.
   */
  auto_inactive?: boolean;
};

type ReposCreateDeploymentStatusRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/deployments/:deployment_id/statuses";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * The status of a deployment.
 */
export interface ReposCreateDeploymentStatusResponseData {
  url: string;
  id: number;
  node_id: string;
  /**
   * The state of the status.
   */
  state:
    | "error"
    | "failure"
    | "inactive"
    | "pending"
    | "success"
    | "queued"
    | "in_progress";
  creator: SimpleUser;
  /**
   * A short description of the status.
   */
  description: string;
  /**
   * The environment of the deployment that the status is for.
   */
  environment: string;
  /**
   * Deprecated: the URL to associate with this status.
   */
  target_url: string;
  created_at: string;
  updated_at: string;
  deployment_url: string;
  repository_url: string;
  /**
   * The URL for accessing your environment.
   */
  environment_url: string;
  /**
   * The URL to associate with this status.
   */
  log_url: string;
  performed_via_github_app: GitHubApp;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser1;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Validation Error
 */
export interface ReposCreateDeploymentStatusResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposCreateDispatchEventEndpoint = {
  owner: string;

  repo: string;
  /**
   * **Required:** A custom webhook event name.
   */
  event_type?: string;
  /**
   * JSON payload with extra information about the webhook event that your action or worklow may use.
   */
  client_payload?: ReposCreateDispatchEventParamsClientPayload;
};

type ReposCreateDispatchEventRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/dispatches";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Validation Error
 */
export interface ReposCreateDispatchEventResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposCreateForAuthenticatedUserEndpoint = {
  /**
   * The name of the repository.
   */
  name: string;
  /**
   * A short description of the repository.
   */
  description?: string;
  /**
   * A URL with more information about the repository.
   */
  homepage?: string;
  /**
   * Whether the repository is private or public.
   */
  private?: boolean;
  /**
   * Whether issues are enabled.
   */
  has_issues?: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects?: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki?: boolean;
  /**
   * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
   */
  team_id?: number;
  /**
   * Whether the repository is initialized with a minimal README.
   */
  auto_init?: boolean;
  /**
   * The desired language or platform to apply to the .gitignore.
   */
  gitignore_template?: string;
  /**
   * The license keyword of the open source license for this repository.
   */
  license_template?: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge?: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit?: boolean;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge?: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads?: boolean;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template?: boolean;
};

type ReposCreateForAuthenticatedUserRequestOptions = {
  method: "POST";
  url: "/user/repos";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A git repository
 */
export interface ReposCreateForAuthenticatedUserResponseData {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposCreateForAuthenticatedUserResponse400Data {
  message: string;
  documentation_url: string;
}

/**
 * Scim Error
 */
export interface ReposCreateForAuthenticatedUserResponse400Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Basic Error
 */
export interface ReposCreateForAuthenticatedUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposCreateForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposCreateForAuthenticatedUserResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReposCreateForAuthenticatedUserResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposCreateForkEndpoint = {
  owner: string;

  repo: string;
  /**
   * Optional parameter to specify the organization name if forking into an organization.
   */
  organization?: string;
};

type ReposCreateForkRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/forks";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A git repository
 */
export interface ReposCreateForkResponseData {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposCreateForkResponse400Data {
  message: string;
  documentation_url: string;
}

/**
 * Scim Error
 */
export interface ReposCreateForkResponse400Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Basic Error
 */
export interface ReposCreateForkResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposCreateForkResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReposCreateForkResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposCreateInOrgEndpoint = {
  org: string;
  /**
   * The name of the repository.
   */
  name: string;
  /**
   * A short description of the repository.
   */
  description?: string;
  /**
   * A URL with more information about the repository.
   */
  homepage?: string;
  /**
   * Either `true` to create a private repository or `false` to create a public one.
   */
  private?: boolean;
  /**
   * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. For more information, see "[Creating an internal repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.
   * The `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.
   */
  visibility?: "public" | "private" | "visibility" | "internal";
  /**
   * Either `true` to enable issues for this repository or `false` to disable them.
   */
  has_issues?: boolean;
  /**
   * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
   */
  has_projects?: boolean;
  /**
   * Either `true` to enable the wiki for this repository or `false` to disable it.
   */
  has_wiki?: boolean;
  /**
   * Either `true` to make this repo available as a template repository or `false` to prevent it.
   */
  is_template?: boolean;
  /**
   * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
   */
  team_id?: number;
  /**
   * Pass `true` to create an initial commit with empty README.
   */
  auto_init?: boolean;
  /**
   * Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".
   */
  gitignore_template?: string;
  /**
   * Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".
   */
  license_template?: string;
  /**
   * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
   */
  allow_squash_merge?: boolean;
  /**
   * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
   */
  allow_merge_commit?: boolean;
  /**
   * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
   */
  allow_rebase_merge?: boolean;
  /**
   * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
   */
  delete_branch_on_merge?: boolean;
};

type ReposCreateInOrgRequestOptions = {
  method: "POST";
  url: "/orgs/:org/repos";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A git repository
 */
export interface ReposCreateInOrgResponseData {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposCreateInOrgResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReposCreateInOrgResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposCreateOrUpdateFileContentsEndpoint = {
  owner: string;

  repo: string;
  /**
   * path+ parameter
   */
  path: string;
  /**
   * The commit message.
   */
  message: string;
  /**
   * The new file content, using Base64 encoding.
   */
  content: string;
  /**
   * **Required if you are updating a file**. The blob SHA of the file being replaced.
   */
  sha?: string;
  /**
   * The branch name. Default: the repository’s default branch (usually `master`)
   */
  branch?: string;
  /**
   * The person that committed the file. Default: the authenticated user.
   */
  committer?: ReposCreateOrUpdateFileContentsParamsCommitter;
  /**
   * The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
   */
  author?: ReposCreateOrUpdateFileContentsParamsAuthor;
};

type ReposCreateOrUpdateFileContentsRequestOptions = {
  method: "PUT";
  url: "/repos/:owner/:repo/contents/:path";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * File Commit
 */
export interface ReposCreateOrUpdateFileContentsResponseData {
  content: {
    name: string;
    path: string;
    sha: string;
    size: number;
    url: string;
    html_url: string;
    git_url: string;
    download_url: string;
    type: string;
    _links: {
      self: string;
      git: string;
      html: string;
    };
  };
  commit: {
    sha: string;
    node_id: string;
    url: string;
    html_url: string;
    author: {
      date: string;
      name: string;
      email: string;
    };
    committer: {
      date: string;
      name: string;
      email: string;
    };
    message: string;
    tree: {
      url: string;
      sha: string;
    };
    parents: {
      url: string;
      html_url: string;
      sha: string;
    }[];
    verification: {
      verified: boolean;
      reason: string;
      signature: string;
      payload: string;
    };
  };
}

/**
 * File Commit
 */
export interface ReposCreateOrUpdateFileContentsResponse201Data {
  content: {
    name: string;
    path: string;
    sha: string;
    size: number;
    url: string;
    html_url: string;
    git_url: string;
    download_url: string;
    type: string;
    _links: {
      self: string;
      git: string;
      html: string;
    };
  };
  commit: {
    sha: string;
    node_id: string;
    url: string;
    html_url: string;
    author: {
      date: string;
      name: string;
      email: string;
    };
    committer: {
      date: string;
      name: string;
      email: string;
    };
    message: string;
    tree: {
      url: string;
      sha: string;
    };
    parents: {
      url: string;
      html_url: string;
      sha: string;
    }[];
    verification: {
      verified: boolean;
      reason: string;
      signature: string;
      payload: string;
    };
  };
}

/**
 * Basic Error
 */
export interface ReposCreateOrUpdateFileContentsResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposCreateOrUpdateFileContentsResponse409Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReposCreateOrUpdateFileContentsResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposCreatePagesSiteEndpoint = {
  owner: string;

  repo: string;

  source: ReposCreatePagesSiteParamsSource;
} & RequiredPreview<"switcheroo">;

type ReposCreatePagesSiteRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/pages";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * The configuration for GitHub Pages for a repository.
 */
export interface ReposCreatePagesSiteResponseData {
  /**
   * The API address for accessing this Page resource.
   */
  url: string;
  /**
   * The status of the most recent build of the Page.
   */
  status: "built" | "building" | "errored";
  /**
   * The Pages site's custom domain
   */
  cname: string;
  /**
   * Whether the Page has a custom 404 page.
   */
  custom_404: boolean;
  /**
   * The web address the Page can be accessed from.
   */
  html_url: string;
  source: PagesSourceHash;
}
export interface PagesSourceHash {
  branch: string;
  path: string;
}

/**
 * Basic Error
 */
export interface ReposCreatePagesSiteResponse409Data {
  message: string;
  documentation_url: string;
}

export interface ReposCreatePagesSiteResponse415Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReposCreatePagesSiteResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposCreateReleaseEndpoint = {
  owner: string;

  repo: string;
  /**
   * The name of the tag.
   */
  tag_name: string;
  /**
   * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
   */
  target_commitish?: string;
  /**
   * The name of the release.
   */
  name?: string;
  /**
   * Text describing the contents of the tag.
   */
  body?: string;
  /**
   * `true` to create a draft (unpublished) release, `false` to create a published one.
   */
  draft?: boolean;
  /**
   * `true` to identify the release as a prerelease. `false` to identify the release as a full release.
   */
  prerelease?: boolean;
};

type ReposCreateReleaseRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/releases";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A release.
 */
export interface ReposCreateReleaseResponseData {
  url: string;
  html_url: string;
  assets_url: string;
  upload_url: string;
  tarball_url: string;
  zipball_url: string;
  id: number;
  node_id: string;
  /**
   * The name of the tag.
   */
  tag_name: string;
  /**
   * Specifies the commitish value that determines where the Git tag is created from.
   */
  target_commitish: string;
  name: string;
  body: string;
  /**
   * true to create a draft (unpublished) release, false to create a published one.
   */
  draft: boolean;
  /**
   * Whether to identify the release as a prerelease or a full release.
   */
  prerelease: boolean;
  created_at: string;
  published_at: string;
  author: SimpleUser;
  assets: ReleaseAsset[];
  body_html: string;
  body_text: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Data related to a release.
 */
export interface ReleaseAsset {
  url: string;
  browser_download_url: string;
  id: number;
  node_id: string;
  /**
   * The file name of the asset.
   */
  name: string;
  label: string;
  /**
   * State of the release asset.
   */
  state: "uploaded";
  content_type: string;
  size: number;
  download_count: number;
  created_at: string;
  updated_at: string;
  uploader: SimpleUser1;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Validation Error
 */
export interface ReposCreateReleaseResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposCreateUsingTemplateEndpoint = {
  /**
   * template_owner parameter
   */
  template_owner: string;
  /**
   * template_repo parameter
   */
  template_repo: string;
  /**
   * The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.
   */
  owner?: string;
  /**
   * The name of the new repository.
   */
  name: string;
  /**
   * A short description of the new repository.
   */
  description?: string;
  /**
   * Either `true` to create a new private repository or `false` to create a new public one.
   */
  private?: boolean;
} & RequiredPreview<"baptiste">;

type ReposCreateUsingTemplateRequestOptions = {
  method: "POST";
  url: "/repos/:template_owner/:template_repo/generate";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A git repository
 */
export interface ReposCreateUsingTemplateResponseData {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReposCreateWebhookEndpoint = {
  owner: string;

  repo: string;
  /**
   * Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.
   */
  name?: string;
  /**
   * Key/value pairs to provide settings for this webhook. [These are defined below](https://developer.github.com/v3/repos/hooks/#create-hook-config-params).
   */
  config: ReposCreateWebhookParamsConfig;
  /**
   * Determines what [events](https://developer.github.com/webhooks/event-payloads) the hook is triggered for.
   */
  events?: string[];
  /**
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   */
  active?: boolean;
};

type ReposCreateWebhookRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/hooks";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Webhooks for repositories.
 */
export interface ReposCreateWebhookResponseData {
  type: string;
  /**
   * Unique identifier of the webhook.
   */
  id: number;
  /**
   * The name of a valid service, use 'web' for a webhook.
   */
  name: string;
  /**
   * Determines whether the hook is actually triggered on pushes.
   */
  active: boolean;
  /**
   * Determines what events the hook is triggered for. Default: ['push'].
   */
  events: string[];
  config: {
    email: string;
    password: string;
    room: string;
    subdomain: string;
    url: string;
    insecure_ssl: string;
    content_type: string;
    digest: string;
    secret: string;
    token: string;
  };
  updated_at: string;
  created_at: string;
  url: string;
  test_url: string;
  ping_url: string;
  last_response: HookResponse;
}
export interface HookResponse {
  code: number;
  status: string;
  message: string;
}

/**
 * Basic Error
 */
export interface ReposCreateWebhookResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposCreateWebhookResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReposCreateWebhookResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposDeclineInvitationEndpoint = {
  /**
   * invitation_id parameter
   */
  invitation_id: number;
};

type ReposDeclineInvitationRequestOptions = {
  method: "DELETE";
  url: "/user/repository_invitations/:invitation_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ReposDeclineInvitationResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposDeclineInvitationResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposDeclineInvitationResponse409Data {
  message: string;
  documentation_url: string;
}

type ReposDeleteEndpoint = {
  owner: string;

  repo: string;
};

type ReposDeleteRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ReposDeleteResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposDeleteResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposDeleteAccessRestrictionsEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
};

type ReposDeleteAccessRestrictionsRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/branches/:branch/protection/restrictions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ReposDeleteAdminBranchProtectionEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
};

type ReposDeleteAdminBranchProtectionRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/branches/:branch/protection/enforce_admins";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ReposDeleteAdminBranchProtectionResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposDeleteBranchProtectionEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
};

type ReposDeleteBranchProtectionRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/branches/:branch/protection";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ReposDeleteBranchProtectionResponse403Data {
  message: string;
  documentation_url: string;
}

type ReposDeleteCommitCommentEndpoint = {
  owner: string;

  repo: string;
  /**
   * comment_id parameter
   */
  comment_id: number;
};

type ReposDeleteCommitCommentRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/comments/:comment_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ReposDeleteCommitCommentResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposDeleteCommitSignatureProtectionEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
} & RequiredPreview<"zzzax">;

type ReposDeleteCommitSignatureProtectionRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/branches/:branch/protection/required_signatures";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ReposDeleteCommitSignatureProtectionResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposDeleteDeployKeyEndpoint = {
  owner: string;

  repo: string;
  /**
   * key_id parameter
   */
  key_id: number;
};

type ReposDeleteDeployKeyRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/keys/:key_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ReposDeleteDeploymentEndpoint = {
  owner: string;

  repo: string;
  /**
   * deployment_id parameter
   */
  deployment_id: number;
};

type ReposDeleteDeploymentRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/deployments/:deployment_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ReposDeleteDeploymentResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error Simple
 */
export interface ReposDeleteDeploymentResponse422Data {
  message: string;
  documentation_url: string;
  errors: string[];
}

type ReposDeleteFileEndpoint = {
  owner: string;

  repo: string;
  /**
   * path+ parameter
   */
  path: string;
  /**
   * The commit message.
   */
  message: string;
  /**
   * The blob SHA of the file being replaced.
   */
  sha: string;
  /**
   * The branch name. Default: the repository’s default branch (usually `master`)
   */
  branch?: string;
  /**
   * object containing information about the committer.
   */
  committer?: ReposDeleteFileParamsCommitter;
  /**
   * object containing information about the author.
   */
  author?: ReposDeleteFileParamsAuthor;
};

type ReposDeleteFileRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/contents/:path";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * File Commit
 */
export interface ReposDeleteFileResponseData {
  content: {
    name: string;
    path: string;
    sha: string;
    size: number;
    url: string;
    html_url: string;
    git_url: string;
    download_url: string;
    type: string;
    _links: {
      self: string;
      git: string;
      html: string;
    };
  };
  commit: {
    sha: string;
    node_id: string;
    url: string;
    html_url: string;
    author: {
      date: string;
      name: string;
      email: string;
    };
    committer: {
      date: string;
      name: string;
      email: string;
    };
    message: string;
    tree: {
      url: string;
      sha: string;
    };
    parents: {
      url: string;
      html_url: string;
      sha: string;
    }[];
    verification: {
      verified: boolean;
      reason: string;
      signature: string;
      payload: string;
    };
  };
}

/**
 * Basic Error
 */
export interface ReposDeleteFileResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposDeleteFileResponse409Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReposDeleteFileResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

export interface ReposDeleteFileResponse503Data {
  code: string;
  message: string;
  documentation_url: string;
}

type ReposDeleteInvitationEndpoint = {
  owner: string;

  repo: string;
  /**
   * invitation_id parameter
   */
  invitation_id: number;
};

type ReposDeleteInvitationRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/invitations/:invitation_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ReposDeletePagesSiteEndpoint = {
  owner: string;

  repo: string;
} & RequiredPreview<"switcheroo">;

type ReposDeletePagesSiteRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/pages";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ReposDeletePagesSiteResponse404Data {
  message: string;
  documentation_url: string;
}

export interface ReposDeletePagesSiteResponse415Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReposDeletePagesSiteResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposDeletePullRequestReviewProtectionEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
};

type ReposDeletePullRequestReviewProtectionRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ReposDeletePullRequestReviewProtectionResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposDeleteReleaseEndpoint = {
  owner: string;

  repo: string;
  /**
   * release_id parameter
   */
  release_id: number;
};

type ReposDeleteReleaseRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/releases/:release_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ReposDeleteReleaseAssetEndpoint = {
  owner: string;

  repo: string;
  /**
   * asset_id parameter
   */
  asset_id: number;
};

type ReposDeleteReleaseAssetRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/releases/assets/:asset_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ReposDeleteWebhookEndpoint = {
  owner: string;

  repo: string;

  hook_id: number;
};

type ReposDeleteWebhookRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/hooks/:hook_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ReposDeleteWebhookResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposDisableAutomatedSecurityFixesEndpoint = {
  owner: string;

  repo: string;
} & RequiredPreview<"london">;

type ReposDisableAutomatedSecurityFixesRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/automated-security-fixes";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ReposDisableVulnerabilityAlertsEndpoint = {
  owner: string;

  repo: string;
} & RequiredPreview<"dorian">;

type ReposDisableVulnerabilityAlertsRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/vulnerability-alerts";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ReposDownloadTarballArchiveEndpoint = {
  owner: string;

  repo: string;
  /**
   * ref parameter
   */
  ref: string;
};

type ReposDownloadTarballArchiveRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/tarball/:ref";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ReposDownloadZipballArchiveEndpoint = {
  owner: string;

  repo: string;
  /**
   * ref parameter
   */
  ref: string;
};

type ReposDownloadZipballArchiveRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/zipball/:ref";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ReposEnableAutomatedSecurityFixesEndpoint = {
  owner: string;

  repo: string;
} & RequiredPreview<"london">;

type ReposEnableAutomatedSecurityFixesRequestOptions = {
  method: "PUT";
  url: "/repos/:owner/:repo/automated-security-fixes";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ReposEnableVulnerabilityAlertsEndpoint = {
  owner: string;

  repo: string;
} & RequiredPreview<"dorian">;

type ReposEnableVulnerabilityAlertsRequestOptions = {
  method: "PUT";
  url: "/repos/:owner/:repo/vulnerability-alerts";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ReposGetEndpoint = {
  owner: string;

  repo: string;
};

type ReposGetRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Full Repository
 */
export interface ReposGetResponseData {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  allow_rebase_merge: boolean;
  template_repository: Repository;
  temp_clone_token: string;
  allow_squash_merge: boolean;
  delete_branch_on_merge: boolean;
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  license: LicenseSimple1;
  organization: SimpleUser2;
  parent: Repository1;
  source: Repository2;
  forks: number;
  master_branch: string;
  open_issues: number;
  watchers: number;
  /**
   * Whether anonymous git access is allowed.
   */
  anonymous_access_enabled: boolean;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
    [k: string]: unknown;
  };
  owner: SimpleUser1;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template?: boolean;
  topics?: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge?: boolean;
  template_repository?: {
    id?: number;
    node_id?: string;
    name?: string;
    full_name?: string;
    owner?: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type?: string;
      site_admin?: boolean;
      [k: string]: unknown;
    };
    private?: boolean;
    html_url?: string;
    description?: string;
    fork?: boolean;
    url?: string;
    archive_url?: string;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    collaborators_url?: string;
    comments_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    deployments_url?: string;
    downloads_url?: string;
    events_url?: string;
    forks_url?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    languages_url?: string;
    merges_url?: string;
    milestones_url?: string;
    notifications_url?: string;
    pulls_url?: string;
    releases_url?: string;
    ssh_url?: string;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_url?: string;
    subscription_url?: string;
    tags_url?: string;
    teams_url?: string;
    trees_url?: string;
    clone_url?: string;
    mirror_url?: string;
    hooks_url?: string;
    svn_url?: string;
    homepage?: string;
    language?: string;
    forks_count?: number;
    stargazers_count?: number;
    watchers_count?: number;
    size?: number;
    default_branch?: string;
    open_issues_count?: number;
    is_template?: boolean;
    topics?: string[];
    has_issues?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    has_pages?: boolean;
    has_downloads?: boolean;
    archived?: boolean;
    disabled?: boolean;
    visibility?: string;
    pushed_at?: string;
    created_at?: string;
    updated_at?: string;
    permissions?: {
      admin?: boolean;
      push?: boolean;
      pull?: boolean;
      [k: string]: unknown;
    };
    allow_rebase_merge?: boolean;
    template_repository?: string;
    temp_clone_token?: string;
    allow_squash_merge?: boolean;
    delete_branch_on_merge?: boolean;
    allow_merge_commit?: boolean;
    subscribers_count?: number;
    network_count?: number;
    [k: string]: unknown;
  };
  temp_clone_token?: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge?: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit?: boolean;
  subscribers_count?: number;
  network_count?: number;
  open_issues: number;
  watchers: number;
  master_branch?: string;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * License Simple
 */
export interface LicenseSimple1 {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository1 {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple2;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser3;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple2 {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository2 {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple3;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser4;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple3 {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposGetResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposGetResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposGetAccessRestrictionsEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
};

type ReposGetAccessRestrictionsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/branches/:branch/protection/restrictions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Branch Restriction Policy
 */
export interface ReposGetAccessRestrictionsResponseData {
  url: string;
  users_url: string;
  teams_url: string;
  apps_url: string;
  users: {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  }[];
  teams: {
    id: number;
    node_id: string;
    url: string;
    html_url: string;
    name: string;
    slug: string;
    description: string;
    privacy: string;
    permission: string;
    members_url: string;
    repositories_url: string;
    parent: string;
  }[];
  apps: {
    id: number;
    slug: string;
    node_id: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      url: string;
      repos_url: string;
      events_url: string;
      hooks_url: string;
      issues_url: string;
      members_url: string;
      public_members_url: string;
      avatar_url: string;
      description: string;
      gravatar_id: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      received_events_url: string;
      type: string;
    };
    name: string;
    description: string;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    permissions: {
      metadata: string;
      contents: string;
      issues: string;
      single_file: string;
    };
    events: string[];
  }[];
}

/**
 * Basic Error
 */
export interface ReposGetAccessRestrictionsResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposGetAdminBranchProtectionEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
};

type ReposGetAdminBranchProtectionRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/branches/:branch/protection/enforce_admins";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Protected Branch Admin Enforced
 */
export interface ReposGetAdminBranchProtectionResponseData {
  url: string;
  enabled: boolean;
}

type ReposGetAllStatusCheckContextsEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
};

type ReposGetAllStatusCheckContextsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposGetAllStatusCheckContextsResponseData = string[];

/**
 * Basic Error
 */
export interface ReposGetAllStatusCheckContextsResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposGetAllTopicsEndpoint = {
  owner: string;

  repo: string;
} & RequiredPreview<"mercy">;

type ReposGetAllTopicsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/topics";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A topic aggregates entities that are related to a subject.
 */
export interface ReposGetAllTopicsResponseData {
  names: string[];
}

/**
 * Basic Error
 */
export interface ReposGetAllTopicsResponse404Data {
  message: string;
  documentation_url: string;
}

export interface ReposGetAllTopicsResponse415Data {
  message: string;
  documentation_url: string;
}

type ReposGetAppsWithAccessToProtectedBranchEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
};

type ReposGetAppsWithAccessToProtectedBranchRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposGetAppsWithAccessToProtectedBranchResponseData = GitHubApp[];

/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug: string;
  node_id: string;
  owner: SimpleUser;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues: string;
    checks: string;
    metadata: string;
    contents: string;
    deployments: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count: number;
  client_id: string;
  client_secret: string;
  webhook_secret: string;
  pem: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposGetAppsWithAccessToProtectedBranchResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposGetBranchEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
};

type ReposGetBranchRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/branches/:branch";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Branch With Protection
 */
export interface ReposGetBranchResponseData {
  name: string;
  commit: Commit;
  _links: {
    html: string;
    self: string;
  };
  protected: boolean;
  protection: BranchProtection;
  protection_url: string;
  pattern: string;
  required_approving_review_count: number;
}
/**
 * Commit
 */
export interface Commit {
  url: string;
  sha: string;
  node_id: string;
  html_url: string;
  comments_url: string;
  commit: {
    url: string;
    author: GitUser;
    committer: GitUser1;
    message: string;
    comment_count: number;
    tree: {
      sha: string;
      url: string;
    };
    verification: Verification;
  };
  author: SimpleUser;
  committer: SimpleUser1;
  parents: {
    sha: string;
    url: string;
    html_url: string;
  }[];
  stats: {
    additions: number;
    deletions: number;
    total: number;
  };
  files: {
    filename: string;
    additions: number;
    deletions: number;
    changes: number;
    status: string;
    raw_url: string;
    blob_url: string;
    patch: string;
    sha: string;
    contents_url: string;
    previous_filename: string;
  }[];
}
/**
 * Metaproperties for Git author/committer information.
 */
export interface GitUser {
  name?: string;
  email?: string;
  date?: string;
  [k: string]: unknown;
}
/**
 * Metaproperties for Git author/committer information.
 */
export interface GitUser1 {
  name?: string;
  email?: string;
  date?: string;
  [k: string]: unknown;
}
export interface Verification {
  verified: boolean;
  reason: string;
  payload: string;
  signature: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Branch Protection
 */
export interface BranchProtection {
  url: string;
  required_status_checks: {
    url: string;
    enforcement_level: string;
    contexts: string[];
    contexts_url: string;
  };
  enforce_admins: ProtectedBranchAdminEnforced;
  required_pull_request_reviews: ProtectedBranchPullRequestReview;
  restrictions: BranchRestrictionPolicy;
  required_linear_history: {
    enabled: boolean;
  };
  allow_force_pushes: {
    enabled: boolean;
  };
  allow_deletions: {
    enabled: boolean;
  };
  enabled: boolean;
  name: string;
  protection_url: string;
}
/**
 * Protected Branch Admin Enforced
 */
export interface ProtectedBranchAdminEnforced {
  url: string;
  enabled: boolean;
}
/**
 * Protected Branch Pull Request Review
 */
export interface ProtectedBranchPullRequestReview {
  url: string;
  dismissal_restrictions: {
    /**
     * The list of users with review dismissal access.
     */
    users: SimpleUser2[];
    /**
     * The list of teams with review dismissal access.
     */
    teams: Team[];
    url: string;
    users_url: string;
    teams_url: string;
  };
  dismiss_stale_reviews: boolean;
  require_code_owner_reviews: boolean;
  required_approving_review_count: number;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string;
  privacy: string;
  permission: string;
  url: string;
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}
/**
 * Branch Restriction Policy
 */
export interface BranchRestrictionPolicy {
  url: string;
  users_url: string;
  teams_url: string;
  apps_url: string;
  users: {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  }[];
  teams: {
    id: number;
    node_id: string;
    url: string;
    html_url: string;
    name: string;
    slug: string;
    description: string;
    privacy: string;
    permission: string;
    members_url: string;
    repositories_url: string;
    parent: string;
  }[];
  apps: {
    id: number;
    slug: string;
    node_id: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      url: string;
      repos_url: string;
      events_url: string;
      hooks_url: string;
      issues_url: string;
      members_url: string;
      public_members_url: string;
      avatar_url: string;
      description: string;
      gravatar_id: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      received_events_url: string;
      type: string;
    };
    name: string;
    description: string;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    permissions: {
      metadata: string;
      contents: string;
      issues: string;
      single_file: string;
    };
    events: string[];
  }[];
}

/**
 * Basic Error
 */
export interface ReposGetBranchResponse404Data {
  message: string;
  documentation_url: string;
}

export interface ReposGetBranchResponse415Data {
  message: string;
  documentation_url: string;
}

type ReposGetBranchProtectionEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
};

type ReposGetBranchProtectionRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/branches/:branch/protection";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Branch Protection
 */
export interface ReposGetBranchProtectionResponseData {
  url: string;
  required_status_checks: {
    url: string;
    enforcement_level: string;
    contexts: string[];
    contexts_url: string;
  };
  enforce_admins: ProtectedBranchAdminEnforced;
  required_pull_request_reviews: ProtectedBranchPullRequestReview;
  restrictions: BranchRestrictionPolicy;
  required_linear_history: {
    enabled: boolean;
  };
  allow_force_pushes: {
    enabled: boolean;
  };
  allow_deletions: {
    enabled: boolean;
  };
  enabled: boolean;
  name: string;
  protection_url: string;
}
/**
 * Protected Branch Admin Enforced
 */
export interface ProtectedBranchAdminEnforced {
  url: string;
  enabled: boolean;
}
/**
 * Protected Branch Pull Request Review
 */
export interface ProtectedBranchPullRequestReview {
  url: string;
  dismissal_restrictions: {
    /**
     * The list of users with review dismissal access.
     */
    users: SimpleUser[];
    /**
     * The list of teams with review dismissal access.
     */
    teams: Team[];
    url: string;
    users_url: string;
    teams_url: string;
  };
  dismiss_stale_reviews: boolean;
  require_code_owner_reviews: boolean;
  required_approving_review_count: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string;
  privacy: string;
  permission: string;
  url: string;
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}
/**
 * Branch Restriction Policy
 */
export interface BranchRestrictionPolicy {
  url: string;
  users_url: string;
  teams_url: string;
  apps_url: string;
  users: {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  }[];
  teams: {
    id: number;
    node_id: string;
    url: string;
    html_url: string;
    name: string;
    slug: string;
    description: string;
    privacy: string;
    permission: string;
    members_url: string;
    repositories_url: string;
    parent: string;
  }[];
  apps: {
    id: number;
    slug: string;
    node_id: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      url: string;
      repos_url: string;
      events_url: string;
      hooks_url: string;
      issues_url: string;
      members_url: string;
      public_members_url: string;
      avatar_url: string;
      description: string;
      gravatar_id: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      received_events_url: string;
      type: string;
    };
    name: string;
    description: string;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    permissions: {
      metadata: string;
      contents: string;
      issues: string;
      single_file: string;
    };
    events: string[];
  }[];
}

/**
 * Basic Error
 */
export interface ReposGetBranchProtectionResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposGetClonesEndpoint = {
  owner: string;

  repo: string;
  /**
   * Must be one of: `day`, `week`.
   */
  per?: "day" | "week";
};

type ReposGetClonesRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/traffic/clones";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Clone Traffic
 */
export interface ReposGetClonesResponseData {
  count: number;
  uniques: number;
  clones: Traffic[];
}
export interface Traffic {
  timestamp: string;
  uniques: number;
  count: number;
}

/**
 * Basic Error
 */
export interface ReposGetClonesResponse403Data {
  message: string;
  documentation_url: string;
}

type ReposGetCodeFrequencyStatsEndpoint = {
  owner: string;

  repo: string;
};

type ReposGetCodeFrequencyStatsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/stats/code_frequency";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Code Frequency Stat
 */
export type CodeFrequencyStat = number[];
export type ReposGetCodeFrequencyStatsResponseData = CodeFrequencyStat[];

type ReposGetCollaboratorPermissionLevelEndpoint = {
  owner: string;

  repo: string;

  username: string;
};

type ReposGetCollaboratorPermissionLevelRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/collaborators/:username/permission";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Repository Collaborator Permission
 */
export interface ReposGetCollaboratorPermissionLevelResponseData {
  permission: string;
  user: SimpleUser;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposGetCollaboratorPermissionLevelResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposGetCombinedStatusForRefEndpoint = {
  owner: string;

  repo: string;
  /**
   * ref+ parameter
   */
  ref: string;
};

type ReposGetCombinedStatusForRefRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/commits/:ref/status";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Combined Commit Status
 */
export interface ReposGetCombinedStatusForRefResponseData {
  state: string;
  statuses: SimpleCommitStatus[];
  sha: string;
  total_count: number;
  repository: MinimalRepository;
  commit_url: string;
  url: string;
}
export interface SimpleCommitStatus {
  description: string;
  id: number;
  node_id: string;
  state: string;
  context: string;
  target_url: string;
  required: boolean;
  avatar_url: string;
  url: string;
  created_at: string;
  updated_at: string;
}
/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposGetCombinedStatusForRefResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposGetCommitEndpoint = {
  owner: string;

  repo: string;
  /**
   * ref+ parameter
   */
  ref: string;
};

type ReposGetCommitRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/commits/:ref";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Commit
 */
export interface ReposGetCommitResponseData {
  url: string;
  sha: string;
  node_id: string;
  html_url: string;
  comments_url: string;
  commit: {
    url: string;
    author: GitUser;
    committer: GitUser1;
    message: string;
    comment_count: number;
    tree: {
      sha: string;
      url: string;
    };
    verification: Verification;
  };
  author: SimpleUser;
  committer: SimpleUser1;
  parents: {
    sha: string;
    url: string;
    html_url: string;
  }[];
  stats: {
    additions: number;
    deletions: number;
    total: number;
  };
  files: {
    filename: string;
    additions: number;
    deletions: number;
    changes: number;
    status: string;
    raw_url: string;
    blob_url: string;
    patch: string;
    sha: string;
    contents_url: string;
    previous_filename: string;
  }[];
}
/**
 * Metaproperties for Git author/committer information.
 */
export interface GitUser {
  name?: string;
  email?: string;
  date?: string;
  [k: string]: unknown;
}
/**
 * Metaproperties for Git author/committer information.
 */
export interface GitUser1 {
  name?: string;
  email?: string;
  date?: string;
  [k: string]: unknown;
}
export interface Verification {
  verified: boolean;
  reason: string;
  payload: string;
  signature: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposGetCommitResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReposGetCommitResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

/**
 * Basic Error
 */
export interface ReposGetCommitResponse500Data {
  message: string;
  documentation_url: string;
}

type ReposGetCommitActivityStatsEndpoint = {
  owner: string;

  repo: string;
};

type ReposGetCommitActivityStatsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/stats/commit_activity";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposGetCommitActivityStatsResponseData = CommitActivity[];

/**
 * Commit Activity
 */
export interface CommitActivity {
  days: number[];
  total: number;
  week: number;
}

type ReposGetCommitCommentEndpoint = {
  owner: string;

  repo: string;
  /**
   * comment_id parameter
   */
  comment_id: number;
};

type ReposGetCommitCommentRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/comments/:comment_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Commit Comment
 */
export interface ReposGetCommitCommentResponseData {
  html_url: string;
  url: string;
  id: number;
  node_id: string;
  body: string;
  path: string;
  position: number;
  line: number;
  commit_id: string;
  user: SimpleUser;
  created_at: string;
  updated_at: string;
  author_association: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

/**
 * Basic Error
 */
export interface ReposGetCommitCommentResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposGetCommitSignatureProtectionEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
} & RequiredPreview<"zzzax">;

type ReposGetCommitSignatureProtectionRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/branches/:branch/protection/required_signatures";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Protected Branch Admin Enforced
 */
export interface ReposGetCommitSignatureProtectionResponseData {
  url: string;
  enabled: boolean;
}

/**
 * Basic Error
 */
export interface ReposGetCommitSignatureProtectionResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposGetCommunityProfileMetricsEndpoint = {
  owner: string;

  repo: string;
} & RequiredPreview<"black-panther">;

type ReposGetCommunityProfileMetricsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/community/profile";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Community Profile
 */
export interface ReposGetCommunityProfileMetricsResponseData {
  health_percentage: number;
  description: string;
  documentation: string;
  files: {
    code_of_conduct: CodeOfConductSimple;
    license: LicenseSimple;
    contributing: CommunityHealthFile;
    readme: CommunityHealthFile1;
    issue_template: CommunityHealthFile2;
    pull_request_template: CommunityHealthFile3;
  };
  updated_at: string;
}
/**
 * Code of Conduct Simple
 */
export interface CodeOfConductSimple {
  url: string;
  key: string;
  name: string;
  html_url: string;
  [k: string]: unknown;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
export interface CommunityHealthFile {
  url: string;
  html_url: string;
  [k: string]: unknown;
}
export interface CommunityHealthFile1 {
  url: string;
  html_url: string;
  [k: string]: unknown;
}
export interface CommunityHealthFile2 {
  url: string;
  html_url: string;
  [k: string]: unknown;
}
export interface CommunityHealthFile3 {
  url: string;
  html_url: string;
  [k: string]: unknown;
}

type ReposGetContentEndpoint = {
  owner: string;

  repo: string;
  /**
   * path+ parameter
   */
  path: string;
  /**
   * The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
   */
  ref?: string;
};

type ReposGetContentRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/contents/:path";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Content Tree
 */
export interface ReposGetContentResponseData {
  type: string;
  size: number;
  name: string;
  path: string;
  sha: string;
  url: string;
  git_url: string;
  html_url: string;
  download_url: string;
  entries: {
    type: string;
    size: number;
    name: string;
    path: string;
    content: string;
    sha: string;
    url: string;
    git_url: string;
    html_url: string;
    download_url: string;
    _links: {
      git: string;
      html: string;
      self: string;
    };
  }[];
  _links: {
    git: string;
    html: string;
    self: string;
  };
}

export type ReposGetContentResponse200Data =
  | ContentDirectory
  | ContentFile
  | SymlinkContent
  | SymlinkContent1;
/**
 * A list of directory items
 */
export type ContentDirectory = {
  type: string;
  size: number;
  name: string;
  path: string;
  content?: string;
  sha: string;
  url: string;
  git_url: string;
  html_url: string;
  download_url: string;
  _links: {
    git: string;
    html: string;
    self: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}[];

/**
 * Content File
 */
export interface ContentFile {
  type: string;
  encoding: string;
  size: number;
  name: string;
  path: string;
  content: string;
  sha: string;
  url: string;
  git_url: string;
  html_url: string;
  download_url: string;
  _links: {
    git: string;
    html: string;
    self: string;
    [k: string]: unknown;
  };
  target?: string;
  submodule_git_url?: string;
  [k: string]: unknown;
}
/**
 * An object describing a symlink
 */
export interface SymlinkContent {
  type: string;
  target: string;
  size: number;
  name: string;
  path: string;
  sha: string;
  url: string;
  git_url: string;
  html_url: string;
  download_url: string;
  _links: {
    git: string;
    html: string;
    self: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * An object describing a symlink
 */
export interface SymlinkContent1 {
  type: string;
  submodule_git_url: string;
  size: number;
  name: string;
  path: string;
  sha: string;
  url: string;
  git_url: string;
  html_url: string;
  download_url: string;
  _links: {
    git: string;
    html: string;
    self: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposGetContentResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposGetContentResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposGetContributorsStatsEndpoint = {
  owner: string;

  repo: string;
};

type ReposGetContributorsStatsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/stats/contributors";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposGetContributorsStatsResponseData = ContributorActivity[];

/**
 * Contributor Activity
 */
export interface ContributorActivity {
  author: SimpleUser;
  total: number;
  weeks: {
    w: string;
    a: number;
    d: number;
    c: number;
  }[];
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReposGetDeployKeyEndpoint = {
  owner: string;

  repo: string;
  /**
   * key_id parameter
   */
  key_id: number;
};

type ReposGetDeployKeyRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/keys/:key_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * An SSH key granting access to a single repository.
 */
export interface ReposGetDeployKeyResponseData {
  id: number;
  key: string;
  url: string;
  title: string;
  verified: boolean;
  created_at: string;
  read_only: boolean;
}

/**
 * Basic Error
 */
export interface ReposGetDeployKeyResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposGetDeploymentEndpoint = {
  owner: string;

  repo: string;
  /**
   * deployment_id parameter
   */
  deployment_id: number;
};

type ReposGetDeploymentRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/deployments/:deployment_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A request for a specific ref(branch,sha,tag) to be deployed
 */
export interface ReposGetDeploymentResponseData {
  url: string;
  /**
   * Unique identifier of the deployment
   */
  id: number;
  node_id: string;
  sha: string;
  /**
   * The ref to deploy. This can be a branch, tag, or sha.
   */
  ref: string;
  /**
   * Parameter to specify a task to execute
   */
  task: string;
  payload: {};
  original_environment: string;
  /**
   * Name for the target deployment environment.
   */
  environment: string;
  description: string;
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  statuses_url: string;
  repository_url: string;
  /**
   * Specifies if the given environment is will no longer exist at some point in hte future. Default: false.
   */
  transient_environment: boolean;
  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   */
  production_environment: boolean;
  performed_via_github_app: GitHubApp;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser1;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposGetDeploymentResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposGetDeploymentStatusEndpoint = {
  owner: string;

  repo: string;
  /**
   * deployment_id parameter
   */
  deployment_id: number;
  /**
   * status_id parameter
   */
  status_id: number;
};

type ReposGetDeploymentStatusRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/deployments/:deployment_id/statuses/:status_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * The status of a deployment.
 */
export interface ReposGetDeploymentStatusResponseData {
  url: string;
  id: number;
  node_id: string;
  /**
   * The state of the status.
   */
  state:
    | "error"
    | "failure"
    | "inactive"
    | "pending"
    | "success"
    | "queued"
    | "in_progress";
  creator: SimpleUser;
  /**
   * A short description of the status.
   */
  description: string;
  /**
   * The environment of the deployment that the status is for.
   */
  environment: string;
  /**
   * Deprecated: the URL to associate with this status.
   */
  target_url: string;
  created_at: string;
  updated_at: string;
  deployment_url: string;
  repository_url: string;
  /**
   * The URL for accessing your environment.
   */
  environment_url: string;
  /**
   * The URL to associate with this status.
   */
  log_url: string;
  performed_via_github_app: GitHubApp;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser1;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposGetDeploymentStatusResponse404Data {
  message: string;
  documentation_url: string;
}

export interface ReposGetDeploymentStatusResponse415Data {
  message: string;
  documentation_url: string;
}

type ReposGetLatestPagesBuildEndpoint = {
  owner: string;

  repo: string;
};

type ReposGetLatestPagesBuildRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/pages/builds/latest";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Page Build
 */
export interface ReposGetLatestPagesBuildResponseData {
  url: string;
  status: string;
  error: {
    message: string;
  };
  pusher: SimpleUser;
  commit: string;
  duration: number;
  created_at: string;
  updated_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReposGetLatestReleaseEndpoint = {
  owner: string;

  repo: string;
};

type ReposGetLatestReleaseRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/releases/latest";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A release.
 */
export interface ReposGetLatestReleaseResponseData {
  url: string;
  html_url: string;
  assets_url: string;
  upload_url: string;
  tarball_url: string;
  zipball_url: string;
  id: number;
  node_id: string;
  /**
   * The name of the tag.
   */
  tag_name: string;
  /**
   * Specifies the commitish value that determines where the Git tag is created from.
   */
  target_commitish: string;
  name: string;
  body: string;
  /**
   * true to create a draft (unpublished) release, false to create a published one.
   */
  draft: boolean;
  /**
   * Whether to identify the release as a prerelease or a full release.
   */
  prerelease: boolean;
  created_at: string;
  published_at: string;
  author: SimpleUser;
  assets: ReleaseAsset[];
  body_html: string;
  body_text: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Data related to a release.
 */
export interface ReleaseAsset {
  url: string;
  browser_download_url: string;
  id: number;
  node_id: string;
  /**
   * The file name of the asset.
   */
  name: string;
  label: string;
  /**
   * State of the release asset.
   */
  state: "uploaded";
  content_type: string;
  size: number;
  download_count: number;
  created_at: string;
  updated_at: string;
  uploader: SimpleUser1;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReposGetPagesEndpoint = {
  owner: string;

  repo: string;
};

type ReposGetPagesRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/pages";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * The configuration for GitHub Pages for a repository.
 */
export interface ReposGetPagesResponseData {
  /**
   * The API address for accessing this Page resource.
   */
  url: string;
  /**
   * The status of the most recent build of the Page.
   */
  status: "built" | "building" | "errored";
  /**
   * The Pages site's custom domain
   */
  cname: string;
  /**
   * Whether the Page has a custom 404 page.
   */
  custom_404: boolean;
  /**
   * The web address the Page can be accessed from.
   */
  html_url: string;
  source: PagesSourceHash;
}
export interface PagesSourceHash {
  branch: string;
  path: string;
}

/**
 * Basic Error
 */
export interface ReposGetPagesResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposGetPagesBuildEndpoint = {
  owner: string;

  repo: string;
  /**
   * build_id parameter
   */
  build_id: number;
};

type ReposGetPagesBuildRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/pages/builds/:build_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Page Build
 */
export interface ReposGetPagesBuildResponseData {
  url: string;
  status: string;
  error: {
    message: string;
  };
  pusher: SimpleUser;
  commit: string;
  duration: number;
  created_at: string;
  updated_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReposGetParticipationStatsEndpoint = {
  owner: string;

  repo: string;
};

type ReposGetParticipationStatsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/stats/participation";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface ReposGetParticipationStatsResponseData {
  all: number[];
  owner: number[];
}

/**
 * Basic Error
 */
export interface ReposGetParticipationStatsResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposGetPullRequestReviewProtectionEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
};

type ReposGetPullRequestReviewProtectionRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Protected Branch Pull Request Review
 */
export interface ReposGetPullRequestReviewProtectionResponseData {
  url: string;
  dismissal_restrictions: {
    /**
     * The list of users with review dismissal access.
     */
    users: SimpleUser[];
    /**
     * The list of teams with review dismissal access.
     */
    teams: Team[];
    url: string;
    users_url: string;
    teams_url: string;
  };
  dismiss_stale_reviews: boolean;
  require_code_owner_reviews: boolean;
  required_approving_review_count: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string;
  privacy: string;
  permission: string;
  url: string;
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}

type ReposGetPunchCardStatsEndpoint = {
  owner: string;

  repo: string;
};

type ReposGetPunchCardStatsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/stats/punch_card";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Code Frequency Stat
 */
export type CodeFrequencyStat = number[];
export type ReposGetPunchCardStatsResponseData = CodeFrequencyStat[];

type ReposGetReadmeEndpoint = {
  owner: string;

  repo: string;
  /**
   * The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
   */
  ref?: string;
};

type ReposGetReadmeRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/readme";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Content File
 */
export interface ReposGetReadmeResponseData {
  type: string;
  encoding: string;
  size: number;
  name: string;
  path: string;
  content: string;
  sha: string;
  url: string;
  git_url: string;
  html_url: string;
  download_url: string;
  _links: {
    git: string;
    html: string;
    self: string;
  };
  target: string;
  submodule_git_url: string;
}

/**
 * Basic Error
 */
export interface ReposGetReadmeResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReposGetReadmeResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposGetReleaseEndpoint = {
  owner: string;

  repo: string;
  /**
   * release_id parameter
   */
  release_id: number;
};

type ReposGetReleaseRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/releases/:release_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A release.
 */
export interface ReposGetReleaseResponseData {
  url: string;
  html_url: string;
  assets_url: string;
  upload_url: string;
  tarball_url: string;
  zipball_url: string;
  id: number;
  node_id: string;
  /**
   * The name of the tag.
   */
  tag_name: string;
  /**
   * Specifies the commitish value that determines where the Git tag is created from.
   */
  target_commitish: string;
  name: string;
  body: string;
  /**
   * true to create a draft (unpublished) release, false to create a published one.
   */
  draft: boolean;
  /**
   * Whether to identify the release as a prerelease or a full release.
   */
  prerelease: boolean;
  created_at: string;
  published_at: string;
  author: SimpleUser;
  assets: ReleaseAsset[];
  body_html: string;
  body_text: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Data related to a release.
 */
export interface ReleaseAsset {
  url: string;
  browser_download_url: string;
  id: number;
  node_id: string;
  /**
   * The file name of the asset.
   */
  name: string;
  label: string;
  /**
   * State of the release asset.
   */
  state: "uploaded";
  content_type: string;
  size: number;
  download_count: number;
  created_at: string;
  updated_at: string;
  uploader: SimpleUser1;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposGetReleaseResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposGetReleaseAssetEndpoint = {
  owner: string;

  repo: string;
  /**
   * asset_id parameter
   */
  asset_id: number;
};

type ReposGetReleaseAssetRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/releases/assets/:asset_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Data related to a release.
 */
export interface ReposGetReleaseAssetResponseData {
  url: string;
  browser_download_url: string;
  id: number;
  node_id: string;
  /**
   * The file name of the asset.
   */
  name: string;
  label: string;
  /**
   * State of the release asset.
   */
  state: "uploaded";
  content_type: string;
  size: number;
  download_count: number;
  created_at: string;
  updated_at: string;
  uploader: SimpleUser;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposGetReleaseAssetResponse404Data {
  message: string;
  documentation_url: string;
}

export interface ReposGetReleaseAssetResponse415Data {
  message: string;
  documentation_url: string;
}

type ReposGetReleaseByTagEndpoint = {
  owner: string;

  repo: string;
  /**
   * tag+ parameter
   */
  tag: string;
};

type ReposGetReleaseByTagRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/releases/tags/:tag";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A release.
 */
export interface ReposGetReleaseByTagResponseData {
  url: string;
  html_url: string;
  assets_url: string;
  upload_url: string;
  tarball_url: string;
  zipball_url: string;
  id: number;
  node_id: string;
  /**
   * The name of the tag.
   */
  tag_name: string;
  /**
   * Specifies the commitish value that determines where the Git tag is created from.
   */
  target_commitish: string;
  name: string;
  body: string;
  /**
   * true to create a draft (unpublished) release, false to create a published one.
   */
  draft: boolean;
  /**
   * Whether to identify the release as a prerelease or a full release.
   */
  prerelease: boolean;
  created_at: string;
  published_at: string;
  author: SimpleUser;
  assets: ReleaseAsset[];
  body_html: string;
  body_text: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Data related to a release.
 */
export interface ReleaseAsset {
  url: string;
  browser_download_url: string;
  id: number;
  node_id: string;
  /**
   * The file name of the asset.
   */
  name: string;
  label: string;
  /**
   * State of the release asset.
   */
  state: "uploaded";
  content_type: string;
  size: number;
  download_count: number;
  created_at: string;
  updated_at: string;
  uploader: SimpleUser1;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposGetReleaseByTagResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposGetStatusChecksProtectionEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
};

type ReposGetStatusChecksProtectionRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Status Check Policy
 */
export interface ReposGetStatusChecksProtectionResponseData {
  url: string;
  strict: boolean;
  contexts: string[];
  contexts_url: string;
}

/**
 * Basic Error
 */
export interface ReposGetStatusChecksProtectionResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposGetTeamsWithAccessToProtectedBranchEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
};

type ReposGetTeamsWithAccessToProtectedBranchRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposGetTeamsWithAccessToProtectedBranchResponseData = Team[];

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string;
  privacy: string;
  permission: string;
  url: string;
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposGetTeamsWithAccessToProtectedBranchResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposGetTopPathsEndpoint = {
  owner: string;

  repo: string;
};

type ReposGetTopPathsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/traffic/popular/paths";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposGetTopPathsResponseData = ContentTraffic[];

/**
 * Content Traffic
 */
export interface ContentTraffic {
  path: string;
  title: string;
  count: number;
  uniques: number;
}

/**
 * Basic Error
 */
export interface ReposGetTopPathsResponse403Data {
  message: string;
  documentation_url: string;
}

type ReposGetTopReferrersEndpoint = {
  owner: string;

  repo: string;
};

type ReposGetTopReferrersRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/traffic/popular/referrers";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposGetTopReferrersResponseData = ReferrerTraffic[];

/**
 * Referrer Traffic
 */
export interface ReferrerTraffic {
  referrer: string;
  count: number;
  uniques: number;
}

/**
 * Basic Error
 */
export interface ReposGetTopReferrersResponse403Data {
  message: string;
  documentation_url: string;
}

type ReposGetUsersWithAccessToProtectedBranchEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
};

type ReposGetUsersWithAccessToProtectedBranchRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/users";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposGetUsersWithAccessToProtectedBranchResponseData = SimpleUser[];

/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

/**
 * Basic Error
 */
export interface ReposGetUsersWithAccessToProtectedBranchResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposGetViewsEndpoint = {
  owner: string;

  repo: string;
  /**
   * Must be one of: `day`, `week`.
   */
  per?: "day" | "week";
};

type ReposGetViewsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/traffic/views";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * View Traffic
 */
export interface ReposGetViewsResponseData {
  count: number;
  uniques: number;
  views: Traffic[];
}
export interface Traffic {
  timestamp: string;
  uniques: number;
  count: number;
}

/**
 * Basic Error
 */
export interface ReposGetViewsResponse403Data {
  message: string;
  documentation_url: string;
}

type ReposGetWebhookEndpoint = {
  owner: string;

  repo: string;

  hook_id: number;
};

type ReposGetWebhookRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/hooks/:hook_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Webhooks for repositories.
 */
export interface ReposGetWebhookResponseData {
  type: string;
  /**
   * Unique identifier of the webhook.
   */
  id: number;
  /**
   * The name of a valid service, use 'web' for a webhook.
   */
  name: string;
  /**
   * Determines whether the hook is actually triggered on pushes.
   */
  active: boolean;
  /**
   * Determines what events the hook is triggered for. Default: ['push'].
   */
  events: string[];
  config: {
    email: string;
    password: string;
    room: string;
    subdomain: string;
    url: string;
    insecure_ssl: string;
    content_type: string;
    digest: string;
    secret: string;
    token: string;
  };
  updated_at: string;
  created_at: string;
  url: string;
  test_url: string;
  ping_url: string;
  last_response: HookResponse;
}
export interface HookResponse {
  code: number;
  status: string;
  message: string;
}

/**
 * Basic Error
 */
export interface ReposGetWebhookResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposListBranchesEndpoint = {
  owner: string;

  repo: string;
  /**
   * Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.
   */
  protected?: boolean;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ReposListBranchesRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/branches";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListBranchesResponseData = ShortBranch[];

/**
 * Short Branch
 */
export interface ShortBranch {
  name: string;
  commit: {
    sha: string;
    url: string;
  };
  protected: boolean;
  protection: BranchProtection;
  protection_url: string;
}
/**
 * Branch Protection
 */
export interface BranchProtection {
  url: string;
  required_status_checks: {
    url: string;
    enforcement_level: string;
    contexts: string[];
    contexts_url: string;
  };
  enforce_admins: ProtectedBranchAdminEnforced;
  required_pull_request_reviews: ProtectedBranchPullRequestReview;
  restrictions: BranchRestrictionPolicy;
  required_linear_history: {
    enabled: boolean;
  };
  allow_force_pushes: {
    enabled: boolean;
  };
  allow_deletions: {
    enabled: boolean;
  };
  enabled: boolean;
  name: string;
  protection_url: string;
}
/**
 * Protected Branch Admin Enforced
 */
export interface ProtectedBranchAdminEnforced {
  url: string;
  enabled: boolean;
}
/**
 * Protected Branch Pull Request Review
 */
export interface ProtectedBranchPullRequestReview {
  url: string;
  dismissal_restrictions: {
    /**
     * The list of users with review dismissal access.
     */
    users: SimpleUser[];
    /**
     * The list of teams with review dismissal access.
     */
    teams: Team[];
    url: string;
    users_url: string;
    teams_url: string;
  };
  dismiss_stale_reviews: boolean;
  require_code_owner_reviews: boolean;
  required_approving_review_count: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string;
  privacy: string;
  permission: string;
  url: string;
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}
/**
 * Branch Restriction Policy
 */
export interface BranchRestrictionPolicy {
  url: string;
  users_url: string;
  teams_url: string;
  apps_url: string;
  users: {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  }[];
  teams: {
    id: number;
    node_id: string;
    url: string;
    html_url: string;
    name: string;
    slug: string;
    description: string;
    privacy: string;
    permission: string;
    members_url: string;
    repositories_url: string;
    parent: string;
  }[];
  apps: {
    id: number;
    slug: string;
    node_id: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      url: string;
      repos_url: string;
      events_url: string;
      hooks_url: string;
      issues_url: string;
      members_url: string;
      public_members_url: string;
      avatar_url: string;
      description: string;
      gravatar_id: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      received_events_url: string;
      type: string;
    };
    name: string;
    description: string;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    permissions: {
      metadata: string;
      contents: string;
      issues: string;
      single_file: string;
    };
    events: string[];
  }[];
}

/**
 * Basic Error
 */
export interface ReposListBranchesResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposListBranchesForHeadCommitEndpoint = {
  owner: string;

  repo: string;
  /**
   * commit_sha+ parameter
   */
  commit_sha: string;
} & RequiredPreview<"groot">;

type ReposListBranchesForHeadCommitRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/commits/:commit_sha/branches-where-head";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListBranchesForHeadCommitResponseData = BranchShort[];

/**
 * Branch Short
 */
export interface BranchShort {
  name: string;
  commit: {
    sha: string;
    url: string;
  };
  protected: boolean;
}

export interface ReposListBranchesForHeadCommitResponse415Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReposListBranchesForHeadCommitResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposListCollaboratorsEndpoint = {
  owner: string;

  repo: string;
  /**
   * Filter collaborators returned by their affiliation. Can be one of:
   * \* `outside`: All outside collaborators of an organization-owned repository.
   * \* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.
   * \* `all`: All collaborators the authenticated user can see.
   */
  affiliation?: "outside" | "direct" | "all";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ReposListCollaboratorsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/collaborators";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListCollaboratorsResponseData = Collaborator[];

/**
 * Collaborator
 */
export interface Collaborator {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  permissions: {
    pull: boolean;
    push: boolean;
    admin: boolean;
  };
}

/**
 * Basic Error
 */
export interface ReposListCollaboratorsResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposListCommentsForCommitEndpoint = {
  owner: string;

  repo: string;
  /**
   * commit_sha+ parameter
   */
  commit_sha: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ReposListCommentsForCommitRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/commits/:commit_sha/comments";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListCommentsForCommitResponseData = CommitComment[];

/**
 * Commit Comment
 */
export interface CommitComment {
  html_url: string;
  url: string;
  id: number;
  node_id: string;
  body: string;
  path: string;
  position: number;
  line: number;
  commit_id: string;
  user: SimpleUser;
  created_at: string;
  updated_at: string;
  author_association: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type ReposListCommitCommentsForRepoEndpoint = {
  owner: string;

  repo: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ReposListCommitCommentsForRepoRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/comments";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListCommitCommentsForRepoResponseData = CommitComment[];

/**
 * Commit Comment
 */
export interface CommitComment {
  html_url: string;
  url: string;
  id: number;
  node_id: string;
  body: string;
  path: string;
  position: number;
  line: number;
  commit_id: string;
  user: SimpleUser;
  created_at: string;
  updated_at: string;
  author_association: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type ReposListCommitStatusesForRefEndpoint = {
  owner: string;

  repo: string;
  /**
   * ref+ parameter
   */
  ref: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ReposListCommitStatusesForRefRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/commits/:ref/statuses";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListCommitStatusesForRefResponseData = Status[];

/**
 * The status of a commit.
 */
export interface Status {
  url: string;
  avatar_url: string;
  id: number;
  node_id: string;
  state: string;
  description: string;
  target_url: string;
  context: string;
  created_at: string;
  updated_at: string;
  creator: SimpleUser;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

type ReposListCommitsEndpoint = {
  owner: string;

  repo: string;
  /**
   * SHA or branch to start listing commits from. Default: the repository’s default branch (usually `master`).
   */
  sha?: string;
  /**
   * Only commits containing this file path will be returned.
   */
  path?: string;
  /**
   * GitHub login or email address by which to filter by commit author.
   */
  author?: string;
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /**
   * Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  until?: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ReposListCommitsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/commits";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListCommitsResponseData = SimpleCommit[];

/**
 * Simple Commit
 */
export interface SimpleCommit {
  id: string;
  tree_id: string;
  message: string;
  timestamp: string;
  author: {
    name: string;
    email: string;
  };
  committer: {
    name: string;
    email: string;
  };
}

/**
 * Basic Error
 */
export interface ReposListCommitsResponse400Data {
  message: string;
  documentation_url: string;
}

/**
 * Scim Error
 */
export interface ReposListCommitsResponse400Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Basic Error
 */
export interface ReposListCommitsResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposListCommitsResponse409Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposListCommitsResponse500Data {
  message: string;
  documentation_url: string;
}

type ReposListContributorsEndpoint = {
  owner: string;

  repo: string;
  /**
   * Set to `1` or `true` to include anonymous contributors in results.
   */
  anon?: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ReposListContributorsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/contributors";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListContributorsResponseData = Contributor[];

/**
 * Contributor
 */
export interface Contributor {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  contributions: number;
  email: string;
  name: string;
}

/**
 * Basic Error
 */
export interface ReposListContributorsResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposListContributorsResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposListDeployKeysEndpoint = {
  owner: string;

  repo: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ReposListDeployKeysRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/keys";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListDeployKeysResponseData = DeployKey[];

/**
 * An SSH key granting access to a single repository.
 */
export interface DeployKey {
  id: number;
  key: string;
  url: string;
  title: string;
  verified: boolean;
  created_at: string;
  read_only: boolean;
}

type ReposListDeploymentStatusesEndpoint = {
  owner: string;

  repo: string;
  /**
   * deployment_id parameter
   */
  deployment_id: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ReposListDeploymentStatusesRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/deployments/:deployment_id/statuses";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListDeploymentStatusesResponseData = DeploymentStatus[];

/**
 * The status of a deployment.
 */
export interface DeploymentStatus {
  url: string;
  id: number;
  node_id: string;
  /**
   * The state of the status.
   */
  state:
    | "error"
    | "failure"
    | "inactive"
    | "pending"
    | "success"
    | "queued"
    | "in_progress";
  creator: SimpleUser;
  /**
   * A short description of the status.
   */
  description: string;
  /**
   * The environment of the deployment that the status is for.
   */
  environment: string;
  /**
   * Deprecated: the URL to associate with this status.
   */
  target_url: string;
  created_at: string;
  updated_at: string;
  deployment_url: string;
  repository_url: string;
  /**
   * The URL for accessing your environment.
   */
  environment_url: string;
  /**
   * The URL to associate with this status.
   */
  log_url: string;
  performed_via_github_app: GitHubApp;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser1;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposListDeploymentStatusesResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposListDeploymentsEndpoint = {
  owner: string;

  repo: string;
  /**
   * The SHA recorded at creation time.
   */
  sha?: string;
  /**
   * The name of the ref. This can be a branch, tag, or SHA.
   */
  ref?: string;
  /**
   * The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).
   */
  task?: string;
  /**
   * The name of the environment that was deployed to (e.g., `staging` or `production`).
   */
  environment?: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ReposListDeploymentsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/deployments";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListDeploymentsResponseData = Deployment[];

/**
 * A request for a specific ref(branch,sha,tag) to be deployed
 */
export interface Deployment {
  url: string;
  /**
   * Unique identifier of the deployment
   */
  id: number;
  node_id: string;
  sha: string;
  /**
   * The ref to deploy. This can be a branch, tag, or sha.
   */
  ref: string;
  /**
   * Parameter to specify a task to execute
   */
  task: string;
  payload: {};
  original_environment: string;
  /**
   * Name for the target deployment environment.
   */
  environment: string;
  description: string;
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  statuses_url: string;
  repository_url: string;
  /**
   * Specifies if the given environment is will no longer exist at some point in hte future. Default: false.
   */
  transient_environment: boolean;
  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   */
  production_environment: boolean;
  performed_via_github_app: GitHubApp;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser1;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReposListForAuthenticatedUserEndpoint = {
  /**
   * Can be one of `all`, `public`, or `private`.
   */
  visibility?: "all" | "public" | "private";
  /**
   * Comma-separated list of values. Can include:
   * \* `owner`: Repositories that are owned by the authenticated user.
   * \* `collaborator`: Repositories that the user has been added to as a collaborator.
   * \* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
   */
  affiliation?: string;
  /**
   * Can be one of `all`, `owner`, `public`, `private`, `member`. Default: `all`
   *
   * Will cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
   */
  type?: "all" | "owner" | "public" | "private" | "member";
  /**
   * Can be one of `created`, `updated`, `pushed`, `full_name`.
   */
  sort?: "created" | "updated" | "pushed" | "full_name";
  /**
   * Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`
   */
  direction?: "asc" | "desc";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /**
   * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  before?: string;
};

type ReposListForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: "/user/repos";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListForAuthenticatedUserResponseData = Repository[];

/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposListForAuthenticatedUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposListForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReposListForAuthenticatedUserResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposListForOrgEndpoint = {
  org: string;
  /**
   * Specifies the types of repositories you want returned. Can be one of `all`, `public`, `private`, `forks`, `sources`, `member`, `internal`. Default: `all`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can also be `internal`.
   */
  type?:
    | "all"
    | "public"
    | "private"
    | "forks"
    | "sources"
    | "member"
    | "internal";
  /**
   * Can be one of `created`, `updated`, `pushed`, `full_name`.
   */
  sort?: "created" | "updated" | "pushed" | "full_name";
  /**
   * Can be one of `asc` or `desc`. Default: when using `full_name`: `asc`, otherwise `desc`
   */
  direction?: "asc" | "desc";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ReposListForOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/repos";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListForOrgResponseData = MinimalRepository[];

/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReposListForUserEndpoint = {
  username: string;
  /**
   * Can be one of `all`, `owner`, `member`.
   */
  type?: "all" | "owner" | "member";
  /**
   * Can be one of `created`, `updated`, `pushed`, `full_name`.
   */
  sort?: "created" | "updated" | "pushed" | "full_name";
  /**
   * Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`
   */
  direction?: "asc" | "desc";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ReposListForUserRequestOptions = {
  method: "GET";
  url: "/users/:username/repos";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListForUserResponseData = MinimalRepository[];

/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReposListForksEndpoint = {
  owner: string;

  repo: string;
  /**
   * The sort order. Can be either `newest`, `oldest`, or `stargazers`.
   */
  sort?: "newest" | "oldest" | "stargazers";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ReposListForksRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/forks";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListForksResponseData = MinimalRepository[];

/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposListForksResponse400Data {
  message: string;
  documentation_url: string;
}

/**
 * Scim Error
 */
export interface ReposListForksResponse400Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

type ReposListInvitationsEndpoint = {
  owner: string;

  repo: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ReposListInvitationsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/invitations";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListInvitationsResponseData = RepositoryInvitation[];

/**
 * Repository invitations let you manage who you collaborate with.
 */
export interface RepositoryInvitation {
  /**
   * Unique identifier of the repository invitation.
   */
  id: number;
  repository: MinimalRepository;
  invitee: SimpleUser1;
  inviter: SimpleUser2;
  /**
   * The permission associated with the invitation.
   */
  permissions: "read" | "write" | "admin";
  created_at: string;
  /**
   * URL for the repository invitation
   */
  url: string;
  html_url: string;
  node_id: string;
}
/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReposListInvitationsForAuthenticatedUserEndpoint = {
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ReposListInvitationsForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: "/user/repository_invitations";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListInvitationsForAuthenticatedUserResponseData = RepositoryInvitation[];

/**
 * Repository invitations let you manage who you collaborate with.
 */
export interface RepositoryInvitation {
  /**
   * Unique identifier of the repository invitation.
   */
  id: number;
  repository: MinimalRepository;
  invitee: SimpleUser1;
  inviter: SimpleUser2;
  /**
   * The permission associated with the invitation.
   */
  permissions: "read" | "write" | "admin";
  created_at: string;
  /**
   * URL for the repository invitation
   */
  url: string;
  html_url: string;
  node_id: string;
}
/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposListInvitationsForAuthenticatedUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposListInvitationsForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposListInvitationsForAuthenticatedUserResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposListLanguagesEndpoint = {
  owner: string;

  repo: string;
};

type ReposListLanguagesRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/languages";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Language
 */
export interface ReposListLanguagesResponseData {
  [k: string]: number;
}

type ReposListPagesBuildsEndpoint = {
  owner: string;

  repo: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ReposListPagesBuildsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/pages/builds";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListPagesBuildsResponseData = PageBuild[];

/**
 * Page Build
 */
export interface PageBuild {
  url: string;
  status: string;
  error: {
    message: string;
  };
  pusher: SimpleUser;
  commit: string;
  duration: number;
  created_at: string;
  updated_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReposListPublicEndpoint = {
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;

  visibility?: string;
};

type ReposListPublicRequestOptions = {
  method: "GET";
  url: "/repositories";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListPublicResponseData = MinimalRepository[];

/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Validation Error
 */
export interface ReposListPublicResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposListPullRequestsAssociatedWithCommitEndpoint = {
  owner: string;

  repo: string;
  /**
   * commit_sha+ parameter
   */
  commit_sha: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"groot">;

type ReposListPullRequestsAssociatedWithCommitRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/commits/:commit_sha/pulls";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListPullRequestsAssociatedWithCommitResponseData = PullRequestSimple[];

/**
 * Pull Request Simple
 */
export interface PullRequestSimple {
  url: string;
  id: number;
  node_id: string;
  html_url: string;
  diff_url: string;
  patch_url: string;
  issue_url: string;
  commits_url: string;
  review_comments_url: string;
  review_comment_url: string;
  comments_url: string;
  statuses_url: string;
  number: number;
  state: string;
  locked: boolean;
  title: string;
  user: SimpleUser;
  body: string;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  milestone: Milestone;
  active_lock_reason: string;
  created_at: string;
  updated_at: string;
  closed_at: string;
  merged_at: string;
  merge_commit_sha: string;
  assignee: SimpleUser2;
  assignees: SimpleUser3[];
  requested_reviewers: SimpleUser4[];
  requested_teams: TeamSimple[];
  head: {
    label: string;
    ref: string;
    repo: Repository;
    sha: string;
    user: SimpleUser6;
  };
  base: {
    label: string;
    ref: string;
    repo: Repository1;
    sha: string;
    user: SimpleUser8;
  };
  _links: {
    comments: Link;
    commits: Link1;
    statuses: Link2;
    html: Link3;
    issue: Link4;
    review_comments: Link5;
    review_comment: Link6;
    self: Link7;
  };
  author_association: string;
  /**
   * Indicates whether or not the pull request is a draft.
   */
  draft: boolean;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser1;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn: string;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser5;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser6 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository1 {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple1;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser7;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple1 {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser7 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser8 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Hypermedia Link
 */
export interface Link {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link1 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link2 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link3 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link4 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link5 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link6 {
  href: string;
}
/**
 * Hypermedia Link
 */
export interface Link7 {
  href: string;
}

export interface ReposListPullRequestsAssociatedWithCommitResponse415Data {
  message: string;
  documentation_url: string;
}

type ReposListReleaseAssetsEndpoint = {
  owner: string;

  repo: string;
  /**
   * release_id parameter
   */
  release_id: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ReposListReleaseAssetsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/releases/:release_id/assets";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListReleaseAssetsResponseData = ReleaseAsset[];

/**
 * Data related to a release.
 */
export interface ReleaseAsset {
  url: string;
  browser_download_url: string;
  id: number;
  node_id: string;
  /**
   * The file name of the asset.
   */
  name: string;
  label: string;
  /**
   * State of the release asset.
   */
  state: "uploaded";
  content_type: string;
  size: number;
  download_count: number;
  created_at: string;
  updated_at: string;
  uploader: SimpleUser;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReposListReleasesEndpoint = {
  owner: string;

  repo: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ReposListReleasesRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/releases";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListReleasesResponseData = Release[];

/**
 * A release.
 */
export interface Release {
  url: string;
  html_url: string;
  assets_url: string;
  upload_url: string;
  tarball_url: string;
  zipball_url: string;
  id: number;
  node_id: string;
  /**
   * The name of the tag.
   */
  tag_name: string;
  /**
   * Specifies the commitish value that determines where the Git tag is created from.
   */
  target_commitish: string;
  name: string;
  body: string;
  /**
   * true to create a draft (unpublished) release, false to create a published one.
   */
  draft: boolean;
  /**
   * Whether to identify the release as a prerelease or a full release.
   */
  prerelease: boolean;
  created_at: string;
  published_at: string;
  author: SimpleUser;
  assets: ReleaseAsset[];
  body_html: string;
  body_text: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Data related to a release.
 */
export interface ReleaseAsset {
  url: string;
  browser_download_url: string;
  id: number;
  node_id: string;
  /**
   * The file name of the asset.
   */
  name: string;
  label: string;
  /**
   * State of the release asset.
   */
  state: "uploaded";
  content_type: string;
  size: number;
  download_count: number;
  created_at: string;
  updated_at: string;
  uploader: SimpleUser1;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposListReleasesResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposListTagsEndpoint = {
  owner: string;

  repo: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ReposListTagsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/tags";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListTagsResponseData = Tag[];

/**
 * Tag
 */
export interface Tag {
  name: string;
  commit: {
    sha: string;
    url: string;
  };
  zipball_url: string;
  tarball_url: string;
  node_id: string;
}

type ReposListTeamsEndpoint = {
  owner: string;

  repo: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ReposListTeamsRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/teams";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListTeamsResponseData = Team[];

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string;
  privacy: string;
  permission: string;
  url: string;
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}

type ReposListWebhooksEndpoint = {
  owner: string;

  repo: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type ReposListWebhooksRequestOptions = {
  method: "GET";
  url: "/repos/:owner/:repo/hooks";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposListWebhooksResponseData = Webook[];

/**
 * Webhooks for repositories.
 */
export interface Webook {
  type: string;
  /**
   * Unique identifier of the webhook.
   */
  id: number;
  /**
   * The name of a valid service, use 'web' for a webhook.
   */
  name: string;
  /**
   * Determines whether the hook is actually triggered on pushes.
   */
  active: boolean;
  /**
   * Determines what events the hook is triggered for. Default: ['push'].
   */
  events: string[];
  config: {
    email: string;
    password: string;
    room: string;
    subdomain: string;
    url: string;
    insecure_ssl: string;
    content_type: string;
    digest: string;
    secret: string;
    token: string;
  };
  updated_at: string;
  created_at: string;
  url: string;
  test_url: string;
  ping_url: string;
  last_response: HookResponse;
}
export interface HookResponse {
  code: number;
  status: string;
  message: string;
}

/**
 * Basic Error
 */
export interface ReposListWebhooksResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposMergeEndpoint = {
  owner: string;

  repo: string;
  /**
   * The name of the base branch that the head will be merged into.
   */
  base: string;
  /**
   * The head to merge. This can be a branch name or a commit SHA1.
   */
  head: string;
  /**
   * Commit message to use for the merge commit. If omitted, a default message will be used.
   */
  commit_message?: string;
};

type ReposMergeRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/merges";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Commit
 */
export interface ReposMergeResponseData {
  url: string;
  sha: string;
  node_id: string;
  html_url: string;
  comments_url: string;
  commit: {
    url: string;
    author: GitUser;
    committer: GitUser1;
    message: string;
    comment_count: number;
    tree: {
      sha: string;
      url: string;
    };
    verification: Verification;
  };
  author: SimpleUser;
  committer: SimpleUser1;
  parents: {
    sha: string;
    url: string;
    html_url: string;
  }[];
  stats: {
    additions: number;
    deletions: number;
    total: number;
  };
  files: {
    filename: string;
    additions: number;
    deletions: number;
    changes: number;
    status: string;
    raw_url: string;
    blob_url: string;
    patch: string;
    sha: string;
    contents_url: string;
    previous_filename: string;
  }[];
}
/**
 * Metaproperties for Git author/committer information.
 */
export interface GitUser {
  name?: string;
  email?: string;
  date?: string;
  [k: string]: unknown;
}
/**
 * Metaproperties for Git author/committer information.
 */
export interface GitUser1 {
  name?: string;
  email?: string;
  date?: string;
  [k: string]: unknown;
}
export interface Verification {
  verified: boolean;
  reason: string;
  payload: string;
  signature: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposMergeResponse403Data {
  message: string;
  documentation_url: string;
}

export interface ReposMergeResponse404Data {
  message: string;
  documentation_url: string;
}

export interface ReposMergeResponse409Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReposMergeResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposPingWebhookEndpoint = {
  owner: string;

  repo: string;

  hook_id: number;
};

type ReposPingWebhookRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/hooks/:hook_id/pings";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ReposPingWebhookResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposRemoveAppAccessRestrictionsEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
  /**
   * apps parameter
   */
  apps: string[];
};

type ReposRemoveAppAccessRestrictionsRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposRemoveAppAccessRestrictionsResponseData = GitHubApp[];

/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug: string;
  node_id: string;
  owner: SimpleUser;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues: string;
    checks: string;
    metadata: string;
    contents: string;
    deployments: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count: number;
  client_id: string;
  client_secret: string;
  webhook_secret: string;
  pem: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Validation Error
 */
export interface ReposRemoveAppAccessRestrictionsResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposRemoveCollaboratorEndpoint = {
  owner: string;

  repo: string;

  username: string;
};

type ReposRemoveCollaboratorRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/collaborators/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ReposRemoveStatusCheckContextsEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
  /**
   * contexts parameter
   */
  contexts: string[];
};

type ReposRemoveStatusCheckContextsRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposRemoveStatusCheckContextsResponseData = string[];

/**
 * Basic Error
 */
export interface ReposRemoveStatusCheckContextsResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReposRemoveStatusCheckContextsResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposRemoveStatusCheckProtectionEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
};

type ReposRemoveStatusCheckProtectionRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type ReposRemoveTeamAccessRestrictionsEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
  /**
   * teams parameter
   */
  teams: string[];
};

type ReposRemoveTeamAccessRestrictionsRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposRemoveTeamAccessRestrictionsResponseData = Team[];

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string;
  privacy: string;
  permission: string;
  url: string;
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}

/**
 * Validation Error
 */
export interface ReposRemoveTeamAccessRestrictionsResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposRemoveUserAccessRestrictionsEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
  /**
   * users parameter
   */
  users: string[];
};

type ReposRemoveUserAccessRestrictionsRequestOptions = {
  method: "DELETE";
  url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/users";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposRemoveUserAccessRestrictionsResponseData = SimpleUser[];

/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

/**
 * Validation Error
 */
export interface ReposRemoveUserAccessRestrictionsResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposReplaceAllTopicsEndpoint = {
  owner: string;

  repo: string;
  /**
   * An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.
   */
  names: string[];
} & RequiredPreview<"mercy">;

type ReposReplaceAllTopicsRequestOptions = {
  method: "PUT";
  url: "/repos/:owner/:repo/topics";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A topic aggregates entities that are related to a subject.
 */
export interface ReposReplaceAllTopicsResponseData {
  names: string[];
}

/**
 * Basic Error
 */
export interface ReposReplaceAllTopicsResponse404Data {
  message: string;
  documentation_url: string;
}

export interface ReposReplaceAllTopicsResponse415Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error Simple
 */
export interface ReposReplaceAllTopicsResponse422Data {
  message: string;
  documentation_url: string;
  errors: string[];
}

type ReposRequestPagesBuildEndpoint = {
  owner: string;

  repo: string;
};

type ReposRequestPagesBuildRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/pages/builds";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Page Build Status
 */
export interface ReposRequestPagesBuildResponseData {
  url: string;
  status: string;
}

type ReposSetAdminBranchProtectionEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
};

type ReposSetAdminBranchProtectionRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/branches/:branch/protection/enforce_admins";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Protected Branch Admin Enforced
 */
export interface ReposSetAdminBranchProtectionResponseData {
  url: string;
  enabled: boolean;
}

type ReposSetAppAccessRestrictionsEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
  /**
   * apps parameter
   */
  apps: string[];
};

type ReposSetAppAccessRestrictionsRequestOptions = {
  method: "PUT";
  url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposSetAppAccessRestrictionsResponseData = GitHubApp[];

/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug: string;
  node_id: string;
  owner: SimpleUser;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues: string;
    checks: string;
    metadata: string;
    contents: string;
    deployments: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count: number;
  client_id: string;
  client_secret: string;
  webhook_secret: string;
  pem: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Validation Error
 */
export interface ReposSetAppAccessRestrictionsResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposSetStatusCheckContextsEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
  /**
   * contexts parameter
   */
  contexts: string[];
};

type ReposSetStatusCheckContextsRequestOptions = {
  method: "PUT";
  url: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposSetStatusCheckContextsResponseData = string[];

/**
 * Basic Error
 */
export interface ReposSetStatusCheckContextsResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReposSetStatusCheckContextsResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposSetTeamAccessRestrictionsEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
  /**
   * teams parameter
   */
  teams: string[];
};

type ReposSetTeamAccessRestrictionsRequestOptions = {
  method: "PUT";
  url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposSetTeamAccessRestrictionsResponseData = Team[];

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string;
  privacy: string;
  permission: string;
  url: string;
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}

/**
 * Validation Error
 */
export interface ReposSetTeamAccessRestrictionsResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposSetUserAccessRestrictionsEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
  /**
   * users parameter
   */
  users: string[];
};

type ReposSetUserAccessRestrictionsRequestOptions = {
  method: "PUT";
  url: "/repos/:owner/:repo/branches/:branch/protection/restrictions/users";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type ReposSetUserAccessRestrictionsResponseData = SimpleUser[];

/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

/**
 * Validation Error
 */
export interface ReposSetUserAccessRestrictionsResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposTestPushWebhookEndpoint = {
  owner: string;

  repo: string;

  hook_id: number;
};

type ReposTestPushWebhookRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/hooks/:hook_id/tests";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ReposTestPushWebhookResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposTransferEndpoint = {
  owner: string;

  repo: string;
  /**
   * **Required:** The username or organization name the repository will be transferred to.
   */
  new_owner?: string;
  /**
   * ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
   */
  team_ids?: number[];
};

type ReposTransferRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/transfer";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A git repository
 */
export interface ReposTransferResponseData {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReposUpdateEndpoint = {
  owner: string;

  repo: string;
  /**
   * The name of the repository.
   */
  name?: string;
  /**
   * A short description of the repository.
   */
  description?: string;
  /**
   * A URL with more information about the repository.
   */
  homepage?: string;
  /**
   * Either `true` to make the repository private or `false` to make it public. Default: `false`.
   * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
   */
  private?: boolean;
  /**
   * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. The `visibility` parameter overrides the `private` parameter when you use both along with the `nebula-preview` preview header.
   */
  visibility?: "public" | "private" | "visibility" | "internal";
  /**
   * Either `true` to enable issues for this repository or `false` to disable them.
   */
  has_issues?: boolean;
  /**
   * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
   */
  has_projects?: boolean;
  /**
   * Either `true` to enable the wiki for this repository or `false` to disable it.
   */
  has_wiki?: boolean;
  /**
   * Either `true` to make this repo available as a template repository or `false` to prevent it.
   */
  is_template?: boolean;
  /**
   * Updates the default branch for this repository.
   */
  default_branch?: string;
  /**
   * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
   */
  allow_squash_merge?: boolean;
  /**
   * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
   */
  allow_merge_commit?: boolean;
  /**
   * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
   */
  allow_rebase_merge?: boolean;
  /**
   * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
   */
  delete_branch_on_merge?: boolean;
  /**
   * `true` to archive this repository. **Note**: You cannot unarchive repositories through the API.
   */
  archived?: boolean;
};

type ReposUpdateRequestOptions = {
  method: "PATCH";
  url: "/repos/:owner/:repo";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Full Repository
 */
export interface ReposUpdateResponseData {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  allow_rebase_merge: boolean;
  template_repository: Repository;
  temp_clone_token: string;
  allow_squash_merge: boolean;
  delete_branch_on_merge: boolean;
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  license: LicenseSimple1;
  organization: SimpleUser2;
  parent: Repository1;
  source: Repository2;
  forks: number;
  master_branch: string;
  open_issues: number;
  watchers: number;
  /**
   * Whether anonymous git access is allowed.
   */
  anonymous_access_enabled: boolean;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
    [k: string]: unknown;
  };
  owner: SimpleUser1;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template?: boolean;
  topics?: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge?: boolean;
  template_repository?: {
    id?: number;
    node_id?: string;
    name?: string;
    full_name?: string;
    owner?: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type?: string;
      site_admin?: boolean;
      [k: string]: unknown;
    };
    private?: boolean;
    html_url?: string;
    description?: string;
    fork?: boolean;
    url?: string;
    archive_url?: string;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    collaborators_url?: string;
    comments_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    deployments_url?: string;
    downloads_url?: string;
    events_url?: string;
    forks_url?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    languages_url?: string;
    merges_url?: string;
    milestones_url?: string;
    notifications_url?: string;
    pulls_url?: string;
    releases_url?: string;
    ssh_url?: string;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_url?: string;
    subscription_url?: string;
    tags_url?: string;
    teams_url?: string;
    trees_url?: string;
    clone_url?: string;
    mirror_url?: string;
    hooks_url?: string;
    svn_url?: string;
    homepage?: string;
    language?: string;
    forks_count?: number;
    stargazers_count?: number;
    watchers_count?: number;
    size?: number;
    default_branch?: string;
    open_issues_count?: number;
    is_template?: boolean;
    topics?: string[];
    has_issues?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    has_pages?: boolean;
    has_downloads?: boolean;
    archived?: boolean;
    disabled?: boolean;
    visibility?: string;
    pushed_at?: string;
    created_at?: string;
    updated_at?: string;
    permissions?: {
      admin?: boolean;
      push?: boolean;
      pull?: boolean;
      [k: string]: unknown;
    };
    allow_rebase_merge?: boolean;
    template_repository?: string;
    temp_clone_token?: string;
    allow_squash_merge?: boolean;
    delete_branch_on_merge?: boolean;
    allow_merge_commit?: boolean;
    subscribers_count?: number;
    network_count?: number;
    [k: string]: unknown;
  };
  temp_clone_token?: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge?: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit?: boolean;
  subscribers_count?: number;
  network_count?: number;
  open_issues: number;
  watchers: number;
  master_branch?: string;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * License Simple
 */
export interface LicenseSimple1 {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository1 {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple2;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser3;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple2 {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository2 {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple3;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser4;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple3 {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface ReposUpdateResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposUpdateResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReposUpdateResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposUpdateBranchProtectionEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
  /**
   * Require status checks to pass before merging. Set to `null` to disable.
   */
  required_status_checks: ReposUpdateBranchProtectionParamsRequiredStatusChecks | null;
  /**
   * Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.
   */
  enforce_admins: boolean | null;
  /**
   * Require at least one approving review on a pull request, before merging. Set to `null` to disable.
   */
  required_pull_request_reviews: ReposUpdateBranchProtectionParamsRequiredPullRequestReviews | null;
  /**
   * Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
   */
  restrictions: ReposUpdateBranchProtectionParamsRestrictions | null;
  /**
   * Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://help.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.
   */
  required_linear_history?: boolean;
  /**
   * Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."
   */
  allow_force_pushes?: boolean | null;
  /**
   * Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.
   */
  allow_deletions?: boolean;
};

type ReposUpdateBranchProtectionRequestOptions = {
  method: "PUT";
  url: "/repos/:owner/:repo/branches/:branch/protection";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Branch protections protect branches
 */
export interface ReposUpdateBranchProtectionResponseData {
  url: string;
  required_status_checks: StatusCheckPolicy;
  required_pull_request_reviews: {
    url: string;
    dismiss_stale_reviews: boolean;
    require_code_owner_reviews: boolean;
    required_approving_review_count: number;
    dismissal_restrictions: {
      url: string;
      users_url: string;
      teams_url: string;
      users: SimpleUser[];
      teams: Team[];
    };
  };
  required_signatures: {
    url: string;
    enabled: boolean;
  };
  enforce_admins: {
    url: string;
    enabled: boolean;
  };
  required_linear_history: {
    enabled: boolean;
  };
  allow_force_pushes: {
    enabled: boolean;
  };
  allow_deletions: {
    enabled: boolean;
  };
  restrictions: BranchRestrictionPolicy;
}
/**
 * Status Check Policy
 */
export interface StatusCheckPolicy {
  url: string;
  strict: boolean;
  contexts: string[];
  contexts_url: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string;
  privacy: string;
  permission: string;
  url: string;
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}
/**
 * Branch Restriction Policy
 */
export interface BranchRestrictionPolicy {
  url: string;
  users_url: string;
  teams_url: string;
  apps_url: string;
  users: {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  }[];
  teams: {
    id: number;
    node_id: string;
    url: string;
    html_url: string;
    name: string;
    slug: string;
    description: string;
    privacy: string;
    permission: string;
    members_url: string;
    repositories_url: string;
    parent: string;
  }[];
  apps: {
    id: number;
    slug: string;
    node_id: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      url: string;
      repos_url: string;
      events_url: string;
      hooks_url: string;
      issues_url: string;
      members_url: string;
      public_members_url: string;
      avatar_url: string;
      description: string;
      gravatar_id: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      received_events_url: string;
      type: string;
    };
    name: string;
    description: string;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    permissions: {
      metadata: string;
      contents: string;
      issues: string;
      single_file: string;
    };
    events: string[];
  }[];
}

/**
 * Basic Error
 */
export interface ReposUpdateBranchProtectionResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface ReposUpdateBranchProtectionResponse404Data {
  message: string;
  documentation_url: string;
}

export interface ReposUpdateBranchProtectionResponse415Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error Simple
 */
export interface ReposUpdateBranchProtectionResponse422Data {
  message: string;
  documentation_url: string;
  errors: string[];
}

type ReposUpdateCommitCommentEndpoint = {
  owner: string;

  repo: string;
  /**
   * comment_id parameter
   */
  comment_id: number;
  /**
   * The contents of the comment
   */
  body: string;
};

type ReposUpdateCommitCommentRequestOptions = {
  method: "PATCH";
  url: "/repos/:owner/:repo/comments/:comment_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Commit Comment
 */
export interface ReposUpdateCommitCommentResponseData {
  html_url: string;
  url: string;
  id: number;
  node_id: string;
  body: string;
  path: string;
  position: number;
  line: number;
  commit_id: string;
  user: SimpleUser;
  created_at: string;
  updated_at: string;
  author_association: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

/**
 * Basic Error
 */
export interface ReposUpdateCommitCommentResponse404Data {
  message: string;
  documentation_url: string;
}

type ReposUpdateInformationAboutPagesSiteEndpoint = {
  owner: string;

  repo: string;
  /**
   * Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://help.github.com/articles/using-a-custom-domain-with-github-pages/)."
   */
  cname?: string | null;

  source: any;
};

type ReposUpdateInformationAboutPagesSiteRequestOptions = {
  method: "PUT";
  url: "/repos/:owner/:repo/pages";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface ReposUpdateInformationAboutPagesSiteResponse400Data {
  message: string;
  documentation_url: string;
}

/**
 * Scim Error
 */
export interface ReposUpdateInformationAboutPagesSiteResponse400Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Validation Error
 */
export interface ReposUpdateInformationAboutPagesSiteResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposUpdateInvitationEndpoint = {
  owner: string;

  repo: string;
  /**
   * invitation_id parameter
   */
  invitation_id: number;
  /**
   * The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
   */
  permissions?: "read" | "write" | "maintain" | "triage" | "admin";
};

type ReposUpdateInvitationRequestOptions = {
  method: "PATCH";
  url: "/repos/:owner/:repo/invitations/:invitation_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Repository invitations let you manage who you collaborate with.
 */
export interface ReposUpdateInvitationResponseData {
  /**
   * Unique identifier of the repository invitation.
   */
  id: number;
  repository: MinimalRepository;
  invitee: SimpleUser1;
  inviter: SimpleUser2;
  /**
   * The permission associated with the invitation.
   */
  permissions: "read" | "write" | "admin";
  created_at: string;
  /**
   * URL for the repository invitation
   */
  url: string;
  html_url: string;
  node_id: string;
}
/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReposUpdatePullRequestReviewProtectionEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
  /**
   * Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
   */
  dismissal_restrictions?: ReposUpdatePullRequestReviewProtectionParamsDismissalRestrictions;
  /**
   * Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
   */
  dismiss_stale_reviews?: boolean;
  /**
   * Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) have reviewed.
   */
  require_code_owner_reviews?: boolean;
  /**
   * Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6.
   */
  required_approving_review_count?: number;
};

type ReposUpdatePullRequestReviewProtectionRequestOptions = {
  method: "PATCH";
  url: "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Protected Branch Pull Request Review
 */
export interface ReposUpdatePullRequestReviewProtectionResponseData {
  url: string;
  dismissal_restrictions: {
    /**
     * The list of users with review dismissal access.
     */
    users: SimpleUser[];
    /**
     * The list of teams with review dismissal access.
     */
    teams: Team[];
    url: string;
    users_url: string;
    teams_url: string;
  };
  dismiss_stale_reviews: boolean;
  require_code_owner_reviews: boolean;
  required_approving_review_count: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string;
  privacy: string;
  permission: string;
  url: string;
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}

/**
 * Validation Error
 */
export interface ReposUpdatePullRequestReviewProtectionResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposUpdateReleaseEndpoint = {
  owner: string;

  repo: string;
  /**
   * release_id parameter
   */
  release_id: number;
  /**
   * The name of the tag.
   */
  tag_name?: string;
  /**
   * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
   */
  target_commitish?: string;
  /**
   * The name of the release.
   */
  name?: string;
  /**
   * Text describing the contents of the tag.
   */
  body?: string;
  /**
   * `true` makes the release a draft, and `false` publishes the release.
   */
  draft?: boolean;
  /**
   * `true` to identify the release as a prerelease, `false` to identify the release as a full release.
   */
  prerelease?: boolean;
};

type ReposUpdateReleaseRequestOptions = {
  method: "PATCH";
  url: "/repos/:owner/:repo/releases/:release_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A release.
 */
export interface ReposUpdateReleaseResponseData {
  url: string;
  html_url: string;
  assets_url: string;
  upload_url: string;
  tarball_url: string;
  zipball_url: string;
  id: number;
  node_id: string;
  /**
   * The name of the tag.
   */
  tag_name: string;
  /**
   * Specifies the commitish value that determines where the Git tag is created from.
   */
  target_commitish: string;
  name: string;
  body: string;
  /**
   * true to create a draft (unpublished) release, false to create a published one.
   */
  draft: boolean;
  /**
   * Whether to identify the release as a prerelease or a full release.
   */
  prerelease: boolean;
  created_at: string;
  published_at: string;
  author: SimpleUser;
  assets: ReleaseAsset[];
  body_html: string;
  body_text: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Data related to a release.
 */
export interface ReleaseAsset {
  url: string;
  browser_download_url: string;
  id: number;
  node_id: string;
  /**
   * The file name of the asset.
   */
  name: string;
  label: string;
  /**
   * State of the release asset.
   */
  state: "uploaded";
  content_type: string;
  size: number;
  download_count: number;
  created_at: string;
  updated_at: string;
  uploader: SimpleUser1;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReposUpdateReleaseAssetEndpoint = {
  owner: string;

  repo: string;
  /**
   * asset_id parameter
   */
  asset_id: number;
  /**
   * The file name of the asset.
   */
  name?: string;
  /**
   * An alternate short description of the asset. Used in place of the filename.
   */
  label?: string;

  state?: string;
};

type ReposUpdateReleaseAssetRequestOptions = {
  method: "PATCH";
  url: "/repos/:owner/:repo/releases/assets/:asset_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Data related to a release.
 */
export interface ReposUpdateReleaseAssetResponseData {
  url: string;
  browser_download_url: string;
  id: number;
  node_id: string;
  /**
   * The file name of the asset.
   */
  name: string;
  label: string;
  /**
   * State of the release asset.
   */
  state: "uploaded";
  content_type: string;
  size: number;
  download_count: number;
  created_at: string;
  updated_at: string;
  uploader: SimpleUser;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ReposUpdateStatusCheckProtectionEndpoint = {
  owner: string;

  repo: string;
  /**
   * branch+ parameter
   */
  branch: string;
  /**
   * Require branches to be up to date before merging.
   */
  strict?: boolean;
  /**
   * The list of status checks to require in order to merge into this branch
   */
  contexts?: string[];
};

type ReposUpdateStatusCheckProtectionRequestOptions = {
  method: "PATCH";
  url: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Status Check Policy
 */
export interface ReposUpdateStatusCheckProtectionResponseData {
  url: string;
  strict: boolean;
  contexts: string[];
  contexts_url: string;
}

/**
 * Basic Error
 */
export interface ReposUpdateStatusCheckProtectionResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReposUpdateStatusCheckProtectionResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposUpdateWebhookEndpoint = {
  owner: string;

  repo: string;

  hook_id: number;
  /**
   * Key/value pairs to provide settings for this webhook. [These are defined below](https://developer.github.com/v3/repos/hooks/#create-hook-config-params).
   */
  config?: ReposUpdateWebhookParamsConfig;
  /**
   * Determines what [events](https://developer.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
   */
  events?: string[];
  /**
   * Determines a list of events to be added to the list of events that the Hook triggers for.
   */
  add_events?: string[];
  /**
   * Determines a list of events to be removed from the list of events that the Hook triggers for.
   */
  remove_events?: string[];
  /**
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   */
  active?: boolean;
};

type ReposUpdateWebhookRequestOptions = {
  method: "PATCH";
  url: "/repos/:owner/:repo/hooks/:hook_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Webhooks for repositories.
 */
export interface ReposUpdateWebhookResponseData {
  type: string;
  /**
   * Unique identifier of the webhook.
   */
  id: number;
  /**
   * The name of a valid service, use 'web' for a webhook.
   */
  name: string;
  /**
   * Determines whether the hook is actually triggered on pushes.
   */
  active: boolean;
  /**
   * Determines what events the hook is triggered for. Default: ['push'].
   */
  events: string[];
  config: {
    email: string;
    password: string;
    room: string;
    subdomain: string;
    url: string;
    insecure_ssl: string;
    content_type: string;
    digest: string;
    secret: string;
    token: string;
  };
  updated_at: string;
  created_at: string;
  url: string;
  test_url: string;
  ping_url: string;
  last_response: HookResponse;
}
export interface HookResponse {
  code: number;
  status: string;
  message: string;
}

/**
 * Basic Error
 */
export interface ReposUpdateWebhookResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface ReposUpdateWebhookResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ReposUploadReleaseAssetEndpoint = {
  owner: string;

  repo: string;
  /**
   * release_id parameter
   */
  release_id: number;
  /**
   * name parameter
   */
  name?: string;
  /**
   * label parameter
   */
  label?: string;
  /**
   * The raw file data
   */
  data: string | Buffer;
  /**
   * The URL origin (protocol + host name + port) is included in `upload_url` returned in the response of the "Create a release" endpoint
   */
  origin?: string;
  /**
   * For https://api.github.com, set `baseUrl` to `https://uploads.github.com`. For GitHub Enterprise Server, set it to `<your hostname>/api/uploads`
   */
  baseUrl: string;
};

type ReposUploadReleaseAssetRequestOptions = {
  method: "POST";
  url: "/repos/:owner/:repo/releases/:release_id/assets{?name,label}";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Data related to a release.
 */
export interface ReposUploadReleaseAssetResponseData {
  url: string;
  browser_download_url: string;
  id: number;
  node_id: string;
  /**
   * The file name of the asset.
   */
  name: string;
  label: string;
  /**
   * State of the release asset.
   */
  state: "uploaded";
  content_type: string;
  size: number;
  download_count: number;
  created_at: string;
  updated_at: string;
  uploader: SimpleUser;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type ScimDeleteUserFromOrgEndpoint = {
  org: string;
  /**
   * scim_user_id parameter
   */
  scim_user_id: string;
};

type ScimDeleteUserFromOrgRequestOptions = {
  method: "DELETE";
  url: "/scim/v2/organizations/:org/Users/:scim_user_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Scim Error
 */
export interface ScimDeleteUserFromOrgResponse403Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimDeleteUserFromOrgResponse403Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimDeleteUserFromOrgResponse404Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimDeleteUserFromOrgResponse404Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

type ScimGetProvisioningInformationForUserEndpoint = {
  org: string;
  /**
   * scim_user_id parameter
   */
  scim_user_id: string;
};

type ScimGetProvisioningInformationForUserRequestOptions = {
  method: "GET";
  url: "/scim/v2/organizations/:org/Users/:scim_user_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * SCIM /Users provisioning endpoints
 */
export interface ScimGetProvisioningInformationForUserResponseData {
  /**
   * SCIM schema used.
   */
  schemas: [string, ...string[]];
  /**
   * Unique identifier of an external identity
   */
  id: string;
  /**
   * The ID of the User.
   */
  externalId: string;
  /**
   * Configured by the admin. Could be an email, login, or username
   */
  userName: string;
  /**
   * The name of the user, suitable for display to end-users
   */
  displayName: string;
  name: {
    givenName: string;
    familyName: string;
    formatted: string;
  };
  /**
   * user emails
   */
  emails: [
    {
      value: string;
      primary: boolean;
    },
    ...{
      value: string;
      primary: boolean;
    }[]
  ];
  /**
   * The active status of the User.
   */
  active: boolean;
  meta: {
    resourceType: string;
    created: string;
    lastModified: string;
    location: string;
  };
  /**
   * The ID of the organization.
   */
  organization_id: number;
  /**
   * Set of operations to be performed
   */
  operations: [
    {
      op: "add" | "remove" | "replace";
      path: string;
      value:
        | string
        | {
            [k: string]: unknown;
          }
        | unknown[];
    },
    ...{
      op: "add" | "remove" | "replace";
      path: string;
      value:
        | string
        | {
            [k: string]: unknown;
          }
        | unknown[];
    }[]
  ];
  /**
   * associated groups
   */
  groups: {
    value: string;
    display: string;
  }[];
}

/**
 * Scim Error
 */
export interface ScimGetProvisioningInformationForUserResponse403Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimGetProvisioningInformationForUserResponse403Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimGetProvisioningInformationForUserResponse404Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimGetProvisioningInformationForUserResponse404Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

type ScimListProvisionedIdentitiesEndpoint = {
  org: string;
  /**
   * Used for pagination: the index of the first result to return.
   */
  startIndex?: number;
  /**
   * Used for pagination: the number of results to return.
   */
  count?: number;
  /**
   * Filters results using the equals query parameter operator (`eq`). You can filter results that are equal to `id`, `userName`, `emails`, and `external_id`. For example, to search for an identity with the `userName` Octocat, you would use this query:
   *
   * `?filter=userName%20eq%20\"Octocat\"`.
   *
   * To filter results for for the identity with the email `octocat@github.com`, you would use this query:
   *
   * `?filter=emails%20eq%20\"octocat@github.com\"`.
   */
  filter?: string;
};

type ScimListProvisionedIdentitiesRequestOptions = {
  method: "GET";
  url: "/scim/v2/organizations/:org/Users";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * SCIM User List
 */
export interface ScimListProvisionedIdentitiesResponseData {
  /**
   * SCIM schema used.
   */
  schemas: [string, ...string[]];
  totalResults: number;
  itemsPerPage: number;
  startIndex: number;
  Resources: SCIMUsers[];
}
/**
 * SCIM /Users provisioning endpoints
 */
export interface SCIMUsers {
  /**
   * SCIM schema used.
   */
  schemas: [string, ...string[]];
  /**
   * Unique identifier of an external identity
   */
  id: string;
  /**
   * The ID of the User.
   */
  externalId: string;
  /**
   * Configured by the admin. Could be an email, login, or username
   */
  userName: string;
  /**
   * The name of the user, suitable for display to end-users
   */
  displayName: string;
  name: {
    givenName: string;
    familyName: string;
    formatted: string;
  };
  /**
   * user emails
   */
  emails: [
    {
      value: string;
      primary: boolean;
    },
    ...{
      value: string;
      primary: boolean;
    }[]
  ];
  /**
   * The active status of the User.
   */
  active: boolean;
  meta: {
    resourceType: string;
    created: string;
    lastModified: string;
    location: string;
  };
  /**
   * The ID of the organization.
   */
  organization_id: number;
  /**
   * Set of operations to be performed
   */
  operations: [
    {
      op: "add" | "remove" | "replace";
      path: string;
      value:
        | string
        | {
            [k: string]: unknown;
          }
        | unknown[];
    },
    ...{
      op: "add" | "remove" | "replace";
      path: string;
      value:
        | string
        | {
            [k: string]: unknown;
          }
        | unknown[];
    }[]
  ];
  /**
   * associated groups
   */
  groups: {
    value: string;
    display: string;
  }[];
}

/**
 * Scim Error
 */
export interface ScimListProvisionedIdentitiesResponse400Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimListProvisionedIdentitiesResponse400Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimListProvisionedIdentitiesResponse403Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimListProvisionedIdentitiesResponse403Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimListProvisionedIdentitiesResponse404Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimListProvisionedIdentitiesResponse404Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

type ScimProvisionAndInviteUserEndpoint = {
  org: string;
  /**
   * Configured by the admin. Could be an email, login, or username
   */
  userName: string;
  /**
   * The name of the user, suitable for display to end-users
   */
  displayName?: string;

  name: ScimProvisionAndInviteUserParamsName;
  /**
   * user emails
   */
  emails: ScimProvisionAndInviteUserParamsEmails[];

  schemas?: string[];

  externalId?: string;

  groups?: string[];

  active?: boolean;
};

type ScimProvisionAndInviteUserRequestOptions = {
  method: "POST";
  url: "/scim/v2/organizations/:org/Users";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * SCIM /Users provisioning endpoints
 */
export interface ScimProvisionAndInviteUserResponseData {
  /**
   * SCIM schema used.
   */
  schemas: [string, ...string[]];
  /**
   * Unique identifier of an external identity
   */
  id: string;
  /**
   * The ID of the User.
   */
  externalId: string;
  /**
   * Configured by the admin. Could be an email, login, or username
   */
  userName: string;
  /**
   * The name of the user, suitable for display to end-users
   */
  displayName: string;
  name: {
    givenName: string;
    familyName: string;
    formatted: string;
  };
  /**
   * user emails
   */
  emails: [
    {
      value: string;
      primary: boolean;
    },
    ...{
      value: string;
      primary: boolean;
    }[]
  ];
  /**
   * The active status of the User.
   */
  active: boolean;
  meta: {
    resourceType: string;
    created: string;
    lastModified: string;
    location: string;
  };
  /**
   * The ID of the organization.
   */
  organization_id: number;
  /**
   * Set of operations to be performed
   */
  operations: [
    {
      op: "add" | "remove" | "replace";
      path: string;
      value:
        | string
        | {
            [k: string]: unknown;
          }
        | unknown[];
    },
    ...{
      op: "add" | "remove" | "replace";
      path: string;
      value:
        | string
        | {
            [k: string]: unknown;
          }
        | unknown[];
    }[]
  ];
  /**
   * associated groups
   */
  groups: {
    value: string;
    display: string;
  }[];
}

/**
 * Scim Error
 */
export interface ScimProvisionAndInviteUserResponse400Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimProvisionAndInviteUserResponse400Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimProvisionAndInviteUserResponse403Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimProvisionAndInviteUserResponse403Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimProvisionAndInviteUserResponse404Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimProvisionAndInviteUserResponse404Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimProvisionAndInviteUserResponse409Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimProvisionAndInviteUserResponse409Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimProvisionAndInviteUserResponse500Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimProvisionAndInviteUserResponse500Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

type ScimSetInformationForProvisionedUserEndpoint = {
  org: string;
  /**
   * scim_user_id parameter
   */
  scim_user_id: string;

  schemas?: string[];
  /**
   * The name of the user, suitable for display to end-users
   */
  displayName?: string;

  externalId?: string;

  groups?: string[];

  active?: boolean;
  /**
   * Configured by the admin. Could be an email, login, or username
   */
  userName: string;

  name: ScimSetInformationForProvisionedUserParamsName;
  /**
   * user emails
   */
  emails: ScimSetInformationForProvisionedUserParamsEmails[];
};

type ScimSetInformationForProvisionedUserRequestOptions = {
  method: "PUT";
  url: "/scim/v2/organizations/:org/Users/:scim_user_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * SCIM /Users provisioning endpoints
 */
export interface ScimSetInformationForProvisionedUserResponseData {
  /**
   * SCIM schema used.
   */
  schemas: [string, ...string[]];
  /**
   * Unique identifier of an external identity
   */
  id: string;
  /**
   * The ID of the User.
   */
  externalId: string;
  /**
   * Configured by the admin. Could be an email, login, or username
   */
  userName: string;
  /**
   * The name of the user, suitable for display to end-users
   */
  displayName: string;
  name: {
    givenName: string;
    familyName: string;
    formatted: string;
  };
  /**
   * user emails
   */
  emails: [
    {
      value: string;
      primary: boolean;
    },
    ...{
      value: string;
      primary: boolean;
    }[]
  ];
  /**
   * The active status of the User.
   */
  active: boolean;
  meta: {
    resourceType: string;
    created: string;
    lastModified: string;
    location: string;
  };
  /**
   * The ID of the organization.
   */
  organization_id: number;
  /**
   * Set of operations to be performed
   */
  operations: [
    {
      op: "add" | "remove" | "replace";
      path: string;
      value:
        | string
        | {
            [k: string]: unknown;
          }
        | unknown[];
    },
    ...{
      op: "add" | "remove" | "replace";
      path: string;
      value:
        | string
        | {
            [k: string]: unknown;
          }
        | unknown[];
    }[]
  ];
  /**
   * associated groups
   */
  groups: {
    value: string;
    display: string;
  }[];
}

/**
 * Scim Error
 */
export interface ScimSetInformationForProvisionedUserResponse403Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimSetInformationForProvisionedUserResponse403Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimSetInformationForProvisionedUserResponse404Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimSetInformationForProvisionedUserResponse404Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

type ScimUpdateAttributeForUserEndpoint = {
  org: string;
  /**
   * scim_user_id parameter
   */
  scim_user_id: string;

  schemas?: string[];
  /**
   * Set of operations to be performed
   */
  Operations: ScimUpdateAttributeForUserParamsOperations[];
};

type ScimUpdateAttributeForUserRequestOptions = {
  method: "PATCH";
  url: "/scim/v2/organizations/:org/Users/:scim_user_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * SCIM /Users provisioning endpoints
 */
export interface ScimUpdateAttributeForUserResponseData {
  /**
   * SCIM schema used.
   */
  schemas: [string, ...string[]];
  /**
   * Unique identifier of an external identity
   */
  id: string;
  /**
   * The ID of the User.
   */
  externalId: string;
  /**
   * Configured by the admin. Could be an email, login, or username
   */
  userName: string;
  /**
   * The name of the user, suitable for display to end-users
   */
  displayName: string;
  name: {
    givenName: string;
    familyName: string;
    formatted: string;
  };
  /**
   * user emails
   */
  emails: [
    {
      value: string;
      primary: boolean;
    },
    ...{
      value: string;
      primary: boolean;
    }[]
  ];
  /**
   * The active status of the User.
   */
  active: boolean;
  meta: {
    resourceType: string;
    created: string;
    lastModified: string;
    location: string;
  };
  /**
   * The ID of the organization.
   */
  organization_id: number;
  /**
   * Set of operations to be performed
   */
  operations: [
    {
      op: "add" | "remove" | "replace";
      path: string;
      value:
        | string
        | {
            [k: string]: unknown;
          }
        | unknown[];
    },
    ...{
      op: "add" | "remove" | "replace";
      path: string;
      value:
        | string
        | {
            [k: string]: unknown;
          }
        | unknown[];
    }[]
  ];
  /**
   * associated groups
   */
  groups: {
    value: string;
    display: string;
  }[];
}

/**
 * Scim Error
 */
export interface ScimUpdateAttributeForUserResponse400Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimUpdateAttributeForUserResponse400Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimUpdateAttributeForUserResponse403Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimUpdateAttributeForUserResponse403Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimUpdateAttributeForUserResponse404Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Scim Error
 */
export interface ScimUpdateAttributeForUserResponse404Data {
  message: string;
  documentation_url: string;
  detail: string;
  status: number;
  scimType: string;
  schemas: string[];
}

/**
 * Basic Error
 */
export interface ScimUpdateAttributeForUserResponse429Data {
  message: string;
  documentation_url: string;
}

type SearchCodeEndpoint = {
  /**
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See "[Searching code](https://help.github.com/articles/searching-code/)" for a detailed list of qualifiers.
   */
  q: string;
  /**
   * Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)
   */
  sort?: "indexed";
  /**
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   */
  order?: "desc" | "asc";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type SearchCodeRequestOptions = {
  method: "GET";
  url: "/search/code";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type SearchResultTextMatches = {
  object_url: string;
  object_type: string;
  property: string;
  fragment: string;
  matches: {
    text: string;
    indices: number[];
  }[];
}[];

export interface SearchCodeResponseData {
  total_count: number;
  incomplete_results: boolean;
  items: CodeSearchResultItem[];
}
/**
 * Code Search Result Item
 */
export interface CodeSearchResultItem {
  name: string;
  path: string;
  sha: string;
  url: string;
  git_url: string;
  html_url: string;
  repository: MinimalRepository;
  score: number;
  file_size: number;
  language: string;
  last_modified_at: string;
  line_numbers: string[];
  text_matches: SearchResultTextMatches;
}
/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface SearchCodeResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface SearchCodeResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

export interface SearchCodeResponse503Data {
  code: string;
  message: string;
  documentation_url: string;
}

type SearchCommitsEndpoint = {
  /**
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See "[Searching commits](https://help.github.com/articles/searching-commits/)" for a detailed list of qualifiers.
   */
  q: string;
  /**
   * Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)
   */
  sort?: "author-date" | "committer-date";
  /**
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   */
  order?: "desc" | "asc";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"cloak">;

type SearchCommitsRequestOptions = {
  method: "GET";
  url: "/search/commits";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type SearchResultTextMatches = {
  object_url: string;
  object_type: string;
  property: string;
  fragment: string;
  matches: {
    text: string;
    indices: number[];
  }[];
}[];

export interface SearchCommitsResponseData {
  total_count: number;
  incomplete_results: boolean;
  items: CommitSearchResultItem[];
}
/**
 * Commit Search Result Item
 */
export interface CommitSearchResultItem {
  url: string;
  sha: string;
  html_url: string;
  comments_url: string;
  commit: {
    author: {
      name: string;
      email: string;
      date: string;
    };
    committer: GitUser;
    comment_count: number;
    message: string;
    tree: {
      sha: string;
      url: string;
    };
    url: string;
    verification: Verification;
  };
  author: SimpleUser;
  committer: GitUser1;
  parents: {
    url: string;
    html_url: string;
    sha: string;
  }[];
  repository: MinimalRepository;
  score: number;
  node_id: string;
  text_matches: SearchResultTextMatches;
}
/**
 * Metaproperties for Git author/committer information.
 */
export interface GitUser {
  name?: string;
  email?: string;
  date?: string;
  [k: string]: unknown;
}
export interface Verification {
  verified: boolean;
  reason: string;
  payload: string;
  signature: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Metaproperties for Git author/committer information.
 */
export interface GitUser1 {
  name?: string;
  email?: string;
  date?: string;
  [k: string]: unknown;
}
/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser1;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

export interface SearchCommitsResponse415Data {
  message: string;
  documentation_url: string;
}

type SearchIssuesAndPullRequestsEndpoint = {
  /**
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See "[Searching issues and pull requests](https://help.github.com/articles/searching-issues-and-pull-requests/)" for a detailed list of qualifiers.
   */
  q: string;
  /**
   * Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)
   */
  sort?:
    | "comments"
    | "reactions"
    | "reactions-+1"
    | "reactions--1"
    | "reactions-smile"
    | "reactions-thinking_face"
    | "reactions-heart"
    | "reactions-tada"
    | "interactions"
    | "created"
    | "updated";
  /**
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   */
  order?: "desc" | "asc";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type SearchIssuesAndPullRequestsRequestOptions = {
  method: "GET";
  url: "/search/issues";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type SearchResultTextMatches = {
  object_url: string;
  object_type: string;
  property: string;
  fragment: string;
  matches: {
    text: string;
    indices: number[];
  }[];
}[];

export interface SearchIssuesAndPullRequestsResponseData {
  total_count: number;
  incomplete_results: boolean;
  items: IssueSearchResultItem[];
}
/**
 * Issue Search Result Item
 */
export interface IssueSearchResultItem {
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  id: number;
  node_id: string;
  number: number;
  title: string;
  locked: boolean;
  active_lock_reason: string;
  assignees: SimpleUser[];
  user: SimpleUser1;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
    description: string;
  }[];
  state: string;
  assignee: SimpleUser2;
  milestone: Milestone;
  comments: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  text_matches: SearchResultTextMatches;
  pull_request: {
    merged_at: string;
    diff_url: string;
    html_url: string;
    patch_url: string;
    url: string;
  };
  body: string;
  score: number;
  author_association: string;
  draft: boolean;
  repository: Repository;
  body_html: string;
  body_text: string;
  timeline_url: string;
  performed_via_github_app: GitHubApp;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}
/**
 * Simple User
 */
export interface SimpleUser1 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser2 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  /**
   * The state of the milestone.
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   */
  title: string;
  description: string;
  creator: SimpleUser3;
  open_issues: number;
  closed_issues: number;
  created_at: string;
  updated_at: string;
  closed_at: string;
  due_on: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser3 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * A git repository
 */
export interface Repository {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser4;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
  starred_at: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser4 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: SimpleUser5;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [k: string]: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string;
  pem?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser5 {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface SearchIssuesAndPullRequestsResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface SearchIssuesAndPullRequestsResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

export interface SearchIssuesAndPullRequestsResponse503Data {
  code: string;
  message: string;
  documentation_url: string;
}

type SearchLabelsEndpoint = {
  /**
   * The id of the repository.
   */
  repository_id: number;
  /**
   * The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query).
   */
  q: string;
  /**
   * Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)
   */
  sort?: "created" | "updated";
  /**
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   */
  order?: "desc" | "asc";
};

type SearchLabelsRequestOptions = {
  method: "GET";
  url: "/search/labels";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type SearchResultTextMatches = {
  object_url: string;
  object_type: string;
  property: string;
  fragment: string;
  matches: {
    text: string;
    indices: number[];
  }[];
}[];

export interface SearchLabelsResponseData {
  total_count: number;
  incomplete_results: boolean;
  items: LabelSearchResultItem[];
}
/**
 * Label Search Result Item
 */
export interface LabelSearchResultItem {
  id: number;
  node_id: string;
  url: string;
  name: string;
  color: string;
  default: boolean;
  description: string;
  score: number;
  text_matches: SearchResultTextMatches;
}

/**
 * Basic Error
 */
export interface SearchLabelsResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface SearchLabelsResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface SearchLabelsResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type SearchReposEndpoint = {
  /**
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See "[Searching for repositories](https://help.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers.
   */
  q: string;
  /**
   * Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)
   */
  sort?: "stars" | "forks" | "help-wanted-issues" | "updated";
  /**
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   */
  order?: "desc" | "asc";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type SearchReposRequestOptions = {
  method: "GET";
  url: "/search/repositories";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type SearchResultTextMatches = {
  object_url: string;
  object_type: string;
  property: string;
  fragment: string;
  matches: {
    text: string;
    indices: number[];
  }[];
}[];

export interface SearchReposResponseData {
  total_count: number;
  incomplete_results: boolean;
  items: RepoSearchResultItem[];
}
/**
 * Repo Search Result Item
 */
export interface RepoSearchResultItem {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  created_at: string;
  updated_at: string;
  pushed_at: string;
  homepage: string;
  size: number;
  stargazers_count: number;
  watchers_count: number;
  language: string;
  forks_count: number;
  open_issues_count: number;
  master_branch: string;
  default_branch: string;
  score: number;
  forks_url: string;
  keys_url: string;
  collaborators_url: string;
  teams_url: string;
  hooks_url: string;
  issue_events_url: string;
  events_url: string;
  assignees_url: string;
  branches_url: string;
  tags_url: string;
  blobs_url: string;
  git_tags_url: string;
  git_refs_url: string;
  trees_url: string;
  statuses_url: string;
  languages_url: string;
  stargazers_url: string;
  contributors_url: string;
  subscribers_url: string;
  subscription_url: string;
  commits_url: string;
  git_commits_url: string;
  comments_url: string;
  issue_comment_url: string;
  contents_url: string;
  compare_url: string;
  merges_url: string;
  archive_url: string;
  downloads_url: string;
  issues_url: string;
  pulls_url: string;
  milestones_url: string;
  notifications_url: string;
  labels_url: string;
  releases_url: string;
  deployments_url: string;
  git_url: string;
  ssh_url: string;
  clone_url: string;
  svn_url: string;
  forks: number;
  open_issues: number;
  watchers: number;
  topics: string[];
  mirror_url: string;
  has_issues: boolean;
  has_projects: boolean;
  has_pages: boolean;
  has_wiki: boolean;
  has_downloads: boolean;
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  license: LicenseSimple;
  permissions: {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  text_matches: SearchResultTextMatches;
  temp_clone_token: string;
  allow_merge_commit: boolean;
  allow_squash_merge: boolean;
  allow_rebase_merge: boolean;
  delete_branch_on_merge: boolean;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}

/**
 * Validation Error
 */
export interface SearchReposResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

export interface SearchReposResponse503Data {
  code: string;
  message: string;
  documentation_url: string;
}

type SearchTopicsEndpoint = {
  /**
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query).
   */
  q: string;
} & RequiredPreview<"mercy">;

type SearchTopicsRequestOptions = {
  method: "GET";
  url: "/search/topics";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type SearchResultTextMatches = {
  object_url: string;
  object_type: string;
  property: string;
  fragment: string;
  matches: {
    text: string;
    indices: number[];
  }[];
}[];

export interface SearchTopicsResponseData {
  total_count: number;
  incomplete_results: boolean;
  items: TopicSearchResultItem[];
}
/**
 * Topic Search Result Item
 */
export interface TopicSearchResultItem {
  name: string;
  display_name: string;
  short_description: string;
  description: string;
  created_by: string;
  released: string;
  created_at: string;
  updated_at: string;
  featured: boolean;
  curated: boolean;
  score: number;
  repository_count: number;
  logo_url: string;
  text_matches: SearchResultTextMatches;
  related: {
    topic_relation: {
      id: number;
      name: string;
      topic_id: number;
      relation_type: string;
    };
  }[];
  aliases: {
    topic_relation: {
      id: number;
      name: string;
      topic_id: number;
      relation_type: string;
    };
  }[];
}

export interface SearchTopicsResponse415Data {
  message: string;
  documentation_url: string;
}

type SearchUsersEndpoint = {
  /**
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See "[Searching users](https://help.github.com/articles/searching-users/)" for a detailed list of qualifiers.
   */
  q: string;
  /**
   * Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)
   */
  sort?: "followers" | "repositories" | "joined";
  /**
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   */
  order?: "desc" | "asc";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type SearchUsersRequestOptions = {
  method: "GET";
  url: "/search/users";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type SearchResultTextMatches = {
  object_url: string;
  object_type: string;
  property: string;
  fragment: string;
  matches: {
    text: string;
    indices: number[];
  }[];
}[];

export interface SearchUsersResponseData {
  total_count: number;
  incomplete_results: boolean;
  items: UserSearchResultItem[];
}
/**
 * User Search Result Item
 */
export interface UserSearchResultItem {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  received_events_url: string;
  type: string;
  score: number;
  following_url: string;
  gists_url: string;
  starred_url: string;
  events_url: string;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  created_at: string;
  updated_at: string;
  name: string;
  bio: string;
  email: string;
  location: string;
  site_admin: boolean;
  hireable: boolean;
  text_matches: SearchResultTextMatches;
  blog: string;
  company: string;
  suspended_at: string;
}

/**
 * Validation Error
 */
export interface SearchUsersResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

export interface SearchUsersResponse503Data {
  code: string;
  message: string;
  documentation_url: string;
}

type TeamsAddMemberLegacyEndpoint = {
  team_id: number;

  username: string;
};

type TeamsAddMemberLegacyRequestOptions = {
  method: "PUT";
  url: "/teams/:team_id/members/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface TeamsAddMemberLegacyResponse403Data {
  message: string;
  documentation_url: string;
}

export interface TeamsAddMemberLegacyResponse422Data {
  message: string;
  errors: {
    code: string;
    field: string;
    resource: string;
  }[];
  documentation_url: string;
}

type TeamsAddOrUpdateMembershipForUserInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  username: string;
  /**
   * The role that this user should have in the team. Can be one of:
   * \* `member` - a normal member of the team.
   * \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
   */
  role?: "member" | "maintainer";
};

type TeamsAddOrUpdateMembershipForUserInOrgRequestOptions = {
  method: "PUT";
  url: "/orgs/:org/teams/:team_slug/memberships/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Team Membership
 */
export interface TeamsAddOrUpdateMembershipForUserInOrgResponseData {
  url: string;
  /**
   * The role of the user in the team.
   */
  role: "member" | "maintainer";
  state: string;
}

export interface TeamsAddOrUpdateMembershipForUserInOrgResponse422Data {
  message: string;
  errors: {
    code: string;
    field: string;
    resource: string;
  }[];
}

type TeamsAddOrUpdateMembershipForUserLegacyEndpoint = {
  team_id: number;

  username: string;
  /**
   * The role that this user should have in the team. Can be one of:
   * \* `member` - a normal member of the team.
   * \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
   */
  role?: "member" | "maintainer";
};

type TeamsAddOrUpdateMembershipForUserLegacyRequestOptions = {
  method: "PUT";
  url: "/teams/:team_id/memberships/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Team Membership
 */
export interface TeamsAddOrUpdateMembershipForUserLegacyResponseData {
  url: string;
  /**
   * The role of the user in the team.
   */
  role: "member" | "maintainer";
  state: string;
}

/**
 * Basic Error
 */
export interface TeamsAddOrUpdateMembershipForUserLegacyResponse404Data {
  message: string;
  documentation_url: string;
}

export interface TeamsAddOrUpdateMembershipForUserLegacyResponse422Data {
  message: string;
  errors: {
    code: string;
    field: string;
    resource: string;
  }[];
  documentation_url: string;
}

type TeamsAddOrUpdateProjectPermissionsInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  project_id: number;
  /**
   * The permission to grant to the team for this project. Can be one of:
   * \* `read` - team members can read, but not write to or administer this project.
   * \* `write` - team members can read and write, but not administer this project.
   * \* `admin` - team members can read, write and administer this project.
   * Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://developer.github.com/v3/#http-verbs)."
   */
  permission?: "read" | "write" | "admin";
} & RequiredPreview<"inertia">;

type TeamsAddOrUpdateProjectPermissionsInOrgRequestOptions = {
  method: "PUT";
  url: "/orgs/:org/teams/:team_slug/projects/:project_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface TeamsAddOrUpdateProjectPermissionsInOrgResponse403Data {
  message: string;
  documentation_url: string;
}

type TeamsAddOrUpdateProjectPermissionsLegacyEndpoint = {
  team_id: number;

  project_id: number;
  /**
   * The permission to grant to the team for this project. Can be one of:
   * \* `read` - team members can read, but not write to or administer this project.
   * \* `write` - team members can read and write, but not administer this project.
   * \* `admin` - team members can read, write and administer this project.
   * Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://developer.github.com/v3/#http-verbs)."
   */
  permission?: "read" | "write" | "admin";
} & RequiredPreview<"inertia">;

type TeamsAddOrUpdateProjectPermissionsLegacyRequestOptions = {
  method: "PUT";
  url: "/teams/:team_id/projects/:project_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export interface TeamsAddOrUpdateProjectPermissionsLegacyResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface TeamsAddOrUpdateProjectPermissionsLegacyResponse404Data {
  message: string;
  documentation_url: string;
}

export interface TeamsAddOrUpdateProjectPermissionsLegacyResponse415Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface TeamsAddOrUpdateProjectPermissionsLegacyResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type TeamsAddOrUpdateRepoPermissionsInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  owner: string;

  repo: string;
  /**
   * The permission to grant the team on this repository. Can be one of:
   * \* `pull` - team members can pull, but not push to or administer this repository.
   * \* `push` - team members can pull and push, but not administer this repository.
   * \* `admin` - team members can pull, push and administer this repository.
   * \* `maintain` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.
   * \* `triage` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.
   *
   * If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
   */
  permission?: "pull" | "push" | "admin" | "maintain" | "triage";
};

type TeamsAddOrUpdateRepoPermissionsInOrgRequestOptions = {
  method: "PUT";
  url: "/orgs/:org/teams/:team_slug/repos/:owner/:repo";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type TeamsAddOrUpdateRepoPermissionsLegacyEndpoint = {
  team_id: number;

  owner: string;

  repo: string;
  /**
   * The permission to grant the team on this repository. Can be one of:
   * \* `pull` - team members can pull, but not push to or administer this repository.
   * \* `push` - team members can pull and push, but not administer this repository.
   * \* `admin` - team members can pull, push and administer this repository.
   *
   * If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
   */
  permission?: "pull" | "push" | "admin";
};

type TeamsAddOrUpdateRepoPermissionsLegacyRequestOptions = {
  method: "PUT";
  url: "/teams/:team_id/repos/:owner/:repo";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface TeamsAddOrUpdateRepoPermissionsLegacyResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface TeamsAddOrUpdateRepoPermissionsLegacyResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type TeamsCheckPermissionsForProjectInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  project_id: number;
} & RequiredPreview<"inertia">;

type TeamsCheckPermissionsForProjectInOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/teams/:team_slug/projects/:project_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A team's access to a project.
 */
export interface TeamsCheckPermissionsForProjectInOrgResponseData {
  owner_url: string;
  url: string;
  html_url: string;
  columns_url: string;
  id: number;
  node_id: string;
  name: string;
  body: string;
  number: number;
  state: string;
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  organization_permission: string;
  private: boolean;
  permissions: {
    read: boolean;
    write: boolean;
    admin: boolean;
  };
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

type TeamsCheckPermissionsForProjectLegacyEndpoint = {
  team_id: number;

  project_id: number;
} & RequiredPreview<"inertia">;

type TeamsCheckPermissionsForProjectLegacyRequestOptions = {
  method: "GET";
  url: "/teams/:team_id/projects/:project_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A team's access to a project.
 */
export interface TeamsCheckPermissionsForProjectLegacyResponseData {
  owner_url: string;
  url: string;
  html_url: string;
  columns_url: string;
  id: number;
  node_id: string;
  name: string;
  body: string;
  number: number;
  state: string;
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  organization_permission: string;
  private: boolean;
  permissions: {
    read: boolean;
    write: boolean;
    admin: boolean;
  };
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

export interface TeamsCheckPermissionsForProjectLegacyResponse415Data {
  message: string;
  documentation_url: string;
}

type TeamsCheckPermissionsForRepoInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  owner: string;

  repo: string;
};

type TeamsCheckPermissionsForRepoInOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/teams/:team_slug/repos/:owner/:repo";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A team's access to a repository.
 */
export interface TeamsCheckPermissionsForRepoInOrgResponseData {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type TeamsCheckPermissionsForRepoLegacyEndpoint = {
  team_id: number;

  owner: string;

  repo: string;
};

type TeamsCheckPermissionsForRepoLegacyRequestOptions = {
  method: "GET";
  url: "/teams/:team_id/repos/:owner/:repo";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A team's access to a repository.
 */
export interface TeamsCheckPermissionsForRepoLegacyResponseData {
  /**
   * Unique identifier of the repository
   */
  id: number;
  node_id: string;
  /**
   * The name of the repository.
   */
  name: string;
  full_name: string;
  license: LicenseSimple;
  forks: number;
  permissions: {
    admin: boolean;
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template: boolean;
  topics: string[];
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge: boolean;
  template_repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics: string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: {
      admin: boolean;
      push: boolean;
      pull: boolean;
    };
    allow_rebase_merge: boolean;
    template_repository: string;
    temp_clone_token: string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  temp_clone_token: string;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit: boolean;
  subscribers_count: number;
  network_count: number;
  open_issues: number;
  watchers: number;
  master_branch: string;
}
/**
 * License Simple
 */
export interface LicenseSimple {
  key: string;
  name: string;
  url: string;
  spdx_id: string;
  node_id: string;
  html_url?: string;
  [k: string]: unknown;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type TeamsCreateEndpoint = {
  org: string;
  /**
   * The name of the team.
   */
  name: string;
  /**
   * The description of the team.
   */
  description?: string;
  /**
   * List GitHub IDs for organization members who will become team maintainers.
   */
  maintainers?: string[];
  /**
   * The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
   */
  repo_names?: string[];
  /**
   * The level of privacy this team should have. The options are:
   * **For a non-nested team:**
   * \* `secret` - only visible to organization owners and members of this team.
   * \* `closed` - visible to all members of this organization.
   * Default: `secret`
   * **For a parent or child team:**
   * \* `closed` - visible to all members of this organization.
   * Default for child team: `closed`
   */
  privacy?: "secret" | "closed";
  /**
   * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
   * \* `pull` - team members can pull, but not push to or administer newly-added repositories.
   * \* `push` - team members can pull and push, but not administer newly-added repositories.
   * \* `admin` - team members can pull, push and administer newly-added repositories.
   */
  permission?: "pull" | "push" | "admin";
  /**
   * The ID of a team to set as the parent team.
   */
  parent_team_id?: number;
};

type TeamsCreateRequestOptions = {
  method: "POST";
  url: "/orgs/:org/teams";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamsCreateResponseData {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  html_url: string;
  /**
   * Name of the team
   */
  name: string;
  slug: string;
  description: string;
  /**
   * The level of privacy this team should have
   */
  privacy: "closed" | "secret";
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
  members_count: number;
  repos_count: number;
  created_at: string;
  updated_at: string;
  organization: Organization;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn: string;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}
/**
 * GitHub account for managing multiple users, teams, and repositories
 */
export interface Organization {
  /**
   * Unique login name of the organization
   */
  login: string;
  /**
   * URL for the organization
   */
  url: string;
  id: number;
  node_id: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
  /**
   * Display blog url for the organization
   */
  blog: string;
  html_url: string;
  /**
   * Display name for the organization
   */
  name: string;
  /**
   * Display company name for the organization
   */
  company: string;
  /**
   * Display location for the organization
   */
  location: string;
  /**
   * Display email for the organization
   */
  email: string;
  /**
   * Specifies if organization projects are enabled for this org
   */
  has_organization_projects: boolean;
  /**
   * Specifies if repository projects are enabled for repositories that belong to this org
   */
  has_repository_projects: boolean;
  is_verified: boolean;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  type: string;
  created_at: string;
  updated_at: string;
  plan: {
    name: string;
    space: number;
    private_repos: number;
    filled_seats: number;
    seats: number;
  };
}

/**
 * Basic Error
 */
export interface TeamsCreateResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface TeamsCreateResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type TeamsCreateDiscussionCommentInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  discussion_number: number;
  /**
   * The discussion comment's body text.
   */
  body: string;
};

type TeamsCreateDiscussionCommentInOrgRequestOptions = {
  method: "POST";
  url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A reply to a discussion within a team.
 */
export interface TeamsCreateDiscussionCommentInOrgResponseData {
  author: SimpleUser;
  /**
   * The main text of the comment.
   */
  body: string;
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version: string;
  created_at: string;
  last_edited_at: string;
  discussion_url: string;
  html_url: string;
  node_id: string;
  /**
   * The unique sequence number of a team discussion comment.
   */
  number: number;
  updated_at: string;
  url: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type TeamsCreateDiscussionCommentLegacyEndpoint = {
  team_id: number;

  discussion_number: number;
  /**
   * The discussion comment's body text.
   */
  body: string;
};

type TeamsCreateDiscussionCommentLegacyRequestOptions = {
  method: "POST";
  url: "/teams/:team_id/discussions/:discussion_number/comments";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A reply to a discussion within a team.
 */
export interface TeamsCreateDiscussionCommentLegacyResponseData {
  author: SimpleUser;
  /**
   * The main text of the comment.
   */
  body: string;
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version: string;
  created_at: string;
  last_edited_at: string;
  discussion_url: string;
  html_url: string;
  node_id: string;
  /**
   * The unique sequence number of a team discussion comment.
   */
  number: number;
  updated_at: string;
  url: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type TeamsCreateDiscussionInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;
  /**
   * The discussion post's title.
   */
  title: string;
  /**
   * The discussion post's body text.
   */
  body: string;
  /**
   * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
   */
  private?: boolean;
};

type TeamsCreateDiscussionInOrgRequestOptions = {
  method: "POST";
  url: "/orgs/:org/teams/:team_slug/discussions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A team discussion is a persistent record of a free-form conversation within a team.
 */
export interface TeamsCreateDiscussionInOrgResponseData {
  author: SimpleUser;
  /**
   * The main text of the discussion.
   */
  body: string;
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version: string;
  comments_count: number;
  comments_url: string;
  created_at: string;
  last_edited_at: string;
  html_url: string;
  node_id: string;
  /**
   * The unique sequence number of a team discussion.
   */
  number: number;
  /**
   * Whether or not this discussion should be pinned for easy retrieval.
   */
  pinned: boolean;
  /**
   * Whether or not this discussion should be restricted to team members and organization administrators.
   */
  private: boolean;
  team_url: string;
  /**
   * The title of the discussion.
   */
  title: string;
  updated_at: string;
  url: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type TeamsCreateDiscussionLegacyEndpoint = {
  team_id: number;
  /**
   * The discussion post's title.
   */
  title: string;
  /**
   * The discussion post's body text.
   */
  body: string;
  /**
   * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
   */
  private?: boolean;
};

type TeamsCreateDiscussionLegacyRequestOptions = {
  method: "POST";
  url: "/teams/:team_id/discussions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A team discussion is a persistent record of a free-form conversation within a team.
 */
export interface TeamsCreateDiscussionLegacyResponseData {
  author: SimpleUser;
  /**
   * The main text of the discussion.
   */
  body: string;
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version: string;
  comments_count: number;
  comments_url: string;
  created_at: string;
  last_edited_at: string;
  html_url: string;
  node_id: string;
  /**
   * The unique sequence number of a team discussion.
   */
  number: number;
  /**
   * Whether or not this discussion should be pinned for easy retrieval.
   */
  pinned: boolean;
  /**
   * Whether or not this discussion should be restricted to team members and organization administrators.
   */
  private: boolean;
  team_url: string;
  /**
   * The title of the discussion.
   */
  title: string;
  updated_at: string;
  url: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type TeamsCreateOrUpdateIdpGroupConnectionsInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;
  /**
   * The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.
   */
  groups: TeamsCreateOrUpdateIdpGroupConnectionsInOrgParamsGroups[];
};

type TeamsCreateOrUpdateIdpGroupConnectionsInOrgRequestOptions = {
  method: "PATCH";
  url: "/orgs/:org/teams/:team_slug/team-sync/group-mappings";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * External Groups to be mapped to a team for membership
 */
export interface TeamsCreateOrUpdateIdpGroupConnectionsInOrgResponseData {
  /**
   * Array of groups to be mapped to this team
   */
  groups: {
    /**
     * The ID of the group
     */
    group_id: string;
    /**
     * The name of the group
     */
    group_name: string;
    /**
     * a description of the group
     */
    group_description: string;
  }[];
  /**
   * The ID of the group
   */
  group_id: string;
  /**
   * The name of the group
   */
  group_name: string;
  /**
   * a description of the group
   */
  group_description: string;
  /**
   * synchronization status for this group mapping
   */
  status: string;
  /**
   * the time of the last sync for this group-mapping
   */
  synced_at: string;
}

type TeamsCreateOrUpdateIdpGroupConnectionsLegacyEndpoint = {
  team_id: number;
  /**
   * The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.
   */
  groups: TeamsCreateOrUpdateIdpGroupConnectionsLegacyParamsGroups[];

  synced_at?: string;
};

type TeamsCreateOrUpdateIdpGroupConnectionsLegacyRequestOptions = {
  method: "PATCH";
  url: "/teams/:team_id/team-sync/group-mappings";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * External Groups to be mapped to a team for membership
 */
export interface TeamsCreateOrUpdateIdpGroupConnectionsLegacyResponseData {
  /**
   * Array of groups to be mapped to this team
   */
  groups: {
    /**
     * The ID of the group
     */
    group_id: string;
    /**
     * The name of the group
     */
    group_name: string;
    /**
     * a description of the group
     */
    group_description: string;
  }[];
  /**
   * The ID of the group
   */
  group_id: string;
  /**
   * The name of the group
   */
  group_name: string;
  /**
   * a description of the group
   */
  group_description: string;
  /**
   * synchronization status for this group mapping
   */
  status: string;
  /**
   * the time of the last sync for this group-mapping
   */
  synced_at: string;
}

/**
 * Basic Error
 */
export interface TeamsCreateOrUpdateIdpGroupConnectionsLegacyResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface TeamsCreateOrUpdateIdpGroupConnectionsLegacyResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type TeamsDeleteDiscussionCommentInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  discussion_number: number;

  comment_number: number;
};

type TeamsDeleteDiscussionCommentInOrgRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type TeamsDeleteDiscussionCommentLegacyEndpoint = {
  team_id: number;

  discussion_number: number;

  comment_number: number;
};

type TeamsDeleteDiscussionCommentLegacyRequestOptions = {
  method: "DELETE";
  url: "/teams/:team_id/discussions/:discussion_number/comments/:comment_number";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type TeamsDeleteDiscussionInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  discussion_number: number;
};

type TeamsDeleteDiscussionInOrgRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type TeamsDeleteDiscussionLegacyEndpoint = {
  team_id: number;

  discussion_number: number;
};

type TeamsDeleteDiscussionLegacyRequestOptions = {
  method: "DELETE";
  url: "/teams/:team_id/discussions/:discussion_number";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type TeamsDeleteInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;
};

type TeamsDeleteInOrgRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/teams/:team_slug";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type TeamsDeleteLegacyEndpoint = {
  team_id: number;
};

type TeamsDeleteLegacyRequestOptions = {
  method: "DELETE";
  url: "/teams/:team_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface TeamsDeleteLegacyResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface TeamsDeleteLegacyResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type TeamsGetByNameEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;
};

type TeamsGetByNameRequestOptions = {
  method: "GET";
  url: "/orgs/:org/teams/:team_slug";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamsGetByNameResponseData {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  html_url: string;
  /**
   * Name of the team
   */
  name: string;
  slug: string;
  description: string;
  /**
   * The level of privacy this team should have
   */
  privacy: "closed" | "secret";
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
  members_count: number;
  repos_count: number;
  created_at: string;
  updated_at: string;
  organization: Organization;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn: string;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}
/**
 * GitHub account for managing multiple users, teams, and repositories
 */
export interface Organization {
  /**
   * Unique login name of the organization
   */
  login: string;
  /**
   * URL for the organization
   */
  url: string;
  id: number;
  node_id: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
  /**
   * Display blog url for the organization
   */
  blog: string;
  html_url: string;
  /**
   * Display name for the organization
   */
  name: string;
  /**
   * Display company name for the organization
   */
  company: string;
  /**
   * Display location for the organization
   */
  location: string;
  /**
   * Display email for the organization
   */
  email: string;
  /**
   * Specifies if organization projects are enabled for this org
   */
  has_organization_projects: boolean;
  /**
   * Specifies if repository projects are enabled for repositories that belong to this org
   */
  has_repository_projects: boolean;
  is_verified: boolean;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  type: string;
  created_at: string;
  updated_at: string;
  plan: {
    name: string;
    space: number;
    private_repos: number;
    filled_seats: number;
    seats: number;
  };
}

/**
 * Basic Error
 */
export interface TeamsGetByNameResponse404Data {
  message: string;
  documentation_url: string;
}

type TeamsGetDiscussionCommentInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  discussion_number: number;

  comment_number: number;
};

type TeamsGetDiscussionCommentInOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A reply to a discussion within a team.
 */
export interface TeamsGetDiscussionCommentInOrgResponseData {
  author: SimpleUser;
  /**
   * The main text of the comment.
   */
  body: string;
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version: string;
  created_at: string;
  last_edited_at: string;
  discussion_url: string;
  html_url: string;
  node_id: string;
  /**
   * The unique sequence number of a team discussion comment.
   */
  number: number;
  updated_at: string;
  url: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type TeamsGetDiscussionCommentLegacyEndpoint = {
  team_id: number;

  discussion_number: number;

  comment_number: number;
};

type TeamsGetDiscussionCommentLegacyRequestOptions = {
  method: "GET";
  url: "/teams/:team_id/discussions/:discussion_number/comments/:comment_number";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A reply to a discussion within a team.
 */
export interface TeamsGetDiscussionCommentLegacyResponseData {
  author: SimpleUser;
  /**
   * The main text of the comment.
   */
  body: string;
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version: string;
  created_at: string;
  last_edited_at: string;
  discussion_url: string;
  html_url: string;
  node_id: string;
  /**
   * The unique sequence number of a team discussion comment.
   */
  number: number;
  updated_at: string;
  url: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type TeamsGetDiscussionInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  discussion_number: number;
};

type TeamsGetDiscussionInOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A team discussion is a persistent record of a free-form conversation within a team.
 */
export interface TeamsGetDiscussionInOrgResponseData {
  author: SimpleUser;
  /**
   * The main text of the discussion.
   */
  body: string;
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version: string;
  comments_count: number;
  comments_url: string;
  created_at: string;
  last_edited_at: string;
  html_url: string;
  node_id: string;
  /**
   * The unique sequence number of a team discussion.
   */
  number: number;
  /**
   * Whether or not this discussion should be pinned for easy retrieval.
   */
  pinned: boolean;
  /**
   * Whether or not this discussion should be restricted to team members and organization administrators.
   */
  private: boolean;
  team_url: string;
  /**
   * The title of the discussion.
   */
  title: string;
  updated_at: string;
  url: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type TeamsGetDiscussionLegacyEndpoint = {
  team_id: number;

  discussion_number: number;
};

type TeamsGetDiscussionLegacyRequestOptions = {
  method: "GET";
  url: "/teams/:team_id/discussions/:discussion_number";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A team discussion is a persistent record of a free-form conversation within a team.
 */
export interface TeamsGetDiscussionLegacyResponseData {
  author: SimpleUser;
  /**
   * The main text of the discussion.
   */
  body: string;
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version: string;
  comments_count: number;
  comments_url: string;
  created_at: string;
  last_edited_at: string;
  html_url: string;
  node_id: string;
  /**
   * The unique sequence number of a team discussion.
   */
  number: number;
  /**
   * Whether or not this discussion should be pinned for easy retrieval.
   */
  pinned: boolean;
  /**
   * Whether or not this discussion should be restricted to team members and organization administrators.
   */
  private: boolean;
  team_url: string;
  /**
   * The title of the discussion.
   */
  title: string;
  updated_at: string;
  url: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type TeamsGetLegacyEndpoint = {
  team_id: number;
};

type TeamsGetLegacyRequestOptions = {
  method: "GET";
  url: "/teams/:team_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamsGetLegacyResponseData {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  html_url: string;
  /**
   * Name of the team
   */
  name: string;
  slug: string;
  description: string;
  /**
   * The level of privacy this team should have
   */
  privacy: "closed" | "secret";
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
  members_count: number;
  repos_count: number;
  created_at: string;
  updated_at: string;
  organization: Organization;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn: string;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}
/**
 * GitHub account for managing multiple users, teams, and repositories
 */
export interface Organization {
  /**
   * Unique login name of the organization
   */
  login: string;
  /**
   * URL for the organization
   */
  url: string;
  id: number;
  node_id: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
  /**
   * Display blog url for the organization
   */
  blog: string;
  html_url: string;
  /**
   * Display name for the organization
   */
  name: string;
  /**
   * Display company name for the organization
   */
  company: string;
  /**
   * Display location for the organization
   */
  location: string;
  /**
   * Display email for the organization
   */
  email: string;
  /**
   * Specifies if organization projects are enabled for this org
   */
  has_organization_projects: boolean;
  /**
   * Specifies if repository projects are enabled for repositories that belong to this org
   */
  has_repository_projects: boolean;
  is_verified: boolean;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  type: string;
  created_at: string;
  updated_at: string;
  plan: {
    name: string;
    space: number;
    private_repos: number;
    filled_seats: number;
    seats: number;
  };
}

/**
 * Basic Error
 */
export interface TeamsGetLegacyResponse404Data {
  message: string;
  documentation_url: string;
}

type TeamsGetMemberLegacyEndpoint = {
  team_id: number;

  username: string;
};

type TeamsGetMemberLegacyRequestOptions = {
  method: "GET";
  url: "/teams/:team_id/members/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type TeamsGetMembershipForUserInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  username: string;
};

type TeamsGetMembershipForUserInOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/teams/:team_slug/memberships/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Team Membership
 */
export interface TeamsGetMembershipForUserInOrgResponseData {
  url: string;
  /**
   * The role of the user in the team.
   */
  role: "member" | "maintainer";
  state: string;
}

type TeamsGetMembershipForUserLegacyEndpoint = {
  team_id: number;

  username: string;
};

type TeamsGetMembershipForUserLegacyRequestOptions = {
  method: "GET";
  url: "/teams/:team_id/memberships/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Team Membership
 */
export interface TeamsGetMembershipForUserLegacyResponseData {
  url: string;
  /**
   * The role of the user in the team.
   */
  role: "member" | "maintainer";
  state: string;
}

/**
 * Basic Error
 */
export interface TeamsGetMembershipForUserLegacyResponse404Data {
  message: string;
  documentation_url: string;
}

type TeamsListEndpoint = {
  org: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type TeamsListRequestOptions = {
  method: "GET";
  url: "/orgs/:org/teams";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type TeamsListResponseData = Team[];

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string;
  privacy: string;
  permission: string;
  url: string;
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface TeamsListResponse403Data {
  message: string;
  documentation_url: string;
}

type TeamsListChildInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type TeamsListChildInOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/teams/:team_slug/teams";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type TeamsListChildInOrgResponseData = Team[];

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string;
  privacy: string;
  permission: string;
  url: string;
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}

type TeamsListChildLegacyEndpoint = {
  team_id: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type TeamsListChildLegacyRequestOptions = {
  method: "GET";
  url: "/teams/:team_id/teams";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type TeamsListChildLegacyResponseData = Team[];

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string;
  privacy: string;
  permission: string;
  url: string;
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface TeamsListChildLegacyResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface TeamsListChildLegacyResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface TeamsListChildLegacyResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type TeamsListDiscussionCommentsInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  discussion_number: number;
  /**
   * One of `asc` (ascending) or `desc` (descending).
   */
  direction?: "asc" | "desc";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type TeamsListDiscussionCommentsInOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type TeamsListDiscussionCommentsInOrgResponseData = TeamDiscussionComment[];

/**
 * A reply to a discussion within a team.
 */
export interface TeamDiscussionComment {
  author: SimpleUser;
  /**
   * The main text of the comment.
   */
  body: string;
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version: string;
  created_at: string;
  last_edited_at: string;
  discussion_url: string;
  html_url: string;
  node_id: string;
  /**
   * The unique sequence number of a team discussion comment.
   */
  number: number;
  updated_at: string;
  url: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type TeamsListDiscussionCommentsLegacyEndpoint = {
  team_id: number;

  discussion_number: number;
  /**
   * One of `asc` (ascending) or `desc` (descending).
   */
  direction?: "asc" | "desc";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type TeamsListDiscussionCommentsLegacyRequestOptions = {
  method: "GET";
  url: "/teams/:team_id/discussions/:discussion_number/comments";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type TeamsListDiscussionCommentsLegacyResponseData = TeamDiscussionComment[];

/**
 * A reply to a discussion within a team.
 */
export interface TeamDiscussionComment {
  author: SimpleUser;
  /**
   * The main text of the comment.
   */
  body: string;
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version: string;
  created_at: string;
  last_edited_at: string;
  discussion_url: string;
  html_url: string;
  node_id: string;
  /**
   * The unique sequence number of a team discussion comment.
   */
  number: number;
  updated_at: string;
  url: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type TeamsListDiscussionsInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;
  /**
   * One of `asc` (ascending) or `desc` (descending).
   */
  direction?: "asc" | "desc";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type TeamsListDiscussionsInOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/teams/:team_slug/discussions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type TeamsListDiscussionsInOrgResponseData = TeamDiscussion[];

/**
 * A team discussion is a persistent record of a free-form conversation within a team.
 */
export interface TeamDiscussion {
  author: SimpleUser;
  /**
   * The main text of the discussion.
   */
  body: string;
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version: string;
  comments_count: number;
  comments_url: string;
  created_at: string;
  last_edited_at: string;
  html_url: string;
  node_id: string;
  /**
   * The unique sequence number of a team discussion.
   */
  number: number;
  /**
   * Whether or not this discussion should be pinned for easy retrieval.
   */
  pinned: boolean;
  /**
   * Whether or not this discussion should be restricted to team members and organization administrators.
   */
  private: boolean;
  team_url: string;
  /**
   * The title of the discussion.
   */
  title: string;
  updated_at: string;
  url: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type TeamsListDiscussionsLegacyEndpoint = {
  team_id: number;
  /**
   * One of `asc` (ascending) or `desc` (descending).
   */
  direction?: "asc" | "desc";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type TeamsListDiscussionsLegacyRequestOptions = {
  method: "GET";
  url: "/teams/:team_id/discussions";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type TeamsListDiscussionsLegacyResponseData = TeamDiscussion[];

/**
 * A team discussion is a persistent record of a free-form conversation within a team.
 */
export interface TeamDiscussion {
  author: SimpleUser;
  /**
   * The main text of the discussion.
   */
  body: string;
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version: string;
  comments_count: number;
  comments_url: string;
  created_at: string;
  last_edited_at: string;
  html_url: string;
  node_id: string;
  /**
   * The unique sequence number of a team discussion.
   */
  number: number;
  /**
   * Whether or not this discussion should be pinned for easy retrieval.
   */
  pinned: boolean;
  /**
   * Whether or not this discussion should be restricted to team members and organization administrators.
   */
  private: boolean;
  team_url: string;
  /**
   * The title of the discussion.
   */
  title: string;
  updated_at: string;
  url: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type TeamsListForAuthenticatedUserEndpoint = {
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type TeamsListForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: "/user/teams";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type TeamsListForAuthenticatedUserResponseData = FullTeam[];

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface FullTeam {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  html_url: string;
  /**
   * Name of the team
   */
  name: string;
  slug: string;
  description: string;
  /**
   * The level of privacy this team should have
   */
  privacy: "closed" | "secret";
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
  members_count: number;
  repos_count: number;
  created_at: string;
  updated_at: string;
  organization: Organization;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn: string;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}
/**
 * GitHub account for managing multiple users, teams, and repositories
 */
export interface Organization {
  /**
   * Unique login name of the organization
   */
  login: string;
  /**
   * URL for the organization
   */
  url: string;
  id: number;
  node_id: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
  /**
   * Display blog url for the organization
   */
  blog: string;
  html_url: string;
  /**
   * Display name for the organization
   */
  name: string;
  /**
   * Display company name for the organization
   */
  company: string;
  /**
   * Display location for the organization
   */
  location: string;
  /**
   * Display email for the organization
   */
  email: string;
  /**
   * Specifies if organization projects are enabled for this org
   */
  has_organization_projects: boolean;
  /**
   * Specifies if repository projects are enabled for repositories that belong to this org
   */
  has_repository_projects: boolean;
  is_verified: boolean;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  type: string;
  created_at: string;
  updated_at: string;
  plan: {
    name: string;
    space: number;
    private_repos: number;
    filled_seats: number;
    seats: number;
  };
}

/**
 * Basic Error
 */
export interface TeamsListForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface TeamsListForAuthenticatedUserResponse404Data {
  message: string;
  documentation_url: string;
}

type TeamsListIdpGroupsForLegacyEndpoint = {
  team_id: number;
};

type TeamsListIdpGroupsForLegacyRequestOptions = {
  method: "GET";
  url: "/teams/:team_id/team-sync/group-mappings";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * External Groups to be mapped to a team for membership
 */
export interface TeamsListIdpGroupsForLegacyResponseData {
  /**
   * Array of groups to be mapped to this team
   */
  groups: {
    /**
     * The ID of the group
     */
    group_id: string;
    /**
     * The name of the group
     */
    group_name: string;
    /**
     * a description of the group
     */
    group_description: string;
  }[];
  /**
   * The ID of the group
   */
  group_id: string;
  /**
   * The name of the group
   */
  group_name: string;
  /**
   * a description of the group
   */
  group_description: string;
  /**
   * synchronization status for this group mapping
   */
  status: string;
  /**
   * the time of the last sync for this group-mapping
   */
  synced_at: string;
}

/**
 * Basic Error
 */
export interface TeamsListIdpGroupsForLegacyResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface TeamsListIdpGroupsForLegacyResponse404Data {
  message: string;
  documentation_url: string;
}

type TeamsListIdpGroupsForOrgEndpoint = {
  org: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type TeamsListIdpGroupsForOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/team-sync/groups";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * External Groups to be mapped to a team for membership
 */
export interface TeamsListIdpGroupsForOrgResponseData {
  /**
   * Array of groups to be mapped to this team
   */
  groups: {
    /**
     * The ID of the group
     */
    group_id: string;
    /**
     * The name of the group
     */
    group_name: string;
    /**
     * a description of the group
     */
    group_description: string;
  }[];
  /**
   * The ID of the group
   */
  group_id: string;
  /**
   * The name of the group
   */
  group_name: string;
  /**
   * a description of the group
   */
  group_description: string;
  /**
   * synchronization status for this group mapping
   */
  status: string;
  /**
   * the time of the last sync for this group-mapping
   */
  synced_at: string;
}

type TeamsListIdpGroupsInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;
};

type TeamsListIdpGroupsInOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/teams/:team_slug/team-sync/group-mappings";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * External Groups to be mapped to a team for membership
 */
export interface TeamsListIdpGroupsInOrgResponseData {
  /**
   * Array of groups to be mapped to this team
   */
  groups: {
    /**
     * The ID of the group
     */
    group_id: string;
    /**
     * The name of the group
     */
    group_name: string;
    /**
     * a description of the group
     */
    group_description: string;
  }[];
  /**
   * The ID of the group
   */
  group_id: string;
  /**
   * The name of the group
   */
  group_name: string;
  /**
   * a description of the group
   */
  group_description: string;
  /**
   * synchronization status for this group mapping
   */
  status: string;
  /**
   * the time of the last sync for this group-mapping
   */
  synced_at: string;
}

type TeamsListMembersInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;
  /**
   * Filters members returned by their role in the team. Can be one of:
   * \* `member` - normal members of the team.
   * \* `maintainer` - team maintainers.
   * \* `all` - all members of the team.
   */
  role?: "member" | "maintainer" | "all";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type TeamsListMembersInOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/teams/:team_slug/members";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type TeamsListMembersInOrgResponseData = SimpleUser[];

/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

type TeamsListMembersLegacyEndpoint = {
  team_id: number;
  /**
   * Filters members returned by their role in the team. Can be one of:
   * \* `member` - normal members of the team.
   * \* `maintainer` - team maintainers.
   * \* `all` - all members of the team.
   */
  role?: "member" | "maintainer" | "all";
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type TeamsListMembersLegacyRequestOptions = {
  method: "GET";
  url: "/teams/:team_id/members";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type TeamsListMembersLegacyResponseData = SimpleUser[];

/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

/**
 * Basic Error
 */
export interface TeamsListMembersLegacyResponse404Data {
  message: string;
  documentation_url: string;
}

type TeamsListPendingInvitationsInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type TeamsListPendingInvitationsInOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/teams/:team_slug/invitations";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type TeamsListPendingInvitationsInOrgResponseData = OrganizationInvitation[];

/**
 * Organization Invitation
 */
export interface OrganizationInvitation {
  id: number;
  login: string;
  email: string;
  role: string;
  created_at: string;
  inviter: SimpleUser;
  team_count: number;
  invitation_team_url: string;
  node_id: string;
  invitation_teams_url: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

type TeamsListPendingInvitationsLegacyEndpoint = {
  team_id: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type TeamsListPendingInvitationsLegacyRequestOptions = {
  method: "GET";
  url: "/teams/:team_id/invitations";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type TeamsListPendingInvitationsLegacyResponseData = OrganizationInvitation[];

/**
 * Organization Invitation
 */
export interface OrganizationInvitation {
  id: number;
  login: string;
  email: string;
  role: string;
  created_at: string;
  inviter: SimpleUser;
  team_count: number;
  invitation_team_url: string;
  node_id: string;
  invitation_teams_url: string;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

type TeamsListProjectsInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"inertia">;

type TeamsListProjectsInOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/teams/:team_slug/projects";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type TeamsListProjectsInOrgResponseData = TeamProject[];

/**
 * A team's access to a project.
 */
export interface TeamProject {
  owner_url: string;
  url: string;
  html_url: string;
  columns_url: string;
  id: number;
  node_id: string;
  name: string;
  body: string;
  number: number;
  state: string;
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  organization_permission: string;
  private: boolean;
  permissions: {
    read: boolean;
    write: boolean;
    admin: boolean;
  };
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

type TeamsListProjectsLegacyEndpoint = {
  team_id: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
} & RequiredPreview<"inertia">;

type TeamsListProjectsLegacyRequestOptions = {
  method: "GET";
  url: "/teams/:team_id/projects";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type TeamsListProjectsLegacyResponseData = TeamProject[];

/**
 * A team's access to a project.
 */
export interface TeamProject {
  owner_url: string;
  url: string;
  html_url: string;
  columns_url: string;
  id: number;
  node_id: string;
  name: string;
  body: string;
  number: number;
  state: string;
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  organization_permission: string;
  private: boolean;
  permissions: {
    read: boolean;
    write: boolean;
    admin: boolean;
  };
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

/**
 * Basic Error
 */
export interface TeamsListProjectsLegacyResponse404Data {
  message: string;
  documentation_url: string;
}

export interface TeamsListProjectsLegacyResponse415Data {
  message: string;
  documentation_url: string;
}

type TeamsListReposInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type TeamsListReposInOrgRequestOptions = {
  method: "GET";
  url: "/orgs/:org/teams/:team_slug/repos";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type TeamsListReposInOrgResponseData = MinimalRepository[];

/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

type TeamsListReposLegacyEndpoint = {
  team_id: number;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type TeamsListReposLegacyRequestOptions = {
  method: "GET";
  url: "/teams/:team_id/repos";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type TeamsListReposLegacyResponseData = MinimalRepository[];

/**
 * Minimal Repository
 */
export interface MinimalRepository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  archive_url: string;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  deployments_url: string;
  downloads_url: string;
  events_url: string;
  forks_url: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  languages_url: string;
  merges_url: string;
  milestones_url: string;
  notifications_url: string;
  pulls_url: string;
  releases_url: string;
  ssh_url: string;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  tags_url: string;
  teams_url: string;
  trees_url: string;
  clone_url: string;
  mirror_url: string;
  hooks_url: string;
  svn_url: string;
  homepage: string;
  language: string;
  forks_count: number;
  stargazers_count: number;
  watchers_count: number;
  size: number;
  default_branch: string;
  open_issues_count: number;
  is_template: boolean;
  topics: string[];
  has_issues: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  has_downloads: boolean;
  archived: boolean;
  disabled: boolean;
  visibility: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
  permissions: {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  template_repository: string;
  temp_clone_token: string;
  delete_branch_on_merge: boolean;
  subscribers_count: number;
  network_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  forks: number;
  open_issues: number;
  watchers: number;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}

/**
 * Basic Error
 */
export interface TeamsListReposLegacyResponse404Data {
  message: string;
  documentation_url: string;
}

type TeamsRemoveMemberLegacyEndpoint = {
  team_id: number;

  username: string;
};

type TeamsRemoveMemberLegacyRequestOptions = {
  method: "DELETE";
  url: "/teams/:team_id/members/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type TeamsRemoveMembershipForUserInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  username: string;
};

type TeamsRemoveMembershipForUserInOrgRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/teams/:team_slug/memberships/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type TeamsRemoveMembershipForUserLegacyEndpoint = {
  team_id: number;

  username: string;
};

type TeamsRemoveMembershipForUserLegacyRequestOptions = {
  method: "DELETE";
  url: "/teams/:team_id/memberships/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type TeamsRemoveProjectInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  project_id: number;
};

type TeamsRemoveProjectInOrgRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/teams/:team_slug/projects/:project_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type TeamsRemoveProjectLegacyEndpoint = {
  team_id: number;

  project_id: number;
};

type TeamsRemoveProjectLegacyRequestOptions = {
  method: "DELETE";
  url: "/teams/:team_id/projects/:project_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface TeamsRemoveProjectLegacyResponse404Data {
  message: string;
  documentation_url: string;
}

export interface TeamsRemoveProjectLegacyResponse415Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface TeamsRemoveProjectLegacyResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type TeamsRemoveRepoInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  owner: string;

  repo: string;
};

type TeamsRemoveRepoInOrgRequestOptions = {
  method: "DELETE";
  url: "/orgs/:org/teams/:team_slug/repos/:owner/:repo";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type TeamsRemoveRepoLegacyEndpoint = {
  team_id: number;

  owner: string;

  repo: string;
};

type TeamsRemoveRepoLegacyRequestOptions = {
  method: "DELETE";
  url: "/teams/:team_id/repos/:owner/:repo";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type TeamsUpdateDiscussionCommentInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  discussion_number: number;

  comment_number: number;
  /**
   * The discussion comment's body text.
   */
  body: string;
};

type TeamsUpdateDiscussionCommentInOrgRequestOptions = {
  method: "PATCH";
  url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A reply to a discussion within a team.
 */
export interface TeamsUpdateDiscussionCommentInOrgResponseData {
  author: SimpleUser;
  /**
   * The main text of the comment.
   */
  body: string;
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version: string;
  created_at: string;
  last_edited_at: string;
  discussion_url: string;
  html_url: string;
  node_id: string;
  /**
   * The unique sequence number of a team discussion comment.
   */
  number: number;
  updated_at: string;
  url: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type TeamsUpdateDiscussionCommentLegacyEndpoint = {
  team_id: number;

  discussion_number: number;

  comment_number: number;
  /**
   * The discussion comment's body text.
   */
  body: string;
};

type TeamsUpdateDiscussionCommentLegacyRequestOptions = {
  method: "PATCH";
  url: "/teams/:team_id/discussions/:discussion_number/comments/:comment_number";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A reply to a discussion within a team.
 */
export interface TeamsUpdateDiscussionCommentLegacyResponseData {
  author: SimpleUser;
  /**
   * The main text of the comment.
   */
  body: string;
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version: string;
  created_at: string;
  last_edited_at: string;
  discussion_url: string;
  html_url: string;
  node_id: string;
  /**
   * The unique sequence number of a team discussion comment.
   */
  number: number;
  updated_at: string;
  url: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type TeamsUpdateDiscussionInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;

  discussion_number: number;
  /**
   * The discussion post's title.
   */
  title?: string;
  /**
   * The discussion post's body text.
   */
  body?: string;
};

type TeamsUpdateDiscussionInOrgRequestOptions = {
  method: "PATCH";
  url: "/orgs/:org/teams/:team_slug/discussions/:discussion_number";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A team discussion is a persistent record of a free-form conversation within a team.
 */
export interface TeamsUpdateDiscussionInOrgResponseData {
  author: SimpleUser;
  /**
   * The main text of the discussion.
   */
  body: string;
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version: string;
  comments_count: number;
  comments_url: string;
  created_at: string;
  last_edited_at: string;
  html_url: string;
  node_id: string;
  /**
   * The unique sequence number of a team discussion.
   */
  number: number;
  /**
   * Whether or not this discussion should be pinned for easy retrieval.
   */
  pinned: boolean;
  /**
   * Whether or not this discussion should be restricted to team members and organization administrators.
   */
  private: boolean;
  team_url: string;
  /**
   * The title of the discussion.
   */
  title: string;
  updated_at: string;
  url: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type TeamsUpdateDiscussionLegacyEndpoint = {
  team_id: number;

  discussion_number: number;
  /**
   * The discussion post's title.
   */
  title?: string;
  /**
   * The discussion post's body text.
   */
  body?: string;
};

type TeamsUpdateDiscussionLegacyRequestOptions = {
  method: "PATCH";
  url: "/teams/:team_id/discussions/:discussion_number";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A team discussion is a persistent record of a free-form conversation within a team.
 */
export interface TeamsUpdateDiscussionLegacyResponseData {
  author: SimpleUser;
  /**
   * The main text of the discussion.
   */
  body: string;
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version: string;
  comments_count: number;
  comments_url: string;
  created_at: string;
  last_edited_at: string;
  html_url: string;
  node_id: string;
  /**
   * The unique sequence number of a team discussion.
   */
  number: number;
  /**
   * Whether or not this discussion should be pinned for easy retrieval.
   */
  pinned: boolean;
  /**
   * Whether or not this discussion should be restricted to team members and organization administrators.
   */
  private: boolean;
  team_url: string;
  /**
   * The title of the discussion.
   */
  title: string;
  updated_at: string;
  url: string;
  reactions: ReactionRollup;
}
/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;
  [k: string]: unknown;
}
export interface ReactionRollup {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
}

type TeamsUpdateInOrgEndpoint = {
  org: string;
  /**
   * team_slug parameter
   */
  team_slug: string;
  /**
   * The name of the team.
   */
  name: string;
  /**
   * The description of the team.
   */
  description?: string;
  /**
   * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:
   * **For a non-nested team:**
   * \* `secret` - only visible to organization owners and members of this team.
   * \* `closed` - visible to all members of this organization.
   * **For a parent or child team:**
   * \* `closed` - visible to all members of this organization.
   */
  privacy?: "secret" | "closed";
  /**
   * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
   * \* `pull` - team members can pull, but not push to or administer newly-added repositories.
   * \* `push` - team members can pull and push, but not administer newly-added repositories.
   * \* `admin` - team members can pull, push and administer newly-added repositories.
   */
  permission?: "pull" | "push" | "admin";
  /**
   * The ID of a team to set as the parent team.
   */
  parent_team_id?: number;
};

type TeamsUpdateInOrgRequestOptions = {
  method: "PATCH";
  url: "/orgs/:org/teams/:team_slug";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamsUpdateInOrgResponseData {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  html_url: string;
  /**
   * Name of the team
   */
  name: string;
  slug: string;
  description: string;
  /**
   * The level of privacy this team should have
   */
  privacy: "closed" | "secret";
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
  members_count: number;
  repos_count: number;
  created_at: string;
  updated_at: string;
  organization: Organization;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn: string;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}
/**
 * GitHub account for managing multiple users, teams, and repositories
 */
export interface Organization {
  /**
   * Unique login name of the organization
   */
  login: string;
  /**
   * URL for the organization
   */
  url: string;
  id: number;
  node_id: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
  /**
   * Display blog url for the organization
   */
  blog: string;
  html_url: string;
  /**
   * Display name for the organization
   */
  name: string;
  /**
   * Display company name for the organization
   */
  company: string;
  /**
   * Display location for the organization
   */
  location: string;
  /**
   * Display email for the organization
   */
  email: string;
  /**
   * Specifies if organization projects are enabled for this org
   */
  has_organization_projects: boolean;
  /**
   * Specifies if repository projects are enabled for repositories that belong to this org
   */
  has_repository_projects: boolean;
  is_verified: boolean;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  type: string;
  created_at: string;
  updated_at: string;
  plan: {
    name: string;
    space: number;
    private_repos: number;
    filled_seats: number;
    seats: number;
  };
}

type TeamsUpdateLegacyEndpoint = {
  team_id: number;
  /**
   * The name of the team.
   */
  name: string;
  /**
   * The description of the team.
   */
  description?: string;
  /**
   * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:
   * **For a non-nested team:**
   * \* `secret` - only visible to organization owners and members of this team.
   * \* `closed` - visible to all members of this organization.
   * **For a parent or child team:**
   * \* `closed` - visible to all members of this organization.
   */
  privacy?: "secret" | "closed";
  /**
   * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
   * \* `pull` - team members can pull, but not push to or administer newly-added repositories.
   * \* `push` - team members can pull and push, but not administer newly-added repositories.
   * \* `admin` - team members can pull, push and administer newly-added repositories.
   */
  permission?: "pull" | "push" | "admin";
  /**
   * The ID of a team to set as the parent team.
   */
  parent_team_id?: number | null;
};

type TeamsUpdateLegacyRequestOptions = {
  method: "PATCH";
  url: "/teams/:team_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamsUpdateLegacyResponseData {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  html_url: string;
  /**
   * Name of the team
   */
  name: string;
  slug: string;
  description: string;
  /**
   * The level of privacy this team should have
   */
  privacy: "closed" | "secret";
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple;
  members_count: number;
  repos_count: number;
  created_at: string;
  updated_at: string;
  organization: Organization;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn: string;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}
/**
 * GitHub account for managing multiple users, teams, and repositories
 */
export interface Organization {
  /**
   * Unique login name of the organization
   */
  login: string;
  /**
   * URL for the organization
   */
  url: string;
  id: number;
  node_id: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
  /**
   * Display blog url for the organization
   */
  blog: string;
  html_url: string;
  /**
   * Display name for the organization
   */
  name: string;
  /**
   * Display company name for the organization
   */
  company: string;
  /**
   * Display location for the organization
   */
  location: string;
  /**
   * Display email for the organization
   */
  email: string;
  /**
   * Specifies if organization projects are enabled for this org
   */
  has_organization_projects: boolean;
  /**
   * Specifies if repository projects are enabled for repositories that belong to this org
   */
  has_repository_projects: boolean;
  is_verified: boolean;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  type: string;
  created_at: string;
  updated_at: string;
  plan: {
    name: string;
    space: number;
    private_repos: number;
    filled_seats: number;
    seats: number;
  };
}

/**
 * Basic Error
 */
export interface TeamsUpdateLegacyResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface TeamsUpdateLegacyResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface TeamsUpdateLegacyResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type UsersAddEmailForAuthenticatedEndpoint = {
  /**
   * Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
   */
  emails: string[];
};

type UsersAddEmailForAuthenticatedRequestOptions = {
  method: "POST";
  url: "/user/emails";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Email
 */
export type Email =
  | {
      email: string;
      primary: boolean;
      verified: boolean;
      visibility: string;
      [k: string]: unknown;
    }
  | string;
export type UsersAddEmailForAuthenticatedResponseData = Email[];

/**
 * Basic Error
 */
export interface UsersAddEmailForAuthenticatedResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersAddEmailForAuthenticatedResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersAddEmailForAuthenticatedResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface UsersAddEmailForAuthenticatedResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type UsersBlockEndpoint = {
  username: string;
};

type UsersBlockRequestOptions = {
  method: "PUT";
  url: "/user/blocks/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface UsersBlockResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersBlockResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersBlockResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface UsersBlockResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type UsersCheckBlockedEndpoint = {
  username: string;
};

type UsersCheckBlockedRequestOptions = {
  method: "GET";
  url: "/user/blocks/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface UsersCheckBlockedResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersCheckBlockedResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersCheckBlockedResponse404Data {
  message: string;
  documentation_url: string;
}

type UsersCheckFollowingForUserEndpoint = {
  username: string;
  /**
   * target_user parameter
   */
  target_user: string;
};

type UsersCheckFollowingForUserRequestOptions = {
  method: "GET";
  url: "/users/:username/following/:target_user";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

type UsersCheckPersonIsFollowedByAuthenticatedEndpoint = {
  username: string;
};

type UsersCheckPersonIsFollowedByAuthenticatedRequestOptions = {
  method: "GET";
  url: "/user/following/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface UsersCheckPersonIsFollowedByAuthenticatedResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersCheckPersonIsFollowedByAuthenticatedResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersCheckPersonIsFollowedByAuthenticatedResponse404Data {
  message: string;
  documentation_url: string;
}

type UsersCreateGpgKeyForAuthenticatedEndpoint = {
  /**
   * A GPG key in ASCII-armored format.
   */
  armored_public_key: string;
};

type UsersCreateGpgKeyForAuthenticatedRequestOptions = {
  method: "POST";
  url: "/user/gpg_keys";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A unique encryption key
 */
export interface UsersCreateGpgKeyForAuthenticatedResponseData {
  id: number;
  primary_key_id: number;
  key_id: string;
  public_key: string;
  emails: {
    email: string;
    verified: boolean;
  }[];
  subkeys: {
    id: number;
    primary_key_id: number;
    key_id: string;
    public_key: string;
    emails: unknown[];
    subkeys: unknown[];
    can_sign: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_certify: boolean;
    created_at: string;
    expires_at: string;
    raw_key: string;
  }[];
  can_sign: boolean;
  can_encrypt_comms: boolean;
  can_encrypt_storage: boolean;
  can_certify: boolean;
  created_at: string;
  expires_at: string;
  raw_key: string;
}

/**
 * Basic Error
 */
export interface UsersCreateGpgKeyForAuthenticatedResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersCreateGpgKeyForAuthenticatedResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersCreateGpgKeyForAuthenticatedResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface UsersCreateGpgKeyForAuthenticatedResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type UsersCreatePublicSshKeyForAuthenticatedEndpoint = {
  /**
   * A descriptive name for the new key.
   */
  title?: string;
  /**
   * The public SSH key to add to your GitHub account.
   */
  key: string;
};

type UsersCreatePublicSshKeyForAuthenticatedRequestOptions = {
  method: "POST";
  url: "/user/keys";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Key
 */
export interface UsersCreatePublicSshKeyForAuthenticatedResponseData {
  key_id: string;
  key: string;
  id: number;
  url: string;
  title: string;
  created_at: string;
  verified: boolean;
  read_only: boolean;
}

/**
 * Basic Error
 */
export interface UsersCreatePublicSshKeyForAuthenticatedResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersCreatePublicSshKeyForAuthenticatedResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersCreatePublicSshKeyForAuthenticatedResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface UsersCreatePublicSshKeyForAuthenticatedResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type UsersDeleteEmailForAuthenticatedEndpoint = {
  /**
   * Email addresses associated with the GitHub user account.
   */
  emails: string[];
};

type UsersDeleteEmailForAuthenticatedRequestOptions = {
  method: "DELETE";
  url: "/user/emails";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface UsersDeleteEmailForAuthenticatedResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersDeleteEmailForAuthenticatedResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersDeleteEmailForAuthenticatedResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface UsersDeleteEmailForAuthenticatedResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type UsersDeleteGpgKeyForAuthenticatedEndpoint = {
  /**
   * gpg_key_id parameter
   */
  gpg_key_id: number;
};

type UsersDeleteGpgKeyForAuthenticatedRequestOptions = {
  method: "DELETE";
  url: "/user/gpg_keys/:gpg_key_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface UsersDeleteGpgKeyForAuthenticatedResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersDeleteGpgKeyForAuthenticatedResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersDeleteGpgKeyForAuthenticatedResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface UsersDeleteGpgKeyForAuthenticatedResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type UsersDeletePublicSshKeyForAuthenticatedEndpoint = {
  /**
   * key_id parameter
   */
  key_id: number;
};

type UsersDeletePublicSshKeyForAuthenticatedRequestOptions = {
  method: "DELETE";
  url: "/user/keys/:key_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface UsersDeletePublicSshKeyForAuthenticatedResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersDeletePublicSshKeyForAuthenticatedResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersDeletePublicSshKeyForAuthenticatedResponse404Data {
  message: string;
  documentation_url: string;
}

type UsersFollowEndpoint = {
  username: string;
};

type UsersFollowRequestOptions = {
  method: "PUT";
  url: "/user/following/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface UsersFollowResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersFollowResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersFollowResponse404Data {
  message: string;
  documentation_url: string;
}

type UsersGetAuthenticatedEndpoint = {};

type UsersGetAuthenticatedRequestOptions = {
  method: "GET";
  url: "/user";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type UsersGetAuthenticatedResponseData = PrivateUser | PublicUser;

/**
 * Private User
 */
export interface PrivateUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  name: string;
  company: string;
  blog: string;
  location: string;
  email: string;
  hireable: boolean;
  bio: string;
  twitter_username?: string;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  created_at: string;
  updated_at: string;
  private_gists: number;
  total_private_repos: number;
  owned_private_repos: number;
  disk_usage: number;
  collaborators: number;
  two_factor_authentication: boolean;
  plan?: {
    collaborators: number;
    name: string;
    space: number;
    private_repos: number;
    [k: string]: unknown;
  };
  suspended_at?: string;
  business_plus?: boolean;
  ldap_dn?: string;
  [k: string]: unknown;
}
/**
 * Public User
 */
export interface PublicUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  name: string;
  company: string;
  blog: string;
  location: string;
  email: string;
  hireable: boolean;
  bio: string;
  twitter_username?: string;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  created_at: string;
  updated_at: string;
  plan?: {
    collaborators: number;
    name: string;
    space: number;
    private_repos: number;
    [k: string]: unknown;
  };
  suspended_at?: string;
  private_gists?: number;
  total_private_repos?: number;
  owned_private_repos?: number;
  disk_usage?: number;
  collaborators?: number;
}

/**
 * Basic Error
 */
export interface UsersGetAuthenticatedResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersGetAuthenticatedResponse403Data {
  message: string;
  documentation_url: string;
}

type UsersGetByUsernameEndpoint = {
  username: string;
};

type UsersGetByUsernameRequestOptions = {
  method: "GET";
  url: "/users/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type UsersGetByUsernameResponseData = PrivateUser | PublicUser;

/**
 * Private User
 */
export interface PrivateUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  name: string;
  company: string;
  blog: string;
  location: string;
  email: string;
  hireable: boolean;
  bio: string;
  twitter_username?: string;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  created_at: string;
  updated_at: string;
  private_gists: number;
  total_private_repos: number;
  owned_private_repos: number;
  disk_usage: number;
  collaborators: number;
  two_factor_authentication: boolean;
  plan?: {
    collaborators: number;
    name: string;
    space: number;
    private_repos: number;
    [k: string]: unknown;
  };
  suspended_at?: string;
  business_plus?: boolean;
  ldap_dn?: string;
  [k: string]: unknown;
}
/**
 * Public User
 */
export interface PublicUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  name: string;
  company: string;
  blog: string;
  location: string;
  email: string;
  hireable: boolean;
  bio: string;
  twitter_username?: string;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  created_at: string;
  updated_at: string;
  plan?: {
    collaborators: number;
    name: string;
    space: number;
    private_repos: number;
    [k: string]: unknown;
  };
  suspended_at?: string;
  private_gists?: number;
  total_private_repos?: number;
  owned_private_repos?: number;
  disk_usage?: number;
  collaborators?: number;
}

/**
 * Basic Error
 */
export interface UsersGetByUsernameResponse404Data {
  message: string;
  documentation_url: string;
}

type UsersGetContextForUserEndpoint = {
  username: string;
  /**
   * Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.
   */
  subject_type?: "organization" | "repository" | "issue" | "pull_request";
  /**
   * Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.
   */
  subject_id?: string;
};

type UsersGetContextForUserRequestOptions = {
  method: "GET";
  url: "/users/:username/hovercard";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Hovercard
 */
export interface UsersGetContextForUserResponseData {
  contexts: {
    message: string;
    octicon: string;
  }[];
}

/**
 * Basic Error
 */
export interface UsersGetContextForUserResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface UsersGetContextForUserResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type UsersGetGpgKeyForAuthenticatedEndpoint = {
  /**
   * gpg_key_id parameter
   */
  gpg_key_id: number;
};

type UsersGetGpgKeyForAuthenticatedRequestOptions = {
  method: "GET";
  url: "/user/gpg_keys/:gpg_key_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * A unique encryption key
 */
export interface UsersGetGpgKeyForAuthenticatedResponseData {
  id: number;
  primary_key_id: number;
  key_id: string;
  public_key: string;
  emails: {
    email: string;
    verified: boolean;
  }[];
  subkeys: {
    id: number;
    primary_key_id: number;
    key_id: string;
    public_key: string;
    emails: unknown[];
    subkeys: unknown[];
    can_sign: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_certify: boolean;
    created_at: string;
    expires_at: string;
    raw_key: string;
  }[];
  can_sign: boolean;
  can_encrypt_comms: boolean;
  can_encrypt_storage: boolean;
  can_certify: boolean;
  created_at: string;
  expires_at: string;
  raw_key: string;
}

/**
 * Basic Error
 */
export interface UsersGetGpgKeyForAuthenticatedResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersGetGpgKeyForAuthenticatedResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersGetGpgKeyForAuthenticatedResponse404Data {
  message: string;
  documentation_url: string;
}

type UsersGetPublicSshKeyForAuthenticatedEndpoint = {
  /**
   * key_id parameter
   */
  key_id: number;
};

type UsersGetPublicSshKeyForAuthenticatedRequestOptions = {
  method: "GET";
  url: "/user/keys/:key_id";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Key
 */
export interface UsersGetPublicSshKeyForAuthenticatedResponseData {
  key_id: string;
  key: string;
  id: number;
  url: string;
  title: string;
  created_at: string;
  verified: boolean;
  read_only: boolean;
}

/**
 * Basic Error
 */
export interface UsersGetPublicSshKeyForAuthenticatedResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersGetPublicSshKeyForAuthenticatedResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersGetPublicSshKeyForAuthenticatedResponse404Data {
  message: string;
  documentation_url: string;
}

type UsersListEndpoint = {
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
};

type UsersListRequestOptions = {
  method: "GET";
  url: "/users";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type UsersListResponseData = SimpleUser[];

/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

type UsersListBlockedByAuthenticatedEndpoint = {};

type UsersListBlockedByAuthenticatedRequestOptions = {
  method: "GET";
  url: "/user/blocks";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type UsersListBlockedByAuthenticatedResponseData = SimpleUser[];

/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

/**
 * Basic Error
 */
export interface UsersListBlockedByAuthenticatedResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersListBlockedByAuthenticatedResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersListBlockedByAuthenticatedResponse404Data {
  message: string;
  documentation_url: string;
}

export interface UsersListBlockedByAuthenticatedResponse415Data {
  message: string;
  documentation_url: string;
}

type UsersListEmailsForAuthenticatedEndpoint = {
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type UsersListEmailsForAuthenticatedRequestOptions = {
  method: "GET";
  url: "/user/emails";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Email
 */
export type Email =
  | {
      email: string;
      primary: boolean;
      verified: boolean;
      visibility: string;
      [k: string]: unknown;
    }
  | string;
export type UsersListEmailsForAuthenticatedResponseData = Email[];

/**
 * Basic Error
 */
export interface UsersListEmailsForAuthenticatedResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersListEmailsForAuthenticatedResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersListEmailsForAuthenticatedResponse404Data {
  message: string;
  documentation_url: string;
}

type UsersListFollowedByAuthenticatedEndpoint = {
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type UsersListFollowedByAuthenticatedRequestOptions = {
  method: "GET";
  url: "/user/following";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type UsersListFollowedByAuthenticatedResponseData = SimpleUser[];

/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

/**
 * Basic Error
 */
export interface UsersListFollowedByAuthenticatedResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersListFollowedByAuthenticatedResponse403Data {
  message: string;
  documentation_url: string;
}

type UsersListFollowersForAuthenticatedUserEndpoint = {
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type UsersListFollowersForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: "/user/followers";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type UsersListFollowersForAuthenticatedUserResponseData = SimpleUser[];

/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

/**
 * Basic Error
 */
export interface UsersListFollowersForAuthenticatedUserResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersListFollowersForAuthenticatedUserResponse403Data {
  message: string;
  documentation_url: string;
}

type UsersListFollowersForUserEndpoint = {
  username: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type UsersListFollowersForUserRequestOptions = {
  method: "GET";
  url: "/users/:username/followers";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type UsersListFollowersForUserResponseData = SimpleUser[];

/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

type UsersListFollowingForUserEndpoint = {
  username: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type UsersListFollowingForUserRequestOptions = {
  method: "GET";
  url: "/users/:username/following";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type UsersListFollowingForUserResponseData = SimpleUser[];

/**
 * Simple User
 */
export interface SimpleUser {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at: string;
}

type UsersListGpgKeysForAuthenticatedEndpoint = {
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type UsersListGpgKeysForAuthenticatedRequestOptions = {
  method: "GET";
  url: "/user/gpg_keys";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type UsersListGpgKeysForAuthenticatedResponseData = GPGKey[];

/**
 * A unique encryption key
 */
export interface GPGKey {
  id: number;
  primary_key_id: number;
  key_id: string;
  public_key: string;
  emails: {
    email: string;
    verified: boolean;
  }[];
  subkeys: {
    id: number;
    primary_key_id: number;
    key_id: string;
    public_key: string;
    emails: unknown[];
    subkeys: unknown[];
    can_sign: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_certify: boolean;
    created_at: string;
    expires_at: string;
    raw_key: string;
  }[];
  can_sign: boolean;
  can_encrypt_comms: boolean;
  can_encrypt_storage: boolean;
  can_certify: boolean;
  created_at: string;
  expires_at: string;
  raw_key: string;
}

/**
 * Basic Error
 */
export interface UsersListGpgKeysForAuthenticatedResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersListGpgKeysForAuthenticatedResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersListGpgKeysForAuthenticatedResponse404Data {
  message: string;
  documentation_url: string;
}

type UsersListGpgKeysForUserEndpoint = {
  username: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type UsersListGpgKeysForUserRequestOptions = {
  method: "GET";
  url: "/users/:username/gpg_keys";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type UsersListGpgKeysForUserResponseData = GPGKey[];

/**
 * A unique encryption key
 */
export interface GPGKey {
  id: number;
  primary_key_id: number;
  key_id: string;
  public_key: string;
  emails: {
    email: string;
    verified: boolean;
  }[];
  subkeys: {
    id: number;
    primary_key_id: number;
    key_id: string;
    public_key: string;
    emails: unknown[];
    subkeys: unknown[];
    can_sign: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_certify: boolean;
    created_at: string;
    expires_at: string;
    raw_key: string;
  }[];
  can_sign: boolean;
  can_encrypt_comms: boolean;
  can_encrypt_storage: boolean;
  can_certify: boolean;
  created_at: string;
  expires_at: string;
  raw_key: string;
}

type UsersListPublicEmailsForAuthenticatedEndpoint = {
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type UsersListPublicEmailsForAuthenticatedRequestOptions = {
  method: "GET";
  url: "/user/public_emails";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Email
 */
export type Email =
  | {
      email: string;
      primary: boolean;
      verified: boolean;
      visibility: string;
      [k: string]: unknown;
    }
  | string;
export type UsersListPublicEmailsForAuthenticatedResponseData = Email[];

/**
 * Basic Error
 */
export interface UsersListPublicEmailsForAuthenticatedResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersListPublicEmailsForAuthenticatedResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersListPublicEmailsForAuthenticatedResponse404Data {
  message: string;
  documentation_url: string;
}

type UsersListPublicKeysForUserEndpoint = {
  username: string;
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type UsersListPublicKeysForUserRequestOptions = {
  method: "GET";
  url: "/users/:username/keys";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type UsersListPublicKeysForUserResponseData = KeySimple[];

/**
 * Key Simple
 */
export interface KeySimple {
  id: number;
  key: string;
}

type UsersListPublicSshKeysForAuthenticatedEndpoint = {
  /**
   * Results per page (max 100)
   */
  per_page?: number;
  /**
   * Page number of the results to fetch.
   */
  page?: number;
};

type UsersListPublicSshKeysForAuthenticatedRequestOptions = {
  method: "GET";
  url: "/user/keys";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

export type UsersListPublicSshKeysForAuthenticatedResponseData = Key[];

/**
 * Key
 */
export interface Key {
  key_id: string;
  key: string;
  id: number;
  url: string;
  title: string;
  created_at: string;
  verified: boolean;
  read_only: boolean;
}

/**
 * Basic Error
 */
export interface UsersListPublicSshKeysForAuthenticatedResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersListPublicSshKeysForAuthenticatedResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersListPublicSshKeysForAuthenticatedResponse404Data {
  message: string;
  documentation_url: string;
}

type UsersSetPrimaryEmailVisibilityForAuthenticatedEndpoint = {
  /**
   * An email address associated with the GitHub user account to manage.
   */
  email: string;
  /**
   * Denotes whether an email is publically visible.
   */
  visibility: "public" | "private";
};

type UsersSetPrimaryEmailVisibilityForAuthenticatedRequestOptions = {
  method: "PATCH";
  url: "/user/email/visibility";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Email
 */
export type Email =
  | {
      email: string;
      primary: boolean;
      verified: boolean;
      visibility: string;
      [k: string]: unknown;
    }
  | string;
export type UsersSetPrimaryEmailVisibilityForAuthenticatedResponseData = Email[];

/**
 * Basic Error
 */
export interface UsersSetPrimaryEmailVisibilityForAuthenticatedResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersSetPrimaryEmailVisibilityForAuthenticatedResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersSetPrimaryEmailVisibilityForAuthenticatedResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface UsersSetPrimaryEmailVisibilityForAuthenticatedResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type UsersUnblockEndpoint = {
  username: string;
};

type UsersUnblockRequestOptions = {
  method: "DELETE";
  url: "/user/blocks/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface UsersUnblockResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersUnblockResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersUnblockResponse404Data {
  message: string;
  documentation_url: string;
}

type UsersUnfollowEndpoint = {
  username: string;
};

type UsersUnfollowRequestOptions = {
  method: "DELETE";
  url: "/user/following/:username";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Basic Error
 */
export interface UsersUnfollowResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersUnfollowResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersUnfollowResponse404Data {
  message: string;
  documentation_url: string;
}

type UsersUpdateAuthenticatedEndpoint = {
  /**
   * The new name of the user.
   */
  name?: string;
  /**
   * The publicly visible email address of the user.
   */
  email?: string;
  /**
   * The new blog URL of the user.
   */
  blog?: string;
  /**
   * The new Twitter username of the user.
   */
  twitter_username?: string | null;
  /**
   * The new company of the user.
   */
  company?: string;
  /**
   * The new location of the user.
   */
  location?: string;
  /**
   * The new hiring availability of the user.
   */
  hireable?: boolean;
  /**
   * The new short biography of the user.
   */
  bio?: string;
};

type UsersUpdateAuthenticatedRequestOptions = {
  method: "PATCH";
  url: "/user";
  headers: RequestHeaders;
  request: RequestRequestOptions;
};

/**
 * Private User
 */
export interface UsersUpdateAuthenticatedResponseData {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  name: string;
  company: string;
  blog: string;
  location: string;
  email: string;
  hireable: boolean;
  bio: string;
  twitter_username: string;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  created_at: string;
  updated_at: string;
  private_gists: number;
  total_private_repos: number;
  owned_private_repos: number;
  disk_usage: number;
  collaborators: number;
  two_factor_authentication: boolean;
  plan: {
    collaborators: number;
    name: string;
    space: number;
    private_repos: number;
  };
  suspended_at: string;
  business_plus: boolean;
  ldap_dn: string;
}

/**
 * Basic Error
 */
export interface UsersUpdateAuthenticatedResponse401Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersUpdateAuthenticatedResponse403Data {
  message: string;
  documentation_url: string;
}

/**
 * Basic Error
 */
export interface UsersUpdateAuthenticatedResponse404Data {
  message: string;
  documentation_url: string;
}

/**
 * Validation Error
 */
export interface UsersUpdateAuthenticatedResponse422Data {
  message: string;
  documentation_url: string;
  errors: {
    resource: string;
    field: string;
    message: string;
    code: string;
    index: number;
    value: string | number | string[];
  }[];
}

type ActionsCreateWorkflowDispatchParamsInputs = {
  [key: string]: ActionsCreateWorkflowDispatchParamsInputsKeyString;
};
type ActionsCreateWorkflowDispatchParamsInputsKeyString = {};
type AppsCreateInstallationAccessTokenParamsPermissions = {
  contents?: string;
  issues?: string;
  deployments?: string;
  single_file?: string;
  def_not_a_repo?: string;
};
type ChecksCreateParamsOutput = {
  title: string;
  summary: string;
  text?: string;
  annotations?: ChecksCreateParamsOutputAnnotations[];
  images?: ChecksCreateParamsOutputImages[];
};
type ChecksCreateParamsOutputAnnotations = {
  path: string;
  start_line: number;
  end_line: number;
  start_column?: number;
  end_column?: number;
  annotation_level: "notice" | "warning" | "failure";
  message: string;
  title?: string;
  raw_details?: string;
};
type ChecksCreateParamsOutputImages = {
  alt: string;
  image_url: string;
  caption?: string;
};
type ChecksCreateParamsActions = {
  label: string;
  description: string;
  identifier: string;
};
type ChecksSetSuitesPreferencesParamsAutoTriggerChecks = {
  app_id: number;
  setting: boolean;
};
type ChecksUpdateParamsOutput = {
  title?: string;
  summary: string;
  text?: string;
  annotations?: ChecksUpdateParamsOutputAnnotations[];
  images?: ChecksUpdateParamsOutputImages[];
};
type ChecksUpdateParamsOutputAnnotations = {
  path: string;
  start_line: number;
  end_line: number;
  start_column?: number;
  end_column?: number;
  annotation_level: "notice" | "warning" | "failure";
  message: string;
  title?: string;
  raw_details?: string;
};
type ChecksUpdateParamsOutputImages = {
  alt: string;
  image_url: string;
  caption?: string;
};
type ChecksUpdateParamsActions = {
  label: string;
  description: string;
  identifier: string;
};
type EnterpriseAdminProvisionAndInviteEnterpriseGroupParamsMembers = {
  value: string;
};
type EnterpriseAdminProvisionAndInviteEnterpriseUserParamsName = {
  givenName: string;
  familyName: string;
};
type EnterpriseAdminProvisionAndInviteEnterpriseUserParamsEmails = {
  value: string;
  type: string;
  primary: boolean;
};
type EnterpriseAdminProvisionAndInviteEnterpriseUserParamsGroups = {
  value?: string;
};
type EnterpriseAdminSetInformationForProvisionedEnterpriseGroupParamsMembers = {
  value: string;
};
type EnterpriseAdminSetInformationForProvisionedEnterpriseUserParamsName = {
  givenName: string;
  familyName: string;
};
type EnterpriseAdminSetInformationForProvisionedEnterpriseUserParamsEmails = {
  value: string;
  type: string;
  primary: boolean;
};
type EnterpriseAdminSetInformationForProvisionedEnterpriseUserParamsGroups = {
  value?: string;
};
type EnterpriseAdminUpdateAttributeForEnterpriseGroupParamsOperations = {};
type EnterpriseAdminUpdateAttributeForEnterpriseUserParamsOperations = {};
type GistsCreateParamsFiles = {
  [key: string]: GistsCreateParamsFilesKeyString;
};
type GistsCreateParamsFilesKeyString = {
  content: string;
};
type GistsUpdateParamsFiles = {
  [key: string]: GistsUpdateParamsFilesKeyString;
};
type GistsUpdateParamsFilesKeyString = {
  content: string;
  filename: string | null;
};
type GitCreateCommitParamsAuthor = {
  name?: string;
  email?: string;
  date?: string;
};
type GitCreateCommitParamsCommitter = {
  name?: string;
  email?: string;
  date?: string;
};
type GitCreateTagParamsTagger = {
  name?: string;
  email?: string;
  date?: string;
};
type GitCreateTreeParamsTree = {
  path?: string;
  mode?: "100644" | "100755" | "040000" | "160000" | "120000";
  type?: "blob" | "tree" | "commit";
  sha?: string | null;
  content?: string;
};
type OrgsCreateWebhookParamsConfig = {
  url: string;
  content_type?: string;
  secret?: string;
  insecure_ssl?: string;
  username?: string;
  password?: string;
};
type OrgsUpdateWebhookParamsConfig = {
  url: string;
  content_type?: string;
  secret?: string;
  insecure_ssl?: string;
};
type PullsCreateReviewParamsComments = {
  path: string;
  position?: number;
  body: string;
  line?: number;
  side?: string;
  start_line?: number;
  start_side?: string;
};
type ReposCreateDispatchEventParamsClientPayload = {
  [key: string]: ReposCreateDispatchEventParamsClientPayloadKeyString;
};
type ReposCreateDispatchEventParamsClientPayloadKeyString = {};
type ReposCreateOrUpdateFileContentsParamsCommitter = {
  name: string;
  email: string;
  date?: string;
};
type ReposCreateOrUpdateFileContentsParamsAuthor = {
  name: string;
  email: string;
  date?: string;
};
type ReposCreatePagesSiteParamsSource = {
  branch: string;
  path?: "/" | "/docs";
};
type ReposCreateWebhookParamsConfig = {
  url: string;
  content_type?: string;
  secret?: string;
  insecure_ssl?: string;
  token?: string;
  digest?: string;
};
type ReposDeleteFileParamsCommitter = {
  name?: string;
  email?: string;
};
type ReposDeleteFileParamsAuthor = {
  name?: string;
  email?: string;
};
type ReposUpdateBranchProtectionParamsRequiredStatusChecks = {
  strict: boolean;
  contexts: string[];
};
type ReposUpdateBranchProtectionParamsRequiredPullRequestReviews = {
  dismissal_restrictions?: ReposUpdateBranchProtectionParamsRequiredPullRequestReviewsDismissalRestrictions;
  dismiss_stale_reviews?: boolean;
  require_code_owner_reviews?: boolean;
  required_approving_review_count?: number;
};
type ReposUpdateBranchProtectionParamsRequiredPullRequestReviewsDismissalRestrictions = {
  users?: string[];
  teams?: string[];
};
type ReposUpdateBranchProtectionParamsRestrictions = {
  users: string[];
  teams: string[];
  apps?: string[];
};
type ReposUpdatePullRequestReviewProtectionParamsDismissalRestrictions = {
  users?: string[];
  teams?: string[];
};
type ReposUpdateWebhookParamsConfig = {
  url: string;
  content_type?: string;
  secret?: string;
  insecure_ssl?: string;
  address?: string;
  room?: string;
};
type ScimProvisionAndInviteUserParamsName = {
  givenName: string;
  familyName: string;
  formatted?: string;
};
type ScimProvisionAndInviteUserParamsEmails = {
  value: string;
  primary?: boolean;
  type?: string;
};
type ScimSetInformationForProvisionedUserParamsName = {
  givenName: string;
  familyName: string;
  formatted?: string;
};
type ScimSetInformationForProvisionedUserParamsEmails = {
  type?: string;
  value: string;
  primary?: boolean;
};
type ScimUpdateAttributeForUserParamsOperations = {
  op: "add" | "remove" | "replace";
  path?: string;
  value?: any;
};
type TeamsCreateOrUpdateIdpGroupConnectionsInOrgParamsGroups = {
  group_id: string;
  group_name: string;
  group_description: string;
};
type TeamsCreateOrUpdateIdpGroupConnectionsLegacyParamsGroups = {
  group_id: string;
  group_name: string;
  group_description: string;
  id?: string;
  name?: string;
  description?: string;
};
