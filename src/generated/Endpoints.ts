// This file is auto-generated by scripts/generate-endpoints.ts.mjs
import type { RequestHeaders } from "../RequestHeaders.js";
import type { RequestRequestOptions } from "../RequestRequestOptions.js";
import type { ResponseHeaders } from "../ResponseHeaders.js";

type RootSchema = {
  current_user_url: string;
  current_user_authorizations_html_url: string;
  authorizations_url: string;
  code_search_url: string;
  commit_search_url: string;
  emails_url: string;
  emojis_url: string;
  events_url: string;
  feeds_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;

  /**
   * @deprecated
   */
  hub_url?: string;
  issue_search_url: string;
  issues_url: string;
  keys_url: string;
  label_search_url: string;
  notifications_url: string;
  organization_url: string;
  organization_repositories_url: string;
  organization_teams_url: string;
  public_gists_url: string;
  rate_limit_url: string;
  repository_url: string;
  repository_search_url: string;
  current_user_repositories_url: string;
  starred_url: string;
  starred_gists_url: string;
  topic_search_url?: string;
  user_url: string;
  user_organizations_url: string;
  user_repositories_url: string;
  user_search_url: string;
};
/**
 * @description The package's language or package management ecosystem.
 */
type SecurityAdvisoryEcosystemsSchema =
  | "rubygems"
  | "npm"
  | "pip"
  | "maven"
  | "nuget"
  | "composer"
  | "go"
  | "rust"
  | "erlang"
  | "actions"
  | "pub"
  | "other"
  | "swift";
/**
 * @description A vulnerability describing the product and its affected versions within a GitHub Security Advisory.
 */
type VulnerabilitySchema = {
  /**
   * @description The name of the package affected by the vulnerability.
   */
  package: {
    ecosystem: SecurityAdvisoryEcosystemsSchema;

    /**
     * @description The unique package name within its ecosystem.
     */
    name: string | null;
  } | null;

  /**
   * @description The range of the package versions affected by the vulnerability.
   */
  vulnerable_version_range: string | null;

  /**
   * @description The package version that resolves the vulnerability.
   */
  first_patched_version: string | null;

  /**
   * @description The functions in the package that are affected by the vulnerability.
   * @readonly
   */
  readonly vulnerable_functions: Readonly<string[] | null>;
};
type CvssSeveritiesSchema = {
  cvss_v3?: {
    /**
     * @description The CVSS 3 vector string.
     */
    vector_string: string | null;

    /**
     * @description The CVSS 3 score.
     * @readonly
     */
    readonly score: Readonly<number | null>;
  } | null;
  cvss_v4?: {
    /**
     * @description The CVSS 4 vector string.
     */
    vector_string: string | null;

    /**
     * @description The CVSS 4 score.
     * @readonly
     */
    readonly score: Readonly<number | null>;
  } | null;
} | null;
/**
 * @description The EPSS scores as calculated by the [Exploit Prediction Scoring System](https://www.first.org/epss).
 * @readonly
 */
type SecurityAdvisoryEpssSchema = {
  percentage?: number;
  percentile?: number;
} | null;
/**
 * @description A GitHub user.
 */
type SimpleUserSchema = {
  name?: string | null;
  email?: string | null;

  /**
   * @example octocat
   */
  login: string;

  /**
   * @example 1
   */
  id: number;

  /**
   * @example MDQ6VXNlcjE=
   */
  node_id: string;

  /**
   * @example https://github.com/images/error/octocat_happy.gif
   */
  avatar_url: string;

  /**
   * @example 41d064eb2195891e12d0413f63227ea7
   */
  gravatar_id: string | null;

  /**
   * @example https://api.github.com/users/octocat
   */
  url: string;

  /**
   * @example https://github.com/octocat
   */
  html_url: string;

  /**
   * @example https://api.github.com/users/octocat/followers
   */
  followers_url: string;

  /**
   * @example https://api.github.com/users/octocat/following{/other_user}
   */
  following_url: string;

  /**
   * @example https://api.github.com/users/octocat/gists{/gist_id}
   */
  gists_url: string;

  /**
   * @example https://api.github.com/users/octocat/starred{/owner}{/repo}
   */
  starred_url: string;

  /**
   * @example https://api.github.com/users/octocat/subscriptions
   */
  subscriptions_url: string;

  /**
   * @example https://api.github.com/users/octocat/orgs
   */
  organizations_url: string;

  /**
   * @example https://api.github.com/users/octocat/repos
   */
  repos_url: string;

  /**
   * @example https://api.github.com/users/octocat/events{/privacy}
   */
  events_url: string;

  /**
   * @example https://api.github.com/users/octocat/received_events
   */
  received_events_url: string;

  /**
   * @example User
   */
  type: string;
  site_admin: boolean;

  /**
   * @example "2020-07-09T00:17:55Z"
   */
  starred_at?: string;

  /**
   * @example public
   */
  user_view_type?: string;
};
/**
 * @description The type of credit the user is receiving.
 */
type SecurityAdvisoryCreditTypesSchema =
  | "analyst"
  | "finder"
  | "reporter"
  | "coordinator"
  | "remediation_developer"
  | "remediation_reviewer"
  | "remediation_verifier"
  | "tool"
  | "sponsor"
  | "other";
/**
 * @description A GitHub Security Advisory.
 */
type GlobalAdvisorySchema = {
  /**
   * @description The GitHub Security Advisory ID.
   * @readonly
   */
  readonly ghsa_id: Readonly<string>;

  /**
   * @description The Common Vulnerabilities and Exposures (CVE) ID.
   * @readonly
   */
  readonly cve_id: Readonly<string | null>;

  /**
   * @description The API URL for the advisory.
   * @readonly
   */
  readonly url: Readonly<string>;

  /**
   * @description The URL for the advisory.
   * @readonly
   */
  readonly html_url: Readonly<string>;

  /**
   * @description The API URL for the repository advisory.
   * @readonly
   */
  readonly repository_advisory_url: Readonly<string | null>;

  /**
   * @description A short summary of the advisory.
   */
  summary: string;

  /**
   * @description A detailed description of what the advisory entails.
   */
  description: string | null;

  /**
   * @description The type of advisory.
   * @readonly
   */
  readonly type: Readonly<"reviewed" | "unreviewed" | "malware">;

  /**
   * @description The severity of the advisory.
   */
  severity: "critical" | "high" | "medium" | "low" | "unknown";

  /**
   * @description The URL of the advisory's source code.
   */
  source_code_location: string | null;

  /**
   * @readonly
   */
  readonly identifiers: Readonly<
    | {
        /**
         * @description The type of identifier.
         */
        type: "CVE" | "GHSA";

        /**
         * @description The identifier value.
         */
        value: string;
      }[]
    | null
  >;
  references: string[] | null;

  /**
   * @description The date and time of when the advisory was published, in ISO 8601 format.
   * @readonly
   */
  readonly published_at: Readonly<string>;

  /**
   * @description The date and time of when the advisory was last updated, in ISO 8601 format.
   * @readonly
   */
  readonly updated_at: Readonly<string>;

  /**
   * @description The date and time of when the advisory was reviewed by GitHub, in ISO 8601 format.
   * @readonly
   */
  readonly github_reviewed_at: Readonly<string | null>;

  /**
   * @description The date and time when the advisory was published in the National Vulnerability Database, in ISO 8601 format.
   * This field is only populated when the advisory is imported from the National Vulnerability Database.
   * @readonly
   */
  readonly nvd_published_at: Readonly<string | null>;

  /**
   * @description The date and time of when the advisory was withdrawn, in ISO 8601 format.
   * @readonly
   */
  readonly withdrawn_at: Readonly<string | null>;

  /**
   * @description The products and respective version ranges affected by the advisory.
   */
  vulnerabilities: VulnerabilitySchema[] | null;
  cvss: {
    /**
     * @description The CVSS vector.
     */
    vector_string: string | null;

    /**
     * @description The CVSS score.
     * @readonly
     */
    readonly score: Readonly<number | null>;
  } | null;
  cvss_severities?: CvssSeveritiesSchema;
  epss?: SecurityAdvisoryEpssSchema;
  cwes:
    | {
        /**
         * @description The Common Weakness Enumeration (CWE) identifier.
         */
        cwe_id: string;

        /**
         * @description The name of the CWE.
         * @readonly
         */
        readonly name: Readonly<string>;
      }[]
    | null;

  /**
   * @description The users who contributed to the advisory.
   * @readonly
   */
  readonly credits: Readonly<
    | {
        user: SimpleUserSchema;
        type: SecurityAdvisoryCreditTypesSchema;
      }[]
    | null
  >;
};
/**
 * @description Basic Error
 */
/**
 * @description Validation Error Simple
 */
type EnterpriseSchema = {
  /**
   * @description A short description of the enterprise.
   */
  description?: string | null;

  /**
   * @example https://github.com/enterprises/octo-business
   */
  html_url: string;

  /**
   * @description The enterprise's website URL.
   */
  website_url?: string | null;

  /**
   * @description Unique identifier of the enterprise
   * @example 42
   */
  id: number;

  /**
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;

  /**
   * @description The name of the enterprise.
   * @example Octo Business
   */
  name: string;

  /**
   * @description The slug url identifier for the enterprise.
   * @example octo-business
   */
  slug: string;

  /**
   * @example 2019-01-26T19:01:12Z
   */
  created_at: string | null;

  /**
   * @example 2019-01-26T19:14:43Z
   */
  updated_at: string | null;
  avatar_url: string;
};
/**
 * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
type IntegrationSchema = {
  /**
   * @description Unique identifier of the GitHub app
   * @example 37
   */
  id: number;

  /**
   * @description The slug name of the GitHub app
   * @example probot-owners
   */
  slug?: string;

  /**
   * @example MDExOkludGVncmF0aW9uMQ==
   */
  node_id: string;

  /**
   * @example "Iv1.25b5d1e65ffc4022"
   */
  client_id?: string;
  owner: SimpleUserSchema | EnterpriseSchema;

  /**
   * @description The name of the GitHub app
   * @example Probot Owners
   */
  name: string;

  /**
   * @example The description of the app.
   */
  description: string | null;

  /**
   * @example https://example.com
   */
  external_url: string;

  /**
   * @example https://github.com/apps/super-ci
   */
  html_url: string;

  /**
   * @example 2017-07-08T16:18:44-04:00
   */
  created_at: string;

  /**
   * @example 2017-07-08T16:18:44-04:00
   */
  updated_at: string;

  /**
 * @description The set of permissions for the GitHub app
 * @example {
  "issues": "read",
  "deployments": "write"
}
  */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [key: string]: string;
  };

  /**
 * @description The list of events for the GitHub app. Note that the `installation_target`, `security_advisory`, and `meta` events are not included because they are global events and not specific to an installation.
 * @example [
  "label",
  "deployment"
]
  */
  events: string[];

  /**
   * @description The number of installations associated with the GitHub app. Only returned when the integration is requesting details about itself.
   * @example 5
   */
  installations_count?: number;
} | null;
/**
 * @description The URL to which the payloads will be delivered.
 * @example https://example.com/webhook
 */
type WebhookConfigUrlSchema = string;
/**
 * @description The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
 * @example "json"
 */
type WebhookConfigContentTypeSchema = string;
/**
 * @description If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
 * @example "********"
 */
type WebhookConfigSecretSchema = string;
type WebhookConfigInsecureSslSchema = string | number;
/**
 * @description Configuration object of the webhook
 */
type WebhookConfigSchema = {
  url?: WebhookConfigUrlSchema;
  content_type?: WebhookConfigContentTypeSchema;
  secret?: WebhookConfigSecretSchema;
  insecure_ssl?: WebhookConfigInsecureSslSchema;
};
/**
 * @description Delivery made by a webhook, without request and response information.
 */
type HookDeliveryItemSchema = {
  /**
   * @description Unique identifier of the webhook delivery.
   * @example 42
   */
  id: number;

  /**
   * @description Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
   * @example 58474f00-b361-11eb-836d-0e4f3503ccbe
   */
  guid: string;

  /**
   * @description Time when the webhook delivery occurred.
   * @example 2021-05-12T20:33:44Z
   */
  delivered_at: string;

  /**
   * @description Whether the webhook delivery is a redelivery.
   */
  redelivery: boolean;

  /**
   * @description Time spent delivering.
   * @example 0.03
   */
  duration: number;

  /**
   * @description Describes the response returned after attempting the delivery.
   * @example failed to connect
   */
  status: string;

  /**
   * @description Status code received when delivery was made.
   * @example 502
   */
  status_code: number;

  /**
   * @description The event that triggered the delivery.
   * @example issues
   */
  event: string;

  /**
   * @description The type of activity for the event that triggered the delivery.
   * @example opened
   */
  action: string | null;

  /**
   * @description The id of the GitHub App installation associated with this event.
   * @example 123
   */
  installation_id: number | null;

  /**
   * @description The id of the repository associated with this event.
   * @example 123
   */
  repository_id: number | null;

  /**
   * @description Time when the webhook delivery was throttled.
   * @example 2021-05-12T20:33:44Z
   */
  throttled_at?: string | null;
};
/**
 * @description Scim Error
 */
/**
 * @description Validation Error
 */
type HookDeliverySchema = {
  /**
   * @description Unique identifier of the delivery.
   * @example 42
   */
  id: number;

  /**
   * @description Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
   * @example 58474f00-b361-11eb-836d-0e4f3503ccbe
   */
  guid: string;

  /**
   * @description Time when the delivery was delivered.
   * @example 2021-05-12T20:33:44Z
   */
  delivered_at: string;

  /**
   * @description Whether the delivery is a redelivery.
   */
  redelivery: boolean;

  /**
   * @description Time spent delivering.
   * @example 0.03
   */
  duration: number;

  /**
   * @description Description of the status of the attempted delivery
   * @example failed to connect
   */
  status: string;

  /**
   * @description Status code received when delivery was made.
   * @example 502
   */
  status_code: number;

  /**
   * @description The event that triggered the delivery.
   * @example issues
   */
  event: string;

  /**
   * @description The type of activity for the event that triggered the delivery.
   * @example opened
   */
  action: string | null;

  /**
   * @description The id of the GitHub App installation associated with this event.
   * @example 123
   */
  installation_id: number | null;

  /**
   * @description The id of the repository associated with this event.
   * @example 123
   */
  repository_id: number | null;

  /**
   * @description Time when the webhook delivery was throttled.
   * @example 2021-05-12T20:33:44Z
   */
  throttled_at?: string | null;

  /**
   * @description The URL target of the delivery.
   * @example https://www.example.com
   */
  url?: string;
  request: {
    /**
     * @description The request headers sent with the webhook delivery.
     */
    headers: {
      [key: string]: any;
    } | null;

    /**
     * @description The webhook payload.
     */
    payload: {
      [key: string]: any;
    } | null;
  };
  response: {
    /**
     * @description The response headers received when the delivery was made.
     */
    headers: {
      [key: string]: any;
    } | null;

    /**
     * @description The response payload received.
     */
    payload: string | null;
  };
};
/**
 * @description Request to install an integration on a target
 */
type IntegrationInstallationRequestSchema = {
  /**
   * @description Unique identifier of the request installation.
   * @example 42
   */
  id: number;

  /**
   * @example MDExOkludGVncmF0aW9uMQ==
   */
  node_id?: string;
  account: SimpleUserSchema | EnterpriseSchema;
  requester: SimpleUserSchema;

  /**
   * @example 2022-07-08T16:18:44-04:00
   */
  created_at: string;
};
/**
 * @description The permissions granted to the user access token.
 * @example {
  "contents": "read",
  "issues": "read",
  "deployments": "write",
  "single_file": "read"
}
 */
type AppPermissionsSchema = {
  /**
   * @description The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
   */
  actions?: "read" | "write";

  /**
   * @description The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
   */
  administration?: "read" | "write";

  /**
   * @description The level of permission to grant the access token for checks on code.
   */
  checks?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to create, edit, delete, and list Codespaces.
   */
  codespaces?: "read" | "write";

  /**
   * @description The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
   */
  contents?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to manage Dependabot secrets.
   */
  dependabot_secrets?: "read" | "write";

  /**
   * @description The level of permission to grant the access token for deployments and deployment statuses.
   */
  deployments?: "read" | "write";

  /**
   * @description The level of permission to grant the access token for managing repository environments.
   */
  environments?: "read" | "write";

  /**
   * @description The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
   */
  issues?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
   */
  metadata?: "read" | "write";

  /**
   * @description The level of permission to grant the access token for packages published to GitHub Packages.
   */
  packages?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
   */
  pages?: "read" | "write";

  /**
   * @description The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
   */
  pull_requests?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.
   */
  repository_custom_properties?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to manage the post-receive hooks for a repository.
   */
  repository_hooks?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to manage repository projects, columns, and cards.
   */
  repository_projects?: "read" | "write" | "admin";

  /**
   * @description The level of permission to grant the access token to view and manage secret scanning alerts.
   */
  secret_scanning_alerts?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to manage repository secrets.
   */
  secrets?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to view and manage security events like code scanning alerts.
   */
  security_events?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to manage just a single file.
   */
  single_file?: "read" | "write";

  /**
   * @description The level of permission to grant the access token for commit statuses.
   */
  statuses?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to manage Dependabot alerts.
   */
  vulnerability_alerts?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to update GitHub Actions workflow files.
   */
  workflows?: "write";

  /**
   * @description The level of permission to grant the access token for organization teams and members.
   */
  members?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to manage access to an organization.
   */
  organization_administration?: "read" | "write";

  /**
   * @description The level of permission to grant the access token for custom repository roles management.
   */
  organization_custom_roles?: "read" | "write";

  /**
   * @description The level of permission to grant the access token for custom organization roles management.
   */
  organization_custom_org_roles?: "read" | "write";

  /**
   * @description The level of permission to grant the access token for custom property management.
   */
  organization_custom_properties?: "read" | "write" | "admin";

  /**
   * @description The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change.
   */
  organization_copilot_seat_management?: "write";

  /**
   * @description The level of permission to grant the access token to view and manage announcement banners for an organization.
   */
  organization_announcement_banners?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to view events triggered by an activity in an organization.
   */
  organization_events?: "read";

  /**
   * @description The level of permission to grant the access token to manage the post-receive hooks for an organization.
   */
  organization_hooks?: "read" | "write";

  /**
   * @description The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
   */
  organization_personal_access_tokens?: "read" | "write";

  /**
   * @description The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
   */
  organization_personal_access_token_requests?: "read" | "write";

  /**
   * @description The level of permission to grant the access token for viewing an organization's plan.
   */
  organization_plan?: "read";

  /**
   * @description The level of permission to grant the access token to manage organization projects and projects public preview (where available).
   */
  organization_projects?: "read" | "write" | "admin";

  /**
   * @description The level of permission to grant the access token for organization packages published to GitHub Packages.
   */
  organization_packages?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to manage organization secrets.
   */
  organization_secrets?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
   */
  organization_self_hosted_runners?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to view and manage users blocked by the organization.
   */
  organization_user_blocking?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to manage team discussions and related comments.
   */
  team_discussions?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to manage the email addresses belonging to a user.
   */
  email_addresses?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to manage the followers belonging to a user.
   */
  followers?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to manage git SSH keys.
   */
  git_ssh_keys?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to view and manage GPG keys belonging to a user.
   */
  gpg_keys?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to view and manage interaction limits on a repository.
   */
  interaction_limits?: "read" | "write";

  /**
   * @description The level of permission to grant the access token to manage the profile settings belonging to a user.
   */
  profile?: "write";

  /**
   * @description The level of permission to grant the access token to list and manage repositories a user is starring.
   */
  starring?: "read" | "write";
};
/**
 * @description A GitHub user.
 */
type NullableSimpleUserSchema = {
  name?: string | null;
  email?: string | null;

  /**
   * @example octocat
   */
  login: string;

  /**
   * @example 1
   */
  id: number;

  /**
   * @example MDQ6VXNlcjE=
   */
  node_id: string;

  /**
   * @example https://github.com/images/error/octocat_happy.gif
   */
  avatar_url: string;

  /**
   * @example 41d064eb2195891e12d0413f63227ea7
   */
  gravatar_id: string | null;

  /**
   * @example https://api.github.com/users/octocat
   */
  url: string;

  /**
   * @example https://github.com/octocat
   */
  html_url: string;

  /**
   * @example https://api.github.com/users/octocat/followers
   */
  followers_url: string;

  /**
   * @example https://api.github.com/users/octocat/following{/other_user}
   */
  following_url: string;

  /**
   * @example https://api.github.com/users/octocat/gists{/gist_id}
   */
  gists_url: string;

  /**
   * @example https://api.github.com/users/octocat/starred{/owner}{/repo}
   */
  starred_url: string;

  /**
   * @example https://api.github.com/users/octocat/subscriptions
   */
  subscriptions_url: string;

  /**
   * @example https://api.github.com/users/octocat/orgs
   */
  organizations_url: string;

  /**
   * @example https://api.github.com/users/octocat/repos
   */
  repos_url: string;

  /**
   * @example https://api.github.com/users/octocat/events{/privacy}
   */
  events_url: string;

  /**
   * @example https://api.github.com/users/octocat/received_events
   */
  received_events_url: string;

  /**
   * @example User
   */
  type: string;
  site_admin: boolean;

  /**
   * @example "2020-07-09T00:17:55Z"
   */
  starred_at?: string;

  /**
   * @example public
   */
  user_view_type?: string;
} | null;
/**
 * @description Installation
 */
type InstallationSchema = {
  /**
   * @description The ID of the installation.
   * @example 1
   */
  id: number;
  account: SimpleUserSchema | EnterpriseSchema | null;

  /**
   * @description Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";

  /**
   * @example https://api.github.com/app/installations/1/access_tokens
   */
  access_tokens_url: string;

  /**
   * @example https://api.github.com/installation/repositories
   */
  repositories_url: string;

  /**
   * @example https://github.com/organizations/github/settings/installations/1
   */
  html_url: string;

  /**
   * @example 1
   */
  app_id: number;

  /**
   * @example Iv1.ab1112223334445c
   */
  client_id?: string;

  /**
   * @description The ID of the user or organization this token is being scoped to.
   */
  target_id: number;

  /**
   * @example Organization
   */
  target_type: string;
  permissions: AppPermissionsSchema;
  events: string[];
  created_at: string;
  updated_at: string;

  /**
   * @example config.yaml
   */
  single_file_name: string | null;

  /**
   * @example true
   */
  has_multiple_single_files?: boolean;

  /**
 * @example [
  "config.yml",
  ".github/issue_TEMPLATE.md"
]
  */
  single_file_paths?: string[];

  /**
   * @example github-actions
   */
  app_slug: string;
  suspended_by: NullableSimpleUserSchema;
  suspended_at: string | null;

  /**
   * @example "test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"
   */
  contact_email?: string | null;
};
/**
 * @description License Simple
 */
type NullableLicenseSimpleSchema = {
  /**
   * @example mit
   */
  key: string;

  /**
   * @example MIT License
   */
  name: string;

  /**
   * @example https://api.github.com/licenses/mit
   */
  url: string | null;

  /**
   * @example MIT
   */
  spdx_id: string | null;

  /**
   * @example MDc6TGljZW5zZW1pdA==
   */
  node_id: string;
  html_url?: string;
} | null;
/**
 * @description A repository on GitHub.
 */
type RepositorySchema = {
  /**
   * @description Unique identifier of the repository
   * @example 42
   */
  id: number;

  /**
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;

  /**
   * @description The name of the repository.
   * @example Team Environment
   */
  name: string;

  /**
   * @example octocat/Hello-World
   */
  full_name: string;
  license: NullableLicenseSimpleSchema;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
  };
  owner: SimpleUserSchema;

  /**
   * @description Whether the repository is private or public.
   * @default false
   */
  private: boolean;

  /**
   * @example https://github.com/octocat/Hello-World
   */
  html_url: string;

  /**
   * @example This your first repo!
   */
  description: string | null;
  fork: boolean;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World
   */
  url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contributors
   */
  contributors_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/deployments
   */
  deployments_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/downloads
   */
  downloads_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/events
   */
  events_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/forks
   */
  forks_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;

  /**
   * @example git:github.com/octocat/Hello-World.git
   */
  git_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/languages
   */
  languages_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/merges
   */
  merges_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;

  /**
   * @example git@github.com:octocat/Hello-World.git
   */
  ssh_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/stargazers
   */
  stargazers_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscribers
   */
  subscribers_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscription
   */
  subscription_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/tags
   */
  tags_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/teams
   */
  teams_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;

  /**
   * @example https://github.com/octocat/Hello-World.git
   */
  clone_url: string;

  /**
   * @example git:git.example.com/octocat/Hello-World
   */
  mirror_url: string | null;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/hooks
   */
  hooks_url: string;

  /**
   * @example https://svn.github.com/octocat/Hello-World
   */
  svn_url: string;

  /**
   * @example https://github.com
   */
  homepage: string | null;
  language: string | null;

  /**
   * @example 9
   */
  forks_count: number;

  /**
   * @example 80
   */
  stargazers_count: number;

  /**
   * @example 80
   */
  watchers_count: number;

  /**
   * @description The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
   * @example 108
   */
  size: number;

  /**
   * @description The default branch of the repository.
   * @example master
   */
  default_branch: string;
  open_issues_count: number;

  /**
   * @description Whether this repository acts as a template that can be used to generate new repositories.
   * @example true
   * @default false
   */
  is_template?: boolean;
  topics?: string[];

  /**
   * @description Whether issues are enabled.
   * @example true
   * @default true
   */
  has_issues: boolean;

  /**
   * @description Whether projects are enabled.
   * @example true
   * @default true
   */
  has_projects: boolean;

  /**
   * @description Whether the wiki is enabled.
   * @example true
   * @default true
   */
  has_wiki: boolean;
  has_pages: boolean;

  /**
   * @description Whether downloads are enabled.
   * @deprecated
   * @example true
   * @default true
   */
  has_downloads: boolean;

  /**
   * @description Whether discussions are enabled.
   * @example true
   * @default false
   */
  has_discussions?: boolean;

  /**
   * @description Whether the repository is archived.
   * @default false
   */
  archived: boolean;

  /**
   * @description Returns whether or not this repository disabled.
   */
  disabled: boolean;

  /**
   * @description The repository visibility: public, private, or internal.
   * @default "public"
   */
  visibility?: string;

  /**
   * @example 2011-01-26T19:06:43Z
   */
  pushed_at: string | null;

  /**
   * @example 2011-01-26T19:01:12Z
   */
  created_at: string | null;

  /**
   * @example 2011-01-26T19:14:43Z
   */
  updated_at: string | null;

  /**
   * @description Whether to allow rebase merges for pull requests.
   * @example true
   * @default true
   */
  allow_rebase_merge?: boolean;
  temp_clone_token?: string;

  /**
   * @description Whether to allow squash merges for pull requests.
   * @example true
   * @default true
   */
  allow_squash_merge?: boolean;

  /**
   * @description Whether to allow Auto-merge to be used on pull requests.
   * @default false
   */
  allow_auto_merge?: boolean;

  /**
   * @description Whether to delete head branches when pull requests are merged
   * @default false
   */
  delete_branch_on_merge?: boolean;

  /**
   * @description Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   * @default false
   */
  allow_update_branch?: boolean;

  /**
   * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @deprecated
   * @default false
   */
  use_squash_pr_title_as_default?: boolean;

  /**
   * @description The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";

  /**
   * @description The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";

  /**
   * @description The default value for a merge commit title.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";

  /**
   * @description The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";

  /**
   * @description Whether to allow merge commits for pull requests.
   * @example true
   * @default true
   */
  allow_merge_commit?: boolean;

  /**
   * @description Whether to allow forking this repo
   */
  allow_forking?: boolean;

  /**
   * @description Whether to require contributors to sign off on web-based commits
   * @default false
   */
  web_commit_signoff_required?: boolean;
  open_issues: number;
  watchers: number;
  master_branch?: string;

  /**
   * @example "2020-07-09T00:17:42Z"
   */
  starred_at?: string;

  /**
   * @description Whether anonymous git access is enabled for this repository
   */
  anonymous_access_enabled?: boolean;

  /**
   * @description The status of the code search index for this repository
   */
  code_search_index_status?: {
    lexical_search_ok?: boolean;
    lexical_commit_sha?: string;
  };
};
/**
 * @description Authentication token for a GitHub App installed on a user or org.
 */
type NullableScopedInstallationSchema = {
  permissions: AppPermissionsSchema;

  /**
   * @description Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: "all" | "selected";

  /**
   * @example config.yaml
   */
  single_file_name: string | null;

  /**
   * @example true
   */
  has_multiple_single_files?: boolean;

  /**
 * @example [
  "config.yml",
  ".github/issue_TEMPLATE.md"
]
  */
  single_file_paths?: string[];

  /**
   * @example https://api.github.com/users/octocat/repos
   */
  repositories_url: string;
  account: SimpleUserSchema;
} | null;
/**
 * @description The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
type AuthorizationSchema = {
  id: number;
  url: string;

  /**
   * @description A list of scopes that this authorization is in.
   */
  scopes: string[] | null;
  token: string;
  token_last_eight: string | null;
  hashed_token: string | null;
  app: {
    client_id: string;
    name: string;
    url: string;
  };
  note: string | null;
  note_url: string | null;
  updated_at: string;
  created_at: string;
  fingerprint: string | null;
  user?: NullableSimpleUserSchema;
  installation?: NullableScopedInstallationSchema;
  expires_at: string | null;
};
/**
 * @description A GitHub repository view for Classroom
 */
type SimpleClassroomRepositorySchema = {
  /**
   * @description A unique identifier of the repository.
   * @example 1296269
   */
  id: number;

  /**
   * @description The full, globally unique name of the repository.
   * @example octocat/Hello-World
   */
  full_name: string;

  /**
   * @description The URL to view the repository on GitHub.com.
   * @example https://github.com/octocat/Hello-World
   */
  html_url: string;

  /**
   * @description The GraphQL identifier of the repository.
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;

  /**
   * @description Whether the repository is private.
   */
  private: boolean;

  /**
   * @description The default branch for the repository.
   * @example main
   */
  default_branch: string;
};
/**
 * @description A GitHub organization.
 */
type SimpleClassroomOrganizationSchema = {
  /**
   * @example 1
   */
  id: number;

  /**
   * @example github
   */
  login: string;

  /**
   * @example MDEyOk9yZ2FuaXphdGlvbjE=
   */
  node_id: string;

  /**
   * @example https://github.com/github
   */
  html_url: string;

  /**
   * @example Github - Code thigns happen here
   */
  name: string | null;

  /**
   * @example https://github.com/images/error/octocat_happy.gif
   */
  avatar_url: string;
};
/**
 * @description A GitHub Classroom classroom
 */
type ClassroomSchema = {
  /**
   * @description Unique identifier of the classroom.
   * @example 42
   */
  id: number;

  /**
   * @description The name of the classroom.
   * @example Programming Elixir
   */
  name: string;

  /**
   * @description Whether classroom is archived.
   */
  archived: boolean;
  organization: SimpleClassroomOrganizationSchema;

  /**
   * @description The URL of the classroom on GitHub Classroom.
   * @example https://classroom.github.com/classrooms/1-programming-elixir
   */
  url: string;
};
/**
 * @description A GitHub Classroom assignment
 */
type ClassroomAssignmentSchema = {
  /**
   * @description Unique identifier of the repository.
   * @example 42
   */
  id: number;

  /**
   * @description Whether an accepted assignment creates a public repository.
   * @example true
   */
  public_repo: boolean;

  /**
   * @description Assignment title.
   * @example Intro to Binaries
   */
  title: string;

  /**
   * @description Whether it's a group assignment or individual assignment.
   * @example individual
   */
  type: "individual" | "group";

  /**
   * @description The link that a student can use to accept the assignment.
   * @example https://classroom.github.com/a/Lx7jiUgx
   */
  invite_link: string;

  /**
   * @description Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment.
   * @example true
   */
  invitations_enabled: boolean;

  /**
   * @description Sluggified name of the assignment.
   * @example intro-to-binaries
   */
  slug: string;

  /**
   * @description Whether students are admins on created repository when a student accepts the assignment.
   * @example true
   */
  students_are_repo_admins: boolean;

  /**
   * @description Whether feedback pull request will be created when a student accepts the assignment.
   * @example true
   */
  feedback_pull_requests_enabled: boolean;

  /**
   * @description The maximum allowable teams for the assignment.
   */
  max_teams: number | null;

  /**
   * @description The maximum allowable members per team.
   */
  max_members: number | null;

  /**
   * @description The selected editor for the assignment.
   * @example codespaces
   */
  editor: string;

  /**
   * @description The number of students that have accepted the assignment.
   * @example 25
   */
  accepted: number;

  /**
   * @description The number of students that have submitted the assignment.
   * @example 10
   */
  submitted: number;

  /**
   * @description The number of students that have passed the assignment.
   * @example 10
   */
  passing: number;

  /**
   * @description The programming language used in the assignment.
   * @example elixir
   */
  language: string;

  /**
   * @description The time at which the assignment is due.
   * @example 2011-01-26T19:06:43Z
   */
  deadline: string | null;
  starter_code_repository: SimpleClassroomRepositorySchema;
  classroom: ClassroomSchema;
};
/**
 * @description A GitHub user simplified for Classroom.
 */
type SimpleClassroomUserSchema = {
  /**
   * @example 1
   */
  id: number;

  /**
   * @example octocat
   */
  login: string;

  /**
   * @example https://github.com/images/error/octocat_happy.gif
   */
  avatar_url: string;

  /**
   * @example https://github.com/octocat
   */
  html_url: string;
};
/**
 * @description A GitHub Classroom classroom
 */
type SimpleClassroomSchema = {
  /**
   * @description Unique identifier of the classroom.
   * @example 42
   */
  id: number;

  /**
   * @description The name of the classroom.
   * @example Programming Elixir
   */
  name: string;

  /**
   * @description Returns whether classroom is archived or not.
   */
  archived: boolean;

  /**
   * @description The url of the classroom on GitHub Classroom.
   * @example https://classroom.github.com/classrooms/1-programming-elixir
   */
  url: string;
};
/**
 * @description A GitHub Classroom assignment
 */
type SimpleClassroomAssignmentSchema = {
  /**
   * @description Unique identifier of the repository.
   * @example 42
   */
  id: number;

  /**
   * @description Whether an accepted assignment creates a public repository.
   * @example true
   */
  public_repo: boolean;

  /**
   * @description Assignment title.
   * @example Intro to Binaries
   */
  title: string;

  /**
   * @description Whether it's a Group Assignment or Individual Assignment.
   * @example individual
   */
  type: "individual" | "group";

  /**
   * @description The link that a student can use to accept the assignment.
   * @example https://classroom.github.com/a/Lx7jiUgx
   */
  invite_link: string;

  /**
   * @description Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment.
   * @example true
   */
  invitations_enabled: boolean;

  /**
   * @description Sluggified name of the assignment.
   * @example intro-to-binaries
   */
  slug: string;

  /**
   * @description Whether students are admins on created repository on accepted assignment.
   * @example true
   */
  students_are_repo_admins: boolean;

  /**
   * @description Whether feedback pull request will be created on assignment acceptance.
   * @example true
   */
  feedback_pull_requests_enabled: boolean;

  /**
   * @description The maximum allowable teams for the assignment.
   */
  max_teams?: number | null;

  /**
   * @description The maximum allowable members per team.
   */
  max_members?: number | null;

  /**
   * @description The selected editor for the assignment.
   * @example codespaces
   */
  editor: string;

  /**
   * @description The number of students that have accepted the assignment.
   * @example 25
   */
  accepted: number;

  /**
   * @description The number of students that have submitted the assignment.
   * @example 10
   */
  submitted: number;

  /**
   * @description The number of students that have passed the assignment.
   * @example 10
   */
  passing: number;

  /**
   * @description The programming language used in the assignment.
   * @example elixir
   */
  language: string;

  /**
   * @description The time at which the assignment is due.
   * @example 2011-01-26T19:06:43Z
   */
  deadline: string | null;
  classroom: SimpleClassroomSchema;
};
/**
 * @description A GitHub Classroom accepted assignment
 */
type ClassroomAcceptedAssignmentSchema = {
  /**
   * @description Unique identifier of the repository.
   * @example 42
   */
  id: number;

  /**
   * @description Whether an accepted assignment has been submitted.
   * @example true
   */
  submitted: boolean;

  /**
   * @description Whether a submission passed.
   * @example true
   */
  passing: boolean;

  /**
   * @description Count of student commits.
   * @example 5
   */
  commit_count: number;

  /**
   * @description Most recent grade.
   * @example 10/10
   */
  grade: string;
  students: SimpleClassroomUserSchema[];
  repository: SimpleClassroomRepositorySchema;
  assignment: SimpleClassroomAssignmentSchema;
};
/**
 * @description Grade for a student or groups GitHub Classroom assignment
 */
type ClassroomAssignmentGradeSchema = {
  /**
   * @description Name of the assignment
   */
  assignment_name: string;

  /**
   * @description URL of the assignment
   */
  assignment_url: string;

  /**
   * @description URL of the starter code for the assignment
   */
  starter_code_url: string;

  /**
   * @description GitHub username of the student
   */
  github_username: string;

  /**
   * @description Roster identifier of the student
   */
  roster_identifier: string;

  /**
   * @description Name of the student's assignment repository
   */
  student_repository_name: string;

  /**
   * @description URL of the student's assignment repository
   */
  student_repository_url: string;

  /**
   * @description Timestamp of the student's assignment submission
   */
  submission_timestamp: string;

  /**
   * @description Number of points awarded to the student
   */
  points_awarded: number;

  /**
   * @description Number of points available for the assignment
   */
  points_available: number;

  /**
   * @description If a group assignment, name of the group the student is in
   */
  group_name?: string;
};
/**
 * @description Code Of Conduct
 */
type CodeOfConductSchema = {
  /**
   * @example contributor_covenant
   */
  key: string;

  /**
   * @example Contributor Covenant
   */
  name: string;

  /**
   * @example https://api.github.com/codes_of_conduct/contributor_covenant
   */
  url: string;

  /**
   * @example # Contributor Covenant Code of Conduct
   *
   * ## Our Pledge
   *
   * In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.
   *
   * ## Our Standards
   *
   * Examples of behavior that contributes to creating a positive environment include:
   *
   * * Using welcoming and inclusive language
   * * Being respectful of differing viewpoints and experiences
   * * Gracefully accepting constructive criticism
   * * Focusing on what is best for the community
   * * Showing empathy towards other community members
   *
   * Examples of unacceptable behavior by participants include:
   *
   * * The use of sexualized language or imagery and unwelcome sexual attention or advances
   * * Trolling, insulting/derogatory comments, and personal or political attacks
   * * Public or private harassment
   * * Publishing others' private information, such as a physical or electronic address, without explicit permission
   * * Other conduct which could reasonably be considered inappropriate in a professional setting
   *
   * ## Our Responsibilities
   *
   * Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response
   *                   to any instances of unacceptable behavior.
   *
   * Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.
   *
   * ## Scope
   *
   * This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,
   *                   posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.
   *
   * ## Enforcement
   *
   * Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.
   *
   * Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.
   *
   * ## Attribution
   *
   * This Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.4, available at [http://contributor-covenant.org/version/1/4](http://contributor-covenant.org/version/1/4/).
   *
   */
  body?: string;
  html_url: string | null;
};
/**
 * @description A code security configuration
 */
type CodeSecurityConfigurationSchema = {
  /**
   * @description The ID of the code security configuration
   */
  id?: number;

  /**
   * @description The name of the code security configuration. Must be unique within the organization.
   */
  name?: string;

  /**
   * @description The type of the code security configuration.
   */
  target_type?: "global" | "organization" | "enterprise";

  /**
   * @description A description of the code security configuration
   */
  description?: string;

  /**
   * @description The enablement status of GitHub Advanced Security
   */
  advanced_security?:
    | "enabled"
    | "disabled"
    | "code_security"
    | "secret_protection";

  /**
   * @description The enablement status of Dependency Graph
   */
  dependency_graph?: "enabled" | "disabled" | "not_set";

  /**
   * @description The enablement status of Automatic dependency submission
   */
  dependency_graph_autosubmit_action?: "enabled" | "disabled" | "not_set";

  /**
   * @description Feature options for Automatic dependency submission
   */
  dependency_graph_autosubmit_action_options?: {
    /**
     * @description Whether to use runners labeled with 'dependency-submission' or standard GitHub runners.
     */
    labeled_runners?: boolean;
  };

  /**
   * @description The enablement status of Dependabot alerts
   */
  dependabot_alerts?: "enabled" | "disabled" | "not_set";

  /**
   * @description The enablement status of Dependabot security updates
   */
  dependabot_security_updates?: "enabled" | "disabled" | "not_set";

  /**
   * @description Feature options for code scanning
   */
  code_scanning_options?: {
    /**
     * @description Whether to allow repos which use advanced setup
     */
    allow_advanced?: boolean | null;
  } | null;

  /**
   * @description The enablement status of code scanning default setup
   */
  code_scanning_default_setup?: "enabled" | "disabled" | "not_set";

  /**
   * @description Feature options for code scanning default setup
   */
  code_scanning_default_setup_options?: {
    /**
     * @description Whether to use labeled runners or standard GitHub runners.
     */
    runner_type?: "standard" | "labeled" | "not_set" | null;

    /**
     * @description The label of the runner to use for code scanning when runner_type is 'labeled'.
     */
    runner_label?: string | null;
  } | null;

  /**
   * @description The enablement status of code scanning delegated alert dismissal
   */
  code_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set";

  /**
   * @description The enablement status of secret scanning
   */
  secret_scanning?: "enabled" | "disabled" | "not_set";

  /**
   * @description The enablement status of secret scanning push protection
   */
  secret_scanning_push_protection?: "enabled" | "disabled" | "not_set";

  /**
   * @description The enablement status of secret scanning delegated bypass
   */
  secret_scanning_delegated_bypass?: "enabled" | "disabled" | "not_set";

  /**
   * @description Feature options for secret scanning delegated bypass
   */
  secret_scanning_delegated_bypass_options?: {
    /**
     * @description The bypass reviewers for secret scanning delegated bypass
     */
    reviewers?: {
      /**
       * @description The ID of the team or role selected as a bypass reviewer
       */
      reviewer_id: number;

      /**
       * @description The type of the bypass reviewer
       */
      reviewer_type: "TEAM" | "ROLE";
    }[];
  };

  /**
   * @description The enablement status of secret scanning validity checks
   */
  secret_scanning_validity_checks?: "enabled" | "disabled" | "not_set";

  /**
   * @description The enablement status of secret scanning non-provider patterns
   */
  secret_scanning_non_provider_patterns?: "enabled" | "disabled" | "not_set";

  /**
   * @description The enablement status of Copilot secret scanning
   */
  secret_scanning_generic_secrets?: "enabled" | "disabled" | "not_set";

  /**
   * @description The enablement status of secret scanning delegated alert dismissal
   */
  secret_scanning_delegated_alert_dismissal?:
    | "enabled"
    | "disabled"
    | "not_set";

  /**
   * @description The enablement status of private vulnerability reporting
   */
  private_vulnerability_reporting?: "enabled" | "disabled" | "not_set";

  /**
   * @description The enforcement status for a security configuration
   */
  enforcement?: "enforced" | "unenforced";

  /**
   * @description The URL of the configuration
   */
  url?: string;

  /**
   * @description The URL of the configuration
   */
  html_url?: string;
  created_at?: string;
  updated_at?: string;
};
/**
 * @description Security Configuration feature options for code scanning
 */
type CodeScanningOptionsSchema = {
  /**
   * @description Whether to allow repos which use advanced setup
   */
  allow_advanced?: boolean | null;
} | null;
/**
 * @description Feature options for code scanning default setup
 */
type CodeScanningDefaultSetupOptionsSchema = {
  /**
   * @description Whether to use labeled runners or standard GitHub runners.
   */
  runner_type?: "standard" | "labeled" | "not_set";

  /**
   * @description The label of the runner to use for code scanning default setup when runner_type is 'labeled'.
   */
  runner_label?: string | null;
} | null;
/**
 * @description A list of default code security configurations
 */
type CodeSecurityDefaultConfigurationsSchema = {
  /**
   * @description The visibility of newly created repositories for which the code security configuration will be applied to by default
   */
  default_for_new_repos?: {};
  configuration?: CodeSecurityConfigurationSchema;
}[];
/**
 * @description A GitHub repository.
 */
type SimpleRepositorySchema = {
  /**
   * @description A unique identifier of the repository.
   * @example 1296269
   */
  id: number;

  /**
   * @description The GraphQL identifier of the repository.
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;

  /**
   * @description The name of the repository.
   * @example Hello-World
   */
  name: string;

  /**
   * @description The full, globally unique, name of the repository.
   * @example octocat/Hello-World
   */
  full_name: string;
  owner: SimpleUserSchema;

  /**
   * @description Whether the repository is private.
   */
  private: boolean;

  /**
   * @description The URL to view the repository on GitHub.com.
   * @example https://github.com/octocat/Hello-World
   */
  html_url: string;

  /**
   * @description The repository description.
   * @example This your first repo!
   */
  description: string | null;

  /**
   * @description Whether the repository is a fork.
   */
  fork: boolean;

  /**
   * @description The URL to get more information about the repository from the GitHub API.
   * @example https://api.github.com/repos/octocat/Hello-World
   */
  url: string;

  /**
   * @description A template for the API URL to download the repository as an archive.
   * @example https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;

  /**
   * @description A template for the API URL to list the available assignees for issues in the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;

  /**
   * @description A template for the API URL to create or retrieve a raw Git blob in the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;

  /**
   * @description A template for the API URL to get information about branches in the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;

  /**
   * @description A template for the API URL to get information about collaborators of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;

  /**
   * @description A template for the API URL to get information about comments on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;

  /**
   * @description A template for the API URL to get information about commits on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;

  /**
   * @description A template for the API URL to compare two commits or refs.
   * @example https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;

  /**
   * @description A template for the API URL to get the contents of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;

  /**
   * @description A template for the API URL to list the contributors to the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/contributors
   */
  contributors_url: string;

  /**
   * @description The API URL to list the deployments of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/deployments
   */
  deployments_url: string;

  /**
   * @description The API URL to list the downloads on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/downloads
   */
  downloads_url: string;

  /**
   * @description The API URL to list the events of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/events
   */
  events_url: string;

  /**
   * @description The API URL to list the forks of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/forks
   */
  forks_url: string;

  /**
   * @description A template for the API URL to get information about Git commits of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;

  /**
   * @description A template for the API URL to get information about Git refs of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;

  /**
   * @description A template for the API URL to get information about Git tags of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;

  /**
   * @description A template for the API URL to get information about issue comments on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;

  /**
   * @description A template for the API URL to get information about issue events on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;

  /**
   * @description A template for the API URL to get information about issues on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;

  /**
   * @description A template for the API URL to get information about deploy keys on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;

  /**
   * @description A template for the API URL to get information about labels of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;

  /**
   * @description The API URL to get information about the languages of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/languages
   */
  languages_url: string;

  /**
   * @description The API URL to merge branches in the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/merges
   */
  merges_url: string;

  /**
   * @description A template for the API URL to get information about milestones of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;

  /**
   * @description A template for the API URL to get information about notifications on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;

  /**
   * @description A template for the API URL to get information about pull requests on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;

  /**
   * @description A template for the API URL to get information about releases on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;

  /**
   * @description The API URL to list the stargazers on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/stargazers
   */
  stargazers_url: string;

  /**
   * @description A template for the API URL to get information about statuses of a commit.
   * @example https://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;

  /**
   * @description The API URL to list the subscribers on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/subscribers
   */
  subscribers_url: string;

  /**
   * @description The API URL to subscribe to notifications for this repository.
   * @example https://api.github.com/repos/octocat/Hello-World/subscription
   */
  subscription_url: string;

  /**
   * @description The API URL to get information about tags on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/tags
   */
  tags_url: string;

  /**
   * @description The API URL to list the teams on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/teams
   */
  teams_url: string;

  /**
   * @description A template for the API URL to create or retrieve a raw Git tree of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;

  /**
   * @description The API URL to list the hooks on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/hooks
   */
  hooks_url: string;
};
/**
 * @description Repositories associated with a code security configuration and attachment status
 */
type CodeSecurityConfigurationRepositoriesSchema = {
  /**
   * @description The attachment status of the code security configuration on the repository.
   */
  status?:
    | "attached"
    | "attaching"
    | "detached"
    | "removed"
    | "enforced"
    | "failed"
    | "updating"
    | "removed_by_enterprise";
  repository?: SimpleRepositorySchema;
};
/**
 * @description The security alert number.
 * @readonly
 */
type AlertNumberSchema = Readonly<number>;
/**
 * @description Details for the vulnerable package.
 * @readonly
 */
type DependabotAlertPackageSchema = {
  /**
   * @description The package's language or package management ecosystem.
   * @readonly
   */
  readonly ecosystem: Readonly<string>;

  /**
   * @description The unique package name within its ecosystem.
   * @readonly
   */
  readonly name: Readonly<string>;
};
/**
 * @description Details pertaining to one vulnerable version range for the advisory.
 * @readonly
 */
type DependabotAlertSecurityVulnerabilitySchema = {
  package: DependabotAlertPackageSchema;

  /**
   * @description The severity of the vulnerability.
   * @readonly
   */
  readonly severity: Readonly<"low" | "medium" | "high" | "critical">;

  /**
   * @description Conditions that identify vulnerable versions of this vulnerability's package.
   * @readonly
   */
  readonly vulnerable_version_range: Readonly<string>;

  /**
   * @description Details pertaining to the package version that patches this vulnerability.
   * @readonly
   */
  readonly first_patched_version: {
    /**
     * @description The package version that patches this vulnerability.
     * @readonly
     */
    readonly identifier: Readonly<string>;
  } | null;
};
/**
 * @description Details for the GitHub Security Advisory.
 * @readonly
 */
type DependabotAlertSecurityAdvisorySchema = {
  /**
   * @description The unique GitHub Security Advisory ID assigned to the advisory.
   * @readonly
   */
  readonly ghsa_id: Readonly<string>;

  /**
   * @description The unique CVE ID assigned to the advisory.
   * @readonly
   */
  readonly cve_id: Readonly<string | null>;

  /**
   * @description A short, plain text summary of the advisory.
   * @readonly
   */
  readonly summary: Readonly<string>;

  /**
   * @description A long-form Markdown-supported description of the advisory.
   * @readonly
   */
  readonly description: Readonly<string>;

  /**
   * @description Vulnerable version range information for the advisory.
   * @readonly
   */
  readonly vulnerabilities: Readonly<
    DependabotAlertSecurityVulnerabilitySchema[]
  >;

  /**
   * @description The severity of the advisory.
   * @readonly
   */
  readonly severity: Readonly<"low" | "medium" | "high" | "critical">;

  /**
   * @description Details for the advisory pertaining to the Common Vulnerability Scoring System.
   * @readonly
   */
  readonly cvss: {
    /**
     * @description The overall CVSS score of the advisory.
     * @readonly
     */
    readonly score: Readonly<number>;

    /**
     * @description The full CVSS vector string for the advisory.
     * @readonly
     */
    readonly vector_string: Readonly<string | null>;
  };
  cvss_severities?: CvssSeveritiesSchema;
  epss?: SecurityAdvisoryEpssSchema;

  /**
   * @description Details for the advisory pertaining to Common Weakness Enumeration.
   * @readonly
   */
  readonly cwes: Readonly<
    {
      /**
       * @description The unique CWE ID.
       * @readonly
       */
      readonly cwe_id: Readonly<string>;

      /**
       * @description The short, plain text name of the CWE.
       * @readonly
       */
      readonly name: Readonly<string>;
    }[]
  >;

  /**
   * @description Values that identify this advisory among security information sources.
   * @readonly
   */
  readonly identifiers: Readonly<
    {
      /**
       * @description The type of advisory identifier.
       * @readonly
       */
      readonly type: Readonly<"CVE" | "GHSA">;

      /**
       * @description The value of the advisory identifer.
       * @readonly
       */
      readonly value: Readonly<string>;
    }[]
  >;

  /**
   * @description Links to additional advisory information.
   * @readonly
   */
  readonly references: Readonly<
    {
      /**
       * @description The URL of the reference.
       * @readonly
       */
      readonly url: Readonly<string>;
    }[]
  >;

  /**
   * @description The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @readonly
   */
  readonly published_at: Readonly<string>;

  /**
   * @description The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @readonly
   */
  readonly updated_at: Readonly<string>;

  /**
   * @description The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @readonly
   */
  readonly withdrawn_at: Readonly<string | null>;
};
/**
 * @description The REST API URL of the alert resource.
 * @readonly
 */
type AlertUrlSchema = Readonly<string>;
/**
 * @description The GitHub URL of the alert resource.
 * @readonly
 */
type AlertHtmlUrlSchema = Readonly<string>;
/**
 * @description The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @readonly
 */
type AlertCreatedAtSchema = Readonly<string>;
/**
 * @description The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @readonly
 */
type AlertUpdatedAtSchema = Readonly<string>;
/**
 * @description The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @readonly
 */
type AlertDismissedAtSchema = Readonly<string | null>;
/**
 * @description The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @readonly
 */
type AlertFixedAtSchema = Readonly<string | null>;
/**
 * @description The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @readonly
 */
type AlertAutoDismissedAtSchema = Readonly<string | null>;
/**
 * @description A Dependabot alert.
 */
type DependabotAlertWithRepositorySchema = {
  number: AlertNumberSchema;

  /**
   * @description The state of the Dependabot alert.
   * @readonly
   */
  readonly state: Readonly<"auto_dismissed" | "dismissed" | "fixed" | "open">;

  /**
   * @description Details for the vulnerable dependency.
   * @readonly
   */
  readonly dependency: {
    package?: DependabotAlertPackageSchema;

    /**
     * @description The full path to the dependency manifest file, relative to the root of the repository.
     * @readonly
     */
    readonly manifest_path?: Readonly<string>;

    /**
     * @description The execution scope of the vulnerable dependency.
     * @readonly
     */
    readonly scope?: Readonly<"development" | "runtime" | null>;

    /**
     * @description The vulnerable dependency's relationship to your project.
     *
     * > [!NOTE]
     * > We are rolling out support for dependency relationship across ecosystems. This value will be "unknown" for all dependencies in unsupported ecosystems.
     *
     * @readonly
     */
    readonly relationship?: Readonly<
      "unknown" | "direct" | "transitive" | null
    >;
  };
  security_advisory: DependabotAlertSecurityAdvisorySchema;
  security_vulnerability: DependabotAlertSecurityVulnerabilitySchema;
  url: AlertUrlSchema;
  html_url: AlertHtmlUrlSchema;
  created_at: AlertCreatedAtSchema;
  updated_at: AlertUpdatedAtSchema;
  dismissed_at: AlertDismissedAtSchema;
  dismissed_by: NullableSimpleUserSchema;

  /**
   * @description The reason that the alert was dismissed.
   */
  dismissed_reason:
    | "fix_started"
    | "inaccurate"
    | "no_bandwidth"
    | "not_used"
    | "tolerable_risk"
    | null;

  /**
   * @description An optional comment associated with the alert's dismissal.
   */
  dismissed_comment: string | null;
  fixed_at: AlertFixedAtSchema;
  auto_dismissed_at?: AlertAutoDismissedAtSchema;
  repository: SimpleRepositorySchema;
};
/**
 * @description The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @readonly
 */
type NullableAlertUpdatedAtSchema = Readonly<string | null>;
/**
 * @description Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.
 */
type SecretScanningAlertStateSchema = "open" | "resolved";
/**
 * @description **Required when the `state` is `resolved`.** The reason for resolving the alert.
 */
type SecretScanningAlertResolutionSchema =
  | "false_positive"
  | "wont_fix"
  | "revoked"
  | "used_in_tests"
  | null;
/**
 * @description Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository.
 */
type SecretScanningLocationCommitSchema = {
  /**
   * @description The file path in the repository
   * @example /example/secrets.txt
   */
  path: string;

  /**
   * @description Line number at which the secret starts in the file
   */
  start_line: number;

  /**
   * @description Line number at which the secret ends in the file
   */
  end_line: number;

  /**
   * @description The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII
   */
  start_column: number;

  /**
   * @description The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII
   */
  end_column: number;

  /**
   * @description SHA-1 hash ID of the associated blob
   * @example af5626b4a114abcb82d63db7c8082c3c4756e51b
   */
  blob_sha: string;

  /**
   * @description The API URL to get the associated blob resource
   */
  blob_url: string;

  /**
   * @description SHA-1 hash ID of the associated commit
   * @example af5626b4a114abcb82d63db7c8082c3c4756e51b
   */
  commit_sha: string;

  /**
   * @description The API URL to get the associated commit resource
   */
  commit_url: string;
};
/**
 * @description Represents a 'wiki_commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository wiki.
 */
type SecretScanningLocationWikiCommitSchema = {
  /**
   * @description The file path of the wiki page
   * @example /example/Home.md
   */
  path: string;

  /**
   * @description Line number at which the secret starts in the file
   */
  start_line: number;

  /**
   * @description Line number at which the secret ends in the file
   */
  end_line: number;

  /**
   * @description The column at which the secret starts within the start line when the file is interpreted as 8-bit ASCII.
   */
  start_column: number;

  /**
   * @description The column at which the secret ends within the end line when the file is interpreted as 8-bit ASCII.
   */
  end_column: number;

  /**
   * @description SHA-1 hash ID of the associated blob
   * @example af5626b4a114abcb82d63db7c8082c3c4756e51b
   */
  blob_sha: string;

  /**
   * @description The GitHub URL to get the associated wiki page
   * @example https://github.com/octocat/Hello-World/wiki/Home/302c0b7e200761c9dd9b57e57db540ee0b4293a5
   */
  page_url: string;

  /**
   * @description SHA-1 hash ID of the associated commit
   * @example 302c0b7e200761c9dd9b57e57db540ee0b4293a5
   */
  commit_sha: string;

  /**
   * @description The GitHub URL to get the associated wiki commit
   * @example https://github.com/octocat/Hello-World/wiki/_compare/302c0b7e200761c9dd9b57e57db540ee0b4293a5
   */
  commit_url: string;
};
/**
 * @description Represents an 'issue_title' secret scanning location type. This location type shows that a secret was detected in the title of an issue.
 */
type SecretScanningLocationIssueTitleSchema = {
  /**
   * @description The API URL to get the issue where the secret was detected.
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347
   */
  issue_title_url: string;
};
/**
 * @description Represents an 'issue_body' secret scanning location type. This location type shows that a secret was detected in the body of an issue.
 */
type SecretScanningLocationIssueBodySchema = {
  /**
   * @description The API URL to get the issue where the secret was detected.
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347
   */
  issue_body_url: string;
};
/**
 * @description Represents an 'issue_comment' secret scanning location type. This location type shows that a secret was detected in a comment on an issue.
 */
type SecretScanningLocationIssueCommentSchema = {
  /**
   * @description The API URL to get the issue comment where the secret was detected.
   * @example https://api.github.com/repos/octocat/Hello-World/issues/comments/1081119451
   */
  issue_comment_url: string;
};
/**
 * @description Represents a 'discussion_title' secret scanning location type. This location type shows that a secret was detected in the title of a discussion.
 */
type SecretScanningLocationDiscussionTitleSchema = {
  /**
   * @description The URL to the discussion where the secret was detected.
   * @example https://github.com/community/community/discussions/39082
   */
  discussion_title_url: string;
};
/**
 * @description Represents a 'discussion_body' secret scanning location type. This location type shows that a secret was detected in the body of a discussion.
 */
type SecretScanningLocationDiscussionBodySchema = {
  /**
   * @description The URL to the discussion where the secret was detected.
   * @example https://github.com/community/community/discussions/39082#discussion-4566270
   */
  discussion_body_url: string;
};
/**
 * @description Represents a 'discussion_comment' secret scanning location type. This location type shows that a secret was detected in a comment on a discussion.
 */
type SecretScanningLocationDiscussionCommentSchema = {
  /**
   * @description The API URL to get the discussion comment where the secret was detected.
   * @example https://github.com/community/community/discussions/39082#discussioncomment-4158232
   */
  discussion_comment_url: string;
};
/**
 * @description Represents a 'pull_request_title' secret scanning location type. This location type shows that a secret was detected in the title of a pull request.
 */
type SecretScanningLocationPullRequestTitleSchema = {
  /**
   * @description The API URL to get the pull request where the secret was detected.
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/2846
   */
  pull_request_title_url: string;
};
/**
 * @description Represents a 'pull_request_body' secret scanning location type. This location type shows that a secret was detected in the body of a pull request.
 */
type SecretScanningLocationPullRequestBodySchema = {
  /**
   * @description The API URL to get the pull request where the secret was detected.
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/2846
   */
  pull_request_body_url: string;
};
/**
 * @description Represents a 'pull_request_comment' secret scanning location type. This location type shows that a secret was detected in a comment on a pull request.
 */
type SecretScanningLocationPullRequestCommentSchema = {
  /**
   * @description The API URL to get the pull request comment where the secret was detected.
   * @example https://api.github.com/repos/octocat/Hello-World/issues/comments/1081119451
   */
  pull_request_comment_url: string;
};
/**
 * @description Represents a 'pull_request_review' secret scanning location type. This location type shows that a secret was detected in a review on a pull request.
 */
type SecretScanningLocationPullRequestReviewSchema = {
  /**
   * @description The API URL to get the pull request review where the secret was detected.
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/2846/reviews/80
   */
  pull_request_review_url: string;
};
/**
 * @description Represents a 'pull_request_review_comment' secret scanning location type. This location type shows that a secret was detected in a review comment on a pull request.
 */
type SecretScanningLocationPullRequestReviewCommentSchema = {
  /**
   * @description The API URL to get the pull request review comment where the secret was detected.
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments/12
   */
  pull_request_review_comment_url: string;
};
/**
 * @description Details on the location where the token was initially detected. This can be a commit, wiki commit, issue, discussion, pull request.
 *
 */
type NullableSecretScanningFirstDetectedLocationSchema =
  | SecretScanningLocationCommitSchema
  | SecretScanningLocationWikiCommitSchema
  | SecretScanningLocationIssueTitleSchema
  | SecretScanningLocationIssueBodySchema
  | SecretScanningLocationIssueCommentSchema
  | SecretScanningLocationDiscussionTitleSchema
  | SecretScanningLocationDiscussionBodySchema
  | SecretScanningLocationDiscussionCommentSchema
  | SecretScanningLocationPullRequestTitleSchema
  | SecretScanningLocationPullRequestBodySchema
  | SecretScanningLocationPullRequestCommentSchema
  | SecretScanningLocationPullRequestReviewSchema
  | SecretScanningLocationPullRequestReviewCommentSchema
  | null;
type OrganizationSecretScanningAlertSchema = {
  number?: AlertNumberSchema;
  created_at?: AlertCreatedAtSchema;
  updated_at?: NullableAlertUpdatedAtSchema;
  url?: AlertUrlSchema;
  html_url?: AlertHtmlUrlSchema;

  /**
   * @description The REST API URL of the code locations for this alert.
   */
  locations_url?: string;
  state?: SecretScanningAlertStateSchema;
  resolution?: SecretScanningAlertResolutionSchema;

  /**
   * @description The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  resolved_at?: string | null;
  resolved_by?: NullableSimpleUserSchema;

  /**
   * @description The type of secret that secret scanning detected.
   */
  secret_type?: string;

  /**
   * @description User-friendly name for the detected secret, matching the `secret_type`.
   * For a list of built-in patterns, see "[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)."
   */
  secret_type_display_name?: string;

  /**
   * @description The secret that was detected.
   */
  secret?: string;
  repository?: SimpleRepositorySchema;

  /**
   * @description Whether push protection was bypassed for the detected secret.
   */
  push_protection_bypassed?: boolean | null;
  push_protection_bypassed_by?: NullableSimpleUserSchema;

  /**
   * @description The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  push_protection_bypassed_at?: string | null;
  push_protection_bypass_request_reviewer?: NullableSimpleUserSchema;

  /**
   * @description An optional comment when reviewing a push protection bypass.
   */
  push_protection_bypass_request_reviewer_comment?: string | null;

  /**
   * @description An optional comment when requesting a push protection bypass.
   */
  push_protection_bypass_request_comment?: string | null;

  /**
   * @description The URL to a push protection bypass request.
   */
  push_protection_bypass_request_html_url?: string | null;

  /**
   * @description The comment that was optionally added when this alert was closed
   */
  resolution_comment?: string | null;

  /**
   * @description The token status as of the latest validity check.
   */
  validity?: "active" | "inactive" | "unknown";

  /**
   * @description Whether the secret was publicly leaked.
   */
  publicly_leaked?: boolean | null;

  /**
   * @description Whether the detected secret was found in multiple repositories in the same organization or enterprise.
   */
  multi_repo?: boolean | null;

  /**
   * @description A boolean value representing whether or not alert is base64 encoded
   */
  is_base64_encoded?: boolean | null;
  first_location_detected?: NullableSecretScanningFirstDetectedLocationSchema;

  /**
   * @description A boolean value representing whether or not the token in the alert was detected in more than one location.
   */
  has_more_locations?: boolean;
};
/**
 * @description Actor
 */
type ActorSchema = {
  id: number;
  login: string;
  display_login?: string;
  gravatar_id: string | null;
  url: string;
  avatar_url: string;
};
/**
 * @description A collection of related issues and pull requests.
 */
type NullableMilestoneSchema = {
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/milestones/1
   */
  url: string;

  /**
   * @example https://github.com/octocat/Hello-World/milestones/v1.0
   */
  html_url: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/milestones/1/labels
   */
  labels_url: string;

  /**
   * @example 1002604
   */
  id: number;

  /**
   * @example MDk6TWlsZXN0b25lMTAwMjYwNA==
   */
  node_id: string;

  /**
   * @description The number of the milestone.
   * @example 42
   */
  number: number;

  /**
   * @description The state of the milestone.
   * @example open
   * @default "open"
   */
  state: "open" | "closed";

  /**
   * @description The title of the milestone.
   * @example v1.0
   */
  title: string;

  /**
   * @example Tracking milestone for version 1.0
   */
  description: string | null;
  creator: NullableSimpleUserSchema;

  /**
   * @example 4
   */
  open_issues: number;

  /**
   * @example 8
   */
  closed_issues: number;

  /**
   * @example 2011-04-10T20:09:31Z
   */
  created_at: string;

  /**
   * @example 2014-03-03T18:58:10Z
   */
  updated_at: string;

  /**
   * @example 2013-02-12T13:22:01Z
   */
  closed_at: string | null;

  /**
   * @example 2012-10-09T23:39:01Z
   */
  due_on: string | null;
} | null;
/**
 * @description The type of issue.
 */
type IssueTypeSchema = {
  /**
   * @description The unique identifier of the issue type.
   */
  id: number;

  /**
   * @description The node identifier of the issue type.
   */
  node_id: string;

  /**
   * @description The name of the issue type.
   */
  name: string;

  /**
   * @description The description of the issue type.
   */
  description: string | null;

  /**
   * @description The color of the issue type.
   */
  color?:
    | "gray"
    | "blue"
    | "green"
    | "yellow"
    | "orange"
    | "red"
    | "pink"
    | "purple"
    | null;

  /**
   * @description The time the issue type created.
   */
  created_at?: string;

  /**
   * @description The time the issue type last updated.
   */
  updated_at?: string;

  /**
   * @description The enabled state of the issue type.
   */
  is_enabled?: boolean;
} | null;
/**
 * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
type NullableIntegrationSchema = {
  /**
   * @description Unique identifier of the GitHub app
   * @example 37
   */
  id: number;

  /**
   * @description The slug name of the GitHub app
   * @example probot-owners
   */
  slug?: string;

  /**
   * @example MDExOkludGVncmF0aW9uMQ==
   */
  node_id: string;

  /**
   * @example "Iv1.25b5d1e65ffc4022"
   */
  client_id?: string;
  owner: SimpleUserSchema | EnterpriseSchema;

  /**
   * @description The name of the GitHub app
   * @example Probot Owners
   */
  name: string;

  /**
   * @example The description of the app.
   */
  description: string | null;

  /**
   * @example https://example.com
   */
  external_url: string;

  /**
   * @example https://github.com/apps/super-ci
   */
  html_url: string;

  /**
   * @example 2017-07-08T16:18:44-04:00
   */
  created_at: string;

  /**
   * @example 2017-07-08T16:18:44-04:00
   */
  updated_at: string;

  /**
 * @description The set of permissions for the GitHub app
 * @example {
  "issues": "read",
  "deployments": "write"
}
  */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
    [key: string]: string;
  };

  /**
 * @description The list of events for the GitHub app. Note that the `installation_target`, `security_advisory`, and `meta` events are not included because they are global events and not specific to an installation.
 * @example [
  "label",
  "deployment"
]
  */
  events: string[];

  /**
   * @description The number of installations associated with the GitHub app. Only returned when the integration is requesting details about itself.
   * @example 5
   */
  installations_count?: number;
} | null;
/**
 * @description How the author is associated with the repository.
 * @example OWNER
 */
type AuthorAssociationSchema =
  | "COLLABORATOR"
  | "CONTRIBUTOR"
  | "FIRST_TIMER"
  | "FIRST_TIME_CONTRIBUTOR"
  | "MANNEQUIN"
  | "MEMBER"
  | "NONE"
  | "OWNER";
type ReactionRollupSchema = {
  url: string;
  total_count: number;
  "+1": number;
  "-1": number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
};
type SubIssuesSummarySchema = {
  total: number;
  completed: number;
  percent_completed: number;
};
type IssueDependenciesSummarySchema = {
  blocked_by: number;
  blocking: number;
  total_blocked_by: number;
  total_blocking: number;
};
/**
 * @description A value assigned to an issue field
 */
type IssueFieldValueSchema = {
  /**
   * @description Unique identifier for the issue field.
   * @example 1
   */
  issue_field_id: number;

  /**
   * @example IFT_GDKND
   */
  node_id: string;

  /**
   * @description The data type of the issue field
   * @example text
   */
  data_type: "text" | "single_select" | "number" | "date";

  /**
   * @description The value of the issue field
   */
  value: string | number | null;

  /**
   * @description Details about the selected option (only present for single_select fields)
   */
  single_select_option?: {
    /**
     * @description Unique identifier for the option.
     * @example 1
     */
    id: number;

    /**
     * @description The name of the option
     * @example High
     */
    name: string;

    /**
     * @description The color of the option
     * @example red
     */
    color: string;
  } | null;
};
/**
 * @description Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
type IssueSchema = {
  id: number;
  node_id: string;

  /**
   * @description URL for the issue
   * @example https://api.github.com/repositories/42/issues/1
   */
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;

  /**
   * @description Number uniquely identifying the issue within its repository
   * @example 42
   */
  number: number;

  /**
   * @description State of the issue; either 'open' or 'closed'
   * @example open
   */
  state: string;

  /**
   * @description The reason for the current state
   * @example not_planned
   */
  state_reason?: "completed" | "reopened" | "not_planned" | "duplicate" | null;

  /**
   * @description Title of the issue
   * @example Widget creation fails in Safari on OS X 10.8
   */
  title: string;

  /**
   * @description Contents of the issue
   * @example It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?
   */
  body?: string | null;
  user: NullableSimpleUserSchema;

  /**
 * @description Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
 * @example [
  "bug",
  "registration"
]
  */
  labels: (
    | string
    | {
        id?: number;
        node_id?: string;
        url?: string;
        name?: string;
        description?: string | null;
        color?: string | null;
        default?: boolean;
      }
  )[];
  assignee: NullableSimpleUserSchema;
  assignees?: SimpleUserSchema[] | null;
  milestone: NullableMilestoneSchema;
  locked: boolean;
  active_lock_reason?: string | null;
  comments: number;
  pull_request?: {
    merged_at?: string | null;
    diff_url: string | null;
    html_url: string | null;
    patch_url: string | null;
    url: string | null;
  };
  closed_at: string | null;
  created_at: string;
  updated_at: string;
  draft?: boolean;
  closed_by?: NullableSimpleUserSchema;
  body_html?: string;
  body_text?: string;
  timeline_url?: string;
  type?: IssueTypeSchema;
  repository?: RepositorySchema;
  performed_via_github_app?: NullableIntegrationSchema;
  author_association?: AuthorAssociationSchema;
  reactions?: ReactionRollupSchema;
  sub_issues_summary?: SubIssuesSummarySchema;

  /**
   * @description URL to get the parent issue of this issue, if it is a sub-issue
   */
  parent_issue_url?: string | null;
  issue_dependencies_summary?: IssueDependenciesSummarySchema;
  issue_field_values?: IssueFieldValueSchema[];
};
/**
 * @description Comments provide a way for people to collaborate on an issue.
 */
type IssueCommentSchema = {
  /**
   * @description Unique identifier of the issue comment
   * @example 42
   */
  id: number;
  node_id: string;

  /**
   * @description URL for the issue comment
   * @example https://api.github.com/repositories/42/issues/comments/1
   */
  url: string;

  /**
   * @description Contents of the issue comment
   * @example What version of Safari were you using when you observed this bug?
   */
  body?: string;
  body_text?: string;
  body_html?: string;
  html_url: string;
  user: NullableSimpleUserSchema;

  /**
   * @example 2011-04-14T16:00:49Z
   */
  created_at: string;

  /**
   * @example 2011-04-14T16:00:49Z
   */
  updated_at: string;
  issue_url: string;
  author_association: AuthorAssociationSchema;
  performed_via_github_app?: NullableIntegrationSchema;
  reactions?: ReactionRollupSchema;
};
/**
 * @description Event
 */
type EventSchema = {
  id: string;
  type: string | null;
  actor: ActorSchema;
  repo: {
    id: number;
    name: string;
    url: string;
  };
  org?: ActorSchema;
  payload: {
    action?: string;
    issue?: IssueSchema;
    comment?: IssueCommentSchema;
    pages?: {
      page_name?: string;
      title?: string;
      summary?: string | null;
      action?: string;
      sha?: string;
      html_url?: string;
    }[];
  };
  public: boolean;
  created_at: string | null;
};
/**
 * @description Hypermedia Link with Type
 */
type LinkWithTypeSchema = {
  href: string;
  type: string;
};
/**
 * @description Feed
 */
type FeedSchema = {
  /**
   * @example https://github.com/timeline
   */
  timeline_url: string;

  /**
   * @example https://github.com/{user}
   */
  user_url: string;

  /**
   * @example https://github.com/octocat
   */
  current_user_public_url?: string;

  /**
   * @example https://github.com/octocat.private?token=abc123
   */
  current_user_url?: string;

  /**
   * @example https://github.com/octocat.private.actor?token=abc123
   */
  current_user_actor_url?: string;

  /**
   * @example https://github.com/octocat-org
   */
  current_user_organization_url?: string;

  /**
 * @example [
  "https://github.com/organizations/github/octocat.private.atom?token=abc123"
]
  */
  current_user_organization_urls?: string[];

  /**
   * @example https://github.com/security-advisories
   */
  security_advisories_url?: string;

  /**
   * @description A feed of discussions for a given repository.
   * @example https://github.com/{user}/{repo}/discussions
   */
  repository_discussions_url?: string;

  /**
   * @description A feed of discussions for a given repository and category.
   * @example https://github.com/{user}/{repo}/discussions/categories/{category}
   */
  repository_discussions_category_url?: string;
  _links: {
    timeline: LinkWithTypeSchema;
    user: LinkWithTypeSchema;
    security_advisories?: LinkWithTypeSchema;
    current_user?: LinkWithTypeSchema;
    current_user_public?: LinkWithTypeSchema;
    current_user_actor?: LinkWithTypeSchema;
    current_user_organization?: LinkWithTypeSchema;
    current_user_organizations?: LinkWithTypeSchema[];
    repository_discussions?: LinkWithTypeSchema;
    repository_discussions_category?: LinkWithTypeSchema;
  };
};
/**
 * @description Base Gist
 */
type BaseGistSchema = {
  url: string;
  forks_url: string;
  commits_url: string;
  id: string;
  node_id: string;
  git_pull_url: string;
  git_push_url: string;
  html_url: string;
  files: {
    [key: string]: {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;

      /**
       * @description The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
       * @default "utf-8"
       */
      encoding?: string;
    };
  };
  public: boolean;
  created_at: string;
  updated_at: string;
  description: string | null;
  comments: number;
  comments_enabled?: boolean;
  user: NullableSimpleUserSchema;
  comments_url: string;
  owner?: SimpleUserSchema;
  truncated?: boolean;
  forks?: {}[];
  history?: {}[];
};
/**
 * @description Public User
 */
type PublicUserSchema = {
  login: string;
  id: number;
  user_view_type?: string;
  node_id: string;
  avatar_url: string;
  gravatar_id: string | null;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  name: string | null;
  company: string | null;
  blog: string | null;
  location: string | null;
  email: string | null;
  notification_email?: string | null;
  hireable: boolean | null;
  bio: string | null;
  twitter_username?: string | null;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  created_at: string;
  updated_at: string;
  plan?: {
    collaborators: number;
    name: string;
    space: number;
    private_repos: number;
  };

  /**
   * @example 1
   */
  private_gists?: number;

  /**
   * @example 2
   */
  total_private_repos?: number;

  /**
   * @example 2
   */
  owned_private_repos?: number;

  /**
   * @example 1
   */
  disk_usage?: number;

  /**
   * @example 3
   */
  collaborators?: number;
};
/**
 * @description Gist History
 */
type GistHistorySchema = {
  user?: NullableSimpleUserSchema;
  version?: string;
  committed_at?: string;
  change_status?: {
    total?: number;
    additions?: number;
    deletions?: number;
  };
  url?: string;
};
/**
 * @description Gist Simple
 */
type GistSimpleSchema = {
  /**
   * @deprecated
   */
  forks?:
    | {
        id?: string;
        url?: string;
        user?: PublicUserSchema;
        created_at?: string;
        updated_at?: string;
      }[]
    | null;

  /**
   * @deprecated
   */
  history?: GistHistorySchema[] | null;

  /**
   * @description Gist
   */
  fork_of?: {
    url: string;
    forks_url: string;
    commits_url: string;
    id: string;
    node_id: string;
    git_pull_url: string;
    git_push_url: string;
    html_url: string;
    files: {
      [key: string]: {
        filename?: string;
        type?: string;
        language?: string;
        raw_url?: string;
        size?: number;
      };
    };
    public: boolean;
    created_at: string;
    updated_at: string;
    description: string | null;
    comments: number;
    comments_enabled?: boolean;
    user: NullableSimpleUserSchema;
    comments_url: string;
    owner?: NullableSimpleUserSchema;
    truncated?: boolean;
    forks?: {}[];
    history?: {}[];
  } | null;
  url?: string;
  forks_url?: string;
  commits_url?: string;
  id?: string;
  node_id?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  files?: {
    [key: string]: {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      truncated?: boolean;
      content?: string;

      /**
       * @description The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
       * @default "utf-8"
       */
      encoding?: string;
    } | null;
  };
  public?: boolean;
  created_at?: string;
  updated_at?: string;
  description?: string | null;
  comments?: number;
  comments_enabled?: boolean;
  user?: string | null;
  comments_url?: string;
  owner?: SimpleUserSchema;
  truncated?: boolean;
};
/**
 * @description A comment made to a gist.
 */
type GistCommentSchema = {
  /**
   * @example 1
   */
  id: number;

  /**
   * @example MDExOkdpc3RDb21tZW50MQ==
   */
  node_id: string;

  /**
   * @example https://api.github.com/gists/a6db0bec360bb87e9418/comments/1
   */
  url: string;

  /**
   * @description The comment text.
   * @example Body of the attachment
   */
  body: string;
  user: NullableSimpleUserSchema;

  /**
   * @example 2011-04-18T23:23:56Z
   */
  created_at: string;

  /**
   * @example 2011-04-18T23:23:56Z
   */
  updated_at: string;
  author_association: AuthorAssociationSchema;
};
/**
 * @description Gist Commit
 */
type GistCommitSchema = {
  /**
   * @example https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f
   */
  url: string;

  /**
   * @example 57a7f021a713b1c5a6a199b54cc514735d2d462f
   */
  version: string;
  user: NullableSimpleUserSchema;
  change_status: {
    total?: number;
    additions?: number;
    deletions?: number;
  };

  /**
   * @example 2010-04-14T02:15:15Z
   */
  committed_at: string;
};
/**
 * @description Gitignore Template
 */
type GitignoreTemplateSchema = {
  /**
   * @example C
   */
  name: string;

  /**
   * @example # Object files
   * *.o
   *
   * # Libraries
   * *.lib
   * *.a
   *
   * # Shared objects (inc. Windows DLLs)
   * *.dll
   * *.so
   * *.so.*
   * *.dylib
   *
   * # Executables
   * *.exe
   * *.out
   * *.app
   *
   */
  source: string;
};
/**
 * @description License Simple
 */
type LicenseSimpleSchema = {
  /**
   * @example mit
   */
  key: string;

  /**
   * @example MIT License
   */
  name: string;

  /**
   * @example https://api.github.com/licenses/mit
   */
  url: string | null;

  /**
   * @example MIT
   */
  spdx_id: string | null;

  /**
   * @example MDc6TGljZW5zZW1pdA==
   */
  node_id: string;
  html_url?: string;
};
/**
 * @description License
 */
type LicenseSchema = {
  /**
   * @example mit
   */
  key: string;

  /**
   * @example MIT License
   */
  name: string;

  /**
   * @example MIT
   */
  spdx_id: string | null;

  /**
   * @example https://api.github.com/licenses/mit
   */
  url: string | null;

  /**
   * @example MDc6TGljZW5zZW1pdA==
   */
  node_id: string;

  /**
   * @example http://choosealicense.com/licenses/mit/
   */
  html_url: string;

  /**
   * @example A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty.
   */
  description: string;

  /**
   * @example Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders.
   */
  implementation: string;

  /**
 * @example [
  "commercial-use",
  "modifications",
  "distribution",
  "sublicense",
  "private-use"
]
  */
  permissions: string[];

  /**
 * @example [
  "include-copyright"
]
  */
  conditions: string[];

  /**
 * @example [
  "no-liability"
]
  */
  limitations: string[];

  /**
   * @example
   *
   * The MIT License (MIT)
   *
   * Copyright (c) [year] [fullname]
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in all
   * copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   *
   */
  body: string;

  /**
   * @example true
   */
  featured: boolean;
};
/**
 * @description Marketplace Listing Plan
 */
type MarketplaceListingPlanSchema = {
  /**
   * @example https://api.github.com/marketplace_listing/plans/1313
   */
  url: string;

  /**
   * @example https://api.github.com/marketplace_listing/plans/1313/accounts
   */
  accounts_url: string;

  /**
   * @example 1313
   */
  id: number;

  /**
   * @example 3
   */
  number: number;

  /**
   * @example Pro
   */
  name: string;

  /**
   * @example A professional-grade CI solution
   */
  description: string;

  /**
   * @example 1099
   */
  monthly_price_in_cents: number;

  /**
   * @example 11870
   */
  yearly_price_in_cents: number;

  /**
   * @example FLAT_RATE
   */
  price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";

  /**
   * @example true
   */
  has_free_trial: boolean;
  unit_name: string | null;

  /**
   * @example published
   */
  state: string;

  /**
 * @example [
  "Up to 25 private repositories",
  "11 concurrent builds"
]
  */
  bullets: string[];
};
/**
 * @description Marketplace Purchase
 */
type MarketplacePurchaseSchema = {
  url: string;
  type: string;
  id: number;
  login: string;
  organization_billing_email?: string;
  email?: string | null;
  marketplace_pending_change?: {
    is_installed?: boolean;
    effective_date?: string;
    unit_count?: number | null;
    id?: number;
    plan?: MarketplaceListingPlanSchema;
  } | null;
  marketplace_purchase: {
    billing_cycle?: string;
    next_billing_date?: string | null;
    is_installed?: boolean;
    unit_count?: number | null;
    on_free_trial?: boolean;
    free_trial_ends_on?: string | null;
    updated_at?: string;
    plan?: MarketplaceListingPlanSchema;
  };
};
/**
 * @description Api Overview
 */
type ApiOverviewSchema = {
  /**
   * @example true
   */
  verifiable_password_authentication: boolean;
  ssh_key_fingerprints?: {
    SHA256_RSA?: string;
    SHA256_DSA?: string;
    SHA256_ECDSA?: string;
    SHA256_ED25519?: string;
  };

  /**
 * @example [
  "ssh-ed25519 ABCDEFGHIJKLMNOPQRSTUVWXYZ"
]
  */
  ssh_keys?: string[];

  /**
 * @example [
  "192.0.2.1"
]
  */
  hooks?: string[];

  /**
 * @example [
  "192.0.2.1"
]
  */
  github_enterprise_importer?: string[];

  /**
 * @example [
  "192.0.2.1"
]
  */
  web?: string[];

  /**
 * @example [
  "192.0.2.1"
]
  */
  api?: string[];

  /**
 * @example [
  "192.0.2.1"
]
  */
  git?: string[];

  /**
 * @example [
  "192.0.2.1"
]
  */
  packages?: string[];

  /**
 * @example [
  "192.0.2.1"
]
  */
  pages?: string[];

  /**
 * @example [
  "192.0.2.1"
]
  */
  importer?: string[];

  /**
 * @example [
  "192.0.2.1"
]
  */
  actions?: string[];

  /**
 * @example [
  "192.0.2.1"
]
  */
  actions_macos?: string[];

  /**
 * @example [
  "192.0.2.1"
]
  */
  codespaces?: string[];

  /**
 * @example [
  "192.0.2.1"
]
  */
  dependabot?: string[];

  /**
 * @example [
  "192.0.2.1"
]
  */
  copilot?: string[];
  domains?: {
    website?: string[];
    codespaces?: string[];
    copilot?: string[];
    packages?: string[];
    actions?: string[];
    actions_inbound?: {
      full_domains?: string[];
      wildcard_domains?: string[];
    };
    artifact_attestations?: {
      /**
 * @example [
  "example"
]
  */
      trust_domain?: string;
      services?: string[];
    };
  };
};
type SecurityAndAnalysisSchema = {
  /**
   * @description Enable or disable GitHub Advanced Security for the repository.
   *
   * For standalone Code Scanning or Secret Protection products, this parameter cannot be used.
   *
   */
  advanced_security?: {
    status?: "enabled" | "disabled";
  };
  code_security?: {
    status?: "enabled" | "disabled";
  };

  /**
   * @description Enable or disable Dependabot security updates for the repository.
   */
  dependabot_security_updates?: {
    /**
     * @description The enablement status of Dependabot security updates for the repository.
     */
    status?: "enabled" | "disabled";
  };
  secret_scanning?: {
    status?: "enabled" | "disabled";
  };
  secret_scanning_push_protection?: {
    status?: "enabled" | "disabled";
  };
  secret_scanning_non_provider_patterns?: {
    status?: "enabled" | "disabled";
  };
  secret_scanning_ai_detection?: {
    status?: "enabled" | "disabled";
  };
} | null;
/**
 * @description Minimal Repository
 */
type MinimalRepositorySchema = {
  /**
   * @example 1296269
   */
  id: number;

  /**
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;

  /**
   * @example Hello-World
   */
  name: string;

  /**
   * @example octocat/Hello-World
   */
  full_name: string;
  owner: SimpleUserSchema;
  private: boolean;

  /**
   * @example https://github.com/octocat/Hello-World
   */
  html_url: string;

  /**
   * @example This your first repo!
   */
  description: string | null;
  fork: boolean;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World
   */
  url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contributors
   */
  contributors_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/deployments
   */
  deployments_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/downloads
   */
  downloads_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/events
   */
  events_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/forks
   */
  forks_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;
  git_url?: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/languages
   */
  languages_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/merges
   */
  merges_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;
  ssh_url?: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/stargazers
   */
  stargazers_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscribers
   */
  subscribers_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscription
   */
  subscription_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/tags
   */
  tags_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/teams
   */
  teams_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;
  clone_url?: string;
  mirror_url?: string | null;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/hooks
   */
  hooks_url: string;
  svn_url?: string;
  homepage?: string | null;
  language?: string | null;
  forks_count?: number;
  stargazers_count?: number;
  watchers_count?: number;

  /**
   * @description The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
   */
  size?: number;
  default_branch?: string;
  open_issues_count?: number;
  is_template?: boolean;
  topics?: string[];
  has_issues?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  has_pages?: boolean;
  has_downloads?: boolean;
  has_discussions?: boolean;
  archived?: boolean;
  disabled?: boolean;
  visibility?: string;

  /**
   * @example 2011-01-26T19:06:43Z
   */
  pushed_at?: string | null;

  /**
   * @example 2011-01-26T19:01:12Z
   */
  created_at?: string | null;

  /**
   * @example 2011-01-26T19:14:43Z
   */
  updated_at?: string | null;
  permissions?: {
    admin?: boolean;
    maintain?: boolean;
    push?: boolean;
    triage?: boolean;
    pull?: boolean;
  };

  /**
   * @example admin
   */
  role_name?: string;
  temp_clone_token?: string;
  delete_branch_on_merge?: boolean;
  subscribers_count?: number;
  network_count?: number;
  code_of_conduct?: CodeOfConductSchema;
  license?: {
    key?: string;
    name?: string;
    spdx_id?: string;
    url?: string;
    node_id?: string;
  } | null;
  forks?: number;
  open_issues?: number;
  watchers?: number;
  allow_forking?: boolean;
  web_commit_signoff_required?: boolean;
  security_and_analysis?: SecurityAndAnalysisSchema;

  /**
   * @description The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
   */
  custom_properties?: {
    [key: string]: any;
  };
};
/**
 * @description Thread
 */
type ThreadSchema = {
  id: string;
  repository: MinimalRepositorySchema;
  subject: {
    title: string;
    url: string;
    latest_comment_url: string;
    type: string;
  };
  reason: string;
  unread: boolean;
  updated_at: string;
  last_read_at: string | null;
  url: string;

  /**
   * @example https://api.github.com/notifications/threads/2/subscription
   */
  subscription_url: string;
};
/**
 * @description Thread Subscription
 */
type ThreadSubscriptionSchema = {
  /**
   * @example true
   */
  subscribed: boolean;
  ignored: boolean;
  reason: string | null;

  /**
   * @example 2012-10-06T21:34:12Z
   */
  created_at: string | null;

  /**
   * @example https://api.github.com/notifications/threads/1/subscription
   */
  url: string;

  /**
   * @example https://api.github.com/notifications/threads/1
   */
  thread_url?: string;

  /**
   * @example https://api.github.com/repos/1
   */
  repository_url?: string;
};
/**
 * @description A GitHub organization.
 */
type OrganizationSimpleSchema = {
  /**
   * @example github
   */
  login: string;

  /**
   * @example 1
   */
  id: number;

  /**
   * @example MDEyOk9yZ2FuaXphdGlvbjE=
   */
  node_id: string;

  /**
   * @example https://api.github.com/orgs/github
   */
  url: string;

  /**
   * @example https://api.github.com/orgs/github/repos
   */
  repos_url: string;

  /**
   * @example https://api.github.com/orgs/github/events
   */
  events_url: string;

  /**
   * @example https://api.github.com/orgs/github/hooks
   */
  hooks_url: string;

  /**
   * @example https://api.github.com/orgs/github/issues
   */
  issues_url: string;

  /**
   * @example https://api.github.com/orgs/github/members{/member}
   */
  members_url: string;

  /**
   * @example https://api.github.com/orgs/github/public_members{/member}
   */
  public_members_url: string;

  /**
   * @example https://github.com/images/error/octocat_happy.gif
   */
  avatar_url: string;

  /**
   * @example A great organization
   */
  description: string | null;
};
/**
 * @description A GitHub repository.
 */
type NullableSimpleRepositorySchema = {
  /**
   * @description A unique identifier of the repository.
   * @example 1296269
   */
  id: number;

  /**
   * @description The GraphQL identifier of the repository.
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;

  /**
   * @description The name of the repository.
   * @example Hello-World
   */
  name: string;

  /**
   * @description The full, globally unique, name of the repository.
   * @example octocat/Hello-World
   */
  full_name: string;
  owner: SimpleUserSchema;

  /**
   * @description Whether the repository is private.
   */
  private: boolean;

  /**
   * @description The URL to view the repository on GitHub.com.
   * @example https://github.com/octocat/Hello-World
   */
  html_url: string;

  /**
   * @description The repository description.
   * @example This your first repo!
   */
  description: string | null;

  /**
   * @description Whether the repository is a fork.
   */
  fork: boolean;

  /**
   * @description The URL to get more information about the repository from the GitHub API.
   * @example https://api.github.com/repos/octocat/Hello-World
   */
  url: string;

  /**
   * @description A template for the API URL to download the repository as an archive.
   * @example https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;

  /**
   * @description A template for the API URL to list the available assignees for issues in the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;

  /**
   * @description A template for the API URL to create or retrieve a raw Git blob in the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;

  /**
   * @description A template for the API URL to get information about branches in the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;

  /**
   * @description A template for the API URL to get information about collaborators of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;

  /**
   * @description A template for the API URL to get information about comments on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;

  /**
   * @description A template for the API URL to get information about commits on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;

  /**
   * @description A template for the API URL to compare two commits or refs.
   * @example https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;

  /**
   * @description A template for the API URL to get the contents of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;

  /**
   * @description A template for the API URL to list the contributors to the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/contributors
   */
  contributors_url: string;

  /**
   * @description The API URL to list the deployments of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/deployments
   */
  deployments_url: string;

  /**
   * @description The API URL to list the downloads on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/downloads
   */
  downloads_url: string;

  /**
   * @description The API URL to list the events of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/events
   */
  events_url: string;

  /**
   * @description The API URL to list the forks of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/forks
   */
  forks_url: string;

  /**
   * @description A template for the API URL to get information about Git commits of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;

  /**
   * @description A template for the API URL to get information about Git refs of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;

  /**
   * @description A template for the API URL to get information about Git tags of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;

  /**
   * @description A template for the API URL to get information about issue comments on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;

  /**
   * @description A template for the API URL to get information about issue events on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;

  /**
   * @description A template for the API URL to get information about issues on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;

  /**
   * @description A template for the API URL to get information about deploy keys on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;

  /**
   * @description A template for the API URL to get information about labels of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;

  /**
   * @description The API URL to get information about the languages of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/languages
   */
  languages_url: string;

  /**
   * @description The API URL to merge branches in the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/merges
   */
  merges_url: string;

  /**
   * @description A template for the API URL to get information about milestones of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;

  /**
   * @description A template for the API URL to get information about notifications on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;

  /**
   * @description A template for the API URL to get information about pull requests on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;

  /**
   * @description A template for the API URL to get information about releases on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;

  /**
   * @description The API URL to list the stargazers on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/stargazers
   */
  stargazers_url: string;

  /**
   * @description A template for the API URL to get information about statuses of a commit.
   * @example https://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;

  /**
   * @description The API URL to list the subscribers on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/subscribers
   */
  subscribers_url: string;

  /**
   * @description The API URL to subscribe to notifications for this repository.
   * @example https://api.github.com/repos/octocat/Hello-World/subscription
   */
  subscription_url: string;

  /**
   * @description The API URL to get information about tags on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/tags
   */
  tags_url: string;

  /**
   * @description The API URL to list the teams on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/teams
   */
  teams_url: string;

  /**
   * @description A template for the API URL to create or retrieve a raw Git tree of the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;

  /**
   * @description The API URL to list the hooks on the repository.
   * @example https://api.github.com/repos/octocat/Hello-World/hooks
   */
  hooks_url: string;
} | null;
/**
 * @description Information about repositories that Dependabot is able to access in an organization
 */
type DependabotRepositoryAccessDetailsSchema = {
  /**
   * @description The default repository access level for Dependabot updates.
   * @example internal
   */
  default_level?: "public" | "internal" | null;
  accessible_repositories?: NullableSimpleRepositorySchema[];
};
type BillingUsageReportSchema = {
  usageItems?: {
    /**
     * @description Date of the usage line item.
     */
    date: string;

    /**
     * @description Product name.
     */
    product: string;

    /**
     * @description SKU name.
     */
    sku: string;

    /**
     * @description Quantity of the usage line item.
     */
    quantity: number;

    /**
     * @description Unit type of the usage line item.
     */
    unitType: string;

    /**
     * @description Price per unit of the usage line item.
     */
    pricePerUnit: number;

    /**
     * @description Gross amount of the usage line item.
     */
    grossAmount: number;

    /**
     * @description Discount amount of the usage line item.
     */
    discountAmount: number;

    /**
     * @description Net amount of the usage line item.
     */
    netAmount: number;

    /**
     * @description Name of the organization.
     */
    organizationName: string;

    /**
     * @description Name of the repository.
     */
    repositoryName?: string;
  }[];
};
/**
 * @description Organization Full
 */
type OrganizationFullSchema = {
  /**
   * @example github
   */
  login: string;

  /**
   * @example 1
   */
  id: number;

  /**
   * @example MDEyOk9yZ2FuaXphdGlvbjE=
   */
  node_id: string;

  /**
   * @example https://api.github.com/orgs/github
   */
  url: string;

  /**
   * @example https://api.github.com/orgs/github/repos
   */
  repos_url: string;

  /**
   * @example https://api.github.com/orgs/github/events
   */
  events_url: string;

  /**
   * @example https://api.github.com/orgs/github/hooks
   */
  hooks_url: string;

  /**
   * @example https://api.github.com/orgs/github/issues
   */
  issues_url: string;

  /**
   * @example https://api.github.com/orgs/github/members{/member}
   */
  members_url: string;

  /**
   * @example https://api.github.com/orgs/github/public_members{/member}
   */
  public_members_url: string;

  /**
   * @example https://github.com/images/error/octocat_happy.gif
   */
  avatar_url: string;

  /**
   * @example A great organization
   */
  description: string | null;

  /**
   * @example github
   */
  name?: string;

  /**
   * @example GitHub
   */
  company?: string;

  /**
   * @example https://github.com/blog
   */
  blog?: string;

  /**
   * @example San Francisco
   */
  location?: string;

  /**
   * @example octocat@github.com
   */
  email?: string;

  /**
   * @example github
   */
  twitter_username?: string | null;

  /**
   * @example true
   */
  is_verified?: boolean;

  /**
   * @example true
   */
  has_organization_projects: boolean;

  /**
   * @example true
   */
  has_repository_projects: boolean;

  /**
   * @example 2
   */
  public_repos: number;

  /**
   * @example 1
   */
  public_gists: number;

  /**
   * @example 20
   */
  followers: number;
  following: number;

  /**
   * @example https://github.com/octocat
   */
  html_url: string;

  /**
   * @example Organization
   */
  type: string;

  /**
   * @example 100
   */
  total_private_repos?: number;

  /**
   * @example 100
   */
  owned_private_repos?: number;

  /**
   * @example 81
   */
  private_gists?: number | null;

  /**
   * @example 10000
   */
  disk_usage?: number | null;

  /**
   * @description The number of collaborators on private repositories.
   *
   * This field may be null if the number of private repositories is over 50,000.
   * @example 8
   */
  collaborators?: number | null;

  /**
   * @example org@example.com
   */
  billing_email?: string | null;
  plan?: {
    name: string;
    space: number;
    private_repos: number;
    filled_seats?: number;
    seats?: number;
  };
  default_repository_permission?: string | null;

  /**
   * @description The default branch for repositories created in this organization.
   * @example main
   */
  default_repository_branch?: string | null;

  /**
   * @example true
   */
  members_can_create_repositories?: boolean | null;

  /**
   * @example true
   */
  two_factor_requirement_enabled?: boolean | null;

  /**
   * @example all
   */
  members_allowed_repository_creation_type?: string;

  /**
   * @example true
   */
  members_can_create_public_repositories?: boolean;

  /**
   * @example true
   */
  members_can_create_private_repositories?: boolean;

  /**
   * @example true
   */
  members_can_create_internal_repositories?: boolean;

  /**
   * @example true
   */
  members_can_create_pages?: boolean;

  /**
   * @example true
   */
  members_can_create_public_pages?: boolean;

  /**
   * @example true
   */
  members_can_create_private_pages?: boolean;

  /**
   * @example true
   */
  members_can_delete_repositories?: boolean;

  /**
   * @example true
   */
  members_can_change_repo_visibility?: boolean;

  /**
   * @example true
   */
  members_can_invite_outside_collaborators?: boolean;

  /**
   * @example true
   */
  members_can_delete_issues?: boolean;

  /**
   * @example true
   */
  display_commenter_full_name_setting_enabled?: boolean;

  /**
   * @example true
   */
  readers_can_create_discussions?: boolean;

  /**
   * @example true
   */
  members_can_create_teams?: boolean;

  /**
   * @example true
   */
  members_can_view_dependency_insights?: boolean;
  members_can_fork_private_repositories?: boolean | null;
  web_commit_signoff_required?: boolean;

  /**
   * @description **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
   *
   * Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   */
  advanced_security_enabled_for_new_repositories?: boolean;

  /**
   * @description **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
   *
   * Whether Dependabot alerts are automatically enabled for new repositories and repositories transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   */
  dependabot_alerts_enabled_for_new_repositories?: boolean;

  /**
   * @description **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
   *
   * Whether Dependabot security updates are automatically enabled for new repositories and repositories transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   */
  dependabot_security_updates_enabled_for_new_repositories?: boolean;

  /**
   * @description **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
   *
   * Whether dependency graph is automatically enabled for new repositories and repositories transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   */
  dependency_graph_enabled_for_new_repositories?: boolean;

  /**
   * @description **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
   *
   * Whether secret scanning is automatically enabled for new repositories and repositories transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   */
  secret_scanning_enabled_for_new_repositories?: boolean;

  /**
   * @description **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
   *
   * Whether secret scanning push protection is automatically enabled for new repositories and repositories transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   */
  secret_scanning_push_protection_enabled_for_new_repositories?: boolean;

  /**
   * @description Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
   */
  secret_scanning_push_protection_custom_link_enabled?: boolean;

  /**
   * @description An optional URL string to display to contributors who are blocked from pushing a secret.
   * @example https://github.com/test-org/test-repo/blob/main/README.md
   */
  secret_scanning_push_protection_custom_link?: string | null;

  /**
   * @example 2008-01-14T04:33:35Z
   */
  created_at: string;
  updated_at: string;
  archived_at: string | null;

  /**
   * @description Controls whether or not deploy keys may be added and used for repositories in the organization.
   */
  deploy_keys_enabled_for_repositories?: boolean;
};
type ActionsCacheUsageOrgEnterpriseSchema = {
  /**
   * @description The count of active caches across all repositories of an enterprise or an organization.
   */
  total_active_caches_count: number;

  /**
   * @description The total size in bytes of all active cache items across all repositories of an enterprise or an organization.
   */
  total_active_caches_size_in_bytes: number;
};
/**
 * @description GitHub Actions Cache Usage by repository.
 */
type ActionsCacheUsageByRepositorySchema = {
  /**
   * @description The repository owner and name for the cache usage being shown.
   * @example octo-org/Hello-World
   */
  full_name: string;

  /**
   * @description The sum of the size in bytes of all the active cache items in the repository.
   * @example 2322142
   */
  active_caches_size_in_bytes: number;

  /**
   * @description The number of active caches in the repository.
   * @example 3
   */
  active_caches_count: number;
};
/**
 * @description Provides details of a hosted runner image
 */
type NullableActionsHostedRunnerPoolImageSchema = {
  /**
   * @description The ID of the image. Use this ID for the `image` parameter when creating a new larger runner.
   * @example ubuntu-20.04
   */
  id: string;

  /**
   * @description Image size in GB.
   * @example 86
   */
  size_gb: number;

  /**
   * @description Display name for this image.
   * @example 20.04
   */
  display_name: string;

  /**
   * @description The image provider.
   */
  source: "github" | "partner" | "custom";
} | null;
/**
 * @description Provides details of a particular machine spec.
 */
type ActionsHostedRunnerMachineSpecSchema = {
  /**
   * @description The ID used for the `size` parameter when creating a new runner.
   * @example 8-core
   */
  id: string;

  /**
   * @description The number of cores.
   * @example 8
   */
  cpu_cores: number;

  /**
   * @description The available RAM for the machine spec.
   * @example 32
   */
  memory_gb: number;

  /**
   * @description The available SSD storage for the machine spec.
   * @example 300
   */
  storage_gb: number;
};
/**
 * @description Provides details of Public IP for a GitHub-hosted larger runners
 */
type PublicIpSchema = {
  /**
   * @description Whether public IP is enabled.
   * @example true
   */
  enabled?: boolean;

  /**
   * @description The prefix for the public IP.
   * @example 20.80.208.150
   */
  prefix?: string;

  /**
   * @description The length of the IP prefix.
   * @example 28
   */
  length?: number;
};
/**
 * @description A Github-hosted hosted runner.
 */
type ActionsHostedRunnerSchema = {
  /**
   * @description The unique identifier of the hosted runner.
   * @example 5
   */
  id: number;

  /**
   * @description The name of the hosted runner.
   * @example my-github-hosted-runner
   */
  name: string;

  /**
   * @description The unique identifier of the group that the hosted runner belongs to.
   * @example 2
   */
  runner_group_id?: number;
  image_details: NullableActionsHostedRunnerPoolImageSchema;
  machine_size_details: ActionsHostedRunnerMachineSpecSchema;

  /**
   * @description The status of the runner.
   * @example Ready
   */
  status: "Ready" | "Provisioning" | "Shutdown" | "Deleting" | "Stuck";

  /**
   * @description The operating system of the image.
   * @example linux-x64
   */
  platform: string;

  /**
   * @description The maximum amount of hosted runners. Runners will not scale automatically above this number. Use this setting to limit your cost.
   * @example 5
   * @default 10
   */
  maximum_runners?: number;

  /**
   * @description Whether public IP is enabled for the hosted runners.
   * @example true
   */
  public_ip_enabled: boolean;

  /**
   * @description The public IP ranges when public IP is enabled for the hosted runners.
   */
  public_ips?: PublicIpSchema[];

  /**
   * @description The time at which the runner was last used, in ISO 8601 format.
   * @example 2022-10-09T23:39:01Z
   */
  last_active_on?: string | null;
};
/**
 * @description Provides details of a hosted runner image
 */
type ActionsHostedRunnerCuratedImageSchema = {
  /**
   * @description The ID of the image. Use this ID for the `image` parameter when creating a new larger runner.
   * @example ubuntu-20.04
   */
  id: string;

  /**
   * @description The operating system of the image.
   * @example linux-x64
   */
  platform: string;

  /**
   * @description Image size in GB.
   * @example 86
   */
  size_gb: number;

  /**
   * @description Display name for this image.
   * @example 20.04
   */
  display_name: string;

  /**
   * @description The image provider.
   */
  source: "github" | "partner" | "custom";
};
type ActionsHostedRunnerLimitsSchema = {
  /**
   * @description Provides details of static public IP limits for GitHub-hosted Hosted Runners
   */
  public_ips: {
    /**
     * @description The maximum number of static public IP addresses that can be used for Hosted Runners.
     * @example 50
     */
    maximum: number;

    /**
     * @description The current number of static public IP addresses in use by Hosted Runners.
     * @example 17
     */
    current_usage: number;
  };
};
/**
 * @description Actions OIDC Subject customization
 */
type OidcCustomSubSchema = {
  /**
   * @description Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
   */
  include_claim_keys: string[];
};
/**
 * @description An object without any properties.
 */
type EmptyObjectSchema = {};
/**
 * @description The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
 */
type EnabledRepositoriesSchema = "all" | "none" | "selected";
/**
 * @description The permissions policy that controls the actions and reusable workflows that are allowed to run.
 */
type AllowedActionsSchema = "all" | "local_only" | "selected";
/**
 * @description The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`.
 */
type SelectedActionsUrlSchema = string;
/**
 * @description Whether actions must be pinned to a full-length commit SHA.
 */
type ShaPinningRequiredSchema = boolean;
type ActionsOrganizationPermissionsSchema = {
  enabled_repositories: EnabledRepositoriesSchema;

  /**
   * @description The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`.
   */
  selected_repositories_url?: string;
  allowed_actions?: AllowedActionsSchema;
  selected_actions_url?: SelectedActionsUrlSchema;
  sha_pinning_required?: ShaPinningRequiredSchema;
};
type ActionsArtifactAndLogRetentionResponseSchema = {
  /**
   * @description The number of days artifacts and logs are retained
   */
  days: number;

  /**
   * @description The maximum number of days that can be configured
   */
  maximum_allowed_days: number;
};
type ActionsForkPrContributorApprovalSchema = {
  /**
   * @description The policy that controls when fork PR workflows require approval from a maintainer.
   */
  approval_policy:
    | "first_time_contributors_new_to_github"
    | "first_time_contributors"
    | "all_external_contributors";
};
type ActionsForkPrWorkflowsPrivateReposSchema = {
  /**
   * @description Whether workflows triggered by pull requests from forks are allowed to run on private repositories.
   */
  run_workflows_from_fork_pull_requests: boolean;

  /**
   * @description Whether GitHub Actions can create pull requests or submit approving pull request reviews from a workflow triggered by a fork pull request.
   */
  send_write_tokens_to_workflows: boolean;

  /**
   * @description Whether to make secrets and variables available to workflows triggered by pull requests from forks.
   */
  send_secrets_and_variables: boolean;

  /**
   * @description Whether workflows triggered by pull requests from forks require approval from a repository administrator to run.
   */
  require_approval_for_fork_pr_workflows: boolean;
};
type SelectedActionsSchema = {
  /**
   * @description Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.
   */
  github_owned_allowed?: boolean;

  /**
   * @description Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators.
   */
  verified_allowed?: boolean;

  /**
   * @description Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.
   *
   * > [!NOTE]
   * > The `patterns_allowed` setting only applies to public repositories.
   */
  patterns_allowed?: string[];
};
type SelfHostedRunnersSettingsSchema = {
  /**
   * @description The policy that controls whether self-hosted runners can be used by repositories in the organization
   */
  enabled_repositories: "all" | "selected" | "none";

  /**
   * @description The URL to the endpoint for managing selected repositories for self-hosted runners in the organization
   */
  selected_repositories_url?: string;
};
/**
 * @description The default workflow permissions granted to the GITHUB_TOKEN when running workflows.
 */
type ActionsDefaultWorkflowPermissionsSchema = "read" | "write";
/**
 * @description Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.
 */
type ActionsCanApprovePullRequestReviewsSchema = boolean;
type ActionsGetDefaultWorkflowPermissionsSchema = {
  default_workflow_permissions: ActionsDefaultWorkflowPermissionsSchema;
  can_approve_pull_request_reviews: ActionsCanApprovePullRequestReviewsSchema;
};
type RunnerGroupsOrgSchema = {
  id: number;
  name: string;
  visibility: string;
  default: boolean;

  /**
   * @description Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected`
   */
  selected_repositories_url?: string;
  runners_url: string;
  hosted_runners_url?: string;

  /**
   * @description The identifier of a hosted compute network configuration.
   */
  network_configuration_id?: string;
  inherited: boolean;
  inherited_allows_public_repositories?: boolean;
  allows_public_repositories: boolean;

  /**
   * @description If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.
   * @default false
   */
  workflow_restrictions_read_only?: boolean;

  /**
   * @description If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
   * @default false
   */
  restricted_to_workflows?: boolean;

  /**
   * @description List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
   */
  selected_workflows?: string[];
};
/**
 * @description A label for a self hosted runner
 */
type RunnerLabelSchema = {
  /**
   * @description Unique identifier of the label.
   */
  id?: number;

  /**
   * @description Name of the label.
   */
  name: string;

  /**
   * @description The type of label. Read-only labels are applied automatically when the runner is configured.
   */
  type?: "read-only" | "custom";
};
/**
 * @description A self hosted runner
 */
type RunnerSchema = {
  /**
   * @description The ID of the runner.
   * @example 5
   */
  id: number;

  /**
   * @description The ID of the runner group.
   * @example 1
   */
  runner_group_id?: number;

  /**
   * @description The name of the runner.
   * @example iMac
   */
  name: string;

  /**
   * @description The Operating System of the runner.
   * @example macos
   */
  os: string;

  /**
   * @description The status of the runner.
   * @example online
   */
  status: string;
  busy: boolean;
  labels: RunnerLabelSchema[];
  ephemeral?: boolean;
};
/**
 * @description Runner Application
 */
type RunnerApplicationSchema = {
  os: string;
  architecture: string;
  download_url: string;
  filename: string;

  /**
   * @description A short lived bearer token used to download the runner, if needed.
   */
  temp_download_token?: string;
  sha256_checksum?: string;
};
/**
 * @description Authentication Token
 */
type OrganizationActionsSecretSchema = {
  /**
   * @description The name of the secret.
   * @example SECRET_TOKEN
   */
  name: string;
  created_at: string;
  updated_at: string;

  /**
   * @description Visibility of a secret
   */
  visibility: "all" | "private" | "selected";

  /**
   * @example https://api.github.com/organizations/org/secrets/my_secret/repositories
   */
  selected_repositories_url?: string;
};
/**
 * @description The public key used for setting Actions Secrets.
 */
type ActionsPublicKeySchema = {
  /**
   * @description The identifier for the key.
   * @example 1234567
   */
  key_id: string;

  /**
   * @description The Base64 encoded public key.
   * @example hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=
   */
  key: string;

  /**
   * @example 2
   */
  id?: number;

  /**
   * @example https://api.github.com/user/keys/2
   */
  url?: string;

  /**
   * @example ssh-rsa AAAAB3NzaC1yc2EAAA
   */
  title?: string;

  /**
   * @example 2011-01-26T19:01:12Z
   */
  created_at?: string;
};
/**
 * @description Organization variable for GitHub Actions.
 */
type OrganizationActionsVariableSchema = {
  /**
   * @description The name of the variable.
   * @example USERNAME
   */
  name: string;

  /**
   * @description The value of the variable.
   * @example octocat
   */
  value: string;

  /**
   * @description The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @example 2019-01-24T22:45:36.000Z
   */
  created_at: string;

  /**
   * @description The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @example 2019-01-24T22:45:36.000Z
   */
  updated_at: string;

  /**
   * @description Visibility of a variable
   */
  visibility: "all" | "private" | "selected";

  /**
   * @example https://api.github.com/organizations/org/variables/USERNAME/repositories
   */
  selected_repositories_url?: string;
};
/**
 * @description Indicates whether a campaign is open or closed
 */
type CampaignStateSchema = "open" | "closed";
/**
 * @description Groups of organization members that gives permissions on specified repositories.
 */
type NullableTeamSimpleSchema = {
  /**
   * @description Unique identifier of the team
   * @example 1
   */
  id: number;

  /**
   * @example MDQ6VGVhbTE=
   */
  node_id: string;

  /**
   * @description URL for the team
   * @example https://api.github.com/organizations/1/team/1
   */
  url: string;

  /**
   * @example https://api.github.com/organizations/1/team/1/members{/member}
   */
  members_url: string;

  /**
   * @description Name of the team
   * @example Justice League
   */
  name: string;

  /**
   * @description Description of the team
   * @example A great team.
   */
  description: string | null;

  /**
   * @description Permission that the team will have for its repositories
   * @example admin
   */
  permission: string;

  /**
   * @description The level of privacy this team should have
   * @example closed
   */
  privacy?: string;

  /**
   * @description The notification setting the team has set
   * @example notifications_enabled
   */
  notification_setting?: string;

  /**
   * @example https://github.com/orgs/rails/teams/core
   */
  html_url: string;

  /**
   * @example https://api.github.com/organizations/1/team/1/repos
   */
  repositories_url: string;

  /**
   * @example justice-league
   */
  slug: string;

  /**
   * @description Distinguished Name (DN) that team maps to within LDAP environment
   * @example uid=example,ou=users,dc=github,dc=com
   */
  ldap_dn?: string;
} | null;
/**
 * @description Groups of organization members that gives permissions on specified repositories.
 */
type TeamSchema = {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string | null;
  privacy?: string;
  notification_setting?: string;
  permission: string;
  permissions?: {
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
    admin: boolean;
  };
  url: string;

  /**
   * @example https://github.com/orgs/rails/teams/core
   */
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: NullableTeamSimpleSchema;
};
/**
 * @description The campaign metadata and alert stats.
 */
type CampaignSummarySchema = {
  /**
   * @description The number of the newly created campaign
   */
  number: number;

  /**
   * @description The date and time the campaign was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  created_at: string;

  /**
   * @description The date and time the campaign was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  updated_at: string;

  /**
   * @description The campaign name
   */
  name?: string;

  /**
   * @description The campaign description
   */
  description: string;

  /**
   * @description The campaign managers
   */
  managers: SimpleUserSchema[];

  /**
   * @description The campaign team managers
   */
  team_managers?: TeamSchema[];

  /**
   * @description The date and time the campaign was published, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  published_at?: string;

  /**
   * @description The date and time the campaign has ended, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  ends_at: string;

  /**
   * @description The date and time the campaign was closed, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ. Will be null if the campaign is still open.
   */
  closed_at?: string | null;
  state: CampaignStateSchema;

  /**
   * @description The contact link of the campaign.
   */
  contact_link: string | null;
  alert_stats?: {
    /**
     * @description The number of open alerts
     */
    open_count: number;

    /**
     * @description The number of closed alerts
     */
    closed_count: number;

    /**
     * @description The number of in-progress alerts
     */
    in_progress_count: number;
  };
};
/**
 * @description The name of the tool used to generate the code scanning analysis.
 */
type CodeScanningAnalysisToolNameSchema = string;
/**
 * @description The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.
 */
type CodeScanningAnalysisToolGuidSchema = string | null;
/**
 * @description State of a code scanning alert.
 */
/**
 * @description Severity of a code scanning alert.
 */
type AlertInstancesUrlSchema = Readonly<string>;
/**
 * @description State of a code scanning alert.
 */
type CodeScanningAlertStateSchema = "open" | "dismissed" | "fixed" | null;
/**
 * @description **Required when the state is dismissed.** The reason for dismissing or closing the alert.
 */
type CodeScanningAlertDismissedReasonSchema =
  | "false positive"
  | "won't fix"
  | "used in tests"
  | null;
/**
 * @description The dismissal comment associated with the dismissal of the alert.
 */
type CodeScanningAlertDismissedCommentSchema = string | null;
type CodeScanningAlertRuleSummarySchema = {
  /**
   * @description A unique identifier for the rule used to detect the alert.
   */
  id?: string | null;

  /**
   * @description The name of the rule used to detect the alert.
   */
  name?: string;

  /**
   * @description The severity of the alert.
   */
  severity?: "none" | "note" | "warning" | "error" | null;

  /**
   * @description The security severity of the alert.
   */
  security_severity_level?: "low" | "medium" | "high" | "critical" | null;

  /**
   * @description A short description of the rule used to detect the alert.
   */
  description?: string;

  /**
   * @description A description of the rule used to detect the alert.
   */
  full_description?: string;

  /**
   * @description A set of tags applicable for the rule.
   */
  tags?: string[] | null;

  /**
   * @description Detailed documentation for the rule as GitHub Flavored Markdown.
   */
  help?: string | null;

  /**
   * @description A link to the documentation for the rule used to detect the alert.
   */
  help_uri?: string | null;
};
/**
 * @description The version of the tool used to generate the code scanning analysis.
 */
type CodeScanningAnalysisToolVersionSchema = string | null;
type CodeScanningAnalysisToolSchema = {
  name?: CodeScanningAnalysisToolNameSchema;
  version?: CodeScanningAnalysisToolVersionSchema;
  guid?: CodeScanningAnalysisToolGuidSchema;
};
/**
 * @description The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`,
 * `refs/heads/<branch name>` or simply `<branch name>`.
 */
type CodeScanningRefSchema = string;
/**
 * @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
 */
type CodeScanningAnalysisAnalysisKeySchema = string;
/**
 * @description Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
 */
type CodeScanningAlertEnvironmentSchema = string;
/**
 * @description Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
 */
type CodeScanningAnalysisCategorySchema = string;
/**
 * @description Describe a region within a file for the alert.
 */
type CodeScanningAlertLocationSchema = {
  path?: string;
  start_line?: number;
  end_line?: number;
  start_column?: number;
  end_column?: number;
};
/**
 * @description A classification of the file. For example to identify it as generated.
 */
type CodeScanningAlertClassificationSchema =
  | "source"
  | "generated"
  | "test"
  | "library"
  | null;
type CodeScanningAlertInstanceSchema = {
  ref?: CodeScanningRefSchema;
  analysis_key?: CodeScanningAnalysisAnalysisKeySchema;
  environment?: CodeScanningAlertEnvironmentSchema;
  category?: CodeScanningAnalysisCategorySchema;
  state?: CodeScanningAlertStateSchema;
  commit_sha?: string;
  message?: {
    text?: string;
  };
  location?: CodeScanningAlertLocationSchema;
  html_url?: string;

  /**
   * @description Classifications that have been applied to the file that triggered the alert.
   * For example identifying it as documentation, or a generated file.
   */
  classifications?: CodeScanningAlertClassificationSchema[];
};
type CodeScanningOrganizationAlertItemsSchema = {
  number: AlertNumberSchema;
  created_at: AlertCreatedAtSchema;
  updated_at?: AlertUpdatedAtSchema;
  url: AlertUrlSchema;
  html_url: AlertHtmlUrlSchema;
  instances_url: AlertInstancesUrlSchema;
  state: CodeScanningAlertStateSchema;
  fixed_at?: AlertFixedAtSchema;
  dismissed_by: NullableSimpleUserSchema;
  dismissed_at: AlertDismissedAtSchema;
  dismissed_reason: CodeScanningAlertDismissedReasonSchema;
  dismissed_comment?: CodeScanningAlertDismissedCommentSchema;
  rule: CodeScanningAlertRuleSummarySchema;
  tool: CodeScanningAnalysisToolSchema;
  most_recent_instance: CodeScanningAlertInstanceSchema;
  repository: SimpleRepositorySchema;
  dismissal_approved_by?: NullableSimpleUserSchema;
};
/**
 * @description A description of the machine powering a codespace.
 */
type NullableCodespaceMachineSchema = {
  /**
   * @description The name of the machine.
   * @example standardLinux
   */
  name: string;

  /**
   * @description The display name of the machine includes cores, memory, and storage.
   * @example 4 cores, 16 GB RAM, 64 GB storage
   */
  display_name: string;

  /**
   * @description The operating system of the machine.
   * @example linux
   */
  operating_system: string;

  /**
   * @description How much storage is available to the codespace.
   * @example 68719476736
   */
  storage_in_bytes: number;

  /**
   * @description How much memory is available to the codespace.
   * @example 17179869184
   */
  memory_in_bytes: number;

  /**
   * @description How many cores are available to the codespace.
   * @example 4
   */
  cpus: number;

  /**
   * @description Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
   * @example ready
   */
  prebuild_availability: "none" | "ready" | "in_progress" | null;
} | null;
/**
 * @description A codespace.
 */
type CodespaceSchema = {
  /**
   * @example 1
   */
  id: number;

  /**
   * @description Automatically generated name of this codespace.
   * @example monalisa-octocat-hello-world-g4wpq6h95q
   */
  name: string;

  /**
   * @description Display name for this codespace.
   * @example bookish space pancake
   */
  display_name?: string | null;

  /**
   * @description UUID identifying this codespace's environment.
   * @example 26a7c758-7299-4a73-b978-5a92a7ae98a0
   */
  environment_id: string | null;
  owner: SimpleUserSchema;
  billable_owner: SimpleUserSchema;
  repository: MinimalRepositorySchema;
  machine: NullableCodespaceMachineSchema;

  /**
   * @description Path to devcontainer.json from repo root used to create Codespace.
   * @example .devcontainer/example/devcontainer.json
   */
  devcontainer_path?: string | null;

  /**
   * @description Whether the codespace was created from a prebuild.
   */
  prebuild: boolean | null;

  /**
   * @example 2011-01-26T19:01:12Z
   */
  created_at: string;

  /**
   * @example 2011-01-26T19:01:12Z
   */
  updated_at: string;

  /**
   * @description Last known time this codespace was started.
   * @example 2011-01-26T19:01:12Z
   */
  last_used_at: string;

  /**
   * @description State of this codespace.
   * @example Available
   */
  state:
    | "Unknown"
    | "Created"
    | "Queued"
    | "Provisioning"
    | "Available"
    | "Awaiting"
    | "Unavailable"
    | "Deleted"
    | "Moved"
    | "Shutdown"
    | "Archived"
    | "Starting"
    | "ShuttingDown"
    | "Failed"
    | "Exporting"
    | "Updating"
    | "Rebuilding";

  /**
   * @description API URL for this codespace.
   */
  url: string;

  /**
   * @description Details about the codespace's git repository.
   */
  git_status: {
    /**
     * @description The number of commits the local repository is ahead of the remote.
     */
    ahead?: number;

    /**
     * @description The number of commits the local repository is behind the remote.
     */
    behind?: number;

    /**
     * @description Whether the local repository has unpushed changes.
     */
    has_unpushed_changes?: boolean;

    /**
     * @description Whether the local repository has uncommitted changes.
     */
    has_uncommitted_changes?: boolean;

    /**
     * @description The current branch (or SHA if in detached HEAD state) of the local repository.
     * @example main
     */
    ref?: string;
  };

  /**
   * @description The initally assigned location of a new codespace.
   * @example WestUs2
   */
  location: "EastUs" | "SouthEastAsia" | "WestEurope" | "WestUs2";

  /**
   * @description The number of minutes of inactivity after which this codespace will be automatically stopped.
   * @example 60
   */
  idle_timeout_minutes: number | null;

  /**
   * @description URL to access this codespace on the web.
   */
  web_url: string;

  /**
   * @description API URL to access available alternate machine types for this codespace.
   */
  machines_url: string;

  /**
   * @description API URL to start this codespace.
   */
  start_url: string;

  /**
   * @description API URL to stop this codespace.
   */
  stop_url: string;

  /**
   * @description API URL to publish this codespace to a new repository.
   */
  publish_url?: string | null;

  /**
   * @description API URL for the Pull Request associated with this codespace, if any.
   */
  pulls_url: string | null;
  recent_folders: string[];
  runtime_constraints?: {
    /**
     * @description The privacy settings a user can select from when forwarding a port.
     */
    allowed_port_privacy_settings?: string[] | null;
  };

  /**
   * @description Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
   */
  pending_operation?: boolean | null;

  /**
   * @description Text to show user when codespace is disabled by a pending operation
   */
  pending_operation_disabled_reason?: string | null;

  /**
   * @description Text to show user when codespace idle timeout minutes has been overriden by an organization policy
   */
  idle_timeout_notice?: string | null;

  /**
   * @description Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
   * @example 60
   */
  retention_period_minutes?: number | null;

  /**
   * @description When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
   * @example 2011-01-26T20:01:12Z
   */
  retention_expires_at?: string | null;

  /**
   * @description The text to display to a user when a codespace has been stopped for a potentially actionable reason.
   * @example you've used 100% of your spending limit for Codespaces
   */
  last_known_stop_notice?: string | null;
};
/**
 * @description Secrets for a GitHub Codespace.
 */
type CodespacesOrgSecretSchema = {
  /**
   * @description The name of the secret
   * @example SECRET_NAME
   */
  name: string;

  /**
   * @description The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  created_at: string;

  /**
   * @description The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  updated_at: string;

  /**
   * @description The type of repositories in the organization that the secret is visible to
   */
  visibility: "all" | "private" | "selected";

  /**
   * @description The API URL at which the list of repositories this secret is visible to can be retrieved
   * @example https://api.github.com/orgs/ORGANIZATION/codespaces/secrets/SECRET_NAME/repositories
   */
  selected_repositories_url?: string;
};
/**
 * @description The public key used for setting Codespaces secrets.
 */
type CodespacesPublicKeySchema = {
  /**
   * @description The identifier for the key.
   * @example 1234567
   */
  key_id: string;

  /**
   * @description The Base64 encoded public key.
   * @example hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=
   */
  key: string;

  /**
   * @example 2
   */
  id?: number;

  /**
   * @example https://api.github.com/user/keys/2
   */
  url?: string;

  /**
   * @example ssh-rsa AAAAB3NzaC1yc2EAAA
   */
  title?: string;

  /**
   * @example 2011-01-26T19:01:12Z
   */
  created_at?: string;
};
/**
 * @description The breakdown of Copilot Business seats for the organization.
 */
type CopilotOrganizationSeatBreakdownSchema = {
  /**
   * @description The total number of seats being billed for the organization as of the current billing cycle.
   */
  total?: number;

  /**
   * @description Seats added during the current billing cycle.
   */
  added_this_cycle?: number;

  /**
   * @description The number of seats that are pending cancellation at the end of the current billing cycle.
   */
  pending_cancellation?: number;

  /**
   * @description The number of users who have been invited to receive a Copilot seat through this organization.
   */
  pending_invitation?: number;

  /**
   * @description The number of seats that have used Copilot during the current billing cycle.
   */
  active_this_cycle?: number;

  /**
   * @description The number of seats that have not used Copilot during the current billing cycle.
   */
  inactive_this_cycle?: number;
};
/**
 * @description Information about the seat breakdown and policies set for an organization with a Copilot Business or Copilot Enterprise subscription.
 */
type CopilotOrganizationDetailsSchema = {
  seat_breakdown: CopilotOrganizationSeatBreakdownSchema;

  /**
   * @description The organization policy for allowing or blocking suggestions matching public code (duplication detection filter).
   */
  public_code_suggestions: "allow" | "block" | "unconfigured";

  /**
   * @description The organization policy for allowing or disallowing Copilot Chat in the IDE.
   */
  ide_chat?: "enabled" | "disabled" | "unconfigured";

  /**
   * @description The organization policy for allowing or disallowing Copilot features on GitHub.com.
   */
  platform_chat?: "enabled" | "disabled" | "unconfigured";

  /**
   * @description The organization policy for allowing or disallowing Copilot in the CLI.
   */
  cli?: "enabled" | "disabled" | "unconfigured";

  /**
   * @description The mode of assigning new seats.
   */
  seat_management_setting:
    | "assign_all"
    | "assign_selected"
    | "disabled"
    | "unconfigured";

  /**
   * @description The Copilot plan of the organization, or the parent enterprise, when applicable.
   */
  plan_type?: "business" | "enterprise";
  [key: string]: any;
};
/**
 * @description A GitHub organization.
 */
type NullableOrganizationSimpleSchema = {
  /**
   * @example github
   */
  login: string;

  /**
   * @example 1
   */
  id: number;

  /**
   * @example MDEyOk9yZ2FuaXphdGlvbjE=
   */
  node_id: string;

  /**
   * @example https://api.github.com/orgs/github
   */
  url: string;

  /**
   * @example https://api.github.com/orgs/github/repos
   */
  repos_url: string;

  /**
   * @example https://api.github.com/orgs/github/events
   */
  events_url: string;

  /**
   * @example https://api.github.com/orgs/github/hooks
   */
  hooks_url: string;

  /**
   * @example https://api.github.com/orgs/github/issues
   */
  issues_url: string;

  /**
   * @example https://api.github.com/orgs/github/members{/member}
   */
  members_url: string;

  /**
   * @example https://api.github.com/orgs/github/public_members{/member}
   */
  public_members_url: string;

  /**
   * @example https://github.com/images/error/octocat_happy.gif
   */
  avatar_url: string;

  /**
   * @example A great organization
   */
  description: string | null;
} | null;
/**
 * @description Group of enterprise owners and/or members
 */
type EnterpriseTeamSchema = {
  id: number;
  name: string;
  description?: string;
  slug: string;
  url: string;

  /**
   * @example disabled | all
   */
  sync_to_organizations?: string;

  /**
   * @example disabled | all
   */
  organization_selection_type?: string;

  /**
   * @example 62ab9291-fae2-468e-974b-7e45096d5021
   */
  group_id?: string | null;

  /**
   * @example Justice League
   */
  group_name?: string | null;

  /**
   * @example https://github.com/enterprises/dc/teams/justice-league
   */
  html_url: string;
  members_url: string;
  created_at: string;
  updated_at: string;
};
/**
 * @description Information about a Copilot Business seat assignment for a user, team, or organization.
 */
type CopilotSeatDetailsSchema = {
  assignee?: NullableSimpleUserSchema;
  organization?: NullableOrganizationSimpleSchema;

  /**
   * @description The team through which the assignee is granted access to GitHub Copilot, if applicable.
   */
  assigning_team?: TeamSchema | EnterpriseTeamSchema | null;

  /**
   * @description The pending cancellation date for the seat, in `YYYY-MM-DD` format. This will be null unless the assignee's Copilot access has been canceled during the current billing cycle. If the seat has been cancelled, this corresponds to the start of the organization's next billing cycle.
   */
  pending_cancellation_date?: string | null;

  /**
   * @description Timestamp of user's last GitHub Copilot activity, in ISO 8601 format.
   */
  last_activity_at?: string | null;

  /**
   * @description Last editor that was used by the user for a GitHub Copilot completion.
   */
  last_activity_editor?: string | null;

  /**
   * @description Timestamp of the last time the user authenticated with GitHub Copilot, in ISO 8601 format.
   */
  last_authenticated_at?: string | null;

  /**
   * @description Timestamp of when the assignee was last granted access to GitHub Copilot, in ISO 8601 format.
   */
  created_at: string;

  /**
   * @description **Closing down notice:** This field is no longer relevant and is closing down. Use the `created_at` field to determine when the assignee was last granted access to GitHub Copilot. Timestamp of when the assignee's GitHub Copilot access was last updated, in ISO 8601 format.
   * @deprecated
   */
  updated_at?: string;

  /**
   * @description The Copilot plan of the organization, or the parent enterprise, when applicable.
   */
  plan_type?: "business" | "enterprise" | "unknown";
};
/**
 * @description Usage metrics for Copilot editor code completions in the IDE.
 */
type CopilotIdeCodeCompletionsSchema = {
  /**
   * @description Number of users who accepted at least one Copilot code suggestion, across all active editors. Includes both full and partial acceptances.
   */
  total_engaged_users?: number;

  /**
   * @description Code completion metrics for active languages.
   */
  languages?: {
    /**
     * @description Name of the language used for Copilot code completion suggestions.
     */
    name?: string;

    /**
     * @description Number of users who accepted at least one Copilot code completion suggestion for the given language. Includes both full and partial acceptances.
     */
    total_engaged_users?: number;
  }[];
  editors?: {
    /**
     * @description Name of the given editor.
     */
    name?: string;

    /**
     * @description Number of users who accepted at least one Copilot code completion suggestion for the given editor. Includes both full and partial acceptances.
     */
    total_engaged_users?: number;

    /**
     * @description List of model metrics for custom models and the default model.
     */
    models?: {
      /**
       * @description Name of the model used for Copilot code completion suggestions. If the default model is used will appear as 'default'.
       */
      name?: string;

      /**
       * @description Indicates whether a model is custom or default.
       */
      is_custom_model?: boolean;

      /**
       * @description The training date for the custom model.
       */
      custom_model_training_date?: string | null;

      /**
       * @description Number of users who accepted at least one Copilot code completion suggestion for the given editor, for the given language and model. Includes both full and partial acceptances.
       */
      total_engaged_users?: number;

      /**
       * @description Code completion metrics for active languages, for the given editor.
       */
      languages?: {
        /**
         * @description Name of the language used for Copilot code completion suggestions, for the given editor.
         */
        name?: string;

        /**
         * @description Number of users who accepted at least one Copilot code completion suggestion for the given editor, for the given language. Includes both full and partial acceptances.
         */
        total_engaged_users?: number;

        /**
         * @description The number of Copilot code suggestions generated for the given editor, for the given language.
         */
        total_code_suggestions?: number;

        /**
         * @description The number of Copilot code suggestions accepted for the given editor, for the given language. Includes both full and partial acceptances.
         */
        total_code_acceptances?: number;

        /**
         * @description The number of lines of code suggested by Copilot code completions for the given editor, for the given language.
         */
        total_code_lines_suggested?: number;

        /**
         * @description The number of lines of code accepted from Copilot code suggestions for the given editor, for the given language.
         */
        total_code_lines_accepted?: number;
      }[];
    }[];
    [key: string]: any;
  }[];
  [key: string]: any;
} | null;
/**
 * @description Usage metrics for Copilot Chat in the IDE.
 */
type CopilotIdeChatSchema = {
  /**
   * @description Total number of users who prompted Copilot Chat in the IDE.
   */
  total_engaged_users?: number;
  editors?: {
    /**
     * @description Name of the given editor.
     */
    name?: string;

    /**
     * @description The number of users who prompted Copilot Chat in the specified editor.
     */
    total_engaged_users?: number;

    /**
     * @description List of model metrics for custom models and the default model.
     */
    models?: {
      /**
       * @description Name of the model used for Copilot Chat. If the default model is used will appear as 'default'.
       */
      name?: string;

      /**
       * @description Indicates whether a model is custom or default.
       */
      is_custom_model?: boolean;

      /**
       * @description The training date for the custom model.
       */
      custom_model_training_date?: string | null;

      /**
       * @description The number of users who prompted Copilot Chat in the given editor and model.
       */
      total_engaged_users?: number;

      /**
       * @description The total number of chats initiated by users in the given editor and model.
       */
      total_chats?: number;

      /**
       * @description The number of times users accepted a code suggestion from Copilot Chat using the 'Insert Code' UI element, for the given editor.
       */
      total_chat_insertion_events?: number;

      /**
       * @description The number of times users copied a code suggestion from Copilot Chat using the keyboard, or the 'Copy' UI element, for the given editor.
       */
      total_chat_copy_events?: number;
    }[];
  }[];
  [key: string]: any;
} | null;
/**
 * @description Usage metrics for Copilot Chat in GitHub.com
 */
type CopilotDotcomChatSchema = {
  /**
   * @description Total number of users who prompted Copilot Chat on github.com at least once.
   */
  total_engaged_users?: number;

  /**
   * @description List of model metrics for a custom models and the default model.
   */
  models?: {
    /**
     * @description Name of the model used for Copilot Chat. If the default model is used will appear as 'default'.
     */
    name?: string;

    /**
     * @description Indicates whether a model is custom or default.
     */
    is_custom_model?: boolean;

    /**
     * @description The training date for the custom model (if applicable).
     */
    custom_model_training_date?: string | null;

    /**
     * @description Total number of users who prompted Copilot Chat on github.com at least once for each model.
     */
    total_engaged_users?: number;

    /**
     * @description Total number of chats initiated by users on github.com.
     */
    total_chats?: number;
  }[];
  [key: string]: any;
} | null;
/**
 * @description Usage metrics for Copilot for pull requests.
 */
type CopilotDotcomPullRequestsSchema = {
  /**
   * @description The number of users who used Copilot for Pull Requests on github.com to generate a pull request summary at least once.
   */
  total_engaged_users?: number;

  /**
   * @description Repositories in which users used Copilot for Pull Requests to generate pull request summaries
   */
  repositories?: {
    /**
     * @description Repository name
     */
    name?: string;

    /**
     * @description The number of users who generated pull request summaries using Copilot for Pull Requests in the given repository.
     */
    total_engaged_users?: number;

    /**
     * @description List of model metrics for custom models and the default model.
     */
    models?: {
      /**
       * @description Name of the model used for Copilot pull request summaries. If the default model is used will appear as 'default'.
       */
      name?: string;

      /**
       * @description Indicates whether a model is custom or default.
       */
      is_custom_model?: boolean;

      /**
       * @description The training date for the custom model.
       */
      custom_model_training_date?: string | null;

      /**
       * @description The number of pull request summaries generated using Copilot for Pull Requests in the given repository.
       */
      total_pr_summaries_created?: number;

      /**
       * @description The number of users who generated pull request summaries using Copilot for Pull Requests in the given repository and model.
       */
      total_engaged_users?: number;
    }[];
  }[];
  [key: string]: any;
} | null;
/**
 * @description Copilot usage metrics for a given day.
 */
type CopilotUsageMetricsDaySchema = {
  /**
   * @description The date for which the usage metrics are aggregated, in `YYYY-MM-DD` format.
   */
  date: string;

  /**
   * @description The total number of Copilot users with activity belonging to any Copilot feature, globally, for the given day. Includes passive activity such as receiving a code suggestion, as well as engagement activity such as accepting a code suggestion or prompting chat. Does not include authentication events. Is not limited to the individual features detailed on the endpoint.
   */
  total_active_users?: number;

  /**
   * @description The total number of Copilot users who engaged with any Copilot feature, for the given day. Examples include but are not limited to accepting a code suggestion, prompting Copilot chat, or triggering a PR Summary. Does not include authentication events. Is not limited to the individual features detailed on the endpoint.
   */
  total_engaged_users?: number;
  copilot_ide_code_completions?: CopilotIdeCodeCompletionsSchema;
  copilot_ide_chat?: CopilotIdeChatSchema;
  copilot_dotcom_chat?: CopilotDotcomChatSchema;
  copilot_dotcom_pull_requests?: CopilotDotcomPullRequestsSchema;
  [key: string]: any;
};
/**
 * @description Secrets for GitHub Dependabot for an organization.
 */
type OrganizationDependabotSecretSchema = {
  /**
   * @description The name of the secret.
   * @example SECRET_TOKEN
   */
  name: string;
  created_at: string;
  updated_at: string;

  /**
   * @description Visibility of a secret
   */
  visibility: "all" | "private" | "selected";

  /**
   * @example https://api.github.com/organizations/org/dependabot/secrets/my_secret/repositories
   */
  selected_repositories_url?: string;
};
/**
 * @description The public key used for setting Dependabot Secrets.
 */
type DependabotPublicKeySchema = {
  /**
   * @description The identifier for the key.
   * @example 1234567
   */
  key_id: string;

  /**
   * @description The Base64 encoded public key.
   * @example hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=
   */
  key: string;
};
/**
 * @description Minimal Repository
 */
type NullableMinimalRepositorySchema = {
  /**
   * @example 1296269
   */
  id: number;

  /**
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;

  /**
   * @example Hello-World
   */
  name: string;

  /**
   * @example octocat/Hello-World
   */
  full_name: string;
  owner: SimpleUserSchema;
  private: boolean;

  /**
   * @example https://github.com/octocat/Hello-World
   */
  html_url: string;

  /**
   * @example This your first repo!
   */
  description: string | null;
  fork: boolean;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World
   */
  url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contributors
   */
  contributors_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/deployments
   */
  deployments_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/downloads
   */
  downloads_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/events
   */
  events_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/forks
   */
  forks_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;
  git_url?: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/languages
   */
  languages_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/merges
   */
  merges_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;
  ssh_url?: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/stargazers
   */
  stargazers_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscribers
   */
  subscribers_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscription
   */
  subscription_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/tags
   */
  tags_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/teams
   */
  teams_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;
  clone_url?: string;
  mirror_url?: string | null;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/hooks
   */
  hooks_url: string;
  svn_url?: string;
  homepage?: string | null;
  language?: string | null;
  forks_count?: number;
  stargazers_count?: number;
  watchers_count?: number;

  /**
   * @description The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
   */
  size?: number;
  default_branch?: string;
  open_issues_count?: number;
  is_template?: boolean;
  topics?: string[];
  has_issues?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  has_pages?: boolean;
  has_downloads?: boolean;
  has_discussions?: boolean;
  archived?: boolean;
  disabled?: boolean;
  visibility?: string;

  /**
   * @example 2011-01-26T19:06:43Z
   */
  pushed_at?: string | null;

  /**
   * @example 2011-01-26T19:01:12Z
   */
  created_at?: string | null;

  /**
   * @example 2011-01-26T19:14:43Z
   */
  updated_at?: string | null;
  permissions?: {
    admin?: boolean;
    maintain?: boolean;
    push?: boolean;
    triage?: boolean;
    pull?: boolean;
  };

  /**
   * @example admin
   */
  role_name?: string;
  temp_clone_token?: string;
  delete_branch_on_merge?: boolean;
  subscribers_count?: number;
  network_count?: number;
  code_of_conduct?: CodeOfConductSchema;
  license?: {
    key?: string;
    name?: string;
    spdx_id?: string;
    url?: string;
    node_id?: string;
  } | null;
  forks?: number;
  open_issues?: number;
  watchers?: number;
  allow_forking?: boolean;
  web_commit_signoff_required?: boolean;
  security_and_analysis?: SecurityAndAnalysisSchema;

  /**
   * @description The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
   */
  custom_properties?: {
    [key: string]: any;
  };
} | null;
/**
 * @description A software package
 */
type PackageSchema = {
  /**
   * @description Unique identifier of the package.
   * @example 1
   */
  id: number;

  /**
   * @description The name of the package.
   * @example super-linter
   */
  name: string;

  /**
   * @example docker
   */
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";

  /**
   * @example https://api.github.com/orgs/github/packages/container/super-linter
   */
  url: string;

  /**
   * @example https://github.com/orgs/github/packages/container/package/super-linter
   */
  html_url: string;

  /**
   * @description The number of versions of the package.
   * @example 1
   */
  version_count: number;

  /**
   * @example private
   */
  visibility: "private" | "public";
  owner?: NullableSimpleUserSchema;
  repository?: NullableMinimalRepositorySchema;
  created_at: string;
  updated_at: string;
};
/**
 * @description Organization Invitation
 */
type OrganizationInvitationSchema = {
  id: number;
  login: string | null;
  email: string | null;
  role: string;
  created_at: string;
  failed_at?: string | null;
  failed_reason?: string | null;
  inviter: SimpleUserSchema;
  team_count: number;

  /**
   * @example "MDIyOk9yZ2FuaXphdGlvbkludml0YXRpb24x"
   */
  node_id: string;

  /**
   * @example "https://api.github.com/organizations/16/invitations/1/teams"
   */
  invitation_teams_url: string;

  /**
   * @example "member"
   */
  invitation_source?: string;
};
/**
 * @description Org Hook
 */
type OrgHookSchema = {
  /**
   * @example 1
   */
  id: number;

  /**
   * @example https://api.github.com/orgs/octocat/hooks/1
   */
  url: string;

  /**
   * @example https://api.github.com/orgs/octocat/hooks/1/pings
   */
  ping_url: string;

  /**
   * @example https://api.github.com/orgs/octocat/hooks/1/deliveries
   */
  deliveries_url?: string;

  /**
   * @example web
   */
  name: string;

  /**
 * @example [
  "push",
  "pull_request"
]
  */
  events: string[];

  /**
   * @example true
   */
  active: boolean;
  config: {
    /**
     * @example "http://example.com/2"
     */
    url?: string;

    /**
     * @example "0"
     */
    insecure_ssl?: string;

    /**
     * @example "form"
     */
    content_type?: string;

    /**
     * @example "********"
     */
    secret?: string;
  };

  /**
   * @example 2011-09-06T20:39:23Z
   */
  updated_at: string;

  /**
   * @example 2011-09-06T17:26:27Z
   */
  created_at: string;
  type: string;
};
/**
 * @description API Insights usage route stats for an actor
 */
type ApiInsightsRouteStatsSchema = {
  /**
   * @description The HTTP method
   */
  http_method?: string;

  /**
   * @description The API path's route template
   */
  api_route?: string;

  /**
   * @description The total number of requests within the queried time period
   */
  total_request_count?: number;

  /**
   * @description The total number of requests that were rate limited within the queried time period
   */
  rate_limited_request_count?: number;
  last_rate_limited_timestamp?: string | null;
  last_request_timestamp?: string;
}[];
/**
 * @description API Insights usage subject stats for an organization
 */
type ApiInsightsSubjectStatsSchema = {
  subject_type?: string;
  subject_name?: string;
  subject_id?: number;
  total_request_count?: number;
  rate_limited_request_count?: number;
  last_rate_limited_timestamp?: string | null;
  last_request_timestamp?: string;
}[];
/**
 * @description API Insights usage summary stats for an organization
 */
type ApiInsightsSummaryStatsSchema = {
  /**
   * @description The total number of requests within the queried time period
   */
  total_request_count?: number;

  /**
   * @description The total number of requests that were rate limited within the queried time period
   */
  rate_limited_request_count?: number;
};
/**
 * @description API Insights usage time stats for an organization
 */
type ApiInsightsTimeStatsSchema = {
  timestamp?: string;
  total_request_count?: number;
  rate_limited_request_count?: number;
}[];
/**
 * @description API Insights usage stats for a user
 */
type ApiInsightsUserStatsSchema = {
  actor_type?: string;
  actor_name?: string;
  actor_id?: number;
  integration_id?: number | null;
  oauth_application_id?: number | null;
  total_request_count?: number;
  rate_limited_request_count?: number;
  last_rate_limited_timestamp?: string | null;
  last_request_timestamp?: string;
}[];
/**
 * @description The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.
 * @example collaborators_only
 */
type InteractionGroupSchema =
  | "existing_users"
  | "contributors_only"
  | "collaborators_only";
/**
 * @description Interaction limit settings.
 */
type InteractionLimitResponseSchema = {
  limit: InteractionGroupSchema;

  /**
   * @example repository
   */
  origin: string;

  /**
   * @example 2018-08-17T04:18:39Z
   */
  expires_at: string;
};
/**
 * @description The duration of the interaction restriction. Default: `one_day`.
 * @example one_month
 */
type OrgMembershipSchema = {
  /**
   * @example https://api.github.com/orgs/octocat/memberships/defunkt
   */
  url: string;

  /**
   * @description The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
   * @example active
   */
  state: "active" | "pending";

  /**
   * @description The user's membership type in the organization.
   * @example admin
   */
  role: "admin" | "member" | "billing_manager";

  /**
   * @description Whether the user has direct membership in the organization.
   * @example true
   */
  direct_membership?: boolean;

  /**
 * @description The slugs of the enterprise teams providing the user with indirect membership in the organization.
 * A limit of 100 enterprise team slugs is returned.
 * @example [
  "ent:team-one",
  "ent:team-two"
]
  */
  enterprise_teams_providing_indirect_membership?: string[];

  /**
   * @example https://api.github.com/orgs/octocat
   */
  organization_url: string;
  organization: OrganizationSimpleSchema;
  user: NullableSimpleUserSchema;
  permissions?: {
    can_create_repository: boolean;
  };
};
/**
 * @description A migration.
 */
type MigrationSchema = {
  /**
   * @example 79
   */
  id: number;
  owner: NullableSimpleUserSchema;

  /**
   * @example 0b989ba4-242f-11e5-81e1-c7b6966d2516
   */
  guid: string;

  /**
   * @example pending
   */
  state: string;

  /**
   * @example true
   */
  lock_repositories: boolean;
  exclude_metadata: boolean;
  exclude_git_data: boolean;
  exclude_attachments: boolean;
  exclude_releases: boolean;
  exclude_owner_projects: boolean;
  org_metadata_only: boolean;

  /**
   * @description The repositories included in the migration. Only returned for export migrations.
   */
  repositories: RepositorySchema[];

  /**
   * @example https://api.github.com/orgs/octo-org/migrations/79
   */
  url: string;

  /**
   * @example 2015-07-06T15:33:38-07:00
   */
  created_at: string;

  /**
   * @example 2015-07-06T15:33:38-07:00
   */
  updated_at: string;
  node_id: string;
  archive_url?: string;

  /**
   * @description Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `"repositories"`.
   */
  exclude?: string[];
};
/**
 * @description Organization roles
 */
type OrganizationRoleSchema = {
  /**
   * @description The unique identifier of the role.
   */
  id: number;

  /**
   * @description The name of the role.
   */
  name: string;

  /**
   * @description A short description about who this role is for or what permissions it grants.
   */
  description?: string | null;

  /**
   * @description The system role from which this role inherits permissions.
   */
  base_role?: "read" | "triage" | "write" | "maintain" | "admin" | null;

  /**
   * @description Source answers the question, "where did this role come from?"
   */
  source?: "Organization" | "Enterprise" | "Predefined" | null;

  /**
   * @description A list of permissions included in this role.
   */
  permissions: string[];
  organization: NullableSimpleUserSchema;

  /**
   * @description The date and time the role was created.
   */
  created_at: string;

  /**
   * @description The date and time the role was last updated.
   */
  updated_at: string;
};
/**
 * @description The Relationship a Team has with a role.
 */
type TeamRoleAssignmentSchema = {
  /**
   * @description Determines if the team has a direct, indirect, or mixed relationship to a role
   * @example direct
   */
  assignment?: "direct" | "indirect" | "mixed";
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string | null;
  privacy?: string;
  notification_setting?: string;
  permission: string;
  permissions?: {
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
    admin: boolean;
  };
  url: string;

  /**
   * @example https://github.com/orgs/rails/teams/core
   */
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: NullableTeamSimpleSchema;
};
/**
 * @description Groups of organization members that gives permissions on specified repositories.
 */
type TeamSimpleSchema = {
  /**
   * @description Unique identifier of the team
   * @example 1
   */
  id: number;

  /**
   * @example MDQ6VGVhbTE=
   */
  node_id: string;

  /**
   * @description URL for the team
   * @example https://api.github.com/organizations/1/team/1
   */
  url: string;

  /**
   * @example https://api.github.com/organizations/1/team/1/members{/member}
   */
  members_url: string;

  /**
   * @description Name of the team
   * @example Justice League
   */
  name: string;

  /**
   * @description Description of the team
   * @example A great team.
   */
  description: string | null;

  /**
   * @description Permission that the team will have for its repositories
   * @example admin
   */
  permission: string;

  /**
   * @description The level of privacy this team should have
   * @example closed
   */
  privacy?: string;

  /**
   * @description The notification setting the team has set
   * @example notifications_enabled
   */
  notification_setting?: string;

  /**
   * @example https://github.com/orgs/rails/teams/core
   */
  html_url: string;

  /**
   * @example https://api.github.com/organizations/1/team/1/repos
   */
  repositories_url: string;

  /**
   * @example justice-league
   */
  slug: string;

  /**
   * @description Distinguished Name (DN) that team maps to within LDAP environment
   * @example uid=example,ou=users,dc=github,dc=com
   */
  ldap_dn?: string;
};
/**
 * @description The Relationship a User has with a role.
 */
type UserRoleAssignmentSchema = {
  /**
   * @description Determines if the user has a direct, indirect, or mixed relationship to a role
   * @example direct
   */
  assignment?: "direct" | "indirect" | "mixed";

  /**
   * @description Team the user has gotten the role through
   */
  inherited_from?: TeamSimpleSchema[];
  name?: string | null;
  email?: string | null;

  /**
   * @example octocat
   */
  login: string;

  /**
   * @example 1
   */
  id: number;

  /**
   * @example MDQ6VXNlcjE=
   */
  node_id: string;

  /**
   * @example https://github.com/images/error/octocat_happy.gif
   */
  avatar_url: string;

  /**
   * @example 41d064eb2195891e12d0413f63227ea7
   */
  gravatar_id: string | null;

  /**
   * @example https://api.github.com/users/octocat
   */
  url: string;

  /**
   * @example https://github.com/octocat
   */
  html_url: string;

  /**
   * @example https://api.github.com/users/octocat/followers
   */
  followers_url: string;

  /**
   * @example https://api.github.com/users/octocat/following{/other_user}
   */
  following_url: string;

  /**
   * @example https://api.github.com/users/octocat/gists{/gist_id}
   */
  gists_url: string;

  /**
   * @example https://api.github.com/users/octocat/starred{/owner}{/repo}
   */
  starred_url: string;

  /**
   * @example https://api.github.com/users/octocat/subscriptions
   */
  subscriptions_url: string;

  /**
   * @example https://api.github.com/users/octocat/orgs
   */
  organizations_url: string;

  /**
   * @example https://api.github.com/users/octocat/repos
   */
  repos_url: string;

  /**
   * @example https://api.github.com/users/octocat/events{/privacy}
   */
  events_url: string;

  /**
   * @example https://api.github.com/users/octocat/received_events
   */
  received_events_url: string;

  /**
   * @example User
   */
  type: string;
  site_admin: boolean;

  /**
   * @example "2020-07-09T00:17:55Z"
   */
  starred_at?: string;

  /**
   * @example public
   */
  user_view_type?: string;
};
/**
 * @description A version of a software package
 */
type PackageVersionSchema = {
  /**
   * @description Unique identifier of the package version.
   * @example 1
   */
  id: number;

  /**
   * @description The name of the package version.
   * @example latest
   */
  name: string;

  /**
   * @example https://api.github.com/orgs/github/packages/container/super-linter/versions/786068
   */
  url: string;

  /**
   * @example https://github.com/orgs/github/packages/container/package/super-linter
   */
  package_html_url: string;

  /**
   * @example https://github.com/orgs/github/packages/container/super-linter/786068
   */
  html_url?: string;

  /**
   * @example MIT
   */
  license?: string;
  description?: string;

  /**
   * @example 2011-04-10T20:09:31Z
   */
  created_at: string;

  /**
   * @example 2014-03-03T18:58:10Z
   */
  updated_at: string;

  /**
   * @example 2014-03-03T18:58:10Z
   */
  deleted_at?: string;
  metadata?: {
    /**
     * @example docker
     */
    package_type:
      | "npm"
      | "maven"
      | "rubygems"
      | "docker"
      | "nuget"
      | "container";
    container?: {
      tags: string[];
    };
    docker?: {
      tag?: string[];
    };
  };
};
/**
 * @description Minimal representation of an organization programmatic access grant request for enumerations
 */
type OrganizationProgrammaticAccessGrantRequestSchema = {
  /**
   * @description Unique identifier of the request for access via fine-grained personal access token. The `pat_request_id` used to review PAT requests.
   */
  id: number;

  /**
   * @description Reason for requesting access.
   */
  reason: string | null;
  owner: SimpleUserSchema;

  /**
   * @description Type of repository selection requested.
   */
  repository_selection: "none" | "all" | "subset";

  /**
   * @description URL to the list of repositories requested to be accessed via fine-grained personal access token. Should only be followed when `repository_selection` is `subset`.
   */
  repositories_url: string;

  /**
   * @description Permissions requested, categorized by type of permission.
   */
  permissions: {
    organization?: {
      [key: string]: string;
    };
    repository?: {
      [key: string]: string;
    };
    other?: {
      [key: string]: string;
    };
  };

  /**
   * @description Date and time when the request for access was created.
   */
  created_at: string;

  /**
   * @description Unique identifier of the user's token. This field can also be found in audit log events and the organization's settings for their PAT grants.
   */
  token_id: number;

  /**
   * @description The name given to the user's token. This field can also be found in an organization's settings page for Active Tokens.
   */
  token_name: string;

  /**
   * @description Whether the associated fine-grained personal access token has expired.
   */
  token_expired: boolean;

  /**
   * @description Date and time when the associated fine-grained personal access token expires.
   */
  token_expires_at: string | null;

  /**
   * @description Date and time when the associated fine-grained personal access token was last used for authentication.
   */
  token_last_used_at: string | null;
};
/**
 * @description Minimal representation of an organization programmatic access grant for enumerations
 */
type OrganizationProgrammaticAccessGrantSchema = {
  /**
   * @description Unique identifier of the fine-grained personal access token grant. The `pat_id` used to get details about an approved fine-grained personal access token.
   */
  id: number;
  owner: SimpleUserSchema;

  /**
   * @description Type of repository selection requested.
   */
  repository_selection: "none" | "all" | "subset";

  /**
   * @description URL to the list of repositories the fine-grained personal access token can access. Only follow when `repository_selection` is `subset`.
   */
  repositories_url: string;

  /**
   * @description Permissions requested, categorized by type of permission.
   */
  permissions: {
    organization?: {
      [key: string]: string;
    };
    repository?: {
      [key: string]: string;
    };
    other?: {
      [key: string]: string;
    };
  };

  /**
   * @description Date and time when the fine-grained personal access token was approved to access the organization.
   */
  access_granted_at: string;

  /**
   * @description Unique identifier of the user's token. This field can also be found in audit log events and the organization's settings for their PAT grants.
   */
  token_id: number;

  /**
   * @description The name given to the user's token. This field can also be found in an organization's settings page for Active Tokens.
   */
  token_name: string;

  /**
   * @description Whether the associated fine-grained personal access token has expired.
   */
  token_expired: boolean;

  /**
   * @description Date and time when the associated fine-grained personal access token expires.
   */
  token_expires_at: string | null;

  /**
   * @description Date and time when the associated fine-grained personal access token was last used for authentication.
   */
  token_last_used_at: string | null;
};
/**
 * @description Private registry configuration for an organization
 */
type OrgPrivateRegistryConfigurationSchema = {
  /**
   * @description The name of the private registry configuration.
   * @example MAVEN_REPOSITORY_SECRET
   */
  name: string;

  /**
   * @description The registry type.
   */
  registry_type:
    | "maven_repository"
    | "nuget_feed"
    | "goproxy_server"
    | "npm_registry"
    | "rubygems_server"
    | "cargo_registry"
    | "composer_repository"
    | "docker_registry"
    | "git_source"
    | "helm_registry"
    | "hex_organization"
    | "hex_repository"
    | "pub_repository"
    | "python_index"
    | "terraform_registry";

  /**
   * @description The username to use when authenticating with the private registry.
   * @example monalisa
   */
  username?: string | null;

  /**
   * @description Which type of organization repositories have access to the private registry.
   */
  visibility: "all" | "private" | "selected";
  created_at: string;
  updated_at: string;
};
/**
 * @description Private registry configuration for an organization
 */
type ProjectSchema = {
  /**
   * @example https://api.github.com/repos/api-playground/projects-test
   */
  owner_url: string;

  /**
   * @example https://api.github.com/projects/1002604
   */
  url: string;

  /**
   * @example https://github.com/api-playground/projects-test/projects/12
   */
  html_url: string;

  /**
   * @example https://api.github.com/projects/1002604/columns
   */
  columns_url: string;

  /**
   * @example 1002604
   */
  id: number;

  /**
   * @example MDc6UHJvamVjdDEwMDI2MDQ=
   */
  node_id: string;

  /**
   * @description Name of the project
   * @example Week One Sprint
   */
  name: string;

  /**
   * @description Body of the project
   * @example This project represents the sprint of the first week in January
   */
  body: string | null;

  /**
   * @example 1
   */
  number: number;

  /**
   * @description State of the project; either 'open' or 'closed'
   * @example open
   */
  state: string;
  creator: NullableSimpleUserSchema;

  /**
   * @example 2011-04-10T20:09:31Z
   */
  created_at: string;

  /**
   * @example 2014-03-03T18:58:10Z
   */
  updated_at: string;

  /**
   * @description The baseline permission that all organization members have on this project. Only present if owner is an organization.
   */
  organization_permission?: "read" | "write" | "admin" | "none";

  /**
   * @description Whether or not this project can be seen by everyone. Only present if owner is an organization.
   */
  private?: boolean;
};
/**
 * @description An status update belonging to a project
 */
type NullableProjectsV2StatusUpdateSchema = {
  /**
   * @description The unique identifier of the status update.
   */
  id: number;

  /**
   * @description The node ID of the status update.
   */
  node_id: string;

  /**
   * @description The node ID of the project that this status update belongs to.
   */
  project_node_id?: string;
  creator?: SimpleUserSchema;

  /**
   * @description The time when the status update was created.
   * @example 2022-04-28T12:00:00Z
   */
  created_at: string;

  /**
   * @description The time when the status update was last updated.
   * @example 2022-04-28T12:00:00Z
   */
  updated_at: string;

  /**
   * @description The current status.
   */
  status?:
    | "INACTIVE"
    | "ON_TRACK"
    | "AT_RISK"
    | "OFF_TRACK"
    | "COMPLETE"
    | null;

  /**
   * @description The start date of the period covered by the update.
   * @example 2022-04-28
   */
  start_date?: string;

  /**
   * @description The target date associated with the update.
   * @example 2022-04-28
   */
  target_date?: string;

  /**
   * @description Body of the status update
   * @example The project is off to a great start!
   */
  body?: string | null;
} | null;
/**
 * @description A projects v2 project
 */
type ProjectsV2Schema = {
  /**
   * @description The unique identifier of the project.
   */
  id: number;

  /**
   * @description The node ID of the project.
   */
  node_id: string;
  owner: SimpleUserSchema;
  creator: SimpleUserSchema;

  /**
   * @description The project title.
   */
  title: string;

  /**
   * @description A short description of the project.
   */
  description: string | null;

  /**
   * @description Whether the project is visible to anyone with access to the owner.
   */
  public: boolean;

  /**
   * @description The time when the project was closed.
   * @example 2022-04-28T12:00:00Z
   */
  closed_at: string | null;

  /**
   * @description The time when the project was created.
   * @example 2022-04-28T12:00:00Z
   */
  created_at: string;

  /**
   * @description The time when the project was last updated.
   * @example 2022-04-28T12:00:00Z
   */
  updated_at: string;

  /**
   * @description The project number.
   */
  number: number;

  /**
   * @description A concise summary of the project.
   */
  short_description: string | null;

  /**
   * @description The time when the project was deleted.
   * @example 2022-04-28T12:00:00Z
   */
  deleted_at: string | null;
  deleted_by: NullableSimpleUserSchema;

  /**
   * @description The current state of the project.
   */
  state?: "open" | "closed";
  latest_status_update?: NullableProjectsV2StatusUpdateSchema;

  /**
   * @description Whether this project is a template
   */
  is_template?: boolean;
};
/**
 * @description An option for a single select field
 */
type ProjectsV2SingleSelectOptionsSchema = {
  /**
   * @description The unique identifier of the option.
   */
  id: string;

  /**
   * @description The display name of the option, in raw text and HTML formats.
   */
  name: {
    raw: string;
    html: string;
  };

  /**
   * @description The description of the option, in raw text and HTML formats.
   */
  description: {
    raw: string;
    html: string;
  };

  /**
   * @description The color associated with the option.
   */
  color: string;
};
/**
 * @description An iteration setting for an iteration field
 */
type ProjectsV2IterationSettingsSchema = {
  /**
   * @description The unique identifier of the iteration setting.
   */
  id: string;

  /**
   * @description The start date of the iteration.
   */
  start_date: string;

  /**
   * @description The duration of the iteration in days.
   */
  duration: number;

  /**
   * @description The iteration title, in raw text and HTML formats.
   */
  title: {
    raw: string;
    html: string;
  };

  /**
   * @description Whether the iteration has been completed.
   */
  completed: boolean;
};
/**
 * @description A field inside a projects v2 project
 */
type ProjectsV2FieldSchema = {
  /**
   * @description The unique identifier of the field.
   */
  id: number;

  /**
   * @description The node ID of the field.
   */
  node_id?: string;

  /**
   * @description The API URL of the project that contains the field.
   * @example https://api.github.com/projects/1
   */
  project_url: string;

  /**
   * @description The name of the field.
   */
  name: string;

  /**
   * @description The field's data type.
   */
  data_type:
    | "assignees"
    | "linked_pull_requests"
    | "reviewers"
    | "labels"
    | "milestone"
    | "repository"
    | "title"
    | "text"
    | "single_select"
    | "number"
    | "date"
    | "iteration"
    | "issue_type"
    | "parent_issue"
    | "sub_issues_progress";

  /**
   * @description The options available for single select fields.
   */
  options?: ProjectsV2SingleSelectOptionsSchema[];

  /**
   * @description Configuration for iteration fields.
   */
  configuration?: {
    /**
     * @description The day of the week when the iteration starts.
     */
    start_day?: number;

    /**
     * @description The duration of the iteration in days.
     */
    duration?: number;
    iterations?: ProjectsV2IterationSettingsSchema[];
  };

  /**
   * @description The time when the field was created.
   * @example 2022-04-28T12:00:00Z
   */
  created_at: string;

  /**
   * @description The time when the field was last updated.
   * @example 2022-04-28T12:00:00Z
   */
  updated_at: string;
};
/**
 * @description The type of content tracked in a project item
 */
type ProjectsV2ItemContentTypeSchema = "Issue" | "PullRequest" | "DraftIssue";
/**
 * @description An item belonging to a project
 */
type ProjectsV2ItemWithContentSchema = {
  /**
   * @description The unique identifier of the project item.
   */
  id: number;

  /**
   * @description The node ID of the project item.
   */
  node_id?: string;

  /**
   * @description The API URL of the project that contains this item.
   * @example https://api.github.com/users/monalisa/2/projectsV2/3
   */
  project_url?: string;
  content_type: ProjectsV2ItemContentTypeSchema;

  /**
   * @description The content of the item, which varies by content type.
   */
  content?: {
    [key: string]: any;
  } | null;
  creator?: SimpleUserSchema;

  /**
   * @description The time when the item was created.
   * @example 2022-04-28T12:00:00Z
   */
  created_at: string;

  /**
   * @description The time when the item was last updated.
   * @example 2022-04-28T12:00:00Z
   */
  updated_at: string;

  /**
   * @description The time when the item was archived.
   * @example 2022-04-28T12:00:00Z
   */
  archived_at: string | null;

  /**
   * @description The API URL of this item.
   * @example https://api.github.com/users/monalisa/2/projectsV2/items/3
   */
  item_url?: string | null;

  /**
   * @description The fields and values associated with this item.
   */
  fields?: {
    [key: string]: any;
  }[];
};
/**
 * @description Hypermedia Link
 */
type LinkSchema = {
  href: string;
};
/**
 * @description The status of auto merging a pull request.
 */
type AutoMergeSchema = {
  enabled_by: SimpleUserSchema;

  /**
   * @description The merge method to use.
   */
  merge_method: "merge" | "squash" | "rebase";

  /**
   * @description Title for the merge commit message.
   */
  commit_title: string;

  /**
   * @description Commit message for the merge commit.
   */
  commit_message: string;
} | null;
/**
 * @description Pull Request Simple
 */
type PullRequestSimpleSchema = {
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347
   */
  url: string;

  /**
   * @example 1
   */
  id: number;

  /**
   * @example MDExOlB1bGxSZXF1ZXN0MQ==
   */
  node_id: string;

  /**
   * @example https://github.com/octocat/Hello-World/pull/1347
   */
  html_url: string;

  /**
   * @example https://github.com/octocat/Hello-World/pull/1347.diff
   */
  diff_url: string;

  /**
   * @example https://github.com/octocat/Hello-World/pull/1347.patch
   */
  patch_url: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347
   */
  issue_url: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits
   */
  commits_url: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments
   */
  review_comments_url: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}
   */
  review_comment_url: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347/comments
   */
  comments_url: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  statuses_url: string;

  /**
   * @example 1347
   */
  number: number;

  /**
   * @example open
   */
  state: string;

  /**
   * @example true
   */
  locked: boolean;

  /**
   * @example new-feature
   */
  title: string;
  user: NullableSimpleUserSchema;

  /**
   * @example Please pull these awesome changes
   */
  body: string | null;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  milestone: NullableMilestoneSchema;

  /**
   * @example too heated
   */
  active_lock_reason?: string | null;

  /**
   * @example 2011-01-26T19:01:12Z
   */
  created_at: string;

  /**
   * @example 2011-01-26T19:01:12Z
   */
  updated_at: string;

  /**
   * @example 2011-01-26T19:01:12Z
   */
  closed_at: string | null;

  /**
   * @example 2011-01-26T19:01:12Z
   */
  merged_at: string | null;

  /**
   * @example e5bd3914e2e596debea16f433f57875b5b90bcd6
   */
  merge_commit_sha: string | null;
  assignee: NullableSimpleUserSchema;
  assignees?: SimpleUserSchema[] | null;
  requested_reviewers?: SimpleUserSchema[] | null;
  requested_teams?: TeamSchema[] | null;
  head: {
    label: string;
    ref: string;
    repo: RepositorySchema;
    sha: string;
    user: NullableSimpleUserSchema;
  };
  base: {
    label: string;
    ref: string;
    repo: RepositorySchema;
    sha: string;
    user: NullableSimpleUserSchema;
  };
  _links: {
    comments: LinkSchema;
    commits: LinkSchema;
    statuses: LinkSchema;
    html: LinkSchema;
    issue: LinkSchema;
    review_comments: LinkSchema;
    review_comment: LinkSchema;
    self: LinkSchema;
  };
  author_association: AuthorAssociationSchema;
  auto_merge: AutoMergeSchema;

  /**
   * @description Indicates whether or not the pull request is a draft.
   */
  draft?: boolean;
};
/**
 * @description A draft issue in a project
 */
type CustomPropertySchema = {
  /**
   * @description The name of the property
   */
  property_name: string;

  /**
   * @description The URL that can be used to fetch, update, or delete info about this property via the API.
   */
  url?: string;

  /**
   * @description The source type of the property
   * @example organization
   */
  source_type?: "organization" | "enterprise";

  /**
   * @description The type of the value for the property
   * @example single_select
   */
  value_type: "string" | "single_select" | "multi_select" | "true_false";

  /**
   * @description Whether the property is required.
   */
  required?: boolean;

  /**
   * @description Default value of the property
   */
  default_value?: string | string[] | null;

  /**
   * @description Short description of the property
   */
  description?: string | null;

  /**
   * @description An ordered list of the allowed values of the property.
   * The property can have up to 200 allowed values.
   */
  allowed_values?: string[] | null;

  /**
   * @description Who can edit the values of the property
   * @example org_actors
   */
  values_editable_by?: "org_actors" | "org_and_repo_actors" | null;
};
/**
 * @description Custom property set payload
 */
type CustomPropertyValueSchema = {
  /**
   * @description The name of the property
   */
  property_name: string;

  /**
   * @description The value assigned to the property
   */
  value: string | string[] | null;
};
/**
 * @description List of custom property values for a repository
 */
type OrgRepoCustomPropertyValuesSchema = {
  /**
   * @example 1296269
   */
  repository_id: number;

  /**
   * @example Hello-World
   */
  repository_name: string;

  /**
   * @example octocat/Hello-World
   */
  repository_full_name: string;

  /**
   * @description List of custom property names and associated values
   */
  properties: CustomPropertyValueSchema[];
};
/**
 * @description A repository on GitHub.
 */
type NullableRepositorySchema = {
  /**
   * @description Unique identifier of the repository
   * @example 42
   */
  id: number;

  /**
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;

  /**
   * @description The name of the repository.
   * @example Team Environment
   */
  name: string;

  /**
   * @example octocat/Hello-World
   */
  full_name: string;
  license: NullableLicenseSimpleSchema;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
  };
  owner: SimpleUserSchema;

  /**
   * @description Whether the repository is private or public.
   * @default false
   */
  private: boolean;

  /**
   * @example https://github.com/octocat/Hello-World
   */
  html_url: string;

  /**
   * @example This your first repo!
   */
  description: string | null;
  fork: boolean;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World
   */
  url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contributors
   */
  contributors_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/deployments
   */
  deployments_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/downloads
   */
  downloads_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/events
   */
  events_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/forks
   */
  forks_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;

  /**
   * @example git:github.com/octocat/Hello-World.git
   */
  git_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/languages
   */
  languages_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/merges
   */
  merges_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;

  /**
   * @example git@github.com:octocat/Hello-World.git
   */
  ssh_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/stargazers
   */
  stargazers_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscribers
   */
  subscribers_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscription
   */
  subscription_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/tags
   */
  tags_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/teams
   */
  teams_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;

  /**
   * @example https://github.com/octocat/Hello-World.git
   */
  clone_url: string;

  /**
   * @example git:git.example.com/octocat/Hello-World
   */
  mirror_url: string | null;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/hooks
   */
  hooks_url: string;

  /**
   * @example https://svn.github.com/octocat/Hello-World
   */
  svn_url: string;

  /**
   * @example https://github.com
   */
  homepage: string | null;
  language: string | null;

  /**
   * @example 9
   */
  forks_count: number;

  /**
   * @example 80
   */
  stargazers_count: number;

  /**
   * @example 80
   */
  watchers_count: number;

  /**
   * @description The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
   * @example 108
   */
  size: number;

  /**
   * @description The default branch of the repository.
   * @example master
   */
  default_branch: string;
  open_issues_count: number;

  /**
   * @description Whether this repository acts as a template that can be used to generate new repositories.
   * @example true
   * @default false
   */
  is_template?: boolean;
  topics?: string[];

  /**
   * @description Whether issues are enabled.
   * @example true
   * @default true
   */
  has_issues: boolean;

  /**
   * @description Whether projects are enabled.
   * @example true
   * @default true
   */
  has_projects: boolean;

  /**
   * @description Whether the wiki is enabled.
   * @example true
   * @default true
   */
  has_wiki: boolean;
  has_pages: boolean;

  /**
   * @description Whether downloads are enabled.
   * @deprecated
   * @example true
   * @default true
   */
  has_downloads: boolean;

  /**
   * @description Whether discussions are enabled.
   * @example true
   * @default false
   */
  has_discussions?: boolean;

  /**
   * @description Whether the repository is archived.
   * @default false
   */
  archived: boolean;

  /**
   * @description Returns whether or not this repository disabled.
   */
  disabled: boolean;

  /**
   * @description The repository visibility: public, private, or internal.
   * @default "public"
   */
  visibility?: string;

  /**
   * @example 2011-01-26T19:06:43Z
   */
  pushed_at: string | null;

  /**
   * @example 2011-01-26T19:01:12Z
   */
  created_at: string | null;

  /**
   * @example 2011-01-26T19:14:43Z
   */
  updated_at: string | null;

  /**
   * @description Whether to allow rebase merges for pull requests.
   * @example true
   * @default true
   */
  allow_rebase_merge?: boolean;
  temp_clone_token?: string;

  /**
   * @description Whether to allow squash merges for pull requests.
   * @example true
   * @default true
   */
  allow_squash_merge?: boolean;

  /**
   * @description Whether to allow Auto-merge to be used on pull requests.
   * @default false
   */
  allow_auto_merge?: boolean;

  /**
   * @description Whether to delete head branches when pull requests are merged
   * @default false
   */
  delete_branch_on_merge?: boolean;

  /**
   * @description Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   * @default false
   */
  allow_update_branch?: boolean;

  /**
   * @description Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @deprecated
   * @default false
   */
  use_squash_pr_title_as_default?: boolean;

  /**
   * @description The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";

  /**
   * @description The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";

  /**
   * @description The default value for a merge commit title.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";

  /**
   * @description The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";

  /**
   * @description Whether to allow merge commits for pull requests.
   * @example true
   * @default true
   */
  allow_merge_commit?: boolean;

  /**
   * @description Whether to allow forking this repo
   */
  allow_forking?: boolean;

  /**
   * @description Whether to require contributors to sign off on web-based commits
   * @default false
   */
  web_commit_signoff_required?: boolean;
  open_issues: number;
  watchers: number;
  master_branch?: string;

  /**
   * @example "2020-07-09T00:17:42Z"
   */
  starred_at?: string;

  /**
   * @description Whether anonymous git access is enabled for this repository
   */
  anonymous_access_enabled?: boolean;

  /**
   * @description The status of the code search index for this repository
   */
  code_search_index_status?: {
    lexical_search_ok?: boolean;
    lexical_commit_sha?: string;
  };
} | null;
/**
 * @description Code of Conduct Simple
 */
type CodeOfConductSimpleSchema = {
  /**
   * @example https://api.github.com/repos/github/docs/community/code_of_conduct
   */
  url: string;

  /**
   * @example citizen_code_of_conduct
   */
  key: string;

  /**
   * @example Citizen Code of Conduct
   */
  name: string;

  /**
   * @example https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md
   */
  html_url: string | null;
};
/**
 * @description Full Repository
 */
type FullRepositorySchema = {
  /**
   * @example 1296269
   */
  id: number;

  /**
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;

  /**
   * @example Hello-World
   */
  name: string;

  /**
   * @example octocat/Hello-World
   */
  full_name: string;
  owner: SimpleUserSchema;
  private: boolean;

  /**
   * @example https://github.com/octocat/Hello-World
   */
  html_url: string;

  /**
   * @example This your first repo!
   */
  description: string | null;
  fork: boolean;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World
   */
  url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contributors
   */
  contributors_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/deployments
   */
  deployments_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/downloads
   */
  downloads_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/events
   */
  events_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/forks
   */
  forks_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;

  /**
   * @example git:github.com/octocat/Hello-World.git
   */
  git_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/languages
   */
  languages_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/merges
   */
  merges_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;

  /**
   * @example git@github.com:octocat/Hello-World.git
   */
  ssh_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/stargazers
   */
  stargazers_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscribers
   */
  subscribers_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscription
   */
  subscription_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/tags
   */
  tags_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/teams
   */
  teams_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;

  /**
   * @example https://github.com/octocat/Hello-World.git
   */
  clone_url: string;

  /**
   * @example git:git.example.com/octocat/Hello-World
   */
  mirror_url: string | null;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/hooks
   */
  hooks_url: string;

  /**
   * @example https://svn.github.com/octocat/Hello-World
   */
  svn_url: string;

  /**
   * @example https://github.com
   */
  homepage: string | null;
  language: string | null;

  /**
   * @example 9
   */
  forks_count: number;

  /**
   * @example 80
   */
  stargazers_count: number;

  /**
   * @example 80
   */
  watchers_count: number;

  /**
   * @description The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
   * @example 108
   */
  size: number;

  /**
   * @example master
   */
  default_branch: string;
  open_issues_count: number;

  /**
   * @example true
   */
  is_template?: boolean;

  /**
 * @example [
  "octocat",
  "atom",
  "electron",
  "API"
]
  */
  topics?: string[];

  /**
   * @example true
   */
  has_issues: boolean;

  /**
   * @example true
   */
  has_projects: boolean;

  /**
   * @example true
   */
  has_wiki: boolean;
  has_pages: boolean;

  /**
   * @example true
   */
  has_downloads?: boolean;

  /**
   * @example true
   */
  has_discussions: boolean;
  archived: boolean;

  /**
   * @description Returns whether or not this repository disabled.
   */
  disabled: boolean;

  /**
   * @description The repository visibility: public, private, or internal.
   * @example public
   */
  visibility?: string;

  /**
   * @example 2011-01-26T19:06:43Z
   */
  pushed_at: string;

  /**
   * @example 2011-01-26T19:01:12Z
   */
  created_at: string;

  /**
   * @example 2011-01-26T19:14:43Z
   */
  updated_at: string;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    push: boolean;
    triage?: boolean;
    pull: boolean;
  };

  /**
   * @example true
   */
  allow_rebase_merge?: boolean;
  template_repository?: NullableRepositorySchema;
  temp_clone_token?: string | null;

  /**
   * @example true
   */
  allow_squash_merge?: boolean;
  allow_auto_merge?: boolean;
  delete_branch_on_merge?: boolean;

  /**
   * @example true
   */
  allow_merge_commit?: boolean;

  /**
   * @example true
   */
  allow_update_branch?: boolean;
  use_squash_pr_title_as_default?: boolean;

  /**
   * @description The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   * @example PR_TITLE
   */
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";

  /**
   * @description The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   * @example PR_BODY
   */
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";

  /**
   * @description The default value for a merge commit title.
   *
   *   - `PR_TITLE` - default to the pull request's title.
   *   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   * @example PR_TITLE
   */
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";

  /**
   * @description The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   * @example PR_BODY
   */
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";

  /**
   * @example true
   */
  allow_forking?: boolean;
  web_commit_signoff_required?: boolean;

  /**
   * @example 42
   */
  subscribers_count: number;
  network_count: number;
  license: NullableLicenseSimpleSchema;
  organization?: NullableSimpleUserSchema;
  parent?: RepositorySchema;
  source?: RepositorySchema;
  forks: number;
  master_branch?: string;
  open_issues: number;
  watchers: number;

  /**
   * @description Whether anonymous git access is allowed.
   * @default true
   */
  anonymous_access_enabled?: boolean;
  code_of_conduct?: CodeOfConductSimpleSchema;
  security_and_analysis?: SecurityAndAnalysisSchema;

  /**
   * @description The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
   */
  custom_properties?: {
    [key: string]: any;
  };
};
/**
 * @description The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
 */
type RepositoryRuleEnforcementSchema = "disabled" | "active" | "evaluate";
/**
 * @description An actor that can bypass rules in a ruleset
 */
type RepositoryRulesetBypassActorSchema = {
  /**
   * @description The ID of the actor that can bypass a ruleset. Required for `Integration`, `RepositoryRole`, and `Team` actor types. If `actor_type` is `OrganizationAdmin`, this should be `1`. If `actor_type` is `DeployKey`, this should be null. `OrganizationAdmin` is not applicable for personal repositories.
   */
  actor_id?: number | null;

  /**
   * @description The type of actor that can bypass a ruleset.
   */
  actor_type:
    | "Integration"
    | "OrganizationAdmin"
    | "RepositoryRole"
    | "Team"
    | "DeployKey";

  /**
   * @description When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests. `pull_request` is not applicable for the `DeployKey` actor type. Also, `pull_request` is only applicable to branch rulesets. When `bypass_mode` is `exempt`, rules will not be run for that actor and a bypass audit entry will not be created.
   * @default "always"
   */
  bypass_mode?: "always" | "pull_request" | "exempt";
};
/**
 * @description Parameters for a repository ruleset ref name condition
 */
type RepositoryRulesetConditionsSchema = {
  ref_name?: {
    /**
     * @description Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
     */
    include?: string[];

    /**
     * @description Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
     */
    exclude?: string[];
  };
};
/**
 * @description Parameters for a repository name condition
 */
type RepositoryRulesetConditionsRepositoryNameTargetSchema = {
  repository_name: {
    /**
     * @description Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
     */
    include?: string[];

    /**
     * @description Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
     */
    exclude?: string[];

    /**
     * @description Whether renaming of target repositories is prevented.
     */
    protected?: boolean;
  };
};
/**
 * @description Parameters for a repository ID condition
 */
type RepositoryRulesetConditionsRepositoryIdTargetSchema = {
  repository_id: {
    /**
     * @description The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass.
     */
    repository_ids?: number[];
  };
};
/**
 * @description Parameters for a targeting a repository property
 */
type RepositoryRulesetConditionsRepositoryPropertySpecSchema = {
  /**
   * @description The name of the repository property to target
   */
  name: string;

  /**
   * @description The values to match for the repository property
   */
  property_values: string[];

  /**
   * @description The source of the repository property. Defaults to 'custom' if not specified.
   */
  source?: "custom" | "system";
};
/**
 * @description Parameters for a repository property condition
 */
type RepositoryRulesetConditionsRepositoryPropertyTargetSchema = {
  repository_property: {
    /**
     * @description The repository properties and values to include. All of these properties must match for the condition to pass.
     */
    include?: RepositoryRulesetConditionsRepositoryPropertySpecSchema[];

    /**
     * @description The repository properties and values to exclude. The condition will not pass if any of these properties match.
     */
    exclude?: RepositoryRulesetConditionsRepositoryPropertySpecSchema[];
  };
};
/**
 * @description Conditions for an organization ruleset.
 * The branch and tag rulesets conditions object should contain both `repository_name` and `ref_name` properties, or both `repository_id` and `ref_name` properties, or both `repository_property` and `ref_name` properties.
 * The push rulesets conditions object does not require the `ref_name` property.
 * For repository policy rulesets, the conditions object should only contain the `repository_name`, the `repository_id`, or the `repository_property`.
 */
type OrgRulesetConditionsSchema =
  | (RepositoryRulesetConditionsSchema &
      RepositoryRulesetConditionsRepositoryNameTargetSchema)
  | (RepositoryRulesetConditionsSchema &
      RepositoryRulesetConditionsRepositoryIdTargetSchema)
  | (RepositoryRulesetConditionsSchema &
      RepositoryRulesetConditionsRepositoryPropertyTargetSchema);
/**
 * @description Only allow users with bypass permission to create matching refs.
 */
type RepositoryRuleCreationSchema = {
  type: "creation";
};
/**
 * @description Only allow users with bypass permission to update matching refs.
 */
type RepositoryRuleUpdateSchema = {
  type: "update";
  parameters?: {
    /**
     * @description Branch can pull changes from its upstream repository
     */
    update_allows_fetch_and_merge: boolean;
  };
};
/**
 * @description Only allow users with bypass permissions to delete matching refs.
 */
type RepositoryRuleDeletionSchema = {
  type: "deletion";
};
/**
 * @description Prevent merge commits from being pushed to matching refs.
 */
type RepositoryRuleRequiredLinearHistorySchema = {
  type: "required_linear_history";
};
/**
 * @description Merges must be performed via a merge queue.
 */
type RepositoryRuleMergeQueueSchema = {
  type: "merge_queue";
  parameters?: {
    /**
     * @description Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed
     */
    check_response_timeout_minutes: number;

    /**
     * @description When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge.
     */
    grouping_strategy: "ALLGREEN" | "HEADGREEN";

    /**
     * @description Limit the number of queued pull requests requesting checks and workflow runs at the same time.
     */
    max_entries_to_build: number;

    /**
     * @description The maximum number of PRs that will be merged together in a group.
     */
    max_entries_to_merge: number;

    /**
     * @description Method to use when merging changes from queued pull requests.
     */
    merge_method: "MERGE" | "SQUASH" | "REBASE";

    /**
     * @description The minimum number of PRs that will be merged together in a group.
     */
    min_entries_to_merge: number;

    /**
     * @description The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged.
     */
    min_entries_to_merge_wait_minutes: number;
  };
};
/**
 * @description Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
 */
type RepositoryRuleRequiredDeploymentsSchema = {
  type: "required_deployments";
  parameters?: {
    /**
     * @description The environments that must be successfully deployed to before branches can be merged.
     */
    required_deployment_environments: string[];
  };
};
/**
 * @description Commits pushed to matching refs must have verified signatures.
 */
type RepositoryRuleRequiredSignaturesSchema = {
  type: "required_signatures";
};
/**
 * @description A required reviewing team
 */
type RepositoryRulePullRequestSchema = {
  type: "pull_request";
  parameters?: {
    /**
     * @description Array of allowed merge methods. Allowed values include `merge`, `squash`, and `rebase`. At least one option must be enabled.
     */
    allowed_merge_methods?: ("merge" | "squash" | "rebase")[];

    /**
     * @description Request Copilot code review for new pull requests automatically if the author has access to Copilot code review.
     */
    automatic_copilot_code_review_enabled?: boolean;

    /**
     * @description New, reviewable commits pushed will dismiss previous pull request review approvals.
     */
    dismiss_stale_reviews_on_push: boolean;

    /**
     * @description Require an approving review in pull requests that modify files that have a designated code owner.
     */
    require_code_owner_review: boolean;

    /**
     * @description Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
     */
    require_last_push_approval: boolean;

    /**
     * @description The number of approving reviews that are required before a pull request can be merged.
     */
    required_approving_review_count: number;

    /**
     * @description All conversations on code must be resolved before a pull request can be merged.
     */
    required_review_thread_resolution: boolean;
  };
};
/**
 * @description Required status check
 */
type RepositoryRuleParamsStatusCheckConfigurationSchema = {
  /**
   * @description The status check context name that must be present on the commit.
   */
  context: string;

  /**
   * @description The optional integration ID that this status check must originate from.
   */
  integration_id?: number;
};
/**
 * @description Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.
 */
type RepositoryRuleRequiredStatusChecksSchema = {
  type: "required_status_checks";
  parameters?: {
    /**
     * @description Allow repositories and branches to be created if a check would otherwise prohibit it.
     */
    do_not_enforce_on_create?: boolean;

    /**
     * @description Status checks that are required.
     */
    required_status_checks: RepositoryRuleParamsStatusCheckConfigurationSchema[];

    /**
     * @description Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled.
     */
    strict_required_status_checks_policy: boolean;
  };
};
/**
 * @description Prevent users with push access from force pushing to refs.
 */
type RepositoryRuleNonFastForwardSchema = {
  type: "non_fast_forward";
};
/**
 * @description Parameters to be used for the commit_message_pattern rule
 */
type RepositoryRuleCommitMessagePatternSchema = {
  type: "commit_message_pattern";
  parameters?: {
    /**
     * @description How this rule will appear to users.
     */
    name?: string;

    /**
     * @description If true, the rule will fail if the pattern matches.
     */
    negate?: boolean;

    /**
     * @description The operator to use for matching.
     */
    operator: "starts_with" | "ends_with" | "contains" | "regex";

    /**
     * @description The pattern to match with.
     */
    pattern: string;
  };
};
/**
 * @description Parameters to be used for the commit_author_email_pattern rule
 */
type RepositoryRuleCommitAuthorEmailPatternSchema = {
  type: "commit_author_email_pattern";
  parameters?: {
    /**
     * @description How this rule will appear to users.
     */
    name?: string;

    /**
     * @description If true, the rule will fail if the pattern matches.
     */
    negate?: boolean;

    /**
     * @description The operator to use for matching.
     */
    operator: "starts_with" | "ends_with" | "contains" | "regex";

    /**
     * @description The pattern to match with.
     */
    pattern: string;
  };
};
/**
 * @description Parameters to be used for the committer_email_pattern rule
 */
type RepositoryRuleCommitterEmailPatternSchema = {
  type: "committer_email_pattern";
  parameters?: {
    /**
     * @description How this rule will appear to users.
     */
    name?: string;

    /**
     * @description If true, the rule will fail if the pattern matches.
     */
    negate?: boolean;

    /**
     * @description The operator to use for matching.
     */
    operator: "starts_with" | "ends_with" | "contains" | "regex";

    /**
     * @description The pattern to match with.
     */
    pattern: string;
  };
};
/**
 * @description Parameters to be used for the branch_name_pattern rule
 */
type RepositoryRuleBranchNamePatternSchema = {
  type: "branch_name_pattern";
  parameters?: {
    /**
     * @description How this rule will appear to users.
     */
    name?: string;

    /**
     * @description If true, the rule will fail if the pattern matches.
     */
    negate?: boolean;

    /**
     * @description The operator to use for matching.
     */
    operator: "starts_with" | "ends_with" | "contains" | "regex";

    /**
     * @description The pattern to match with.
     */
    pattern: string;
  };
};
/**
 * @description Parameters to be used for the tag_name_pattern rule
 */
type RepositoryRuleTagNamePatternSchema = {
  type: "tag_name_pattern";
  parameters?: {
    /**
     * @description How this rule will appear to users.
     */
    name?: string;

    /**
     * @description If true, the rule will fail if the pattern matches.
     */
    negate?: boolean;

    /**
     * @description The operator to use for matching.
     */
    operator: "starts_with" | "ends_with" | "contains" | "regex";

    /**
     * @description The pattern to match with.
     */
    pattern: string;
  };
};
/**
 * @description Prevent commits that include changes in specified file and folder paths from being pushed to the commit graph. This includes absolute paths that contain file names.
 */
type RepositoryRuleFilePathRestrictionSchema = {
  type: "file_path_restriction";
  parameters?: {
    /**
     * @description The file paths that are restricted from being pushed to the commit graph.
     */
    restricted_file_paths: string[];
  };
};
/**
 * @description Prevent commits that include file paths that exceed the specified character limit from being pushed to the commit graph.
 */
type RepositoryRuleMaxFilePathLengthSchema = {
  type: "max_file_path_length";
  parameters?: {
    /**
     * @description The maximum amount of characters allowed in file paths.
     */
    max_file_path_length: number;
  };
};
/**
 * @description Prevent commits that include files with specified file extensions from being pushed to the commit graph.
 */
type RepositoryRuleFileExtensionRestrictionSchema = {
  type: "file_extension_restriction";
  parameters?: {
    /**
     * @description The file extensions that are restricted from being pushed to the commit graph.
     */
    restricted_file_extensions: string[];
  };
};
/**
 * @description Prevent commits with individual files that exceed the specified limit from being pushed to the commit graph.
 */
type RepositoryRuleMaxFileSizeSchema = {
  type: "max_file_size";
  parameters?: {
    /**
     * @description The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS).
     */
    max_file_size: number;
  };
};
/**
 * @description Restricted commit
 */
type RepositoryRuleParamsWorkflowFileReferenceSchema = {
  /**
   * @description The path to the workflow file
   */
  path: string;

  /**
   * @description The ref (branch or tag) of the workflow file to use
   */
  ref?: string;

  /**
   * @description The ID of the repository where the workflow is defined
   */
  repository_id: number;

  /**
   * @description The commit SHA of the workflow file to use
   */
  sha?: string;
};
/**
 * @description Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
 */
type RepositoryRuleWorkflowsSchema = {
  type: "workflows";
  parameters?: {
    /**
     * @description Allow repositories and branches to be created if a check would otherwise prohibit it.
     */
    do_not_enforce_on_create?: boolean;

    /**
     * @description Workflows that must pass for this rule to pass.
     */
    workflows: RepositoryRuleParamsWorkflowFileReferenceSchema[];
  };
};
/**
 * @description A tool that must provide code scanning results for this rule to pass.
 */
type RepositoryRuleParamsCodeScanningToolSchema = {
  /**
   * @description The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see "[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)."
   */
  alerts_threshold: "none" | "errors" | "errors_and_warnings" | "all";

  /**
   * @description The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see "[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)."
   */
  security_alerts_threshold:
    | "none"
    | "critical"
    | "high_or_higher"
    | "medium_or_higher"
    | "all";

  /**
   * @description The name of a code scanning tool
   */
  tool: string;
};
/**
 * @description Choose which tools must provide code scanning results before the reference is updated. When configured, code scanning must be enabled and have results for both the commit and the reference being updated.
 */
type RepositoryRuleCodeScanningSchema = {
  type: "code_scanning";
  parameters?: {
    /**
     * @description Tools that must provide code scanning results for this rule to pass.
     */
    code_scanning_tools: RepositoryRuleParamsCodeScanningToolSchema[];
  };
};
/**
 * @description A repository rule.
 */
type RepositoryRuleSchema =
  | RepositoryRuleCreationSchema
  | RepositoryRuleUpdateSchema
  | RepositoryRuleDeletionSchema
  | RepositoryRuleRequiredLinearHistorySchema
  | RepositoryRuleMergeQueueSchema
  | RepositoryRuleRequiredDeploymentsSchema
  | RepositoryRuleRequiredSignaturesSchema
  | RepositoryRulePullRequestSchema
  | RepositoryRuleRequiredStatusChecksSchema
  | RepositoryRuleNonFastForwardSchema
  | RepositoryRuleCommitMessagePatternSchema
  | RepositoryRuleCommitAuthorEmailPatternSchema
  | RepositoryRuleCommitterEmailPatternSchema
  | RepositoryRuleBranchNamePatternSchema
  | RepositoryRuleTagNamePatternSchema
  | RepositoryRuleFilePathRestrictionSchema
  | RepositoryRuleMaxFilePathLengthSchema
  | RepositoryRuleFileExtensionRestrictionSchema
  | RepositoryRuleMaxFileSizeSchema
  | RepositoryRuleWorkflowsSchema
  | RepositoryRuleCodeScanningSchema;
/**
 * @description A set of rules to apply when specified conditions are met.
 */
type RepositoryRulesetSchema = {
  /**
   * @description The ID of the ruleset
   */
  id: number;

  /**
   * @description The name of the ruleset
   */
  name: string;

  /**
   * @description The target of the ruleset
   */
  target?: "branch" | "tag" | "push" | "repository";

  /**
   * @description The type of the source of the ruleset
   */
  source_type?: "Repository" | "Organization" | "Enterprise";

  /**
   * @description The name of the source
   */
  source: string;
  enforcement: RepositoryRuleEnforcementSchema;

  /**
   * @description The actors that can bypass the rules in this ruleset
   */
  bypass_actors?: RepositoryRulesetBypassActorSchema[];

  /**
   * @description The bypass type of the user making the API request for this ruleset. This field is only returned when
   * querying the repository-level endpoint.
   */
  current_user_can_bypass?:
    | "always"
    | "pull_requests_only"
    | "never"
    | "exempt";
  node_id?: string;
  _links?: {
    self?: {
      /**
       * @description The URL of the ruleset
       */
      href?: string;
    };
    html?: {
      /**
       * @description The html URL of the ruleset
       */
      href?: string;
    } | null;
  };
  conditions?:
    | RepositoryRulesetConditionsSchema
    | OrgRulesetConditionsSchema
    | null;
  rules?: RepositoryRuleSchema[];
  created_at?: string;
  updated_at?: string;
};
/**
 * @description A repository rule.
 */
type OrgRulesSchema =
  | RepositoryRuleCreationSchema
  | RepositoryRuleUpdateSchema
  | RepositoryRuleDeletionSchema
  | RepositoryRuleRequiredLinearHistorySchema
  | RepositoryRuleRequiredDeploymentsSchema
  | RepositoryRuleRequiredSignaturesSchema
  | RepositoryRulePullRequestSchema
  | RepositoryRuleRequiredStatusChecksSchema
  | RepositoryRuleNonFastForwardSchema
  | RepositoryRuleCommitMessagePatternSchema
  | RepositoryRuleCommitAuthorEmailPatternSchema
  | RepositoryRuleCommitterEmailPatternSchema
  | RepositoryRuleBranchNamePatternSchema
  | RepositoryRuleTagNamePatternSchema
  | RepositoryRuleFilePathRestrictionSchema
  | RepositoryRuleMaxFilePathLengthSchema
  | RepositoryRuleFileExtensionRestrictionSchema
  | RepositoryRuleMaxFileSizeSchema
  | RepositoryRuleWorkflowsSchema
  | RepositoryRuleCodeScanningSchema;
/**
 * @description Response
 */
type RuleSuitesSchema = {
  /**
   * @description The unique identifier of the rule insight.
   */
  id?: number;

  /**
   * @description The number that identifies the user.
   */
  actor_id?: number;

  /**
   * @description The handle for the GitHub user account.
   */
  actor_name?: string;

  /**
   * @description The first commit sha before the push evaluation.
   */
  before_sha?: string;

  /**
   * @description The last commit sha in the push evaluation.
   */
  after_sha?: string;

  /**
   * @description The ref name that the evaluation ran on.
   */
  ref?: string;

  /**
   * @description The ID of the repository associated with the rule evaluation.
   */
  repository_id?: number;

  /**
   * @description The name of the repository without the `.git` extension.
   */
  repository_name?: string;

  /**
   * @example 2011-01-26T19:06:43Z
   */
  pushed_at?: string;

  /**
   * @description The result of the rule evaluations for rules with the `active` enforcement status.
   */
  result?: "pass" | "fail" | "bypass";

  /**
   * @description The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`.
   */
  evaluation_result?: "pass" | "fail" | "bypass";
}[];
/**
 * @description Response
 */
type RuleSuiteSchema = {
  /**
   * @description The unique identifier of the rule insight.
   */
  id?: number;

  /**
   * @description The number that identifies the user.
   */
  actor_id?: number | null;

  /**
   * @description The handle for the GitHub user account.
   */
  actor_name?: string | null;

  /**
   * @description The previous commit SHA of the ref.
   */
  before_sha?: string;

  /**
   * @description The new commit SHA of the ref.
   */
  after_sha?: string;

  /**
   * @description The ref name that the evaluation ran on.
   */
  ref?: string;

  /**
   * @description The ID of the repository associated with the rule evaluation.
   */
  repository_id?: number;

  /**
   * @description The name of the repository without the `.git` extension.
   */
  repository_name?: string;

  /**
   * @example 2011-01-26T19:06:43Z
   */
  pushed_at?: string;

  /**
   * @description The result of the rule evaluations for rules with the `active` enforcement status.
   */
  result?: "pass" | "fail" | "bypass";

  /**
   * @description The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`. Null if no rules with `evaluate` enforcement status were run.
   */
  evaluation_result?: "pass" | "fail" | "bypass" | null;

  /**
   * @description Details on the evaluated rules.
   */
  rule_evaluations?: {
    rule_source?: {
      /**
       * @description The type of rule source.
       */
      type?: string;

      /**
       * @description The ID of the rule source.
       */
      id?: number | null;

      /**
       * @description The name of the rule source.
       */
      name?: string | null;
    };

    /**
     * @description The enforcement level of this rule source.
     */
    enforcement?: "active" | "evaluate" | "deleted ruleset";

    /**
     * @description The result of the evaluation of the individual rule.
     */
    result?: "pass" | "fail";

    /**
     * @description The type of rule.
     */
    rule_type?: string;

    /**
     * @description The detailed failure message for the rule. Null if the rule passed.
     */
    details?: string | null;
  }[];
};
/**
 * @description The historical version of a ruleset
 */
type RulesetVersionSchema = {
  /**
   * @description The ID of the previous version of the ruleset
   */
  version_id: number;

  /**
   * @description The actor who updated the ruleset
   */
  actor: {
    id?: number;
    type?: string;
  };
  updated_at: string;
};
type RulesetVersionWithStateSchema = RulesetVersionSchema & {
  /**
   * @description The state of the ruleset version
   */
  state: {};
};
/**
 * @description The version of the entity. This is used to confirm you're updating the current version of the entity and mitigate unintentionally overriding someone else's update.
 */
type SecretScanningRowVersionSchema = string | null;
type SecretScanningPatternOverrideSchema = {
  /**
   * @description The ID of the pattern.
   */
  token_type?: string;

  /**
   * @description The version of this pattern if it's a custom pattern.
   */
  custom_pattern_version?: string | null;

  /**
   * @description The slug of the pattern.
   */
  slug?: string;

  /**
   * @description The user-friendly name for the pattern.
   */
  display_name?: string;

  /**
   * @description The total number of alerts generated by this pattern.
   */
  alert_total?: number;

  /**
   * @description The percentage of all alerts that this pattern represents, rounded to the nearest integer.
   */
  alert_total_percentage?: number;

  /**
   * @description The number of false positive alerts generated by this pattern.
   */
  false_positives?: number;

  /**
   * @description The percentage of alerts from this pattern that are false positives, rounded to the nearest integer.
   */
  false_positive_rate?: number;

  /**
   * @description The percentage of blocks for this pattern that were bypassed, rounded to the nearest integer.
   */
  bypass_rate?: number;

  /**
   * @description The default push protection setting for this pattern.
   */
  default_setting?: "disabled" | "enabled";

  /**
   * @description The push protection setting for this pattern set at the enterprise level. Only present for partner patterns when the organization has a parent enterprise.
   */
  enterprise_setting?: "not-set" | "disabled" | "enabled" | null;

  /**
   * @description The current push protection setting for this pattern. If this is `not-set`, then it inherits either the enterprise setting if it exists or the default setting.
   */
  setting?: "not-set" | "disabled" | "enabled";
};
/**
 * @description A collection of secret scanning patterns and their settings related to push protection.
 */
type SecretScanningPatternConfigurationSchema = {
  pattern_config_version?: SecretScanningRowVersionSchema;

  /**
   * @description Overrides for partner patterns.
   */
  provider_pattern_overrides?: SecretScanningPatternOverrideSchema[];

  /**
   * @description Overrides for custom patterns defined by the organization.
   */
  custom_pattern_overrides?: SecretScanningPatternOverrideSchema[];
};
/**
 * @description A product affected by the vulnerability detailed in a repository security advisory.
 */
type RepositoryAdvisoryVulnerabilitySchema = {
  /**
   * @description The name of the package affected by the vulnerability.
   */
  package: {
    ecosystem: SecurityAdvisoryEcosystemsSchema;

    /**
     * @description The unique package name within its ecosystem.
     */
    name: string | null;
  } | null;

  /**
   * @description The range of the package versions affected by the vulnerability.
   */
  vulnerable_version_range: string | null;

  /**
   * @description The package version(s) that resolve the vulnerability.
   */
  patched_versions: string | null;

  /**
   * @description The functions in the package that are affected.
   */
  vulnerable_functions: string[] | null;
};
/**
 * @description A credit given to a user for a repository security advisory.
 */
type RepositoryAdvisoryCreditSchema = {
  user: SimpleUserSchema;
  type: SecurityAdvisoryCreditTypesSchema;

  /**
   * @description The state of the user's acceptance of the credit.
   */
  state: "accepted" | "declined" | "pending";
};
/**
 * @description A repository security advisory.
 */
type RepositoryAdvisorySchema = {
  /**
   * @description The GitHub Security Advisory ID.
   * @readonly
   */
  readonly ghsa_id: Readonly<string>;

  /**
   * @description The Common Vulnerabilities and Exposures (CVE) ID.
   */
  cve_id: string | null;

  /**
   * @description The API URL for the advisory.
   * @readonly
   */
  readonly url: Readonly<string>;

  /**
   * @description The URL for the advisory.
   * @readonly
   */
  readonly html_url: Readonly<string>;

  /**
   * @description A short summary of the advisory.
   */
  summary: string;

  /**
   * @description A detailed description of what the advisory entails.
   */
  description: string | null;

  /**
   * @description The severity of the advisory.
   */
  severity: "critical" | "high" | "medium" | "low" | null;

  /**
   * @description The author of the advisory.
   * @readonly
   */
  readonly author: SimpleUserSchema | null;

  /**
   * @description The publisher of the advisory.
   * @readonly
   */
  readonly publisher: SimpleUserSchema | null;

  /**
   * @readonly
   */
  readonly identifiers: Readonly<
    {
      /**
       * @description The type of identifier.
       */
      type: "CVE" | "GHSA";

      /**
       * @description The identifier value.
       */
      value: string;
    }[]
  >;

  /**
   * @description The state of the advisory.
   */
  state: "published" | "closed" | "withdrawn" | "draft" | "triage";

  /**
   * @description The date and time of when the advisory was created, in ISO 8601 format.
   * @readonly
   */
  readonly created_at: Readonly<string | null>;

  /**
   * @description The date and time of when the advisory was last updated, in ISO 8601 format.
   * @readonly
   */
  readonly updated_at: Readonly<string | null>;

  /**
   * @description The date and time of when the advisory was published, in ISO 8601 format.
   * @readonly
   */
  readonly published_at: Readonly<string | null>;

  /**
   * @description The date and time of when the advisory was closed, in ISO 8601 format.
   * @readonly
   */
  readonly closed_at: Readonly<string | null>;

  /**
   * @description The date and time of when the advisory was withdrawn, in ISO 8601 format.
   * @readonly
   */
  readonly withdrawn_at: Readonly<string | null>;

  /**
   * @readonly
   */
  readonly submission: {
    /**
     * @description Whether a private vulnerability report was accepted by the repository's administrators.
     * @readonly
     */
    readonly accepted: Readonly<boolean>;
  } | null;
  vulnerabilities: RepositoryAdvisoryVulnerabilitySchema[] | null;
  cvss: {
    /**
     * @description The CVSS vector.
     */
    vector_string: string | null;

    /**
     * @description The CVSS score.
     * @readonly
     */
    readonly score: Readonly<number | null>;
  } | null;
  cvss_severities?: CvssSeveritiesSchema;

  /**
   * @readonly
   */
  readonly cwes: Readonly<
    | {
        /**
         * @description The Common Weakness Enumeration (CWE) identifier.
         */
        cwe_id: string;

        /**
         * @description The name of the CWE.
         * @readonly
         */
        readonly name: Readonly<string>;
      }[]
    | null
  >;

  /**
   * @description A list of only the CWE IDs.
   */
  cwe_ids: string[] | null;
  credits:
    | {
        /**
         * @description The username of the user credited.
         */
        login?: string;
        type?: SecurityAdvisoryCreditTypesSchema;
      }[]
    | null;

  /**
   * @readonly
   */
  readonly credits_detailed: Readonly<RepositoryAdvisoryCreditSchema[] | null>;

  /**
   * @description A list of users that collaborate on the advisory.
   */
  collaborating_users: SimpleUserSchema[] | null;

  /**
   * @description A list of teams that collaborate on the advisory.
   */
  collaborating_teams: TeamSchema[] | null;

  /**
   * @description A temporary private fork of the advisory's repository for collaborating on a fix.
   * @readonly
   */
  readonly private_fork: SimpleRepositorySchema | null;
};
type ActionsBillingUsageSchema = {
  /**
   * @description The sum of the free and paid GitHub Actions minutes used.
   */
  total_minutes_used: number;

  /**
   * @description The total paid GitHub Actions minutes used.
   */
  total_paid_minutes_used: number;

  /**
   * @description The amount of free GitHub Actions minutes available.
   */
  included_minutes: number;
  minutes_used_breakdown: {
    /**
     * @description Total minutes used on Ubuntu runner machines.
     */
    UBUNTU?: number;

    /**
     * @description Total minutes used on macOS runner machines.
     */
    MACOS?: number;

    /**
     * @description Total minutes used on Windows runner machines.
     */
    WINDOWS?: number;

    /**
     * @description Total minutes used on Ubuntu 4 core runner machines.
     */
    ubuntu_4_core?: number;

    /**
     * @description Total minutes used on Ubuntu 8 core runner machines.
     */
    ubuntu_8_core?: number;

    /**
     * @description Total minutes used on Ubuntu 16 core runner machines.
     */
    ubuntu_16_core?: number;

    /**
     * @description Total minutes used on Ubuntu 32 core runner machines.
     */
    ubuntu_32_core?: number;

    /**
     * @description Total minutes used on Ubuntu 64 core runner machines.
     */
    ubuntu_64_core?: number;

    /**
     * @description Total minutes used on Windows 4 core runner machines.
     */
    windows_4_core?: number;

    /**
     * @description Total minutes used on Windows 8 core runner machines.
     */
    windows_8_core?: number;

    /**
     * @description Total minutes used on Windows 16 core runner machines.
     */
    windows_16_core?: number;

    /**
     * @description Total minutes used on Windows 32 core runner machines.
     */
    windows_32_core?: number;

    /**
     * @description Total minutes used on Windows 64 core runner machines.
     */
    windows_64_core?: number;

    /**
     * @description Total minutes used on macOS 12 core runner machines.
     */
    macos_12_core?: number;

    /**
     * @description Total minutes used on all runner machines.
     */
    total?: number;
  };
};
type PackagesBillingUsageSchema = {
  /**
   * @description Sum of the free and paid storage space (GB) for GitHuub Packages.
   */
  total_gigabytes_bandwidth_used: number;

  /**
   * @description Total paid storage space (GB) for GitHuub Packages.
   */
  total_paid_gigabytes_bandwidth_used: number;

  /**
   * @description Free storage space (GB) for GitHub Packages.
   */
  included_gigabytes_bandwidth: number;
};
type CombinedBillingUsageSchema = {
  /**
   * @description Numbers of days left in billing cycle.
   */
  days_left_in_billing_cycle: number;

  /**
   * @description Estimated storage space (GB) used in billing cycle.
   */
  estimated_paid_storage_for_month: number;

  /**
   * @description Estimated sum of free and paid storage space (GB) used in billing cycle.
   */
  estimated_storage_for_month: number;
};
/**
 * @description A hosted compute network configuration.
 */
type NetworkConfigurationSchema = {
  /**
   * @description The unique identifier of the network configuration.
   * @example 123ABC456DEF789
   */
  id: string;

  /**
   * @description The name of the network configuration.
   * @example my-network-configuration
   */
  name: string;

  /**
   * @description The hosted compute service the network configuration supports.
   */
  compute_service?: "none" | "actions" | "codespaces";

  /**
   * @description The unique identifier of each network settings in the configuration.
   * @example 123ABC456DEF789
   */
  network_settings_ids?: string[];

  /**
   * @description The time at which the network configuration was created, in ISO 8601 format.
   * @example 2024-04-26T11:31:07Z
   */
  created_on: string | null;
};
/**
 * @description A hosted compute network settings resource.
 */
type NetworkSettingsSchema = {
  /**
   * @description The unique identifier of the network settings resource.
   * @example 220F78DACB92BBFBC5E6F22DE1CCF52309D
   */
  id: string;

  /**
   * @description The identifier of the network configuration that is using this settings resource.
   * @example 934E208B3EE0BD60CF5F752C426BFB53562
   */
  network_configuration_id?: string;

  /**
   * @description The name of the network settings resource.
   * @example my-network-settings
   */
  name: string;

  /**
   * @description The subnet this network settings resource is configured for.
   * @example /subscriptions/14839728-3ad9-43ab-bd2b-fa6ad0f75e2a/resourceGroups/my-rg/providers/Microsoft.Network/virtualNetworks/my-vnet/subnets/my-subnet
   */
  subnet_id: string;

  /**
   * @description The location of the subnet this network settings resource is configured for.
   * @example eastus
   */
  region: string;
};
/**
 * @description Team Organization
 */
type TeamOrganizationSchema = {
  /**
   * @example github
   */
  login: string;

  /**
   * @example 1
   */
  id: number;

  /**
   * @example MDEyOk9yZ2FuaXphdGlvbjE=
   */
  node_id: string;

  /**
   * @example https://api.github.com/orgs/github
   */
  url: string;

  /**
   * @example https://api.github.com/orgs/github/repos
   */
  repos_url: string;

  /**
   * @example https://api.github.com/orgs/github/events
   */
  events_url: string;

  /**
   * @example https://api.github.com/orgs/github/hooks
   */
  hooks_url: string;

  /**
   * @example https://api.github.com/orgs/github/issues
   */
  issues_url: string;

  /**
   * @example https://api.github.com/orgs/github/members{/member}
   */
  members_url: string;

  /**
   * @example https://api.github.com/orgs/github/public_members{/member}
   */
  public_members_url: string;

  /**
   * @example https://github.com/images/error/octocat_happy.gif
   */
  avatar_url: string;

  /**
   * @example A great organization
   */
  description: string | null;

  /**
   * @example github
   */
  name?: string;

  /**
   * @example GitHub
   */
  company?: string;

  /**
   * @example https://github.com/blog
   */
  blog?: string;

  /**
   * @example San Francisco
   */
  location?: string;

  /**
   * @example octocat@github.com
   */
  email?: string;

  /**
   * @example github
   */
  twitter_username?: string | null;

  /**
   * @example true
   */
  is_verified?: boolean;

  /**
   * @example true
   */
  has_organization_projects: boolean;

  /**
   * @example true
   */
  has_repository_projects: boolean;

  /**
   * @example 2
   */
  public_repos: number;

  /**
   * @example 1
   */
  public_gists: number;

  /**
   * @example 20
   */
  followers: number;
  following: number;

  /**
   * @example https://github.com/octocat
   */
  html_url: string;

  /**
   * @example 2008-01-14T04:33:35Z
   */
  created_at: string;

  /**
   * @example Organization
   */
  type: string;

  /**
   * @example 100
   */
  total_private_repos?: number;

  /**
   * @example 100
   */
  owned_private_repos?: number;

  /**
   * @example 81
   */
  private_gists?: number | null;

  /**
   * @example 10000
   */
  disk_usage?: number | null;

  /**
   * @example 8
   */
  collaborators?: number | null;

  /**
   * @example org@example.com
   */
  billing_email?: string | null;
  plan?: {
    name: string;
    space: number;
    private_repos: number;
    filled_seats?: number;
    seats?: number;
  };
  default_repository_permission?: string | null;

  /**
   * @example true
   */
  members_can_create_repositories?: boolean | null;

  /**
   * @example true
   */
  two_factor_requirement_enabled?: boolean | null;

  /**
   * @example all
   */
  members_allowed_repository_creation_type?: string;

  /**
   * @example true
   */
  members_can_create_public_repositories?: boolean;

  /**
   * @example true
   */
  members_can_create_private_repositories?: boolean;

  /**
   * @example true
   */
  members_can_create_internal_repositories?: boolean;

  /**
   * @example true
   */
  members_can_create_pages?: boolean;

  /**
   * @example true
   */
  members_can_create_public_pages?: boolean;

  /**
   * @example true
   */
  members_can_create_private_pages?: boolean;
  members_can_fork_private_repositories?: boolean | null;
  web_commit_signoff_required?: boolean;
  updated_at: string;
  archived_at: string | null;
};
/**
 * @description Groups of organization members that gives permissions on specified repositories.
 */
type TeamFullSchema = {
  /**
   * @description Unique identifier of the team
   * @example 42
   */
  id: number;

  /**
   * @example MDQ6VGVhbTE=
   */
  node_id: string;

  /**
   * @description URL for the team
   * @example https://api.github.com/organizations/1/team/1
   */
  url: string;

  /**
   * @example https://github.com/orgs/rails/teams/core
   */
  html_url: string;

  /**
   * @description Name of the team
   * @example Developers
   */
  name: string;

  /**
   * @example justice-league
   */
  slug: string;

  /**
   * @example A great team.
   */
  description: string | null;

  /**
   * @description The level of privacy this team should have
   * @example closed
   */
  privacy?: "closed" | "secret";

  /**
   * @description The notification setting the team has set
   * @example notifications_enabled
   */
  notification_setting?: "notifications_enabled" | "notifications_disabled";

  /**
   * @description Permission that the team will have for its repositories
   * @example push
   */
  permission: string;

  /**
   * @example https://api.github.com/organizations/1/team/1/members{/member}
   */
  members_url: string;

  /**
   * @example https://api.github.com/organizations/1/team/1/repos
   */
  repositories_url: string;
  parent?: NullableTeamSimpleSchema;

  /**
   * @example 3
   */
  members_count: number;

  /**
   * @example 10
   */
  repos_count: number;

  /**
   * @example 2017-07-14T16:53:42Z
   */
  created_at: string;

  /**
   * @example 2017-08-17T12:37:15Z
   */
  updated_at: string;
  organization: TeamOrganizationSchema;

  /**
   * @description Distinguished Name (DN) that team maps to within LDAP environment
   * @example uid=example,ou=users,dc=github,dc=com
   */
  ldap_dn?: string;
};
/**
 * @description A team discussion is a persistent record of a free-form conversation within a team.
 */
type TeamDiscussionSchema = {
  author: NullableSimpleUserSchema;

  /**
   * @description The main text of the discussion.
   * @example Please suggest improvements to our workflow in comments.
   */
  body: string;

  /**
   * @example <p>Hi! This is an area for us to collaborate as a team</p>
   */
  body_html: string;

  /**
   * @description The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   * @example 0307116bbf7ced493b8d8a346c650b71
   */
  body_version: string;
  comments_count: number;

  /**
   * @example https://api.github.com/organizations/1/team/2343027/discussions/1/comments
   */
  comments_url: string;

  /**
   * @example 2018-01-25T18:56:31Z
   */
  created_at: string;
  last_edited_at: string | null;

  /**
   * @example https://github.com/orgs/github/teams/justice-league/discussions/1
   */
  html_url: string;

  /**
   * @example MDE0OlRlYW1EaXNjdXNzaW9uMQ==
   */
  node_id: string;

  /**
   * @description The unique sequence number of a team discussion.
   * @example 42
   */
  number: number;

  /**
   * @description Whether or not this discussion should be pinned for easy retrieval.
   * @example true
   */
  pinned: boolean;

  /**
   * @description Whether or not this discussion should be restricted to team members and organization owners.
   * @example true
   */
  private: boolean;

  /**
   * @example https://api.github.com/organizations/1/team/2343027
   */
  team_url: string;

  /**
   * @description The title of the discussion.
   * @example How can we improve our workflow?
   */
  title: string;

  /**
   * @example 2018-01-25T18:56:31Z
   */
  updated_at: string;

  /**
   * @example https://api.github.com/organizations/1/team/2343027/discussions/1
   */
  url: string;
  reactions?: ReactionRollupSchema;
};
/**
 * @description A reply to a discussion within a team.
 */
type TeamDiscussionCommentSchema = {
  author: NullableSimpleUserSchema;

  /**
   * @description The main text of the comment.
   * @example I agree with this suggestion.
   */
  body: string;

  /**
   * @example <p>Do you like apples?</p>
   */
  body_html: string;

  /**
   * @description The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   * @example 0307116bbf7ced493b8d8a346c650b71
   */
  body_version: string;

  /**
   * @example 2018-01-15T23:53:58Z
   */
  created_at: string;
  last_edited_at: string | null;

  /**
   * @example https://api.github.com/organizations/1/team/2403582/discussions/1
   */
  discussion_url: string;

  /**
   * @example https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1
   */
  html_url: string;

  /**
   * @example MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=
   */
  node_id: string;

  /**
   * @description The unique sequence number of a team discussion comment.
   * @example 42
   */
  number: number;

  /**
   * @example 2018-01-15T23:53:58Z
   */
  updated_at: string;

  /**
   * @example https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1
   */
  url: string;
  reactions?: ReactionRollupSchema;
};
/**
 * @description Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
type ReactionSchema = {
  /**
   * @example 1
   */
  id: number;

  /**
   * @example MDg6UmVhY3Rpb24x
   */
  node_id: string;
  user: NullableSimpleUserSchema;

  /**
   * @description The reaction to use
   * @example heart
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";

  /**
   * @example 2016-05-20T20:09:31Z
   */
  created_at: string;
};
/**
 * @description Team Membership
 */
type TeamMembershipSchema = {
  url: string;

  /**
   * @description The role of the user in the team.
   * @example member
   * @default "member"
   */
  role: "member" | "maintainer";

  /**
   * @description The state of the user's membership in the team.
   */
  state: "active" | "pending";
};
/**
 * @description A team's access to a project.
 */
type TeamProjectSchema = {
  owner_url: string;
  url: string;
  html_url: string;
  columns_url: string;
  id: number;
  node_id: string;
  name: string;
  body: string | null;
  number: number;
  state: string;
  creator: SimpleUserSchema;
  created_at: string;
  updated_at: string;

  /**
   * @description The organization permission for this project. Only present when owner is an organization.
   */
  organization_permission?: string;

  /**
   * @description Whether the project is private or not. Only present when owner is an organization.
   */
  private?: boolean;
  permissions: {
    read: boolean;
    write: boolean;
    admin: boolean;
  };
};
/**
 * @description A team's access to a repository.
 */
type TeamRepositorySchema = {
  /**
   * @description Unique identifier of the repository
   * @example 42
   */
  id: number;

  /**
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;

  /**
   * @description The name of the repository.
   * @example Team Environment
   */
  name: string;

  /**
   * @example octocat/Hello-World
   */
  full_name: string;
  license: NullableLicenseSimpleSchema;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
  };

  /**
   * @example admin
   */
  role_name?: string;
  owner: NullableSimpleUserSchema;

  /**
   * @description Whether the repository is private or public.
   * @default false
   */
  private: boolean;

  /**
   * @example https://github.com/octocat/Hello-World
   */
  html_url: string;

  /**
   * @example This your first repo!
   */
  description: string | null;
  fork: boolean;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World
   */
  url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
   */
  archive_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/assignees{/user}
   */
  assignees_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
   */
  blobs_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/branches{/branch}
   */
  branches_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
   */
  collaborators_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/comments{/number}
   */
  comments_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/commits{/sha}
   */
  commits_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
   */
  compare_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contents/{+path}
   */
  contents_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/contributors
   */
  contributors_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/deployments
   */
  deployments_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/downloads
   */
  downloads_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/events
   */
  events_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/forks
   */
  forks_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
   */
  git_commits_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
   */
  git_refs_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
   */
  git_tags_url: string;

  /**
   * @example git:github.com/octocat/Hello-World.git
   */
  git_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
   */
  issue_comment_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
   */
  issue_events_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/issues{/number}
   */
  issues_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
   */
  keys_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/labels{/name}
   */
  labels_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/languages
   */
  languages_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/merges
   */
  merges_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/milestones{/number}
   */
  milestones_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
   */
  notifications_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/pulls{/number}
   */
  pulls_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/releases{/id}
   */
  releases_url: string;

  /**
   * @example git@github.com:octocat/Hello-World.git
   */
  ssh_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/stargazers
   */
  stargazers_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
   */
  statuses_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscribers
   */
  subscribers_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/subscription
   */
  subscription_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/tags
   */
  tags_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/teams
   */
  teams_url: string;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
   */
  trees_url: string;

  /**
   * @example https://github.com/octocat/Hello-World.git
   */
  clone_url: string;

  /**
   * @example git:git.example.com/octocat/Hello-World
   */
  mirror_url: string | null;

  /**
   * @example http://api.github.com/repos/octocat/Hello-World/hooks
   */
  hooks_url: string;

  /**
   * @example https://svn.github.com/octocat/Hello-World
   */
  svn_url: string;

  /**
   * @example https://github.com
   */
  homepage: string | null;
  language: string | null;

  /**
   * @example 9
   */
  forks_count: number;

  /**
   * @example 80
   */
  stargazers_count: number;

  /**
   * @example 80
   */
  watchers_count: number;

  /**
   * @example 108
   */
  size: number;

  /**
   * @description The default branch of the repository.
   * @example master
   */
  default_branch: string;
  open_issues_count: number;

  /**
   * @description Whether this repository acts as a template that can be used to generate new repositories.
   * @example true
   * @default false
   */
  is_template?: boolean;
  topics?: string[];

  /**
   * @description Whether issues are enabled.
   * @example true
   * @default true
   */
  has_issues: boolean;

  /**
   * @description Whether projects are enabled.
   * @example true
   * @default true
   */
  has_projects: boolean;

  /**
   * @description Whether the wiki is enabled.
   * @example true
   * @default true
   */
  has_wiki: boolean;
  has_pages: boolean;

  /**
   * @description Whether downloads are enabled.
   * @example true
   * @default true
   */
  has_downloads: boolean;

  /**
   * @description Whether the repository is archived.
   * @default false
   */
  archived: boolean;

  /**
   * @description Returns whether or not this repository disabled.
   */
  disabled: boolean;

  /**
   * @description The repository visibility: public, private, or internal.
   * @default "public"
   */
  visibility?: string;

  /**
   * @example 2011-01-26T19:06:43Z
   */
  pushed_at: string | null;

  /**
   * @example 2011-01-26T19:01:12Z
   */
  created_at: string | null;

  /**
   * @example 2011-01-26T19:14:43Z
   */
  updated_at: string | null;

  /**
   * @description Whether to allow rebase merges for pull requests.
   * @example true
   * @default true
   */
  allow_rebase_merge?: boolean;
  temp_clone_token?: string;

  /**
   * @description Whether to allow squash merges for pull requests.
   * @example true
   * @default true
   */
  allow_squash_merge?: boolean;

  /**
   * @description Whether to allow Auto-merge to be used on pull requests.
   * @default false
   */
  allow_auto_merge?: boolean;

  /**
   * @description Whether to delete head branches when pull requests are merged
   * @default false
   */
  delete_branch_on_merge?: boolean;

  /**
   * @description Whether to allow merge commits for pull requests.
   * @example true
   * @default true
   */
  allow_merge_commit?: boolean;

  /**
   * @description Whether to allow forking this repo
   * @default false
   */
  allow_forking?: boolean;

  /**
   * @description Whether to require contributors to sign off on web-based commits
   * @default false
   */
  web_commit_signoff_required?: boolean;
  subscribers_count?: number;
  network_count?: number;
  open_issues: number;
  watchers: number;
  master_branch?: string;
};
/**
 * @description Project columns contain cards of work.
 */
type ProjectColumnSchema = {
  /**
   * @example https://api.github.com/projects/columns/367
   */
  url: string;

  /**
   * @example https://api.github.com/projects/120
   */
  project_url: string;

  /**
   * @example https://api.github.com/projects/columns/367/cards
   */
  cards_url: string;

  /**
   * @description The unique identifier of the project column
   * @example 42
   */
  id: number;

  /**
   * @example MDEzOlByb2plY3RDb2x1bW4zNjc=
   */
  node_id: string;

  /**
   * @description Name of the project column
   * @example Remaining tasks
   */
  name: string;

  /**
   * @example 2016-09-05T14:18:44Z
   */
  created_at: string;

  /**
   * @example 2016-09-05T14:22:28Z
   */
  updated_at: string;
};
/**
 * @description Project Collaborator Permission
 */
type ProjectCollaboratorPermissionSchema = {
  permission: string;
  user: NullableSimpleUserSchema;
};
type RateLimitSchema = {
  limit: number;
  remaining: number;
  reset: number;
  used: number;
};
/**
 * @description Rate Limit Overview
 */
type RateLimitOverviewSchema = {
  resources: {
    core: RateLimitSchema;
    graphql?: RateLimitSchema;
    search: RateLimitSchema;
    code_search?: RateLimitSchema;
    source_import?: RateLimitSchema;
    integration_manifest?: RateLimitSchema;
    code_scanning_upload?: RateLimitSchema;
    actions_runner_registration?: RateLimitSchema;
    scim?: RateLimitSchema;
    dependency_snapshots?: RateLimitSchema;
    dependency_sbom?: RateLimitSchema;
    code_scanning_autofix?: RateLimitSchema;
  };
  rate: RateLimitSchema;
};
/**
 * @description An artifact
 */
type ArtifactSchema = {
  /**
   * @example 5
   */
  id: number;

  /**
   * @example MDEwOkNoZWNrU3VpdGU1
   */
  node_id: string;

  /**
   * @description The name of the artifact.
   * @example AdventureWorks.Framework
   */
  name: string;

  /**
   * @description The size in bytes of the artifact.
   * @example 12345
   */
  size_in_bytes: number;

  /**
   * @example https://api.github.com/repos/github/hello-world/actions/artifacts/5
   */
  url: string;

  /**
   * @example https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip
   */
  archive_download_url: string;

  /**
   * @description Whether or not the artifact has expired.
   */
  expired: boolean;
  created_at: string | null;
  expires_at: string | null;
  updated_at: string | null;

  /**
   * @description The SHA256 digest of the artifact. This field will only be populated on artifacts uploaded with upload-artifact v4 or newer. For older versions, this field will be null.
   * @example sha256:cfc3236bdad15b5898bca8408945c9e19e1917da8704adc20eaa618444290a8c
   */
  digest?: string | null;
  workflow_run?: {
    /**
     * @example 10
     */
    id?: number;

    /**
     * @example 42
     */
    repository_id?: number;

    /**
     * @example 42
     */
    head_repository_id?: number;

    /**
     * @example main
     */
    head_branch?: string;

    /**
     * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
     */
    head_sha?: string;
  } | null;
};
/**
 * @description Repository actions caches
 */
type ActionsCacheListSchema = {
  /**
   * @description Total number of caches
   * @example 2
   */
  total_count: number;

  /**
   * @description Array of caches
   */
  actions_caches: {
    /**
     * @example 2
     */
    id?: number;

    /**
     * @example refs/heads/main
     */
    ref?: string;

    /**
     * @example Linux-node-958aff96db2d75d67787d1e634ae70b659de937b
     */
    key?: string;

    /**
     * @example 73885106f58cc52a7df9ec4d4a5622a5614813162cb516c759a30af6bf56e6f0
     */
    version?: string;

    /**
     * @example 2019-01-24T22:45:36.000Z
     */
    last_accessed_at?: string;

    /**
     * @example 2019-01-24T22:45:36.000Z
     */
    created_at?: string;

    /**
     * @example 1024
     */
    size_in_bytes?: number;
  }[];
};
/**
 * @description Information of a job execution in a workflow run
 */
type JobSchema = {
  /**
   * @description The id of the job.
   * @example 21
   */
  id: number;

  /**
   * @description The id of the associated workflow run.
   * @example 5
   */
  run_id: number;

  /**
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5
   */
  run_url: string;

  /**
   * @description Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.
   * @example 1
   */
  run_attempt?: number;

  /**
   * @example MDg6Q2hlY2tSdW40
   */
  node_id: string;

  /**
   * @description The SHA of the commit that is being run.
   * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
   */
  head_sha: string;

  /**
   * @example https://api.github.com/repos/github/hello-world/actions/jobs/21
   */
  url: string;

  /**
   * @example https://github.com/github/hello-world/runs/4
   */
  html_url: string | null;

  /**
   * @description The phase of the lifecycle that the job is currently in.
   * @example queued
   */
  status:
    | "queued"
    | "in_progress"
    | "completed"
    | "waiting"
    | "requested"
    | "pending";

  /**
   * @description The outcome of the job.
   * @example success
   */
  conclusion:
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required"
    | null;

  /**
   * @description The time that the job created, in ISO 8601 format.
   * @example 2019-08-08T08:00:00-07:00
   */
  created_at: string;

  /**
   * @description The time that the job started, in ISO 8601 format.
   * @example 2019-08-08T08:00:00-07:00
   */
  started_at: string;

  /**
   * @description The time that the job finished, in ISO 8601 format.
   * @example 2019-08-08T08:00:00-07:00
   */
  completed_at: string | null;

  /**
   * @description The name of the job.
   * @example test-coverage
   */
  name: string;

  /**
   * @description Steps in this job.
   */
  steps?: {
    /**
     * @description The phase of the lifecycle that the job is currently in.
     * @example queued
     */
    status: "queued" | "in_progress" | "completed";

    /**
     * @description The outcome of the job.
     * @example success
     */
    conclusion: string | null;

    /**
     * @description The name of the job.
     * @example test-coverage
     */
    name: string;

    /**
     * @example 1
     */
    number: number;

    /**
     * @description The time that the step started, in ISO 8601 format.
     * @example 2019-08-08T08:00:00-07:00
     */
    started_at?: string | null;

    /**
     * @description The time that the job finished, in ISO 8601 format.
     * @example 2019-08-08T08:00:00-07:00
     */
    completed_at?: string | null;
  }[];

  /**
   * @example https://api.github.com/repos/github/hello-world/check-runs/4
   */
  check_run_url: string;

  /**
 * @description Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file.
 * @example [
  "self-hosted",
  "foo",
  "bar"
]
  */
  labels: string[];

  /**
   * @description The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   * @example 1
   */
  runner_id: number | null;

  /**
   * @description The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   * @example my runner
   */
  runner_name: string | null;

  /**
   * @description The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   * @example 2
   */
  runner_group_id: number | null;

  /**
   * @description The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   * @example my runner group
   */
  runner_group_name: string | null;

  /**
   * @description The name of the workflow.
   * @example Build
   */
  workflow_name: string | null;

  /**
   * @description The name of the current branch.
   * @example main
   */
  head_branch: string | null;
};
/**
 * @description Actions OIDC subject customization for a repository
 */
type OidcCustomSubRepoSchema = {
  /**
   * @description Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.
   */
  use_default: boolean;

  /**
   * @description Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
   */
  include_claim_keys?: string[];
};
/**
 * @description Set secrets for GitHub Actions.
 */
type ActionsSecretSchema = {
  /**
   * @description The name of the secret.
   * @example SECRET_TOKEN
   */
  name: string;
  created_at: string;
  updated_at: string;
};
type ActionsVariableSchema = {
  /**
   * @description The name of the variable.
   * @example USERNAME
   */
  name: string;

  /**
   * @description The value of the variable.
   * @example octocat
   */
  value: string;

  /**
   * @description The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @example 2019-01-24T22:45:36.000Z
   */
  created_at: string;

  /**
   * @description The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @example 2019-01-24T22:45:36.000Z
   */
  updated_at: string;
};
/**
 * @description Whether GitHub Actions is enabled on the repository.
 */
type ActionsEnabledSchema = boolean;
type ActionsRepositoryPermissionsSchema = {
  enabled: ActionsEnabledSchema;
  allowed_actions?: AllowedActionsSchema;
  selected_actions_url?: SelectedActionsUrlSchema;
  sha_pinning_required?: ShaPinningRequiredSchema;
};
type ActionsWorkflowAccessToRepositorySchema = {
  /**
   * @description Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
   * repository.
   *
   * `none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repositories only. `organization` level access allows sharing across the organization.
   */
  access_level: "none" | "user" | "organization";
};
/**
 * @description A workflow referenced/reused by the initial caller workflow
 */
type ReferencedWorkflowSchema = {
  path: string;
  sha: string;
  ref?: string;
};
type PullRequestMinimalSchema = {
  id: number;
  number: number;
  url: string;
  head: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
  base: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
};
/**
 * @description A commit.
 */
type NullableSimpleCommitSchema = {
  /**
   * @description SHA for the commit
   * @example 7638417db6d59f3c431d3e1f261cc637155684cd
   */
  id: string;

  /**
   * @description SHA for the commit's tree
   */
  tree_id: string;

  /**
   * @description Message describing the purpose of the commit
   * @example Fix #42
   */
  message: string;

  /**
   * @description Timestamp of the commit
   * @example 2014-08-09T08:02:04+12:00
   */
  timestamp: string;

  /**
   * @description Information about the Git author
   */
  author: {
    /**
     * @description Name of the commit's author
     * @example Monalisa Octocat
     */
    name: string;

    /**
     * @description Git email address of the commit's author
     * @example monalisa.octocat@example.com
     */
    email: string;
  } | null;

  /**
   * @description Information about the Git committer
   */
  committer: {
    /**
     * @description Name of the commit's committer
     * @example Monalisa Octocat
     */
    name: string;

    /**
     * @description Git email address of the commit's committer
     * @example monalisa.octocat@example.com
     */
    email: string;
  } | null;
} | null;
/**
 * @description An invocation of a workflow
 */
type WorkflowRunSchema = {
  /**
   * @description The ID of the workflow run.
   * @example 5
   */
  id: number;

  /**
   * @description The name of the workflow run.
   * @example Build
   */
  name?: string | null;

  /**
   * @example MDEwOkNoZWNrU3VpdGU1
   */
  node_id: string;

  /**
   * @description The ID of the associated check suite.
   * @example 42
   */
  check_suite_id?: number;

  /**
   * @description The node ID of the associated check suite.
   * @example MDEwOkNoZWNrU3VpdGU0Mg==
   */
  check_suite_node_id?: string;

  /**
   * @example master
   */
  head_branch: string | null;

  /**
   * @description The SHA of the head commit that points to the version of the workflow being run.
   * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
   */
  head_sha: string;

  /**
   * @description The full path of the workflow
   * @example octocat/octo-repo/.github/workflows/ci.yml@main
   */
  path: string;

  /**
   * @description The auto incrementing run number for the workflow run.
   * @example 106
   */
  run_number: number;

  /**
   * @description Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
   * @example 1
   */
  run_attempt?: number;
  referenced_workflows?: ReferencedWorkflowSchema[] | null;

  /**
   * @example push
   */
  event: string;

  /**
   * @example completed
   */
  status: string | null;

  /**
   * @example neutral
   */
  conclusion: string | null;

  /**
   * @description The ID of the parent workflow.
   * @example 5
   */
  workflow_id: number;

  /**
   * @description The URL to the workflow run.
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5
   */
  url: string;

  /**
   * @example https://github.com/github/hello-world/suites/4
   */
  html_url: string;

  /**
   * @description Pull requests that are open with a `head_sha` or `head_branch` that matches the workflow run. The returned pull requests do not necessarily indicate pull requests that triggered the run.
   */
  pull_requests: PullRequestMinimalSchema[] | null;
  created_at: string;
  updated_at: string;
  actor?: SimpleUserSchema;
  triggering_actor?: SimpleUserSchema;

  /**
   * @description The start time of the latest run. Resets on re-run.
   */
  run_started_at?: string;

  /**
   * @description The URL to the jobs for the workflow run.
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5/jobs
   */
  jobs_url: string;

  /**
   * @description The URL to download the logs for the workflow run.
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5/logs
   */
  logs_url: string;

  /**
   * @description The URL to the associated check suite.
   * @example https://api.github.com/repos/github/hello-world/check-suites/12
   */
  check_suite_url: string;

  /**
   * @description The URL to the artifacts for the workflow run.
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts
   */
  artifacts_url: string;

  /**
   * @description The URL to cancel the workflow run.
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5/cancel
   */
  cancel_url: string;

  /**
   * @description The URL to rerun the workflow run.
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5/rerun
   */
  rerun_url: string;

  /**
   * @description The URL to the previous attempted run of this workflow, if one exists.
   * @example https://api.github.com/repos/github/hello-world/actions/runs/5/attempts/3
   */
  previous_attempt_url?: string | null;

  /**
   * @description The URL to the workflow.
   * @example https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml
   */
  workflow_url: string;
  head_commit: NullableSimpleCommitSchema;
  repository: MinimalRepositorySchema;
  head_repository: MinimalRepositorySchema;

  /**
   * @example 5
   */
  head_repository_id?: number;

  /**
   * @description The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow.
   * @example Simple Workflow
   */
  display_title: string;
};
/**
 * @description An entry in the reviews log for environment deployments
 */
type EnvironmentApprovalsSchema = {
  /**
   * @description The list of environments that were approved or rejected
   */
  environments: {
    /**
     * @description The id of the environment.
     * @example 56780428
     */
    id?: number;

    /**
     * @example MDExOkVudmlyb25tZW50NTY3ODA0Mjg=
     */
    node_id?: string;

    /**
     * @description The name of the environment.
     * @example staging
     */
    name?: string;

    /**
     * @example https://api.github.com/repos/github/hello-world/environments/staging
     */
    url?: string;

    /**
     * @example https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging
     */
    html_url?: string;

    /**
     * @description The time that the environment was created, in ISO 8601 format.
     * @example 2020-11-23T22:00:40Z
     */
    created_at?: string;

    /**
     * @description The time that the environment was last updated, in ISO 8601 format.
     * @example 2020-11-23T22:00:40Z
     */
    updated_at?: string;
  }[];

  /**
   * @description Whether deployment to the environment(s) was approved or rejected or pending (with comments)
   * @example approved
   */
  state: "approved" | "rejected" | "pending";
  user: SimpleUserSchema;

  /**
   * @description The comment submitted with the deployment review
   * @example Ship it!
   */
  comment: string;
};
type ReviewCustomGatesCommentRequiredSchema = {
  /**
   * @description The name of the environment to approve or reject.
   */
  environment_name: string;

  /**
   * @description Comment associated with the pending deployment protection rule. **Required when state is not provided.**
   */
  comment: string;
};
type ReviewCustomGatesStateRequiredSchema = {
  /**
   * @description The name of the environment to approve or reject.
   */
  environment_name: string;

  /**
   * @description Whether to approve or reject deployment to the specified environments.
   */
  state: "approved" | "rejected";

  /**
   * @description Optional comment to include with the review.
   */
  comment?: string;
};
/**
 * @description The type of reviewer.
 * @example User
 */
type DeploymentReviewerTypeSchema = "User" | "Team";
/**
 * @description Details of a deployment that is waiting for protection rules to pass
 */
type PendingDeploymentSchema = {
  environment: {
    /**
     * @description The id of the environment.
     * @example 56780428
     */
    id?: number;

    /**
     * @example MDExOkVudmlyb25tZW50NTY3ODA0Mjg=
     */
    node_id?: string;

    /**
     * @description The name of the environment.
     * @example staging
     */
    name?: string;

    /**
     * @example https://api.github.com/repos/github/hello-world/environments/staging
     */
    url?: string;

    /**
     * @example https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging
     */
    html_url?: string;
  };

  /**
   * @description The set duration of the wait timer
   * @example 30
   */
  wait_timer: number;

  /**
   * @description The time that the wait timer began.
   * @example 2020-11-23T22:00:40Z
   */
  wait_timer_started_at: string | null;

  /**
   * @description Whether the currently authenticated user can approve the deployment
   * @example true
   */
  current_user_can_approve: boolean;

  /**
   * @description The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
   */
  reviewers: {
    type?: DeploymentReviewerTypeSchema;
    reviewer?: SimpleUserSchema | TeamSchema;
  }[];
};
/**
 * @description A request for a specific ref(branch,sha,tag) to be deployed
 */
type DeploymentSchema = {
  /**
   * @example https://api.github.com/repos/octocat/example/deployments/1
   */
  url: string;

  /**
   * @description Unique identifier of the deployment
   * @example 42
   */
  id: number;

  /**
   * @example MDEwOkRlcGxveW1lbnQx
   */
  node_id: string;

  /**
   * @example a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d
   */
  sha: string;

  /**
   * @description The ref to deploy. This can be a branch, tag, or sha.
   * @example topic-branch
   */
  ref: string;

  /**
   * @description Parameter to specify a task to execute
   * @example deploy
   */
  task: string;
  payload:
    | {
        [key: string]: any;
      }
    | string;

  /**
   * @example staging
   */
  original_environment?: string;

  /**
   * @description Name for the target deployment environment.
   * @example production
   */
  environment: string;

  /**
   * @example Deploy request from hubot
   */
  description: string | null;
  creator: NullableSimpleUserSchema;

  /**
   * @example 2012-07-20T01:19:13Z
   */
  created_at: string;

  /**
   * @example 2012-07-20T01:19:13Z
   */
  updated_at: string;

  /**
   * @example https://api.github.com/repos/octocat/example/deployments/1/statuses
   */
  statuses_url: string;

  /**
   * @example https://api.github.com/repos/octocat/example
   */
  repository_url: string;

  /**
   * @description Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   * @example true
   */
  transient_environment?: boolean;

  /**
   * @description Specifies if the given environment is one that end-users directly interact with. Default: false.
   * @example true
   */
  production_environment?: boolean;
  performed_via_github_app?: NullableIntegrationSchema;
};
/**
 * @description Workflow Run Usage
 */
type WorkflowRunUsageSchema = {
  billable: {
    UBUNTU?: {
      total_ms: number;
      jobs: number;
      job_runs?: {
        job_id: number;
        duration_ms: number;
      }[];
    };
    MACOS?: {
      total_ms: number;
      jobs: number;
      job_runs?: {
        job_id: number;
        duration_ms: number;
      }[];
    };
    WINDOWS?: {
      total_ms: number;
      jobs: number;
      job_runs?: {
        job_id: number;
        duration_ms: number;
      }[];
    };
  };
  run_duration_ms?: number;
};
/**
 * @description A GitHub Actions workflow
 */
type WorkflowSchema = {
  /**
   * @example 5
   */
  id: number;

  /**
   * @example MDg6V29ya2Zsb3cxMg==
   */
  node_id: string;

  /**
   * @example CI
   */
  name: string;

  /**
   * @example ruby.yaml
   */
  path: string;

  /**
   * @example active
   */
  state:
    | "active"
    | "deleted"
    | "disabled_fork"
    | "disabled_inactivity"
    | "disabled_manually";

  /**
   * @example 2019-12-06T14:20:20.000Z
   */
  created_at: string;

  /**
   * @example 2019-12-06T14:20:20.000Z
   */
  updated_at: string;

  /**
   * @example https://api.github.com/repos/actions/setup-ruby/workflows/5
   */
  url: string;

  /**
   * @example https://github.com/actions/setup-ruby/blob/master/.github/workflows/ruby.yaml
   */
  html_url: string;

  /**
   * @example https://github.com/actions/setup-ruby/workflows/CI/badge.svg
   */
  badge_url: string;

  /**
   * @example 2019-12-06T14:20:20.000Z
   */
  deleted_at?: string;
};
/**
 * @description Workflow Usage
 */
type WorkflowUsageSchema = {
  billable: {
    UBUNTU?: {
      total_ms?: number;
    };
    MACOS?: {
      total_ms?: number;
    };
    WINDOWS?: {
      total_ms?: number;
    };
  };
};
/**
 * @description Activity
 */
type ActivitySchema = {
  /**
   * @example 1296269
   */
  id: number;

  /**
   * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
   */
  node_id: string;

  /**
   * @description The SHA of the commit before the activity.
   * @example 6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  before: string;

  /**
   * @description The SHA of the commit after the activity.
   * @example 827efc6d56897b048c772eb4087f854f46256132
   */
  after: string;

  /**
   * @description The full Git reference, formatted as `refs/heads/<branch name>`.
   * @example refs/heads/main
   */
  ref: string;

  /**
   * @description The time when the activity occurred.
   * @example 2011-01-26T19:06:43Z
   */
  timestamp: string;

  /**
   * @description The type of the activity that was performed.
   * @example force_push
   */
  activity_type:
    | "push"
    | "force_push"
    | "branch_deletion"
    | "branch_creation"
    | "pr_merge"
    | "merge_queue_merge";
  actor: NullableSimpleUserSchema;
};
/**
 * @description An autolink reference.
 */
type AutolinkSchema = {
  /**
   * @example 3
   */
  id: number;

  /**
   * @description The prefix of a key that is linkified.
   * @example TICKET-
   */
  key_prefix: string;

  /**
   * @description A template for the target URL that is generated if a key was found.
   * @example https://example.com/TICKET?query=<num>
   */
  url_template: string;

  /**
   * @description Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches numeric characters.
   * @example true
   */
  is_alphanumeric: boolean;
  updated_at?: string | null;
};
/**
 * @description Check Dependabot security updates
 */
type CheckAutomatedSecurityFixesSchema = {
  /**
   * @description Whether Dependabot security updates are enabled for the repository.
   * @example true
   */
  enabled: boolean;

  /**
   * @description Whether Dependabot security updates are paused for the repository.
   */
  paused: boolean;
};
/**
 * @description Protected Branch Required Status Check
 */
type ProtectedBranchRequiredStatusCheckSchema = {
  url?: string;
  enforcement_level?: string;
  contexts: string[];
  checks: {
    context: string;
    app_id: number | null;
  }[];
  contexts_url?: string;
  strict?: boolean;
};
/**
 * @description Protected Branch Admin Enforced
 */
type ProtectedBranchAdminEnforcedSchema = {
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins
   */
  url: string;

  /**
   * @example true
   */
  enabled: boolean;
};
/**
 * @description Protected Branch Pull Request Review
 */
type ProtectedBranchPullRequestReviewSchema = {
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions
   */
  url?: string;
  dismissal_restrictions?: {
    /**
     * @description The list of users with review dismissal access.
     */
    users?: SimpleUserSchema[];

    /**
     * @description The list of teams with review dismissal access.
     */
    teams?: TeamSchema[];

    /**
     * @description The list of apps with review dismissal access.
     */
    apps?: IntegrationSchema[];

    /**
     * @example "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"
     */
    url?: string;

    /**
     * @example "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"
     */
    users_url?: string;

    /**
     * @example "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"
     */
    teams_url?: string;
  };

  /**
   * @description Allow specific users, teams, or apps to bypass pull request requirements.
   */
  bypass_pull_request_allowances?: {
    /**
     * @description The list of users allowed to bypass pull request requirements.
     */
    users?: SimpleUserSchema[];

    /**
     * @description The list of teams allowed to bypass pull request requirements.
     */
    teams?: TeamSchema[];

    /**
     * @description The list of apps allowed to bypass pull request requirements.
     */
    apps?: IntegrationSchema[];
  };

  /**
   * @example true
   */
  dismiss_stale_reviews: boolean;

  /**
   * @example true
   */
  require_code_owner_reviews: boolean;

  /**
   * @example 2
   */
  required_approving_review_count?: number;

  /**
   * @description Whether the most recent push must be approved by someone other than the person who pushed it.
   * @example true
   * @default false
   */
  require_last_push_approval?: boolean;
};
/**
 * @description Branch Restriction Policy
 */
type BranchRestrictionPolicySchema = {
  url: string;
  users_url: string;
  teams_url: string;
  apps_url: string;
  users: {
    login?: string;
    id?: number;
    node_id?: string;
    avatar_url?: string;
    gravatar_id?: string;
    url?: string;
    html_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    starred_url?: string;
    subscriptions_url?: string;
    organizations_url?: string;
    repos_url?: string;
    events_url?: string;
    received_events_url?: string;
    type?: string;
    site_admin?: boolean;
    user_view_type?: string;
  }[];
  teams: TeamSchema[];
  apps: {
    id?: number;
    slug?: string;
    node_id?: string;
    owner?: {
      login?: string;
      id?: number;
      node_id?: string;
      url?: string;
      repos_url?: string;
      events_url?: string;
      hooks_url?: string;
      issues_url?: string;
      members_url?: string;
      public_members_url?: string;
      avatar_url?: string;
      description?: string;

      /**
       * @example ""
       */
      gravatar_id?: string;

      /**
       * @example "https://github.com/testorg-ea8ec76d71c3af4b"
       */
      html_url?: string;

      /**
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"
       */
      followers_url?: string;

      /**
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"
       */
      following_url?: string;

      /**
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"
       */
      gists_url?: string;

      /**
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"
       */
      starred_url?: string;

      /**
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"
       */
      subscriptions_url?: string;

      /**
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"
       */
      organizations_url?: string;

      /**
       * @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"
       */
      received_events_url?: string;

      /**
       * @example "Organization"
       */
      type?: string;
      site_admin?: boolean;

      /**
       * @example public
       */
      user_view_type?: string;
    };
    name?: string;
    client_id?: string;
    description?: string;
    external_url?: string;
    html_url?: string;
    created_at?: string;
    updated_at?: string;
    permissions?: {
      metadata?: string;
      contents?: string;
      issues?: string;
      single_file?: string;
    };
    events?: string[];
  }[];
};
/**
 * @description Branch Protection
 */
type BranchProtectionSchema = {
  url?: string;
  enabled?: boolean;
  required_status_checks?: ProtectedBranchRequiredStatusCheckSchema;
  enforce_admins?: ProtectedBranchAdminEnforcedSchema;
  required_pull_request_reviews?: ProtectedBranchPullRequestReviewSchema;
  restrictions?: BranchRestrictionPolicySchema;
  required_linear_history?: {
    enabled?: boolean;
  };
  allow_force_pushes?: {
    enabled?: boolean;
  };
  allow_deletions?: {
    enabled?: boolean;
  };
  block_creations?: {
    enabled?: boolean;
  };
  required_conversation_resolution?: {
    enabled?: boolean;
  };

  /**
   * @example "branch/with/protection"
   */
  name?: string;

  /**
   * @example "https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection"
   */
  protection_url?: string;
  required_signatures?: {
    /**
     * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures
     */
    url: string;

    /**
     * @example true
     */
    enabled: boolean;
  };

  /**
   * @description Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
   */
  lock_branch?: {
    /**
     * @default false
     */
    enabled?: boolean;
  };

  /**
   * @description Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
   */
  allow_fork_syncing?: {
    /**
     * @default false
     */
    enabled?: boolean;
  };
};
/**
 * @description Short Branch
 */
type ShortBranchSchema = {
  name: string;
  commit: {
    sha: string;
    url: string;
  };
  protected: boolean;
  protection?: BranchProtectionSchema;
  protection_url?: string;
};
/**
 * @description Metaproperties for Git author/committer information.
 */
type NullableGitUserSchema = {
  /**
   * @example "Chris Wanstrath"
   */
  name?: string;

  /**
   * @example "chris@ozmm.org"
   */
  email?: string;

  /**
   * @example "2007-10-29T02:42:39.000-07:00"
   */
  date?: string;
} | null;
type VerificationSchema = {
  verified: boolean;
  reason: string;
  payload: string | null;
  signature: string | null;
  verified_at: string | null;
};
/**
 * @description Diff Entry
 */
type DiffEntrySchema = {
  /**
   * @example bbcd538c8e72b8c175046e27cc8f907076331401
   */
  sha: string | null;

  /**
   * @example file1.txt
   */
  filename: string;

  /**
   * @example added
   */
  status:
    | "added"
    | "removed"
    | "modified"
    | "renamed"
    | "copied"
    | "changed"
    | "unchanged";

  /**
   * @example 103
   */
  additions: number;

  /**
   * @example 21
   */
  deletions: number;

  /**
   * @example 124
   */
  changes: number;

  /**
   * @example https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt
   */
  blob_url: string;

  /**
   * @example https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt
   */
  raw_url: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  contents_url: string;

  /**
   * @example @@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test
   */
  patch?: string;

  /**
   * @example file.txt
   */
  previous_filename?: string;
};
/**
 * @description Commit
 */
type CommitSchema = {
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  url: string;

  /**
   * @example 6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  sha: string;

  /**
   * @example MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==
   */
  node_id: string;

  /**
   * @example https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  html_url: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments
   */
  comments_url: string;
  commit: {
    /**
     * @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
     */
    url: string;
    author: NullableGitUserSchema;
    committer: NullableGitUserSchema;

    /**
     * @example Fix all the bugs
     */
    message: string;
    comment_count: number;
    tree: {
      /**
       * @example 827efc6d56897b048c772eb4087f854f46256132
       */
      sha: string;

      /**
       * @example https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132
       */
      url: string;
    };
    verification?: VerificationSchema;
  };
  author: SimpleUserSchema | EmptyObjectSchema | null;
  committer: SimpleUserSchema | EmptyObjectSchema | null;
  parents: {
    /**
     * @example 7638417db6d59f3c431d3e1f261cc637155684cd
     */
    sha: string;

    /**
     * @example https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd
     */
    url: string;

    /**
     * @example https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd
     */
    html_url?: string;
  }[];
  stats?: {
    additions?: number;
    deletions?: number;
    total?: number;
  };
  files?: DiffEntrySchema[];
};
/**
 * @description Branch With Protection
 */
type BranchWithProtectionSchema = {
  name: string;
  commit: CommitSchema;
  _links: {
    html: string;
    self: string;
  };
  protected: boolean;
  protection: BranchProtectionSchema;
  protection_url: string;

  /**
   * @example "mas*"
   */
  pattern?: string;

  /**
   * @example 1
   */
  required_approving_review_count?: number;
};
/**
 * @description Status Check Policy
 */
type StatusCheckPolicySchema = {
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks
   */
  url: string;

  /**
   * @example true
   */
  strict: boolean;

  /**
 * @example [
  "continuous-integration/travis-ci"
]
  */
  contexts: string[];
  checks: {
    /**
     * @example continuous-integration/travis-ci
     */
    context: string;
    app_id: number | null;
  }[];

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts
   */
  contexts_url: string;
};
/**
 * @description Branch protections protect branches
 */
type ProtectedBranchSchema = {
  url: string;
  required_status_checks?: StatusCheckPolicySchema;
  required_pull_request_reviews?: {
    url: string;
    dismiss_stale_reviews?: boolean;
    require_code_owner_reviews?: boolean;
    required_approving_review_count?: number;

    /**
     * @description Whether the most recent push must be approved by someone other than the person who pushed it.
     * @default false
     */
    require_last_push_approval?: boolean;
    dismissal_restrictions?: {
      url: string;
      users_url: string;
      teams_url: string;
      users: SimpleUserSchema[];
      teams: TeamSchema[];
      apps?: IntegrationSchema[];
    };
    bypass_pull_request_allowances?: {
      users: SimpleUserSchema[];
      teams: TeamSchema[];
      apps?: IntegrationSchema[];
    };
  };
  required_signatures?: {
    /**
     * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures
     */
    url: string;

    /**
     * @example true
     */
    enabled: boolean;
  };
  enforce_admins?: {
    url: string;
    enabled: boolean;
  };
  required_linear_history?: {
    enabled: boolean;
  };
  allow_force_pushes?: {
    enabled: boolean;
  };
  allow_deletions?: {
    enabled: boolean;
  };
  restrictions?: BranchRestrictionPolicySchema;
  required_conversation_resolution?: {
    enabled?: boolean;
  };
  block_creations?: {
    enabled: boolean;
  };

  /**
   * @description Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
   */
  lock_branch?: {
    /**
     * @default false
     */
    enabled?: boolean;
  };

  /**
   * @description Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
   */
  allow_fork_syncing?: {
    /**
     * @default false
     */
    enabled?: boolean;
  };
};
/**
 * @description A deployment created as the result of an Actions check run from a workflow that references an environment
 */
type DeploymentSimpleSchema = {
  /**
   * @example https://api.github.com/repos/octocat/example/deployments/1
   */
  url: string;

  /**
   * @description Unique identifier of the deployment
   * @example 42
   */
  id: number;

  /**
   * @example MDEwOkRlcGxveW1lbnQx
   */
  node_id: string;

  /**
   * @description Parameter to specify a task to execute
   * @example deploy
   */
  task: string;

  /**
   * @example staging
   */
  original_environment?: string;

  /**
   * @description Name for the target deployment environment.
   * @example production
   */
  environment: string;

  /**
   * @example Deploy request from hubot
   */
  description: string | null;

  /**
   * @example 2012-07-20T01:19:13Z
   */
  created_at: string;

  /**
   * @example 2012-07-20T01:19:13Z
   */
  updated_at: string;

  /**
   * @example https://api.github.com/repos/octocat/example/deployments/1/statuses
   */
  statuses_url: string;

  /**
   * @example https://api.github.com/repos/octocat/example
   */
  repository_url: string;

  /**
   * @description Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   * @example true
   */
  transient_environment?: boolean;

  /**
   * @description Specifies if the given environment is one that end-users directly interact with. Default: false.
   * @example true
   */
  production_environment?: boolean;
  performed_via_github_app?: NullableIntegrationSchema;
};
/**
 * @description A check performed on the code of a given code change
 */
type CheckRunSchema = {
  /**
   * @description The id of the check.
   * @example 21
   */
  id: number;

  /**
   * @description The SHA of the commit that is being checked.
   * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
   */
  head_sha: string;

  /**
   * @example MDg6Q2hlY2tSdW40
   */
  node_id: string;

  /**
   * @example 42
   */
  external_id: string | null;

  /**
   * @example https://api.github.com/repos/github/hello-world/check-runs/4
   */
  url: string;

  /**
   * @example https://github.com/github/hello-world/runs/4
   */
  html_url: string | null;

  /**
   * @example https://example.com
   */
  details_url: string | null;

  /**
   * @description The phase of the lifecycle that the check is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check runs.
   * @example queued
   */
  status:
    | "queued"
    | "in_progress"
    | "completed"
    | "waiting"
    | "requested"
    | "pending";

  /**
   * @example neutral
   */
  conclusion:
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required"
    | null;

  /**
   * @example 2018-05-04T01:14:52Z
   */
  started_at: string | null;

  /**
   * @example 2018-05-04T01:14:52Z
   */
  completed_at: string | null;
  output: {
    title: string | null;
    summary: string | null;
    text: string | null;
    annotations_count: number;
    annotations_url: string;
  };

  /**
   * @description The name of the check.
   * @example test-coverage
   */
  name: string;
  check_suite: {
    id: number;
  } | null;
  app: NullableIntegrationSchema;

  /**
   * @description Pull requests that are open with a `head_sha` or `head_branch` that matches the check. The returned pull requests do not necessarily indicate pull requests that triggered the check.
   */
  pull_requests: PullRequestMinimalSchema[];
  deployment?: DeploymentSimpleSchema;
};
/**
 * @description Check Annotation
 */
type CheckAnnotationSchema = {
  /**
   * @example README.md
   */
  path: string;

  /**
   * @example 2
   */
  start_line: number;

  /**
   * @example 2
   */
  end_line: number;

  /**
   * @example 5
   */
  start_column: number | null;

  /**
   * @example 10
   */
  end_column: number | null;

  /**
   * @example warning
   */
  annotation_level: string | null;

  /**
   * @example Spell Checker
   */
  title: string | null;

  /**
   * @example Check your spelling for 'banaas'.
   */
  message: string | null;

  /**
   * @example Do you mean 'bananas' or 'banana'?
   */
  raw_details: string | null;
  blob_href: string;
};
/**
 * @description A commit.
 */
type SimpleCommitSchema = {
  /**
   * @description SHA for the commit
   * @example 7638417db6d59f3c431d3e1f261cc637155684cd
   */
  id: string;

  /**
   * @description SHA for the commit's tree
   */
  tree_id: string;

  /**
   * @description Message describing the purpose of the commit
   * @example Fix #42
   */
  message: string;

  /**
   * @description Timestamp of the commit
   * @example 2014-08-09T08:02:04+12:00
   */
  timestamp: string;

  /**
   * @description Information about the Git author
   */
  author: {
    /**
     * @description Name of the commit's author
     * @example Monalisa Octocat
     */
    name: string;

    /**
     * @description Git email address of the commit's author
     * @example monalisa.octocat@example.com
     */
    email: string;
  } | null;

  /**
   * @description Information about the Git committer
   */
  committer: {
    /**
     * @description Name of the commit's committer
     * @example Monalisa Octocat
     */
    name: string;

    /**
     * @description Git email address of the commit's committer
     * @example monalisa.octocat@example.com
     */
    email: string;
  } | null;
};
/**
 * @description A suite of checks performed on the code of a given code change
 */
type CheckSuiteSchema = {
  /**
   * @example 5
   */
  id: number;

  /**
   * @example MDEwOkNoZWNrU3VpdGU1
   */
  node_id: string;

  /**
   * @example master
   */
  head_branch: string | null;

  /**
   * @description The SHA of the head commit that is being checked.
   * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
   */
  head_sha: string;

  /**
   * @description The phase of the lifecycle that the check suite is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check suites.
   * @example completed
   */
  status:
    | "queued"
    | "in_progress"
    | "completed"
    | "waiting"
    | "requested"
    | "pending"
    | null;

  /**
   * @example neutral
   */
  conclusion:
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required"
    | "startup_failure"
    | "stale"
    | null;

  /**
   * @example https://api.github.com/repos/github/hello-world/check-suites/5
   */
  url: string | null;

  /**
   * @example 146e867f55c26428e5f9fade55a9bbf5e95a7912
   */
  before: string | null;

  /**
   * @example d6fde92930d4715a2b49857d24b940956b26d2d3
   */
  after: string | null;
  pull_requests: PullRequestMinimalSchema[] | null;
  app: NullableIntegrationSchema;
  repository: MinimalRepositorySchema;
  created_at: string | null;
  updated_at: string | null;
  head_commit: SimpleCommitSchema;
  latest_check_runs_count: number;
  check_runs_url: string;
  rerequestable?: boolean;
  runs_rerequestable?: boolean;
};
/**
 * @description Check suite configuration preferences for a repository.
 */
type CheckSuitePreferenceSchema = {
  preferences: {
    auto_trigger_checks?: {
      app_id: number;
      setting: boolean;
    }[];
  };
  repository: MinimalRepositorySchema;
};
type CodeScanningAlertItemsSchema = {
  number: AlertNumberSchema;
  created_at: AlertCreatedAtSchema;
  updated_at?: AlertUpdatedAtSchema;
  url: AlertUrlSchema;
  html_url: AlertHtmlUrlSchema;
  instances_url: AlertInstancesUrlSchema;
  state: CodeScanningAlertStateSchema;
  fixed_at?: AlertFixedAtSchema;
  dismissed_by: NullableSimpleUserSchema;
  dismissed_at: AlertDismissedAtSchema;
  dismissed_reason: CodeScanningAlertDismissedReasonSchema;
  dismissed_comment?: CodeScanningAlertDismissedCommentSchema;
  rule: CodeScanningAlertRuleSummarySchema;
  tool: CodeScanningAnalysisToolSchema;
  most_recent_instance: CodeScanningAlertInstanceSchema;
  dismissal_approved_by?: NullableSimpleUserSchema;
};
type CodeScanningAlertRuleSchema = {
  /**
   * @description A unique identifier for the rule used to detect the alert.
   */
  id?: string | null;

  /**
   * @description The name of the rule used to detect the alert.
   */
  name?: string;

  /**
   * @description The severity of the alert.
   */
  severity?: "none" | "note" | "warning" | "error" | null;

  /**
   * @description The security severity of the alert.
   */
  security_severity_level?: "low" | "medium" | "high" | "critical" | null;

  /**
   * @description A short description of the rule used to detect the alert.
   */
  description?: string;

  /**
   * @description A description of the rule used to detect the alert.
   */
  full_description?: string;

  /**
   * @description A set of tags applicable for the rule.
   */
  tags?: string[] | null;

  /**
   * @description Detailed documentation for the rule as GitHub Flavored Markdown.
   */
  help?: string | null;

  /**
   * @description A link to the documentation for the rule used to detect the alert.
   */
  help_uri?: string | null;
};
type CodeScanningAlertSchema = {
  number: AlertNumberSchema;
  created_at: AlertCreatedAtSchema;
  updated_at?: AlertUpdatedAtSchema;
  url: AlertUrlSchema;
  html_url: AlertHtmlUrlSchema;
  instances_url: AlertInstancesUrlSchema;
  state: CodeScanningAlertStateSchema;
  fixed_at?: AlertFixedAtSchema;
  dismissed_by: NullableSimpleUserSchema;
  dismissed_at: AlertDismissedAtSchema;
  dismissed_reason: CodeScanningAlertDismissedReasonSchema;
  dismissed_comment?: CodeScanningAlertDismissedCommentSchema;
  rule: CodeScanningAlertRuleSchema;
  tool: CodeScanningAnalysisToolSchema;
  most_recent_instance: CodeScanningAlertInstanceSchema;
  dismissal_approved_by?: NullableSimpleUserSchema;
};
/**
 * @description Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`.
 */
type CodeScanningAlertSetStateSchema = "open" | "dismissed";
/**
 * @description If `true`, attempt to create an alert dismissal request.
 */
type CodeScanningAlertCreateRequestSchema = boolean;
/**
 * @description The status of an autofix.
 */
type CodeScanningAutofixStatusSchema =
  | "pending"
  | "error"
  | "success"
  | "outdated";
/**
 * @description The description of an autofix.
 */
type CodeScanningAutofixDescriptionSchema = string | null;
/**
 * @description The start time of an autofix in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @readonly
 */
type CodeScanningAutofixStartedAtSchema = Readonly<string>;
type CodeScanningAutofixSchema = {
  status: CodeScanningAutofixStatusSchema;
  description: CodeScanningAutofixDescriptionSchema;
  started_at: CodeScanningAutofixStartedAtSchema;
};
/**
 * @description Commit an autofix for a code scanning alert
 */
type CodeScanningAnalysisSarifIdSchema = string;
/**
 * @description The SHA of the commit to which the analysis you are uploading relates.
 */
type CodeScanningAnalysisCommitShaSchema = string;
/**
 * @description Identifies the variable values associated with the environment in which this analysis was performed.
 */
type CodeScanningAnalysisEnvironmentSchema = string;
/**
 * @description The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @readonly
 */
type CodeScanningAnalysisCreatedAtSchema = Readonly<string>;
/**
 * @description The REST API URL of the analysis resource.
 * @readonly
 */
type CodeScanningAnalysisUrlSchema = Readonly<string>;
type CodeScanningAnalysisSchema = {
  ref: CodeScanningRefSchema;
  commit_sha: CodeScanningAnalysisCommitShaSchema;
  analysis_key: CodeScanningAnalysisAnalysisKeySchema;
  environment: CodeScanningAnalysisEnvironmentSchema;
  category?: CodeScanningAnalysisCategorySchema;

  /**
   * @example error reading field xyz
   */
  error: string;
  created_at: CodeScanningAnalysisCreatedAtSchema;

  /**
   * @description The total number of results in the analysis.
   */
  results_count: number;

  /**
   * @description The total number of rules used in the analysis.
   */
  rules_count: number;

  /**
   * @description Unique identifier for this analysis.
   */
  id: number;
  url: CodeScanningAnalysisUrlSchema;
  sarif_id: CodeScanningAnalysisSarifIdSchema;
  tool: CodeScanningAnalysisToolSchema;
  deletable: boolean;

  /**
   * @description Warning generated when processing the analysis
   * @example 123 results were ignored
   */
  warning: string;
};
/**
 * @description Successful deletion of a code scanning analysis
 */
type CodeScanningAnalysisDeletionSchema = {
  /**
   * @description Next deletable analysis in chain, without last analysis deletion confirmation
   * @readonly
   */
  readonly next_analysis_url: Readonly<string | null>;

  /**
   * @description Next deletable analysis in chain, with last analysis deletion confirmation
   * @readonly
   */
  readonly confirm_delete_url: Readonly<string | null>;
};
/**
 * @description A CodeQL database.
 */
type CodeScanningCodeqlDatabaseSchema = {
  /**
   * @description The ID of the CodeQL database.
   */
  id: number;

  /**
   * @description The name of the CodeQL database.
   */
  name: string;

  /**
   * @description The language of the CodeQL database.
   */
  language: string;
  uploader: SimpleUserSchema;

  /**
   * @description The MIME type of the CodeQL database file.
   */
  content_type: string;

  /**
   * @description The size of the CodeQL database file in bytes.
   */
  size: number;

  /**
   * @description The date and time at which the CodeQL database was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  created_at: string;

  /**
   * @description The date and time at which the CodeQL database was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  updated_at: string;

  /**
   * @description The URL at which to download the CodeQL database. The `Accept` header must be set to the value of the `content_type` property.
   */
  url: string;

  /**
   * @description The commit SHA of the repository at the time the CodeQL database was created.
   */
  commit_oid?: string | null;
};
/**
 * @description The language targeted by the CodeQL query
 */
type CodeScanningVariantAnalysisLanguageSchema =
  | "cpp"
  | "csharp"
  | "go"
  | "java"
  | "javascript"
  | "python"
  | "ruby"
  | "rust"
  | "swift";
/**
 * @description Repository Identifier
 */
type CodeScanningVariantAnalysisRepositorySchema = {
  /**
   * @description A unique identifier of the repository.
   * @example 1296269
   */
  id: number;

  /**
   * @description The name of the repository.
   * @example Hello-World
   */
  name: string;

  /**
   * @description The full, globally unique, name of the repository.
   * @example octocat/Hello-World
   */
  full_name: string;

  /**
   * @description Whether the repository is private.
   */
  private: boolean;

  /**
   * @example 80
   */
  stargazers_count: number;

  /**
   * @example 2011-01-26T19:14:43Z
   */
  updated_at: string | null;
};
/**
 * @description The new status of the CodeQL variant analysis repository task.
 */
type CodeScanningVariantAnalysisStatusSchema =
  | "pending"
  | "in_progress"
  | "succeeded"
  | "failed"
  | "canceled"
  | "timed_out";
type CodeScanningVariantAnalysisSkippedRepoGroupSchema = {
  /**
   * @description The total number of repositories that were skipped for this reason.
   * @example 2
   */
  repository_count: number;

  /**
   * @description A list of repositories that were skipped. This list may not include all repositories that were skipped. This is only available when the repository was found and the user has access to it.
   */
  repositories: CodeScanningVariantAnalysisRepositorySchema[];
};
/**
 * @description A run of a CodeQL query against one or more repositories.
 */
type CodeScanningVariantAnalysisSchema = {
  /**
   * @description The ID of the variant analysis.
   */
  id: number;
  controller_repo: SimpleRepositorySchema;
  actor: SimpleUserSchema;
  query_language: CodeScanningVariantAnalysisLanguageSchema;

  /**
   * @description The download url for the query pack.
   */
  query_pack_url: string;

  /**
   * @description The date and time at which the variant analysis was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  created_at?: string;

  /**
   * @description The date and time at which the variant analysis was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  updated_at?: string;

  /**
   * @description The date and time at which the variant analysis was completed, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ. Will be null if the variant analysis has not yet completed or this information is not available.
   */
  completed_at?: string | null;
  status: "in_progress" | "succeeded" | "failed" | "cancelled";

  /**
   * @description The GitHub Actions workflow run used to execute this variant analysis. This is only available if the workflow run has started.
   */
  actions_workflow_run_id?: number;

  /**
   * @description The reason for a failure of the variant analysis. This is only available if the variant analysis has failed.
   */
  failure_reason?:
    | "no_repos_queried"
    | "actions_workflow_run_failed"
    | "internal_error";
  scanned_repositories?: {
    repository: CodeScanningVariantAnalysisRepositorySchema;
    analysis_status: CodeScanningVariantAnalysisStatusSchema;

    /**
     * @description The number of results in the case of a successful analysis. This is only available for successful analyses.
     */
    result_count?: number;

    /**
     * @description The size of the artifact. This is only available for successful analyses.
     */
    artifact_size_in_bytes?: number;

    /**
     * @description The reason of the failure of this repo task. This is only available if the repository task has failed.
     */
    failure_message?: string;
  }[];

  /**
   * @description Information about repositories that were skipped from processing. This information is only available to the user that initiated the variant analysis.
   */
  skipped_repositories?: {
    access_mismatch_repos: CodeScanningVariantAnalysisSkippedRepoGroupSchema;
    not_found_repos: {
      /**
       * @description The total number of repositories that were skipped for this reason.
       * @example 2
       */
      repository_count: number;

      /**
       * @description A list of full repository names that were skipped. This list may not include all repositories that were skipped.
       */
      repository_full_names: string[];
    };
    no_codeql_db_repos: CodeScanningVariantAnalysisSkippedRepoGroupSchema;
    over_limit_repos: CodeScanningVariantAnalysisSkippedRepoGroupSchema;
  };
};
type CodeScanningVariantAnalysisRepoTaskSchema = {
  repository: SimpleRepositorySchema;
  analysis_status: CodeScanningVariantAnalysisStatusSchema;

  /**
   * @description The size of the artifact. This is only available for successful analyses.
   */
  artifact_size_in_bytes?: number;

  /**
   * @description The number of results in the case of a successful analysis. This is only available for successful analyses.
   */
  result_count?: number;

  /**
   * @description The reason of the failure of this repo task. This is only available if the repository task has failed.
   */
  failure_message?: string;

  /**
   * @description The SHA of the commit the CodeQL database was built against. This is only available for successful analyses.
   */
  database_commit_sha?: string;

  /**
   * @description The source location prefix to use. This is only available for successful analyses.
   */
  source_location_prefix?: string;

  /**
   * @description The URL of the artifact. This is only available for successful analyses.
   */
  artifact_url?: string;
};
/**
 * @description Configuration for code scanning default setup.
 */
type CodeScanningDefaultSetupSchema = {
  /**
   * @description Code scanning default setup has been configured or not.
   */
  state?: "configured" | "not-configured";

  /**
   * @description Languages to be analyzed.
   */
  languages?: (
    | "actions"
    | "c-cpp"
    | "csharp"
    | "go"
    | "java-kotlin"
    | "javascript-typescript"
    | "javascript"
    | "python"
    | "ruby"
    | "typescript"
    | "swift"
  )[];

  /**
   * @description Runner type to be used.
   */
  runner_type?: "standard" | "labeled" | null;

  /**
   * @description Runner label to be used if the runner type is labeled.
   * @example code-scanning
   */
  runner_label?: string | null;

  /**
   * @description CodeQL query suite to be used.
   */
  query_suite?: "default" | "extended";

  /**
   * @description Threat model to be used for code scanning analysis. Use `remote` to analyze only network sources and `remote_and_local` to include local sources like filesystem access, command-line arguments, database reads, environment variable and standard input.
   */
  threat_model?: "remote" | "remote_and_local";

  /**
   * @description Timestamp of latest configuration update.
   * @example 2023-12-06T14:20:20.000Z
   */
  updated_at?: string | null;

  /**
   * @description The frequency of the periodic analysis.
   */
  schedule?: "weekly" | null;
};
/**
 * @description Configuration for code scanning default setup.
 */
/**
 * @description You can use `run_url` to track the status of the run. This includes a property status and conclusion.
 * You should not rely on this always being an actions workflow run object.
 */
type CodeScanningRefFullSchema = string;
/**
 * @description A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)."
 */
type CodeScanningAnalysisSarifFileSchema = string;
type CodeScanningSarifsReceiptSchema = {
  id?: CodeScanningAnalysisSarifIdSchema;

  /**
   * @description The REST API URL for checking the status of the upload.
   * @readonly
   */
  readonly url?: Readonly<string>;
};
type CodeScanningSarifsStatusSchema = {
  /**
   * @description `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.
   */
  processing_status?: "pending" | "complete" | "failed";

  /**
   * @description The REST API URL for getting the analyses associated with the upload.
   * @readonly
   */
  readonly analyses_url?: Readonly<string | null>;

  /**
   * @description Any errors that ocurred during processing of the delivery.
   * @readonly
   */
  readonly errors?: Readonly<string[] | null>;
};
/**
 * @description Code security configuration associated with a repository and attachment status
 */
type CodeSecurityConfigurationForRepositorySchema = {
  /**
   * @description The attachment status of the code security configuration on the repository.
   */
  status?:
    | "attached"
    | "attaching"
    | "detached"
    | "removed"
    | "enforced"
    | "failed"
    | "updating"
    | "removed_by_enterprise";
  configuration?: CodeSecurityConfigurationSchema;
};
/**
 * @description A list of errors found in a repo's CODEOWNERS file
 */
type CodeownersErrorsSchema = {
  errors: {
    /**
     * @description The line number where this errors occurs.
     * @example 7
     */
    line: number;

    /**
     * @description The column number where this errors occurs.
     * @example 3
     */
    column: number;

    /**
     * @description The contents of the line where the error occurs.
     * @example * user
     */
    source?: string;

    /**
     * @description The type of error.
     * @example Invalid owner
     */
    kind: string;

    /**
     * @description Suggested action to fix the error. This will usually be `null`, but is provided for some common errors.
     * @example The pattern `/` will never match anything, did you mean `*` instead?
     */
    suggestion?: string | null;

    /**
     * @description A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).
     * @example Invalid owner on line 7:
     *
     *   * user
     *     ^
     */
    message: string;

    /**
     * @description The path of the file where the error occured.
     * @example .github/CODEOWNERS
     */
    path: string;
  }[];
};
/**
 * @description A description of the machine powering a codespace.
 */
type CodespaceMachineSchema = {
  /**
   * @description The name of the machine.
   * @example standardLinux
   */
  name: string;

  /**
   * @description The display name of the machine includes cores, memory, and storage.
   * @example 4 cores, 16 GB RAM, 64 GB storage
   */
  display_name: string;

  /**
   * @description The operating system of the machine.
   * @example linux
   */
  operating_system: string;

  /**
   * @description How much storage is available to the codespace.
   * @example 68719476736
   */
  storage_in_bytes: number;

  /**
   * @description How much memory is available to the codespace.
   * @example 17179869184
   */
  memory_in_bytes: number;

  /**
   * @description How many cores are available to the codespace.
   * @example 4
   */
  cpus: number;

  /**
   * @description Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
   * @example ready
   */
  prebuild_availability: "none" | "ready" | "in_progress" | null;
};
/**
 * @description Permission check result for a given devcontainer config.
 */
type CodespacesPermissionsCheckForDevcontainerSchema = {
  /**
   * @description Whether the user has accepted the permissions defined by the devcontainer config
   * @example true
   */
  accepted: boolean;
};
/**
 * @description Set repository secrets for GitHub Codespaces.
 */
type RepoCodespacesSecretSchema = {
  /**
   * @description The name of the secret.
   * @example SECRET_TOKEN
   */
  name: string;
  created_at: string;
  updated_at: string;
};
/**
 * @description Collaborator
 */
type CollaboratorSchema = {
  /**
   * @example octocat
   */
  login: string;

  /**
   * @example 1
   */
  id: number;
  email?: string | null;
  name?: string | null;

  /**
   * @example MDQ6VXNlcjE=
   */
  node_id: string;

  /**
   * @example https://github.com/images/error/octocat_happy.gif
   */
  avatar_url: string;

  /**
   * @example 41d064eb2195891e12d0413f63227ea7
   */
  gravatar_id: string | null;

  /**
   * @example https://api.github.com/users/octocat
   */
  url: string;

  /**
   * @example https://github.com/octocat
   */
  html_url: string;

  /**
   * @example https://api.github.com/users/octocat/followers
   */
  followers_url: string;

  /**
   * @example https://api.github.com/users/octocat/following{/other_user}
   */
  following_url: string;

  /**
   * @example https://api.github.com/users/octocat/gists{/gist_id}
   */
  gists_url: string;

  /**
   * @example https://api.github.com/users/octocat/starred{/owner}{/repo}
   */
  starred_url: string;

  /**
   * @example https://api.github.com/users/octocat/subscriptions
   */
  subscriptions_url: string;

  /**
   * @example https://api.github.com/users/octocat/orgs
   */
  organizations_url: string;

  /**
   * @example https://api.github.com/users/octocat/repos
   */
  repos_url: string;

  /**
   * @example https://api.github.com/users/octocat/events{/privacy}
   */
  events_url: string;

  /**
   * @example https://api.github.com/users/octocat/received_events
   */
  received_events_url: string;

  /**
   * @example User
   */
  type: string;
  site_admin: boolean;
  permissions?: {
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
    admin: boolean;
  };

  /**
   * @example admin
   */
  role_name: string;

  /**
   * @example public
   */
  user_view_type?: string;
};
/**
 * @description Repository invitations let you manage who you collaborate with.
 */
type RepositoryInvitationSchema = {
  /**
   * @description Unique identifier of the repository invitation.
   * @example 42
   */
  id: number;
  repository: MinimalRepositorySchema;
  invitee: NullableSimpleUserSchema;
  inviter: NullableSimpleUserSchema;

  /**
   * @description The permission associated with the invitation.
   * @example read
   */
  permissions: "read" | "write" | "admin" | "triage" | "maintain";

  /**
   * @example 2016-06-13T14:52:50-05:00
   */
  created_at: string;

  /**
   * @description Whether or not the invitation has expired
   */
  expired?: boolean;

  /**
   * @description URL for the repository invitation
   * @example https://api.github.com/user/repository-invitations/1
   */
  url: string;

  /**
   * @example https://github.com/octocat/Hello-World/invitations
   */
  html_url: string;
  node_id: string;
};
/**
 * @description Collaborator
 */
type NullableCollaboratorSchema = {
  /**
   * @example octocat
   */
  login: string;

  /**
   * @example 1
   */
  id: number;
  email?: string | null;
  name?: string | null;

  /**
   * @example MDQ6VXNlcjE=
   */
  node_id: string;

  /**
   * @example https://github.com/images/error/octocat_happy.gif
   */
  avatar_url: string;

  /**
   * @example 41d064eb2195891e12d0413f63227ea7
   */
  gravatar_id: string | null;

  /**
   * @example https://api.github.com/users/octocat
   */
  url: string;

  /**
   * @example https://github.com/octocat
   */
  html_url: string;

  /**
   * @example https://api.github.com/users/octocat/followers
   */
  followers_url: string;

  /**
   * @example https://api.github.com/users/octocat/following{/other_user}
   */
  following_url: string;

  /**
   * @example https://api.github.com/users/octocat/gists{/gist_id}
   */
  gists_url: string;

  /**
   * @example https://api.github.com/users/octocat/starred{/owner}{/repo}
   */
  starred_url: string;

  /**
   * @example https://api.github.com/users/octocat/subscriptions
   */
  subscriptions_url: string;

  /**
   * @example https://api.github.com/users/octocat/orgs
   */
  organizations_url: string;

  /**
   * @example https://api.github.com/users/octocat/repos
   */
  repos_url: string;

  /**
   * @example https://api.github.com/users/octocat/events{/privacy}
   */
  events_url: string;

  /**
   * @example https://api.github.com/users/octocat/received_events
   */
  received_events_url: string;

  /**
   * @example User
   */
  type: string;
  site_admin: boolean;
  permissions?: {
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
    admin: boolean;
  };

  /**
   * @example admin
   */
  role_name: string;

  /**
   * @example public
   */
  user_view_type?: string;
} | null;
/**
 * @description Repository Collaborator Permission
 */
type RepositoryCollaboratorPermissionSchema = {
  permission: string;

  /**
   * @example admin
   */
  role_name: string;
  user: NullableCollaboratorSchema;
};
/**
 * @description Commit Comment
 */
type CommitCommentSchema = {
  html_url: string;
  url: string;
  id: number;
  node_id: string;
  body: string;
  path: string | null;
  position: number | null;
  line: number | null;
  commit_id: string;
  user: NullableSimpleUserSchema;
  created_at: string;
  updated_at: string;
  author_association: AuthorAssociationSchema;
  reactions?: ReactionRollupSchema;
};
/**
 * @description Branch Short
 */
type BranchShortSchema = {
  name: string;
  commit: {
    sha: string;
    url: string;
  };
  protected: boolean;
};
type SimpleCommitStatusSchema = {
  description: string | null;
  id: number;
  node_id: string;
  state: string;
  context: string;
  target_url: string | null;
  required?: boolean | null;
  avatar_url: string | null;
  url: string;
  created_at: string;
  updated_at: string;
};
/**
 * @description Combined Commit Status
 */
type CombinedCommitStatusSchema = {
  state: string;
  statuses: SimpleCommitStatusSchema[];
  sha: string;
  total_count: number;
  repository: MinimalRepositorySchema;
  commit_url: string;
  url: string;
};
/**
 * @description The status of a commit.
 */
type StatusSchema = {
  url: string;
  avatar_url: string | null;
  id: number;
  node_id: string;
  state: string;
  description: string | null;
  target_url: string | null;
  context: string;
  created_at: string;
  updated_at: string;
  creator: NullableSimpleUserSchema;
};
/**
 * @description Code of Conduct Simple
 */
type NullableCodeOfConductSimpleSchema = {
  /**
   * @example https://api.github.com/repos/github/docs/community/code_of_conduct
   */
  url: string;

  /**
   * @example citizen_code_of_conduct
   */
  key: string;

  /**
   * @example Citizen Code of Conduct
   */
  name: string;

  /**
   * @example https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md
   */
  html_url: string | null;
} | null;
type NullableCommunityHealthFileSchema = {
  url: string;
  html_url: string;
} | null;
/**
 * @description Community Profile
 */
type CommunityProfileSchema = {
  /**
   * @example 100
   */
  health_percentage: number;

  /**
   * @example My first repository on GitHub!
   */
  description: string | null;

  /**
   * @example example.com
   */
  documentation: string | null;
  files: {
    code_of_conduct: NullableCodeOfConductSimpleSchema;
    code_of_conduct_file: NullableCommunityHealthFileSchema;
    license: NullableLicenseSimpleSchema;
    contributing: NullableCommunityHealthFileSchema;
    readme: NullableCommunityHealthFileSchema;
    issue_template: NullableCommunityHealthFileSchema;
    pull_request_template: NullableCommunityHealthFileSchema;
  };

  /**
   * @example 2017-02-28T19:09:29Z
   */
  updated_at: string | null;

  /**
   * @example true
   */
  content_reports_enabled?: boolean;
};
/**
 * @description Commit Comparison
 */
type CommitComparisonSchema = {
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/compare/master...topic
   */
  url: string;

  /**
   * @example https://github.com/octocat/Hello-World/compare/master...topic
   */
  html_url: string;

  /**
   * @example https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17
   */
  permalink_url: string;

  /**
   * @example https://github.com/octocat/Hello-World/compare/master...topic.diff
   */
  diff_url: string;

  /**
   * @example https://github.com/octocat/Hello-World/compare/master...topic.patch
   */
  patch_url: string;
  base_commit: CommitSchema;
  merge_base_commit: CommitSchema;

  /**
   * @example ahead
   */
  status: "diverged" | "ahead" | "behind" | "identical";

  /**
   * @example 4
   */
  ahead_by: number;

  /**
   * @example 5
   */
  behind_by: number;

  /**
   * @example 6
   */
  total_commits: number;
  commits: CommitSchema[];
  files?: DiffEntrySchema[];
};
/**
 * @description Content Tree
 */
type ContentDirectorySchema = {
  type: "dir" | "file" | "submodule" | "symlink";
  size: number;
  name: string;
  path: string;
  content?: string;
  sha: string;
  url: string;
  git_url: string | null;
  html_url: string | null;
  download_url: string | null;
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };
}[];
/**
 * @description Content File
 */
type ContentFileSchema = {
  type: "file";
  encoding: string;
  size: number;
  name: string;
  path: string;
  content: string;
  sha: string;
  url: string;
  git_url: string | null;
  html_url: string | null;
  download_url: string | null;
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };

  /**
   * @example "actual/actual.md"
   */
  target?: string;

  /**
   * @example "git://example.com/defunkt/dotjs.git"
   */
  submodule_git_url?: string;
};
/**
 * @description An object describing a symlink
 */
type ContentSymlinkSchema = {
  type: "symlink";
  target: string;
  size: number;
  name: string;
  path: string;
  sha: string;
  url: string;
  git_url: string | null;
  html_url: string | null;
  download_url: string | null;
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };
};
/**
 * @description An object describing a submodule
 */
type ContentSubmoduleSchema = {
  type: "submodule";
  submodule_git_url: string;
  size: number;
  name: string;
  path: string;
  sha: string;
  url: string;
  git_url: string | null;
  html_url: string | null;
  download_url: string | null;
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };
};
/**
 * @description File Commit
 */
type FileCommitSchema = {
  content: {
    name?: string;
    path?: string;
    sha?: string;
    size?: number;
    url?: string;
    html_url?: string;
    git_url?: string;
    download_url?: string;
    type?: string;
    _links?: {
      self?: string;
      git?: string;
      html?: string;
    };
  } | null;
  commit: {
    sha?: string;
    node_id?: string;
    url?: string;
    html_url?: string;
    author?: {
      date?: string;
      name?: string;
      email?: string;
    };
    committer?: {
      date?: string;
      name?: string;
      email?: string;
    };
    message?: string;
    tree?: {
      url?: string;
      sha?: string;
    };
    parents?: {
      url?: string;
      html_url?: string;
      sha?: string;
    }[];
    verification?: {
      verified?: boolean;
      reason?: string;
      signature?: string | null;
      payload?: string | null;
      verified_at?: string | null;
    };
  };
};
/**
 * @description The ID of the push protection bypass placeholder. This value is returned on any push protected routes.
 */
type SecretScanningPushProtectionBypassPlaceholderIdSchema = string;
/**
 * @description Repository rule violation was detected
 */
type ContributorSchema = {
  login?: string;
  id?: number;
  node_id?: string;
  avatar_url?: string;
  gravatar_id?: string | null;
  url?: string;
  html_url?: string;
  followers_url?: string;
  following_url?: string;
  gists_url?: string;
  starred_url?: string;
  subscriptions_url?: string;
  organizations_url?: string;
  repos_url?: string;
  events_url?: string;
  received_events_url?: string;
  type: string;
  site_admin?: boolean;
  contributions: number;
  email?: string;
  name?: string;
  user_view_type?: string;
};
/**
 * @description A Dependabot alert.
 */
type DependabotAlertSchema = {
  number: AlertNumberSchema;

  /**
   * @description The state of the Dependabot alert.
   * @readonly
   */
  readonly state: Readonly<"auto_dismissed" | "dismissed" | "fixed" | "open">;

  /**
   * @description Details for the vulnerable dependency.
   * @readonly
   */
  readonly dependency: {
    package?: DependabotAlertPackageSchema;

    /**
     * @description The full path to the dependency manifest file, relative to the root of the repository.
     * @readonly
     */
    readonly manifest_path?: Readonly<string>;

    /**
     * @description The execution scope of the vulnerable dependency.
     * @readonly
     */
    readonly scope?: Readonly<"development" | "runtime" | null>;

    /**
     * @description The vulnerable dependency's relationship to your project.
     *
     * > [!NOTE]
     * > We are rolling out support for dependency relationship across ecosystems. This value will be "unknown" for all dependencies in unsupported ecosystems.
     *
     * @readonly
     */
    readonly relationship?: Readonly<
      "unknown" | "direct" | "transitive" | null
    >;
  };
  security_advisory: DependabotAlertSecurityAdvisorySchema;
  security_vulnerability: DependabotAlertSecurityVulnerabilitySchema;
  url: AlertUrlSchema;
  html_url: AlertHtmlUrlSchema;
  created_at: AlertCreatedAtSchema;
  updated_at: AlertUpdatedAtSchema;
  dismissed_at: AlertDismissedAtSchema;
  dismissed_by: NullableSimpleUserSchema;

  /**
   * @description The reason that the alert was dismissed.
   */
  dismissed_reason:
    | "fix_started"
    | "inaccurate"
    | "no_bandwidth"
    | "not_used"
    | "tolerable_risk"
    | null;

  /**
   * @description An optional comment associated with the alert's dismissal.
   */
  dismissed_comment: string | null;
  fixed_at: AlertFixedAtSchema;
  auto_dismissed_at?: AlertAutoDismissedAtSchema;
};
/**
 * @description Set secrets for Dependabot.
 */
type DependabotSecretSchema = {
  /**
   * @description The name of the secret.
   * @example MY_ARTIFACTORY_PASSWORD
   */
  name: string;
  created_at: string;
  updated_at: string;
};
/**
 * @description A diff of the dependencies between two commits.
 */
type DependencyGraphDiffSchema = {
  change_type: "added" | "removed";

  /**
   * @example path/to/package-lock.json
   */
  manifest: string;

  /**
   * @example npm
   */
  ecosystem: string;

  /**
   * @example @actions/core
   */
  name: string;

  /**
   * @example 1.0.0
   */
  version: string;

  /**
   * @example pkg:/npm/%40actions/core@1.1.0
   */
  package_url: string | null;

  /**
   * @example MIT
   */
  license: string | null;

  /**
   * @example https://github.com/github/actions
   */
  source_repository_url: string | null;
  vulnerabilities: {
    /**
     * @example critical
     */
    severity: string;

    /**
     * @example GHSA-rf4j-j272-fj86
     */
    advisory_ghsa_id: string;

    /**
     * @example A summary of the advisory.
     */
    advisory_summary: string;

    /**
     * @example https://github.com/advisories/GHSA-rf4j-j272-fj86
     */
    advisory_url: string;
  }[];

  /**
   * @description Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment.
   */
  scope: "unknown" | "runtime" | "development";
}[];
/**
 * @description A schema for the SPDX JSON format returned by the Dependency Graph.
 */
type DependencyGraphSpdxSbomSchema = {
  sbom: {
    /**
     * @description The SPDX identifier for the SPDX document.
     * @example SPDXRef-DOCUMENT
     */
    SPDXID: string;

    /**
     * @description The version of the SPDX specification that this document conforms to.
     * @example SPDX-2.3
     */
    spdxVersion: string;

    /**
     * @description An optional comment about the SPDX document.
     * @example Exact versions could not be resolved for some packages. For more information: https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/
     */
    comment?: string;
    creationInfo: {
      /**
       * @description The date and time the SPDX document was created.
       * @example 2021-11-03T00:00:00Z
       */
      created: string;

      /**
       * @description The tools that were used to generate the SPDX document.
       */
      creators: string[];
    };

    /**
     * @description The name of the SPDX document.
     * @example github/github
     */
    name: string;

    /**
     * @description The license under which the SPDX document is licensed.
     * @example CC0-1.0
     */
    dataLicense: string;

    /**
     * @description The namespace for the SPDX document.
     * @example https://spdx.org/spdxdocs/protobom/15e41dd2-f961-4f4d-b8dc-f8f57ad70d57
     */
    documentNamespace: string;
    packages: {
      /**
       * @description A unique SPDX identifier for the package.
       * @example SPDXRef-Package
       */
      SPDXID?: string;

      /**
       * @description The name of the package.
       * @example github/github
       */
      name?: string;

      /**
       * @description The version of the package. If the package does not have an exact version specified,
       * a version range is given.
       * @example 1.0.0
       */
      versionInfo?: string;

      /**
       * @description The location where the package can be downloaded,
       * or NOASSERTION if this has not been determined.
       * @example NOASSERTION
       */
      downloadLocation?: string;

      /**
       * @description Whether the package's file content has been subjected to
       * analysis during the creation of the SPDX document.
       */
      filesAnalyzed?: boolean;

      /**
       * @description The license of the package as determined while creating the SPDX document.
       * @example MIT
       */
      licenseConcluded?: string;

      /**
       * @description The license of the package as declared by its author, or NOASSERTION if this information
       * was not available when the SPDX document was created.
       * @example NOASSERTION
       */
      licenseDeclared?: string;

      /**
       * @description The distribution source of this package, or NOASSERTION if this was not determined.
       * @example NOASSERTION
       */
      supplier?: string;

      /**
       * @description The copyright holders of the package, and any dates present with those notices, if available.
       * @example Copyright (c) 1985 GitHub.com
       */
      copyrightText?: string;
      externalRefs?: {
        /**
         * @description The category of reference to an external resource this reference refers to.
         * @example PACKAGE-MANAGER
         */
        referenceCategory: string;

        /**
         * @description A locator for the particular external resource this reference refers to.
         * @example pkg:gem/rails@6.0.1
         */
        referenceLocator: string;

        /**
         * @description The category of reference to an external resource this reference refers to.
         * @example purl
         */
        referenceType: string;
      }[];
    }[];
    relationships?: {
      /**
       * @description The type of relationship between the two SPDX elements.
       * @example DEPENDS_ON
       */
      relationshipType?: string;

      /**
       * @description The SPDX identifier of the package that is the source of the relationship.
       */
      spdxElementId?: string;

      /**
       * @description The SPDX identifier of the package that is the target of the relationship.
       */
      relatedSpdxElement?: string;
    }[];
  };
};
/**
 * @description User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
 */
type DeploymentStatusSchema = {
  /**
   * @example https://api.github.com/repos/octocat/example/deployments/42/statuses/1
   */
  url: string;

  /**
   * @example 1
   */
  id: number;

  /**
   * @example MDE2OkRlcGxveW1lbnRTdGF0dXMx
   */
  node_id: string;

  /**
   * @description The state of the status.
   * @example success
   */
  state:
    | "error"
    | "failure"
    | "inactive"
    | "pending"
    | "success"
    | "queued"
    | "in_progress";
  creator: NullableSimpleUserSchema;

  /**
   * @description A short description of the status.
   * @example Deployment finished successfully.
   * @default ""
   */
  description: string;

  /**
   * @description The environment of the deployment that the status is for.
   * @example production
   * @default ""
   */
  environment?: string;

  /**
   * @description Closing down notice: the URL to associate with this status.
   * @example https://example.com/deployment/42/output
   * @default ""
   */
  target_url: string;

  /**
   * @example 2012-07-20T01:19:13Z
   */
  created_at: string;

  /**
   * @example 2012-07-20T01:19:13Z
   */
  updated_at: string;

  /**
   * @example https://api.github.com/repos/octocat/example/deployments/42
   */
  deployment_url: string;

  /**
   * @example https://api.github.com/repos/octocat/example
   */
  repository_url: string;

  /**
   * @description The URL for accessing your environment.
   * @example https://staging.example.com/
   * @default ""
   */
  environment_url?: string;

  /**
   * @description The URL to associate with this status.
   * @example https://example.com/deployment/42/output
   * @default ""
   */
  log_url?: string;
  performed_via_github_app?: NullableIntegrationSchema;
};
/**
 * @description The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
 * @example 30
 */
type WaitTimerSchema = number;
/**
 * @description The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.
 */
type DeploymentBranchPolicySettingsSchema = {
  /**
   * @description Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.
   */
  protected_branches: boolean;

  /**
   * @description Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.
   */
  custom_branch_policies: boolean;
} | null;
/**
 * @description Details of a deployment environment
 */
type EnvironmentSchema = {
  /**
   * @description The id of the environment.
   * @example 56780428
   */
  id: number;

  /**
   * @example MDExOkVudmlyb25tZW50NTY3ODA0Mjg=
   */
  node_id: string;

  /**
   * @description The name of the environment.
   * @example staging
   */
  name: string;

  /**
   * @example https://api.github.com/repos/github/hello-world/environments/staging
   */
  url: string;

  /**
   * @example https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging
   */
  html_url: string;

  /**
   * @description The time that the environment was created, in ISO 8601 format.
   * @example 2020-11-23T22:00:40Z
   */
  created_at: string;

  /**
   * @description The time that the environment was last updated, in ISO 8601 format.
   * @example 2020-11-23T22:00:40Z
   */
  updated_at: string;

  /**
   * @description Built-in deployment protection rules for the environment.
   */
  protection_rules?: (
    | {
        /**
         * @example 3515
         */
        id: number;

        /**
         * @example MDQ6R2F0ZTM1MTU=
         */
        node_id: string;

        /**
         * @example wait_timer
         */
        type: string;
        wait_timer?: WaitTimerSchema;
      }
    | {
        /**
         * @example 3755
         */
        id: number;

        /**
         * @example MDQ6R2F0ZTM3NTU=
         */
        node_id: string;

        /**
         * @description Whether deployments to this environment can be approved by the user who created the deployment.
         */
        prevent_self_review?: boolean;

        /**
         * @example required_reviewers
         */
        type: string;

        /**
         * @description The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
         */
        reviewers?: {
          type?: DeploymentReviewerTypeSchema;
          reviewer?: SimpleUserSchema | TeamSchema;
        }[];
      }
    | {
        /**
         * @example 3515
         */
        id: number;

        /**
         * @example MDQ6R2F0ZTM1MTU=
         */
        node_id: string;

        /**
         * @example branch_policy
         */
        type: string;
      }
  )[];
  deployment_branch_policy?: DeploymentBranchPolicySettingsSchema;
};
/**
 * @description Whether or not a user who created the job is prevented from approving their own job.
 */
type PreventSelfReviewSchema = boolean;
/**
 * @description Details of a deployment branch or tag policy.
 */
type DeploymentBranchPolicySchema = {
  /**
   * @description The unique identifier of the branch or tag policy.
   * @example 361471
   */
  id?: number;

  /**
   * @example MDE2OkdhdGVCcmFuY2hQb2xpY3kzNjE0NzE=
   */
  node_id?: string;

  /**
   * @description The name pattern that branches or tags must match in order to deploy to the environment.
   * @example release/*
   */
  name?: string;

  /**
   * @description Whether this rule targets a branch or tag.
   * @example branch
   */
  type?: "branch" | "tag";
};
/**
 * @description A GitHub App that is providing a custom deployment protection rule.
 */
type CustomDeploymentRuleAppSchema = {
  /**
   * @description The unique identifier of the deployment protection rule integration.
   * @example 3515
   */
  id: number;

  /**
   * @description The slugified name of the deployment protection rule integration.
   * @example my-custom-app
   */
  slug: string;

  /**
   * @description The URL for the endpoint to get details about the app.
   * @example https://api.github.com/apps/custom-app-slug
   */
  integration_url: string;

  /**
   * @description The node ID for the deployment protection rule integration.
   * @example MDQ6R2F0ZTM1MTU=
   */
  node_id: string;
};
/**
 * @description Deployment protection rule
 */
type DeploymentProtectionRuleSchema = {
  /**
   * @description The unique identifier for the deployment protection rule.
   * @example 3515
   */
  id: number;

  /**
   * @description The node ID for the deployment protection rule.
   * @example MDQ6R2F0ZTM1MTU=
   */
  node_id: string;

  /**
   * @description Whether the deployment protection rule is enabled for the environment.
   * @example true
   */
  enabled: boolean;
  app: CustomDeploymentRuleAppSchema;
};
/**
 * @description Short Blob
 */
type BlobSchema = {
  content: string;
  encoding: string;
  url: string;
  sha: string;
  size: number | null;
  node_id: string;
  highlighted_content?: string;
};
/**
 * @description Low-level Git commit operations within a repository
 */
type GitCommitSchema = {
  /**
   * @description SHA for the commit
   * @example 7638417db6d59f3c431d3e1f261cc637155684cd
   */
  sha: string;
  node_id: string;
  url: string;

  /**
   * @description Identifying information for the git-user
   */
  author: {
    /**
     * @description Timestamp of the commit
     * @example 2014-08-09T08:02:04+12:00
     */
    date: string;

    /**
     * @description Git email address of the user
     * @example monalisa.octocat@example.com
     */
    email: string;

    /**
     * @description Name of the git user
     * @example Monalisa Octocat
     */
    name: string;
  };

  /**
   * @description Identifying information for the git-user
   */
  committer: {
    /**
     * @description Timestamp of the commit
     * @example 2014-08-09T08:02:04+12:00
     */
    date: string;

    /**
     * @description Git email address of the user
     * @example monalisa.octocat@example.com
     */
    email: string;

    /**
     * @description Name of the git user
     * @example Monalisa Octocat
     */
    name: string;
  };

  /**
   * @description Message describing the purpose of the commit
   * @example Fix #42
   */
  message: string;
  tree: {
    /**
     * @description SHA for the commit
     * @example 7638417db6d59f3c431d3e1f261cc637155684cd
     */
    sha: string;
    url: string;
  };
  parents: {
    /**
     * @description SHA for the commit
     * @example 7638417db6d59f3c431d3e1f261cc637155684cd
     */
    sha: string;
    url: string;
    html_url: string;
  }[];
  verification: {
    verified: boolean;
    reason: string;
    signature: string | null;
    payload: string | null;
    verified_at: string | null;
  };
  html_url: string;
};
/**
 * @description Git references within a repository
 */
type GitRefSchema = {
  ref: string;
  node_id: string;
  url: string;
  object: {
    type: string;

    /**
     * @description SHA for the reference
     * @example 7638417db6d59f3c431d3e1f261cc637155684cd
     */
    sha: string;
    url: string;
  };
};
/**
 * @description Metadata for a Git tag
 */
type GitTagSchema = {
  /**
   * @example MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==
   */
  node_id: string;

  /**
   * @description Name of the tag
   * @example v0.0.1
   */
  tag: string;

  /**
   * @example 940bd336248efae0f9ee5bc7b2d5c985887b16ac
   */
  sha: string;

  /**
   * @description URL for the tag
   * @example https://api.github.com/repositories/42/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac
   */
  url: string;

  /**
   * @description Message describing the purpose of the tag
   * @example Initial public release
   */
  message: string;
  tagger: {
    date: string;
    email: string;
    name: string;
  };
  object: {
    sha: string;
    type: string;
    url: string;
  };
  verification?: VerificationSchema;
};
/**
 * @description The hierarchy between files in a Git repository.
 */
type GitTreeSchema = {
  sha: string;
  url?: string;
  truncated: boolean;

  /**
 * @description Objects specifying a tree structure
 * @example [
  {
    "path": "file.rb",
    "mode": "100644",
    "type": "blob",
    "size": 30,
    "sha": "44b4fc6d56897b048c772eb4087f854f46256132",
    "url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132"
  }
]
  */
  tree: {
    /**
     * @example test/file.rb
     */
    path: string;

    /**
     * @example 040000
     */
    mode: string;

    /**
     * @example tree
     */
    type: string;

    /**
     * @example 23f6827669e43831def8a7ad935069c8bd418261
     */
    sha: string;

    /**
     * @example 12
     */
    size?: number;

    /**
     * @example https://api.github.com/repos/owner-482f3203ecf01f67e9deb18e/BBB_Private_Repo/git/blobs/23f6827669e43831def8a7ad935069c8bd418261
     */
    url?: string;
  }[];
};
type HookResponseSchema = {
  code: number | null;
  status: string | null;
  message: string | null;
};
/**
 * @description Webhooks for repositories.
 */
type HookSchema = {
  type: string;

  /**
   * @description Unique identifier of the webhook.
   * @example 42
   */
  id: number;

  /**
   * @description The name of a valid service, use 'web' for a webhook.
   * @example web
   */
  name: string;

  /**
   * @description Determines whether the hook is actually triggered on pushes.
   * @example true
   */
  active: boolean;

  /**
 * @description Determines what events the hook is triggered for. Default: ['push'].
 * @example [
  "push",
  "pull_request"
]
  */
  events: string[];
  config: WebhookConfigSchema;

  /**
   * @example 2011-09-06T20:39:23Z
   */
  updated_at: string;

  /**
   * @example 2011-09-06T17:26:27Z
   */
  created_at: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/hooks/1
   */
  url: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/hooks/1/test
   */
  test_url: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/hooks/1/pings
   */
  ping_url: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/hooks/1/deliveries
   */
  deliveries_url?: string;
  last_response: HookResponseSchema;
};
/**
 * @description A repository import from an external source.
 */
type ImportSchema = {
  vcs: string | null;
  use_lfs?: boolean;

  /**
   * @description The URL of the originating repository.
   */
  vcs_url: string;
  svc_root?: string;
  tfvc_project?: string;
  status:
    | "auth"
    | "error"
    | "none"
    | "detecting"
    | "choose"
    | "auth_failed"
    | "importing"
    | "mapping"
    | "waiting_to_push"
    | "pushing"
    | "complete"
    | "setup"
    | "unknown"
    | "detection_found_multiple"
    | "detection_found_nothing"
    | "detection_needs_auth";
  status_text?: string | null;
  failed_step?: string | null;
  error_message?: string | null;
  import_percent?: number | null;
  commit_count?: number | null;
  push_percent?: number | null;
  has_large_files?: boolean;
  large_files_size?: number;
  large_files_count?: number;
  project_choices?: {
    vcs?: string;
    tfvc_project?: string;
    human_name?: string;
  }[];
  message?: string;
  authors_count?: number | null;
  url: string;
  html_url: string;
  authors_url: string;
  repository_url: string;
  svn_root?: string;
};
/**
 * @description Porter Author
 */
type PorterAuthorSchema = {
  id: number;
  remote_id: string;
  remote_name: string;
  email: string;
  name: string;
  url: string;
  import_url: string;
};
/**
 * @description Porter Large File
 */
type PorterLargeFileSchema = {
  ref_name: string;
  path: string;
  oid: string;
  size: number;
};
/**
 * @description Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
type NullableIssueSchema = {
  id: number;
  node_id: string;

  /**
   * @description URL for the issue
   * @example https://api.github.com/repositories/42/issues/1
   */
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;

  /**
   * @description Number uniquely identifying the issue within its repository
   * @example 42
   */
  number: number;

  /**
   * @description State of the issue; either 'open' or 'closed'
   * @example open
   */
  state: string;

  /**
   * @description The reason for the current state
   * @example not_planned
   */
  state_reason?: "completed" | "reopened" | "not_planned" | "duplicate" | null;

  /**
   * @description Title of the issue
   * @example Widget creation fails in Safari on OS X 10.8
   */
  title: string;

  /**
   * @description Contents of the issue
   * @example It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?
   */
  body?: string | null;
  user: NullableSimpleUserSchema;

  /**
 * @description Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
 * @example [
  "bug",
  "registration"
]
  */
  labels: (
    | string
    | {
        id?: number;
        node_id?: string;
        url?: string;
        name?: string;
        description?: string | null;
        color?: string | null;
        default?: boolean;
      }
  )[];
  assignee: NullableSimpleUserSchema;
  assignees?: SimpleUserSchema[] | null;
  milestone: NullableMilestoneSchema;
  locked: boolean;
  active_lock_reason?: string | null;
  comments: number;
  pull_request?: {
    merged_at?: string | null;
    diff_url: string | null;
    html_url: string | null;
    patch_url: string | null;
    url: string | null;
  };
  closed_at: string | null;
  created_at: string;
  updated_at: string;
  draft?: boolean;
  closed_by?: NullableSimpleUserSchema;
  body_html?: string;
  body_text?: string;
  timeline_url?: string;
  type?: IssueTypeSchema;
  repository?: RepositorySchema;
  performed_via_github_app?: NullableIntegrationSchema;
  author_association?: AuthorAssociationSchema;
  reactions?: ReactionRollupSchema;
  sub_issues_summary?: SubIssuesSummarySchema;

  /**
   * @description URL to get the parent issue of this issue, if it is a sub-issue
   */
  parent_issue_url?: string | null;
  issue_dependencies_summary?: IssueDependenciesSummarySchema;
  issue_field_values?: IssueFieldValueSchema[];
} | null;
/**
 * @description Issue Event Label
 */
type IssueEventLabelSchema = {
  name: string | null;
  color: string | null;
};
type IssueEventDismissedReviewSchema = {
  state: string;
  review_id: number;
  dismissal_message: string | null;
  dismissal_commit_id?: string | null;
};
/**
 * @description Issue Event Milestone
 */
type IssueEventMilestoneSchema = {
  title: string;
};
/**
 * @description Issue Event Project Card
 */
type IssueEventProjectCardSchema = {
  url: string;
  id: number;
  project_url: string;
  project_id: number;
  column_name: string;
  previous_column_name?: string;
};
/**
 * @description Issue Event Rename
 */
type IssueEventRenameSchema = {
  from: string;
  to: string;
};
/**
 * @description Issue Event
 */
type IssueEventSchema = {
  /**
   * @example 1
   */
  id: number;

  /**
   * @example MDEwOklzc3VlRXZlbnQx
   */
  node_id: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/issues/events/1
   */
  url: string;
  actor: NullableSimpleUserSchema;

  /**
   * @example closed
   */
  event: string;

  /**
   * @example 6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  commit_id: string | null;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  commit_url: string | null;

  /**
   * @example 2011-04-14T16:00:49Z
   */
  created_at: string;
  issue?: NullableIssueSchema;
  label?: IssueEventLabelSchema;
  assignee?: NullableSimpleUserSchema;
  assigner?: NullableSimpleUserSchema;
  review_requester?: NullableSimpleUserSchema;
  requested_reviewer?: NullableSimpleUserSchema;
  requested_team?: TeamSchema;
  dismissed_review?: IssueEventDismissedReviewSchema;
  milestone?: IssueEventMilestoneSchema;
  project_card?: IssueEventProjectCardSchema;
  rename?: IssueEventRenameSchema;
  author_association?: AuthorAssociationSchema;
  lock_reason?: string | null;
  performed_via_github_app?: NullableIntegrationSchema;
};
/**
 * @description Labeled Issue Event
 */
type LabeledIssueEventSchema = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUserSchema;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegrationSchema;
  label: {
    name: string;
    color: string;
  };
};
/**
 * @description Unlabeled Issue Event
 */
type UnlabeledIssueEventSchema = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUserSchema;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegrationSchema;
  label: {
    name: string;
    color: string;
  };
};
/**
 * @description Assigned Issue Event
 */
type AssignedIssueEventSchema = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUserSchema;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: IntegrationSchema;
  assignee: SimpleUserSchema;
  assigner: SimpleUserSchema;
};
/**
 * @description Unassigned Issue Event
 */
type UnassignedIssueEventSchema = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUserSchema;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegrationSchema;
  assignee: SimpleUserSchema;
  assigner: SimpleUserSchema;
};
/**
 * @description Milestoned Issue Event
 */
type MilestonedIssueEventSchema = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUserSchema;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegrationSchema;
  milestone: {
    title: string;
  };
};
/**
 * @description Demilestoned Issue Event
 */
type DemilestonedIssueEventSchema = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUserSchema;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegrationSchema;
  milestone: {
    title: string;
  };
};
/**
 * @description Renamed Issue Event
 */
type RenamedIssueEventSchema = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUserSchema;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegrationSchema;
  rename: {
    from: string;
    to: string;
  };
};
/**
 * @description Review Requested Issue Event
 */
type ReviewRequestedIssueEventSchema = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUserSchema;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegrationSchema;
  review_requester: SimpleUserSchema;
  requested_team?: TeamSchema;
  requested_reviewer?: SimpleUserSchema;
};
/**
 * @description Review Request Removed Issue Event
 */
type ReviewRequestRemovedIssueEventSchema = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUserSchema;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegrationSchema;
  review_requester: SimpleUserSchema;
  requested_team?: TeamSchema;
  requested_reviewer?: SimpleUserSchema;
};
/**
 * @description Review Dismissed Issue Event
 */
type ReviewDismissedIssueEventSchema = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUserSchema;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegrationSchema;
  dismissed_review: {
    state: string;
    review_id: number;
    dismissal_message: string | null;
    dismissal_commit_id?: string;
  };
};
/**
 * @description Locked Issue Event
 */
type LockedIssueEventSchema = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUserSchema;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegrationSchema;

  /**
   * @example "off-topic"
   */
  lock_reason: string | null;
};
/**
 * @description Added to Project Issue Event
 */
type AddedToProjectIssueEventSchema = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUserSchema;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegrationSchema;
  project_card?: {
    id: number;
    url: string;
    project_id: number;
    project_url: string;
    column_name: string;
    previous_column_name?: string;
  };
};
/**
 * @description Moved Column in Project Issue Event
 */
type MovedColumnInProjectIssueEventSchema = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUserSchema;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegrationSchema;
  project_card?: {
    id: number;
    url: string;
    project_id: number;
    project_url: string;
    column_name: string;
    previous_column_name?: string;
  };
};
/**
 * @description Removed from Project Issue Event
 */
type RemovedFromProjectIssueEventSchema = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUserSchema;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegrationSchema;
  project_card?: {
    id: number;
    url: string;
    project_id: number;
    project_url: string;
    column_name: string;
    previous_column_name?: string;
  };
};
/**
 * @description Converted Note to Issue Issue Event
 */
type ConvertedNoteToIssueIssueEventSchema = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUserSchema;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: IntegrationSchema;
  project_card?: {
    id: number;
    url: string;
    project_id: number;
    project_url: string;
    column_name: string;
    previous_column_name?: string;
  };
};
/**
 * @description Issue Event for Issue
 */
type IssueEventForIssueSchema =
  | LabeledIssueEventSchema
  | UnlabeledIssueEventSchema
  | AssignedIssueEventSchema
  | UnassignedIssueEventSchema
  | MilestonedIssueEventSchema
  | DemilestonedIssueEventSchema
  | RenamedIssueEventSchema
  | ReviewRequestedIssueEventSchema
  | ReviewRequestRemovedIssueEventSchema
  | ReviewDismissedIssueEventSchema
  | LockedIssueEventSchema
  | AddedToProjectIssueEventSchema
  | MovedColumnInProjectIssueEventSchema
  | RemovedFromProjectIssueEventSchema
  | ConvertedNoteToIssueIssueEventSchema;
/**
 * @description Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 */
type LabelSchema = {
  /**
   * @description Unique identifier for the label.
   * @example 208045946
   */
  id: number;

  /**
   * @example MDU6TGFiZWwyMDgwNDU5NDY=
   */
  node_id: string;

  /**
   * @description URL for the label
   * @example https://api.github.com/repositories/42/labels/bug
   */
  url: string;

  /**
   * @description The name of the label.
   * @example bug
   */
  name: string;

  /**
   * @description Optional description of the label, such as its purpose.
   * @example Something isn't working
   */
  description: string | null;

  /**
   * @description 6-character hex code, without the leading #, identifying the color
   * @example FFFFFF
   */
  color: string;

  /**
   * @description Whether this label comes by default in a new repository.
   * @example true
   */
  default: boolean;
};
/**
 * @description Timeline Comment Event
 */
type TimelineCommentEventSchema = {
  event: string;
  actor: SimpleUserSchema;

  /**
   * @description Unique identifier of the issue comment
   * @example 42
   */
  id: number;
  node_id: string;

  /**
   * @description URL for the issue comment
   * @example https://api.github.com/repositories/42/issues/comments/1
   */
  url: string;

  /**
   * @description Contents of the issue comment
   * @example What version of Safari were you using when you observed this bug?
   */
  body?: string;
  body_text?: string;
  body_html?: string;
  html_url: string;
  user: SimpleUserSchema;

  /**
   * @example 2011-04-14T16:00:49Z
   */
  created_at: string;

  /**
   * @example 2011-04-14T16:00:49Z
   */
  updated_at: string;
  issue_url: string;
  author_association: AuthorAssociationSchema;
  performed_via_github_app?: NullableIntegrationSchema;
  reactions?: ReactionRollupSchema;
};
/**
 * @description Timeline Cross Referenced Event
 */
type TimelineCrossReferencedEventSchema = {
  event: string;
  actor?: SimpleUserSchema;
  created_at: string;
  updated_at: string;
  source: {
    type?: string;
    issue?: IssueSchema;
  };
};
/**
 * @description Timeline Committed Event
 */
type TimelineCommittedEventSchema = {
  event?: string;

  /**
   * @description SHA for the commit
   * @example 7638417db6d59f3c431d3e1f261cc637155684cd
   */
  sha: string;
  node_id: string;
  url: string;

  /**
   * @description Identifying information for the git-user
   */
  author: {
    /**
     * @description Timestamp of the commit
     * @example 2014-08-09T08:02:04+12:00
     */
    date: string;

    /**
     * @description Git email address of the user
     * @example monalisa.octocat@example.com
     */
    email: string;

    /**
     * @description Name of the git user
     * @example Monalisa Octocat
     */
    name: string;
  };

  /**
   * @description Identifying information for the git-user
   */
  committer: {
    /**
     * @description Timestamp of the commit
     * @example 2014-08-09T08:02:04+12:00
     */
    date: string;

    /**
     * @description Git email address of the user
     * @example monalisa.octocat@example.com
     */
    email: string;

    /**
     * @description Name of the git user
     * @example Monalisa Octocat
     */
    name: string;
  };

  /**
   * @description Message describing the purpose of the commit
   * @example Fix #42
   */
  message: string;
  tree: {
    /**
     * @description SHA for the commit
     * @example 7638417db6d59f3c431d3e1f261cc637155684cd
     */
    sha: string;
    url: string;
  };
  parents: {
    /**
     * @description SHA for the commit
     * @example 7638417db6d59f3c431d3e1f261cc637155684cd
     */
    sha: string;
    url: string;
    html_url: string;
  }[];
  verification: {
    verified: boolean;
    reason: string;
    signature: string | null;
    payload: string | null;
    verified_at: string | null;
  };
  html_url: string;
};
/**
 * @description Timeline Reviewed Event
 */
type TimelineReviewedEventSchema = {
  event: string;

  /**
   * @description Unique identifier of the review
   * @example 42
   */
  id: number;

  /**
   * @example MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=
   */
  node_id: string;
  user: SimpleUserSchema;

  /**
   * @description The text of the review.
   * @example This looks great.
   */
  body: string | null;

  /**
   * @example CHANGES_REQUESTED
   */
  state: string;

  /**
   * @example https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80
   */
  html_url: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/12
   */
  pull_request_url: string;
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  submitted_at?: string;
  updated_at?: string | null;

  /**
   * @description A commit SHA for the review.
   * @example 54bb654c9e6025347f57900a4a5c2313a96b8035
   */
  commit_id: string;
  body_html?: string;
  body_text?: string;
  author_association: AuthorAssociationSchema;
};
/**
 * @description Pull Request Review Comments are comments on a portion of the Pull Request's diff.
 */
type PullRequestReviewCommentSchema = {
  /**
   * @description URL for the pull request review comment
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
   */
  url: string;

  /**
   * @description The ID of the pull request review to which the comment belongs.
   * @example 42
   */
  pull_request_review_id: number | null;

  /**
   * @description The ID of the pull request review comment.
   * @example 1
   */
  id: number;

  /**
   * @description The node ID of the pull request review comment.
   * @example MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw
   */
  node_id: string;

  /**
   * @description The diff of the line that the comment refers to.
   * @example @@ -16,33 +16,40 @@ public class Connection : IConnection...
   */
  diff_hunk: string;

  /**
   * @description The relative path of the file to which the comment applies.
   * @example config/database.yaml
   */
  path: string;

  /**
   * @description The line index in the diff to which the comment applies. This field is closing down; use `line` instead.
   * @example 1
   */
  position?: number;

  /**
   * @description The index of the original line in the diff to which the comment applies. This field is closing down; use `original_line` instead.
   * @example 4
   */
  original_position?: number;

  /**
   * @description The SHA of the commit to which the comment applies.
   * @example 6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  commit_id: string;

  /**
   * @description The SHA of the original commit to which the comment applies.
   * @example 9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840
   */
  original_commit_id: string;

  /**
   * @description The comment ID to reply to.
   * @example 8
   */
  in_reply_to_id?: number;
  user: SimpleUserSchema;

  /**
   * @description The text of the comment.
   * @example We should probably include a check for null values here.
   */
  body: string;

  /**
   * @example 2011-04-14T16:00:49Z
   */
  created_at: string;

  /**
   * @example 2011-04-14T16:00:49Z
   */
  updated_at: string;

  /**
   * @description HTML URL for the pull request review comment.
   * @example https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
   */
  html_url: string;

  /**
   * @description URL for the pull request that the review comment belongs to.
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1
   */
  pull_request_url: string;
  author_association: AuthorAssociationSchema;
  _links: {
    self: {
      /**
       * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
       */
      href: string;
    };
    html: {
      /**
       * @example https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
       */
      href: string;
    };
    pull_request: {
      /**
       * @example https://api.github.com/repos/octocat/Hello-World/pulls/1
       */
      href: string;
    };
  };

  /**
   * @description The first line of the range for a multi-line comment.
   * @example 2
   */
  start_line?: number | null;

  /**
   * @description The first line of the range for a multi-line comment.
   * @example 2
   */
  original_start_line?: number | null;

  /**
   * @description The side of the first line of the range for a multi-line comment.
   * @default "RIGHT"
   */
  start_side?: "LEFT" | "RIGHT" | null;

  /**
   * @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   */
  line?: number;

  /**
   * @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   */
  original_line?: number;

  /**
   * @description The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
   * @default "RIGHT"
   */
  side?: "LEFT" | "RIGHT";

  /**
   * @description The level at which the comment is targeted, can be a diff line or a file.
   */
  subject_type?: "line" | "file";
  reactions?: ReactionRollupSchema;

  /**
   * @example "<p>comment body</p>"
   */
  body_html?: string;

  /**
   * @example "comment body"
   */
  body_text?: string;
};
/**
 * @description Timeline Line Commented Event
 */
type TimelineLineCommentedEventSchema = {
  event?: string;
  node_id?: string;
  comments?: PullRequestReviewCommentSchema[];
};
/**
 * @description Timeline Commit Commented Event
 */
type TimelineCommitCommentedEventSchema = {
  event?: string;
  node_id?: string;
  commit_id?: string;
  comments?: CommitCommentSchema[];
};
/**
 * @description Timeline Assigned Issue Event
 */
type TimelineAssignedIssueEventSchema = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUserSchema;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegrationSchema;
  assignee: SimpleUserSchema;
};
/**
 * @description Timeline Unassigned Issue Event
 */
type TimelineUnassignedIssueEventSchema = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUserSchema;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegrationSchema;
  assignee: SimpleUserSchema;
};
/**
 * @description State Change Issue Event
 */
type StateChangeIssueEventSchema = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUserSchema;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegrationSchema;
  state_reason?: string | null;
};
/**
 * @description Timeline Event
 */
type TimelineIssueEventsSchema =
  | LabeledIssueEventSchema
  | UnlabeledIssueEventSchema
  | MilestonedIssueEventSchema
  | DemilestonedIssueEventSchema
  | RenamedIssueEventSchema
  | ReviewRequestedIssueEventSchema
  | ReviewRequestRemovedIssueEventSchema
  | ReviewDismissedIssueEventSchema
  | LockedIssueEventSchema
  | AddedToProjectIssueEventSchema
  | MovedColumnInProjectIssueEventSchema
  | RemovedFromProjectIssueEventSchema
  | ConvertedNoteToIssueIssueEventSchema
  | TimelineCommentEventSchema
  | TimelineCrossReferencedEventSchema
  | TimelineCommittedEventSchema
  | TimelineReviewedEventSchema
  | TimelineLineCommentedEventSchema
  | TimelineCommitCommentedEventSchema
  | TimelineAssignedIssueEventSchema
  | TimelineUnassignedIssueEventSchema
  | StateChangeIssueEventSchema;
/**
 * @description An SSH key granting access to a single repository.
 */
type DeployKeySchema = {
  id: number;
  key: string;
  url: string;
  title: string;
  verified: boolean;
  created_at: string;
  read_only: boolean;
  added_by?: string | null;
  last_used?: string | null;
  enabled?: boolean;
};
/**
 * @description Language
 */
type LanguageSchema = {
  [key: string]: number;
};
/**
 * @description License Content
 */
type LicenseContentSchema = {
  name: string;
  path: string;
  sha: string;
  size: number;
  url: string;
  html_url: string | null;
  git_url: string | null;
  download_url: string | null;
  type: string;
  content: string;
  encoding: string;
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };
  license: NullableLicenseSimpleSchema;
};
/**
 * @description Results of a successful merge upstream request
 */
type MergedUpstreamSchema = {
  message?: string;
  merge_type?: "merge" | "fast-forward" | "none";
  base_branch?: string;
};
/**
 * @description A collection of related issues and pull requests.
 */
type MilestoneSchema = {
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/milestones/1
   */
  url: string;

  /**
   * @example https://github.com/octocat/Hello-World/milestones/v1.0
   */
  html_url: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/milestones/1/labels
   */
  labels_url: string;

  /**
   * @example 1002604
   */
  id: number;

  /**
   * @example MDk6TWlsZXN0b25lMTAwMjYwNA==
   */
  node_id: string;

  /**
   * @description The number of the milestone.
   * @example 42
   */
  number: number;

  /**
   * @description The state of the milestone.
   * @example open
   * @default "open"
   */
  state: "open" | "closed";

  /**
   * @description The title of the milestone.
   * @example v1.0
   */
  title: string;

  /**
   * @example Tracking milestone for version 1.0
   */
  description: string | null;
  creator: NullableSimpleUserSchema;

  /**
   * @example 4
   */
  open_issues: number;

  /**
   * @example 8
   */
  closed_issues: number;

  /**
   * @example 2011-04-10T20:09:31Z
   */
  created_at: string;

  /**
   * @example 2014-03-03T18:58:10Z
   */
  updated_at: string;

  /**
   * @example 2013-02-12T13:22:01Z
   */
  closed_at: string | null;

  /**
   * @example 2012-10-09T23:39:01Z
   */
  due_on: string | null;
};
type PagesSourceHashSchema = {
  branch: string;
  path: string;
};
type PagesHttpsCertificateSchema = {
  /**
   * @example approved
   */
  state:
    | "new"
    | "authorization_created"
    | "authorization_pending"
    | "authorized"
    | "authorization_revoked"
    | "issued"
    | "uploaded"
    | "approved"
    | "errored"
    | "bad_authz"
    | "destroy_pending"
    | "dns_changed";

  /**
   * @example Certificate is approved
   */
  description: string;

  /**
 * @description Array of the domain set and its alternate name (if it is configured)
 * @example [
  "example.com",
  "www.example.com"
]
  */
  domains: string[];
  expires_at?: string;
};
/**
 * @description The configuration for GitHub Pages for a repository.
 */
type PageSchema = {
  /**
   * @description The API address for accessing this Page resource.
   * @example https://api.github.com/repos/github/hello-world/pages
   */
  url: string;

  /**
   * @description The status of the most recent build of the Page.
   * @example built
   */
  status: "built" | "building" | "errored" | null;

  /**
   * @description The Pages site's custom domain
   * @example example.com
   */
  cname: string | null;

  /**
   * @description The state if the domain is verified
   * @example pending
   */
  protected_domain_state?: "pending" | "verified" | "unverified" | null;

  /**
   * @description The timestamp when a pending domain becomes unverified.
   */
  pending_domain_unverified_at?: string | null;

  /**
   * @description Whether the Page has a custom 404 page.
   * @default false
   */
  custom_404: boolean;

  /**
   * @description The web address the Page can be accessed from.
   * @example https://example.com
   */
  html_url?: string;

  /**
   * @description The process in which the Page will be built.
   * @example legacy
   */
  build_type?: "legacy" | "workflow" | null;
  source?: PagesSourceHashSchema;

  /**
   * @description Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
   * @example true
   */
  public: boolean;
  https_certificate?: PagesHttpsCertificateSchema;

  /**
   * @description Whether https is enabled on the domain
   * @example true
   */
  https_enforced?: boolean;
};
/**
 * @description Page Build
 */
type PageBuildSchema = {
  url: string;
  status: string;
  error: {
    message: string | null;
  };
  pusher: NullableSimpleUserSchema;
  commit: string;
  duration: number;
  created_at: string;
  updated_at: string;
};
/**
 * @description Page Build Status
 */
type PageDeploymentSchema = {
  /**
   * @description The ID of the GitHub Pages deployment. This is the Git SHA of the deployed commit.
   */
  id: number | string;

  /**
   * @description The URI to monitor GitHub Pages deployment status.
   * @example https://api.github.com/repos/github/hello-world/pages/deployments/4fd754f7e594640989b406850d0bc8f06a121251
   */
  status_url: string;

  /**
   * @description The URI to the deployed GitHub Pages.
   * @example hello-world.github.io
   */
  page_url: string;

  /**
   * @description The URI to the deployed GitHub Pages preview.
   * @example monalisa-1231a2312sa32-23sda74.drafts.github.io
   */
  preview_url?: string;
};
type PagesDeploymentStatusSchema = {
  /**
   * @description The current status of the deployment.
   */
  status?:
    | "deployment_in_progress"
    | "syncing_files"
    | "finished_file_sync"
    | "updating_pages"
    | "purging_cdn"
    | "deployment_cancelled"
    | "deployment_failed"
    | "deployment_content_failed"
    | "deployment_attempt_error"
    | "deployment_lost"
    | "succeed";
};
/**
 * @description Pages Health Check Status
 */
type PagesHealthCheckSchema = {
  domain?: {
    host?: string;
    uri?: string;
    nameservers?: string;
    dns_resolves?: boolean;
    is_proxied?: boolean | null;
    is_cloudflare_ip?: boolean | null;
    is_fastly_ip?: boolean | null;
    is_old_ip_address?: boolean | null;
    is_a_record?: boolean | null;
    has_cname_record?: boolean | null;
    has_mx_records_present?: boolean | null;
    is_valid_domain?: boolean;
    is_apex_domain?: boolean;
    should_be_a_record?: boolean | null;
    is_cname_to_github_user_domain?: boolean | null;
    is_cname_to_pages_dot_github_dot_com?: boolean | null;
    is_cname_to_fastly?: boolean | null;
    is_pointed_to_github_pages_ip?: boolean | null;
    is_non_github_pages_ip_present?: boolean | null;
    is_pages_domain?: boolean;
    is_served_by_pages?: boolean | null;
    is_valid?: boolean;
    reason?: string | null;
    responds_to_https?: boolean;
    enforces_https?: boolean;
    https_error?: string | null;
    is_https_eligible?: boolean | null;
    caa_error?: string | null;
  };
  alt_domain?: {
    host?: string;
    uri?: string;
    nameservers?: string;
    dns_resolves?: boolean;
    is_proxied?: boolean | null;
    is_cloudflare_ip?: boolean | null;
    is_fastly_ip?: boolean | null;
    is_old_ip_address?: boolean | null;
    is_a_record?: boolean | null;
    has_cname_record?: boolean | null;
    has_mx_records_present?: boolean | null;
    is_valid_domain?: boolean;
    is_apex_domain?: boolean;
    should_be_a_record?: boolean | null;
    is_cname_to_github_user_domain?: boolean | null;
    is_cname_to_pages_dot_github_dot_com?: boolean | null;
    is_cname_to_fastly?: boolean | null;
    is_pointed_to_github_pages_ip?: boolean | null;
    is_non_github_pages_ip_present?: boolean | null;
    is_pages_domain?: boolean;
    is_served_by_pages?: boolean | null;
    is_valid?: boolean;
    reason?: string | null;
    responds_to_https?: boolean;
    enforces_https?: boolean;
    https_error?: string | null;
    is_https_eligible?: boolean | null;
    caa_error?: string | null;
  } | null;
};
/**
 * @description Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
 */
type PullRequestSchema = {
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347
   */
  url: string;

  /**
   * @example 1
   */
  id: number;

  /**
   * @example MDExOlB1bGxSZXF1ZXN0MQ==
   */
  node_id: string;

  /**
   * @example https://github.com/octocat/Hello-World/pull/1347
   */
  html_url: string;

  /**
   * @example https://github.com/octocat/Hello-World/pull/1347.diff
   */
  diff_url: string;

  /**
   * @example https://github.com/octocat/Hello-World/pull/1347.patch
   */
  patch_url: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347
   */
  issue_url: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits
   */
  commits_url: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments
   */
  review_comments_url: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}
   */
  review_comment_url: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/issues/1347/comments
   */
  comments_url: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  statuses_url: string;

  /**
   * @description Number uniquely identifying the pull request within its repository.
   * @example 42
   */
  number: number;

  /**
   * @description State of this Pull Request. Either `open` or `closed`.
   * @example open
   */
  state: "open" | "closed";

  /**
   * @example true
   */
  locked: boolean;

  /**
   * @description The title of the pull request.
   * @example Amazing new feature
   */
  title: string;
  user: SimpleUserSchema;

  /**
   * @example Please pull these awesome changes
   */
  body: string | null;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string | null;
    color: string;
    default: boolean;
  }[];
  milestone: NullableMilestoneSchema;

  /**
   * @example too heated
   */
  active_lock_reason?: string | null;

  /**
   * @example 2011-01-26T19:01:12Z
   */
  created_at: string;

  /**
   * @example 2011-01-26T19:01:12Z
   */
  updated_at: string;

  /**
   * @example 2011-01-26T19:01:12Z
   */
  closed_at: string | null;

  /**
   * @example 2011-01-26T19:01:12Z
   */
  merged_at: string | null;

  /**
   * @example e5bd3914e2e596debea16f433f57875b5b90bcd6
   */
  merge_commit_sha: string | null;
  assignee: NullableSimpleUserSchema;
  assignees?: SimpleUserSchema[] | null;
  requested_reviewers?: SimpleUserSchema[] | null;
  requested_teams?: TeamSimpleSchema[] | null;
  head: {
    label: string;
    ref: string;
    repo: RepositorySchema;
    sha: string;
    user: SimpleUserSchema;
  };
  base: {
    label: string;
    ref: string;
    repo: RepositorySchema;
    sha: string;
    user: SimpleUserSchema;
  };
  _links: {
    comments: LinkSchema;
    commits: LinkSchema;
    statuses: LinkSchema;
    html: LinkSchema;
    issue: LinkSchema;
    review_comments: LinkSchema;
    review_comment: LinkSchema;
    self: LinkSchema;
  };
  author_association: AuthorAssociationSchema;
  auto_merge: AutoMergeSchema;

  /**
   * @description Indicates whether or not the pull request is a draft.
   */
  draft?: boolean;
  merged: boolean;

  /**
   * @example true
   */
  mergeable: boolean | null;

  /**
   * @example true
   */
  rebaseable?: boolean | null;

  /**
   * @example clean
   */
  mergeable_state: string;
  merged_by: NullableSimpleUserSchema;

  /**
   * @example 10
   */
  comments: number;
  review_comments: number;

  /**
   * @description Indicates whether maintainers can modify the pull request.
   * @example true
   */
  maintainer_can_modify: boolean;

  /**
   * @example 3
   */
  commits: number;

  /**
   * @example 100
   */
  additions: number;

  /**
   * @example 3
   */
  deletions: number;

  /**
   * @example 5
   */
  changed_files: number;
};
/**
 * @description Pull Request Merge Result
 */
type PullRequestMergeResultSchema = {
  sha: string;
  merged: boolean;
  message: string;
};
/**
 * @description Pull Request Review Request
 */
type PullRequestReviewRequestSchema = {
  users: SimpleUserSchema[];
  teams: TeamSchema[];
};
/**
 * @description Pull Request Reviews are reviews on pull requests.
 */
type PullRequestReviewSchema = {
  /**
   * @description Unique identifier of the review
   * @example 42
   */
  id: number;

  /**
   * @example MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=
   */
  node_id: string;
  user: NullableSimpleUserSchema;

  /**
   * @description The text of the review.
   * @example This looks great.
   */
  body: string;

  /**
   * @example CHANGES_REQUESTED
   */
  state: string;

  /**
   * @example https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80
   */
  html_url: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/12
   */
  pull_request_url: string;
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  submitted_at?: string;

  /**
   * @description A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`.
   * @example 54bb654c9e6025347f57900a4a5c2313a96b8035
   */
  commit_id: string | null;
  body_html?: string;
  body_text?: string;
  author_association: AuthorAssociationSchema;
};
/**
 * @description Legacy Review Comment
 */
type ReviewCommentSchema = {
  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
   */
  url: string;

  /**
   * @example 42
   */
  pull_request_review_id: number | null;

  /**
   * @example 10
   */
  id: number;

  /**
   * @example MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw
   */
  node_id: string;

  /**
   * @example @@ -16,33 +16,40 @@ public class Connection : IConnection...
   */
  diff_hunk: string;

  /**
   * @example file1.txt
   */
  path: string;

  /**
   * @example 1
   */
  position: number | null;

  /**
   * @example 4
   */
  original_position: number;

  /**
   * @example 6dcb09b5b57875f334f61aebed695e2e4193db5e
   */
  commit_id: string;

  /**
   * @example 9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840
   */
  original_commit_id: string;

  /**
   * @example 8
   */
  in_reply_to_id?: number;
  user: NullableSimpleUserSchema;

  /**
   * @example Great stuff
   */
  body: string;

  /**
   * @example 2011-04-14T16:00:49Z
   */
  created_at: string;

  /**
   * @example 2011-04-14T16:00:49Z
   */
  updated_at: string;

  /**
   * @example https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
   */
  html_url: string;

  /**
   * @example https://api.github.com/repos/octocat/Hello-World/pulls/1
   */
  pull_request_url: string;
  author_association: AuthorAssociationSchema;
  _links: {
    self: LinkSchema;
    html: LinkSchema;
    pull_request: LinkSchema;
  };
  body_text?: string;
  body_html?: string;
  reactions?: ReactionRollupSchema;

  /**
   * @description The side of the first line of the range for a multi-line comment.
   * @default "RIGHT"
   */
  side?: "LEFT" | "RIGHT";

  /**
   * @description The side of the first line of the range for a multi-line comment.
   * @default "RIGHT"
   */
  start_side?: "LEFT" | "RIGHT" | null;

  /**
   * @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   */
  line?: number;

  /**
   * @description The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   */
  original_line?: number;

  /**
   * @description The first line of the range for a multi-line comment.
   * @example 2
   */
  start_line?: number | null;

  /**
   * @description The original first line of the range for a multi-line comment.
   * @example 2
   */
  original_start_line?: number | null;

  /**
   * @description The level at which the comment is targeted, can be a diff line or a file.
   */
  subject_type?: "line" | "file";
};
/**
 * @description Data related to a release.
 */
type ReleaseAssetSchema = {
  url: string;
  browser_download_url: string;
  id: number;
  node_id: string;

  /**
   * @description The file name of the asset.
   * @example Team Environment
   */
  name: string;
  label: string | null;

  /**
   * @description State of the release asset.
   */
  state: "uploaded" | "open";
  content_type: string;
  size: number;
  digest: string | null;
  download_count: number;
  created_at: string;
  updated_at: string;
  uploader: NullableSimpleUserSchema;
};
/**
 * @description A release.
 */
type ReleaseSchema = {
  url: string;
  html_url: string;
  assets_url: string;
  upload_url: string;
  tarball_url: string | null;
  zipball_url: string | null;
  id: number;
  node_id: string;

  /**
   * @description The name of the tag.
   * @example v1.0.0
   */
  tag_name: string;

  /**
   * @description Specifies the commitish value that determines where the Git tag is created from.
   * @example master
   */
  target_commitish: string;
  name: string | null;
  body?: string | null;

  /**
   * @description true to create a draft (unpublished) release, false to create a published one.
   */
  draft: boolean;

  /**
   * @description Whether to identify the release as a prerelease or a full release.
   */
  prerelease: boolean;

  /**
   * @description Whether or not the release is immutable.
   */
  immutable?: boolean;
  created_at: string;
  published_at: string | null;
  updated_at?: string | null;
  author: SimpleUserSchema;
  assets: ReleaseAssetSchema[];
  body_html?: string;
  body_text?: string;
  mentions_count?: number;

  /**
   * @description The URL of the release discussion.
   */
  discussion_url?: string;
  reactions?: ReactionRollupSchema;
};
/**
 * @description Generated name and body describing a release
 */
type ReleaseNotesContentSchema = {
  /**
   * @description The generated name of the release
   * @example Release v1.0.0 is now available!
   */
  name: string;

  /**
   * @description The generated body describing the contents of the release supporting markdown formatting
   */
  body: string;
};
/**
 * @description User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
 */
type RepositoryRuleRulesetInfoSchema = {
  /**
   * @description The type of source for the ruleset that includes this rule.
   */
  ruleset_source_type?: "Repository" | "Organization";

  /**
   * @description The name of the source of the ruleset that includes this rule.
   */
  ruleset_source?: string;

  /**
   * @description The ID of the ruleset that includes this rule.
   */
  ruleset_id?: number;
};
/**
 * @description A repository rule with ruleset details.
 */
type RepositoryRuleDetailedSchema =
  | (RepositoryRuleCreationSchema & RepositoryRuleRulesetInfoSchema)
  | (RepositoryRuleUpdateSchema & RepositoryRuleRulesetInfoSchema)
  | (RepositoryRuleDeletionSchema & RepositoryRuleRulesetInfoSchema)
  | (RepositoryRuleRequiredLinearHistorySchema &
      RepositoryRuleRulesetInfoSchema)
  | (RepositoryRuleMergeQueueSchema & RepositoryRuleRulesetInfoSchema)
  | (RepositoryRuleRequiredDeploymentsSchema & RepositoryRuleRulesetInfoSchema)
  | (RepositoryRuleRequiredSignaturesSchema & RepositoryRuleRulesetInfoSchema)
  | (RepositoryRulePullRequestSchema & RepositoryRuleRulesetInfoSchema)
  | (RepositoryRuleRequiredStatusChecksSchema & RepositoryRuleRulesetInfoSchema)
  | (RepositoryRuleNonFastForwardSchema & RepositoryRuleRulesetInfoSchema)
  | (RepositoryRuleCommitMessagePatternSchema & RepositoryRuleRulesetInfoSchema)
  | (RepositoryRuleCommitAuthorEmailPatternSchema &
      RepositoryRuleRulesetInfoSchema)
  | (RepositoryRuleCommitterEmailPatternSchema &
      RepositoryRuleRulesetInfoSchema)
  | (RepositoryRuleBranchNamePatternSchema & RepositoryRuleRulesetInfoSchema)
  | (RepositoryRuleTagNamePatternSchema & RepositoryRuleRulesetInfoSchema)
  | (RepositoryRuleFilePathRestrictionSchema & RepositoryRuleRulesetInfoSchema)
  | (RepositoryRuleMaxFilePathLengthSchema & RepositoryRuleRulesetInfoSchema)
  | (RepositoryRuleFileExtensionRestrictionSchema &
      RepositoryRuleRulesetInfoSchema)
  | (RepositoryRuleMaxFileSizeSchema & RepositoryRuleRulesetInfoSchema)
  | (RepositoryRuleWorkflowsSchema & RepositoryRuleRulesetInfoSchema)
  | (RepositoryRuleCodeScanningSchema & RepositoryRuleRulesetInfoSchema);
type SecretScanningAlertSchema = {
  number?: AlertNumberSchema;
  created_at?: AlertCreatedAtSchema;
  updated_at?: NullableAlertUpdatedAtSchema;
  url?: AlertUrlSchema;
  html_url?: AlertHtmlUrlSchema;

  /**
   * @description The REST API URL of the code locations for this alert.
   */
  locations_url?: string;
  state?: SecretScanningAlertStateSchema;
  resolution?: SecretScanningAlertResolutionSchema;

  /**
   * @description The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  resolved_at?: string | null;
  resolved_by?: NullableSimpleUserSchema;

  /**
   * @description An optional comment to resolve an alert.
   */
  resolution_comment?: string | null;

  /**
   * @description The type of secret that secret scanning detected.
   */
  secret_type?: string;

  /**
   * @description User-friendly name for the detected secret, matching the `secret_type`.
   * For a list of built-in patterns, see "[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)."
   */
  secret_type_display_name?: string;

  /**
   * @description The secret that was detected.
   */
  secret?: string;

  /**
   * @description Whether push protection was bypassed for the detected secret.
   */
  push_protection_bypassed?: boolean | null;
  push_protection_bypassed_by?: NullableSimpleUserSchema;

  /**
   * @description The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  push_protection_bypassed_at?: string | null;
  push_protection_bypass_request_reviewer?: NullableSimpleUserSchema;

  /**
   * @description An optional comment when reviewing a push protection bypass.
   */
  push_protection_bypass_request_reviewer_comment?: string | null;

  /**
   * @description An optional comment when requesting a push protection bypass.
   */
  push_protection_bypass_request_comment?: string | null;

  /**
   * @description The URL to a push protection bypass request.
   */
  push_protection_bypass_request_html_url?: string | null;

  /**
   * @description The token status as of the latest validity check.
   */
  validity?: "active" | "inactive" | "unknown";

  /**
   * @description Whether the detected secret was publicly leaked.
   */
  publicly_leaked?: boolean | null;

  /**
   * @description Whether the detected secret was found in multiple repositories under the same organization or enterprise.
   */
  multi_repo?: boolean | null;

  /**
   * @description A boolean value representing whether or not alert is base64 encoded
   */
  is_base64_encoded?: boolean | null;
  first_location_detected?: NullableSecretScanningFirstDetectedLocationSchema;

  /**
   * @description A boolean value representing whether or not the token in the alert was detected in more than one location.
   */
  has_more_locations?: boolean;
};
/**
 * @description An optional comment when closing or reopening an alert. Cannot be updated or deleted.
 */
type SecretScanningAlertResolutionCommentSchema = string | null;
type SecretScanningLocationSchema = {
  /**
   * @description The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found.
   * @example commit
   */
  type?:
    | "commit"
    | "wiki_commit"
    | "issue_title"
    | "issue_body"
    | "issue_comment"
    | "discussion_title"
    | "discussion_body"
    | "discussion_comment"
    | "pull_request_title"
    | "pull_request_body"
    | "pull_request_comment"
    | "pull_request_review"
    | "pull_request_review_comment";
  details?:
    | SecretScanningLocationCommitSchema
    | SecretScanningLocationWikiCommitSchema
    | SecretScanningLocationIssueTitleSchema
    | SecretScanningLocationIssueBodySchema
    | SecretScanningLocationIssueCommentSchema
    | SecretScanningLocationDiscussionTitleSchema
    | SecretScanningLocationDiscussionBodySchema
    | SecretScanningLocationDiscussionCommentSchema
    | SecretScanningLocationPullRequestTitleSchema
    | SecretScanningLocationPullRequestBodySchema
    | SecretScanningLocationPullRequestCommentSchema
    | SecretScanningLocationPullRequestReviewSchema
    | SecretScanningLocationPullRequestReviewCommentSchema;
};
/**
 * @description The reason for bypassing push protection.
 */
type SecretScanningPushProtectionBypassReasonSchema =
  | "false_positive"
  | "used_in_tests"
  | "will_fix_later";
type SecretScanningPushProtectionBypassSchema = {
  reason?: SecretScanningPushProtectionBypassReasonSchema;

  /**
   * @description The time that the bypass will expire in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  expire_at?: string | null;

  /**
   * @description The token type this bypass is for.
   */
  token_type?: string;
};
/**
 * @description Information on a single scan performed by secret scanning on the repository
 */
type SecretScanningScanSchema = {
  /**
   * @description The type of scan
   */
  type?: string;

  /**
   * @description The state of the scan. Either "completed", "running", or "pending"
   */
  status?: string;

  /**
   * @description The time that the scan was completed. Empty if the scan is running
   */
  completed_at?: string | null;

  /**
   * @description The time that the scan was started. Empty if the scan is pending
   */
  started_at?: string | null;
};
type SecretScanningScanHistorySchema = {
  incremental_scans?: SecretScanningScanSchema[];
  pattern_update_scans?: SecretScanningScanSchema[];
  backfill_scans?: SecretScanningScanSchema[];
  custom_pattern_backfill_scans?: SecretScanningScanSchema &
    {
      /**
       * @description Name of the custom pattern for custom pattern scans
       */
      pattern_name?: string;

      /**
       * @description Level at which the custom pattern is defined, one of "repository", "organization", or "enterprise"
       */
      pattern_scope?: string;
    }[];
};
/**
 * @description Stargazer
 */
type StargazerSchema = {
  starred_at: string;
  user: NullableSimpleUserSchema;
};
/**
 * @description Code Frequency Stat
 */
type CodeFrequencyStatSchema = number[];
/**
 * @description Commit Activity
 */
type CommitActivitySchema = {
  /**
 * @example [
  0,
  3,
  26,
  20,
  39,
  1,
  0
]
  */
  days: number[];

  /**
   * @example 89
   */
  total: number;

  /**
   * @example 1336280400
   */
  week: number;
};
/**
 * @description Contributor Activity
 */
type ContributorActivitySchema = {
  author: NullableSimpleUserSchema;

  /**
   * @example 135
   */
  total: number;

  /**
 * @example [
  {
    "w": "1367712000",
    "a": 6898,
    "d": 77,
    "c": 10
  }
]
  */
  weeks: {
    w?: number;
    a?: number;
    d?: number;
    c?: number;
  }[];
};
type ParticipationStatsSchema = {
  all: number[];
  owner: number[];
};
/**
 * @description Repository invitations let you manage who you collaborate with.
 */
type RepositorySubscriptionSchema = {
  /**
   * @description Determines if notifications should be received from this repository.
   * @example true
   */
  subscribed: boolean;

  /**
   * @description Determines if all notifications should be blocked from this repository.
   */
  ignored: boolean;
  reason: string | null;

  /**
   * @example 2012-10-06T21:34:12Z
   */
  created_at: string;

  /**
   * @example https://api.github.com/repos/octocat/example/subscription
   */
  url: string;

  /**
   * @example https://api.github.com/repos/octocat/example
   */
  repository_url: string;
};
/**
 * @description Tag
 */
type TagSchema = {
  /**
   * @example v0.1
   */
  name: string;
  commit: {
    sha: string;
    url: string;
  };

  /**
   * @example https://github.com/octocat/Hello-World/zipball/v0.1
   */
  zipball_url: string;

  /**
   * @example https://github.com/octocat/Hello-World/tarball/v0.1
   */
  tarball_url: string;
  node_id: string;
};
/**
 * @description Tag protection
 */
type TagProtectionSchema = {
  /**
   * @example 2
   */
  id?: number;

  /**
   * @example 2011-01-26T19:01:12Z
   */
  created_at?: string;

  /**
   * @example 2011-01-26T19:01:12Z
   */
  updated_at?: string;

  /**
   * @example true
   */
  enabled?: boolean;

  /**
   * @example v1.*
   */
  pattern: string;
};
/**
 * @description A topic aggregates entities that are related to a subject.
 */
type TopicSchema = {
  names: string[];
};
type TrafficSchema = {
  timestamp: string;
  uniques: number;
  count: number;
};
/**
 * @description Clone Traffic
 */
type CloneTrafficSchema = {
  /**
   * @example 173
   */
  count: number;

  /**
   * @example 128
   */
  uniques: number;
  clones: TrafficSchema[];
};
/**
 * @description Content Traffic
 */
type ContentTrafficSchema = {
  /**
   * @example /github/hubot
   */
  path: string;

  /**
   * @example github/hubot: A customizable life embetterment robot.
   */
  title: string;

  /**
   * @example 3542
   */
  count: number;

  /**
   * @example 2225
   */
  uniques: number;
};
/**
 * @description Referrer Traffic
 */
type ReferrerTrafficSchema = {
  /**
   * @example Google
   */
  referrer: string;

  /**
   * @example 4
   */
  count: number;

  /**
   * @example 3
   */
  uniques: number;
};
/**
 * @description View Traffic
 */
type ViewTrafficSchema = {
  /**
   * @example 14850
   */
  count: number;

  /**
   * @example 3782
   */
  uniques: number;
  views: TrafficSchema[];
};
type SearchResultTextMatchesSchema = {
  object_url?: string;
  object_type?: string | null;
  property?: string;
  fragment?: string;
  matches?: {
    text?: string;
    indices?: number[];
  }[];
}[];
/**
 * @description Code Search Result Item
 */
type CodeSearchResultItemSchema = {
  name: string;
  path: string;
  sha: string;
  url: string;
  git_url: string;
  html_url: string;
  repository: MinimalRepositorySchema;
  score: number;
  file_size?: number;
  language?: string | null;
  last_modified_at?: string;

  /**
 * @example [
  "73..77",
  "77..78"
]
  */
  line_numbers?: string[];
  text_matches?: SearchResultTextMatchesSchema;
};
/**
 * @description Commit Search Result Item
 */
type CommitSearchResultItemSchema = {
  url: string;
  sha: string;
  html_url: string;
  comments_url: string;
  commit: {
    author: {
      name: string;
      email: string;
      date: string;
    };
    committer: NullableGitUserSchema;
    comment_count: number;
    message: string;
    tree: {
      sha: string;
      url: string;
    };
    url: string;
    verification?: VerificationSchema;
  };
  author: NullableSimpleUserSchema;
  committer: NullableGitUserSchema;
  parents: {
    url?: string;
    html_url?: string;
    sha?: string;
  }[];
  repository: MinimalRepositorySchema;
  score: number;
  node_id: string;
  text_matches?: SearchResultTextMatchesSchema;
};
/**
 * @description Issue Search Result Item
 */
type IssueSearchResultItemSchema = {
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  id: number;
  node_id: string;
  number: number;
  title: string;
  locked: boolean;
  active_lock_reason?: string | null;
  assignees?: SimpleUserSchema[] | null;
  user: NullableSimpleUserSchema;
  labels: {
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    color?: string;
    default?: boolean;
    description?: string | null;
  }[];
  sub_issues_summary?: SubIssuesSummarySchema;
  issue_dependencies_summary?: IssueDependenciesSummarySchema;
  issue_field_values?: IssueFieldValueSchema[];
  state: string;
  state_reason?: string | null;
  assignee: NullableSimpleUserSchema;
  milestone: NullableMilestoneSchema;
  comments: number;
  created_at: string;
  updated_at: string;
  closed_at: string | null;
  text_matches?: SearchResultTextMatchesSchema;
  pull_request?: {
    merged_at?: string | null;
    diff_url: string | null;
    html_url: string | null;
    patch_url: string | null;
    url: string | null;
  };
  body?: string;
  score: number;
  author_association: AuthorAssociationSchema;
  draft?: boolean;
  repository?: RepositorySchema;
  body_html?: string;
  body_text?: string;
  timeline_url?: string;
  type?: IssueTypeSchema;
  performed_via_github_app?: NullableIntegrationSchema;
  reactions?: ReactionRollupSchema;
};
/**
 * @description Label Search Result Item
 */
type LabelSearchResultItemSchema = {
  id: number;
  node_id: string;
  url: string;
  name: string;
  color: string;
  default: boolean;
  description: string | null;
  score: number;
  text_matches?: SearchResultTextMatchesSchema;
};
/**
 * @description Repo Search Result Item
 */
type RepoSearchResultItemSchema = {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: NullableSimpleUserSchema;
  private: boolean;
  html_url: string;
  description: string | null;
  fork: boolean;
  url: string;
  created_at: string;
  updated_at: string;
  pushed_at: string;
  homepage: string | null;
  size: number;
  stargazers_count: number;
  watchers_count: number;
  language: string | null;
  forks_count: number;
  open_issues_count: number;
  master_branch?: string;
  default_branch: string;
  score: number;
  forks_url: string;
  keys_url: string;
  collaborators_url: string;
  teams_url: string;
  hooks_url: string;
  issue_events_url: string;
  events_url: string;
  assignees_url: string;
  branches_url: string;
  tags_url: string;
  blobs_url: string;
  git_tags_url: string;
  git_refs_url: string;
  trees_url: string;
  statuses_url: string;
  languages_url: string;
  stargazers_url: string;
  contributors_url: string;
  subscribers_url: string;
  subscription_url: string;
  commits_url: string;
  git_commits_url: string;
  comments_url: string;
  issue_comment_url: string;
  contents_url: string;
  compare_url: string;
  merges_url: string;
  archive_url: string;
  downloads_url: string;
  issues_url: string;
  pulls_url: string;
  milestones_url: string;
  notifications_url: string;
  labels_url: string;
  releases_url: string;
  deployments_url: string;
  git_url: string;
  ssh_url: string;
  clone_url: string;
  svn_url: string;
  forks: number;
  open_issues: number;
  watchers: number;
  topics?: string[];
  mirror_url: string | null;
  has_issues: boolean;
  has_projects: boolean;
  has_pages: boolean;
  has_wiki: boolean;
  has_downloads: boolean;
  has_discussions?: boolean;
  archived: boolean;

  /**
   * @description Returns whether or not this repository disabled.
   */
  disabled: boolean;

  /**
   * @description The repository visibility: public, private, or internal.
   */
  visibility?: string;
  license: NullableLicenseSimpleSchema;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    push: boolean;
    triage?: boolean;
    pull: boolean;
  };
  text_matches?: SearchResultTextMatchesSchema;
  temp_clone_token?: string;
  allow_merge_commit?: boolean;
  allow_squash_merge?: boolean;
  allow_rebase_merge?: boolean;
  allow_auto_merge?: boolean;
  delete_branch_on_merge?: boolean;
  allow_forking?: boolean;
  is_template?: boolean;
  web_commit_signoff_required?: boolean;
};
/**
 * @description Topic Search Result Item
 */
type TopicSearchResultItemSchema = {
  name: string;
  display_name: string | null;
  short_description: string | null;
  description: string | null;
  created_by: string | null;
  released: string | null;
  created_at: string;
  updated_at: string;
  featured: boolean;
  curated: boolean;
  score: number;
  repository_count?: number | null;
  logo_url?: string | null;
  text_matches?: SearchResultTextMatchesSchema;
  related?:
    | {
        topic_relation?: {
          id?: number;
          name?: string;
          topic_id?: number;
          relation_type?: string;
        };
      }[]
    | null;
  aliases?:
    | {
        topic_relation?: {
          id?: number;
          name?: string;
          topic_id?: number;
          relation_type?: string;
        };
      }[]
    | null;
};
/**
 * @description User Search Result Item
 */
type UserSearchResultItemSchema = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string | null;
  url: string;
  html_url: string;
  followers_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  received_events_url: string;
  type: string;
  score: number;
  following_url: string;
  gists_url: string;
  starred_url: string;
  events_url: string;
  public_repos?: number;
  public_gists?: number;
  followers?: number;
  following?: number;
  created_at?: string;
  updated_at?: string;
  name?: string | null;
  bio?: string | null;
  email?: string | null;
  location?: string | null;
  site_admin: boolean;
  hireable?: boolean | null;
  text_matches?: SearchResultTextMatchesSchema;
  blog?: string | null;
  company?: string | null;
  suspended_at?: string | null;
  user_view_type?: string;
};
/**
 * @description Private User
 */
type PrivateUserSchema = {
  /**
   * @example octocat
   */
  login: string;

  /**
   * @example 1
   */
  id: number;
  user_view_type?: string;

  /**
   * @example MDQ6VXNlcjE=
   */
  node_id: string;

  /**
   * @example https://github.com/images/error/octocat_happy.gif
   */
  avatar_url: string;

  /**
   * @example 41d064eb2195891e12d0413f63227ea7
   */
  gravatar_id: string | null;

  /**
   * @example https://api.github.com/users/octocat
   */
  url: string;

  /**
   * @example https://github.com/octocat
   */
  html_url: string;

  /**
   * @example https://api.github.com/users/octocat/followers
   */
  followers_url: string;

  /**
   * @example https://api.github.com/users/octocat/following{/other_user}
   */
  following_url: string;

  /**
   * @example https://api.github.com/users/octocat/gists{/gist_id}
   */
  gists_url: string;

  /**
   * @example https://api.github.com/users/octocat/starred{/owner}{/repo}
   */
  starred_url: string;

  /**
   * @example https://api.github.com/users/octocat/subscriptions
   */
  subscriptions_url: string;

  /**
   * @example https://api.github.com/users/octocat/orgs
   */
  organizations_url: string;

  /**
   * @example https://api.github.com/users/octocat/repos
   */
  repos_url: string;

  /**
   * @example https://api.github.com/users/octocat/events{/privacy}
   */
  events_url: string;

  /**
   * @example https://api.github.com/users/octocat/received_events
   */
  received_events_url: string;

  /**
   * @example User
   */
  type: string;
  site_admin: boolean;

  /**
   * @example monalisa octocat
   */
  name: string | null;

  /**
   * @example GitHub
   */
  company: string | null;

  /**
   * @example https://github.com/blog
   */
  blog: string | null;

  /**
   * @example San Francisco
   */
  location: string | null;

  /**
   * @example octocat@github.com
   */
  email: string | null;

  /**
   * @example octocat@github.com
   */
  notification_email?: string | null;
  hireable: boolean | null;

  /**
   * @example There once was...
   */
  bio: string | null;

  /**
   * @example monalisa
   */
  twitter_username?: string | null;

  /**
   * @example 2
   */
  public_repos: number;

  /**
   * @example 1
   */
  public_gists: number;

  /**
   * @example 20
   */
  followers: number;
  following: number;

  /**
   * @example 2008-01-14T04:33:35Z
   */
  created_at: string;

  /**
   * @example 2008-01-14T04:33:35Z
   */
  updated_at: string;

  /**
   * @example 81
   */
  private_gists: number;

  /**
   * @example 100
   */
  total_private_repos: number;

  /**
   * @example 100
   */
  owned_private_repos: number;

  /**
   * @example 10000
   */
  disk_usage: number;

  /**
   * @example 8
   */
  collaborators: number;

  /**
   * @example true
   */
  two_factor_authentication: boolean;
  plan?: {
    collaborators: number;
    name: string;
    space: number;
    private_repos: number;
  };
  business_plus?: boolean;
  ldap_dn?: string;
};
/**
 * @description Secrets for a GitHub Codespace.
 */
type CodespacesSecretSchema = {
  /**
   * @description The name of the secret
   * @example SECRET_NAME
   */
  name: string;

  /**
   * @description The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  created_at: string;

  /**
   * @description The date and time at which the secret was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  updated_at: string;

  /**
   * @description The type of repositories in the organization that the secret is visible to
   */
  visibility: "all" | "private" | "selected";

  /**
   * @description The API URL at which the list of repositories this secret is visible to can be retrieved
   * @example https://api.github.com/user/secrets/SECRET_NAME/repositories
   */
  selected_repositories_url: string;
};
/**
 * @description The public key used for setting user Codespaces' Secrets.
 */
type CodespacesUserPublicKeySchema = {
  /**
   * @description The identifier for the key.
   * @example 1234567
   */
  key_id: string;

  /**
   * @description The Base64 encoded public key.
   * @example hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=
   */
  key: string;
};
/**
 * @description An export of a codespace. Also, latest export details for a codespace can be fetched with id = latest
 */
type CodespaceExportDetailsSchema = {
  /**
   * @description State of the latest export
   * @example succeeded | failed | in_progress
   */
  state?: string | null;

  /**
   * @description Completion time of the last export operation
   * @example 2021-01-01T19:01:12Z
   */
  completed_at?: string | null;

  /**
   * @description Name of the exported branch
   * @example codespace-monalisa-octocat-hello-world-g4wpq6h95q
   */
  branch?: string | null;

  /**
   * @description Git commit SHA of the exported branch
   * @example fd95a81ca01e48ede9f39c799ecbcef817b8a3b2
   */
  sha?: string | null;

  /**
   * @description Id for the export details
   * @example latest
   */
  id?: string;

  /**
   * @description Url for fetching export details
   * @example https://api.github.com/user/codespaces/:name/exports/latest
   */
  export_url?: string;

  /**
   * @description Web url for the exported branch
   * @example https://github.com/octocat/hello-world/tree/:branch
   */
  html_url?: string | null;
};
/**
 * @description A codespace.
 */
type EmailSchema = {
  /**
   * @example octocat@github.com
   */
  email: string;

  /**
   * @example true
   */
  primary: boolean;

  /**
   * @example true
   */
  verified: boolean;

  /**
   * @example public
   */
  visibility: string | null;
};
/**
 * @description A unique encryption key
 */
type GpgKeySchema = {
  /**
   * @example 3
   */
  id: number;

  /**
   * @example Octocat's GPG Key
   */
  name?: string | null;
  primary_key_id: number | null;

  /**
   * @example 3262EFF25BA0D270
   */
  key_id: string;

  /**
   * @example xsBNBFayYZ...
   */
  public_key: string;

  /**
 * @example [
  {
    "email": "octocat@users.noreply.github.com",
    "verified": true
  }
]
  */
  emails: {
    email?: string;
    verified?: boolean;
  }[];

  /**
 * @example [
  {
    "id": 4,
    "primary_key_id": 3,
    "key_id": "4A595D4C72EE49C7",
    "public_key": "zsBNBFayYZ...",
    "emails": [],
    "can_sign": false,
    "can_encrypt_comms": true,
    "can_encrypt_storage": true,
    "can_certify": false,
    "created_at": "2016-03-24T11:31:04-06:00",
    "expires_at": null,
    "revoked": false
  }
]
  */
  subkeys: {
    id?: number;
    primary_key_id?: number;
    key_id?: string;
    public_key?: string;
    emails?: {
      email?: string;
      verified?: boolean;
    }[];
    subkeys?: {}[];
    can_sign?: boolean;
    can_encrypt_comms?: boolean;
    can_encrypt_storage?: boolean;
    can_certify?: boolean;
    created_at?: string;
    expires_at?: string | null;
    raw_key?: string | null;
    revoked?: boolean;
  }[];

  /**
   * @example true
   */
  can_sign: boolean;
  can_encrypt_comms: boolean;
  can_encrypt_storage: boolean;

  /**
   * @example true
   */
  can_certify: boolean;

  /**
   * @example 2016-03-24T11:31:04-06:00
   */
  created_at: string;
  expires_at: string | null;

  /**
   * @example true
   */
  revoked: boolean;
  raw_key: string | null;
};
/**
 * @description Key
 */
type KeySchema = {
  key: string;
  id: number;
  url: string;
  title: string;
  created_at: string;
  verified: boolean;
  read_only: boolean;
  last_used?: string | null;
};
type MarketplaceAccountSchema = {
  url: string;
  id: number;
  type: string;
  node_id?: string;
  login: string;
  email?: string | null;
  organization_billing_email?: string | null;
};
/**
 * @description User Marketplace Purchase
 */
type UserMarketplacePurchaseSchema = {
  /**
   * @example monthly
   */
  billing_cycle: string;

  /**
   * @example 2017-11-11T00:00:00Z
   */
  next_billing_date: string | null;
  unit_count: number | null;

  /**
   * @example true
   */
  on_free_trial: boolean;

  /**
   * @example 2017-11-11T00:00:00Z
   */
  free_trial_ends_on: string | null;

  /**
   * @example 2017-11-02T01:12:12Z
   */
  updated_at: string | null;
  account: MarketplaceAccountSchema;
  plan: MarketplaceListingPlanSchema;
};
/**
 * @description Social media account
 */
type SocialAccountSchema = {
  /**
   * @example linkedin
   */
  provider: string;

  /**
   * @example https://www.linkedin.com/company/github/
   */
  url: string;
};
/**
 * @description A public SSH key used to sign Git commits
 */
type SshSigningKeySchema = {
  key: string;
  id: number;
  title: string;
  created_at: string;
};
/**
 * @description Starred Repository
 */
type StarredRepositorySchema = {
  starred_at: string;
  repo: RepositorySchema;
};
/**
 * @description Hovercard
 */
type HovercardSchema = {
  contexts: {
    message: string;
    octicon: string;
  }[];
};
/**
 * @description Key Simple
 */
type KeySimpleSchema = {
  id: number;
  key: string;
  created_at?: string;
  last_used?: string | null;
};
type BillingUsageReportUserSchema = {
  usageItems?: {
    /**
     * @description Date of the usage line item.
     */
    date: string;

    /**
     * @description Product name.
     */
    product: string;

    /**
     * @description SKU name.
     */
    sku: string;

    /**
     * @description Quantity of the usage line item.
     */
    quantity: number;

    /**
     * @description Unit type of the usage line item.
     */
    unitType: string;

    /**
     * @description Price per unit of the usage line item.
     */
    pricePerUnit: number;

    /**
     * @description Gross amount of the usage line item.
     */
    grossAmount: number;

    /**
     * @description Discount amount of the usage line item.
     */
    discountAmount: number;

    /**
     * @description Net amount of the usage line item.
     */
    netAmount: number;

    /**
     * @description Name of the repository.
     */
    repositoryName?: string;
  }[];
};
/**
 * @description An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
 * on an enterprise account or an organization that's part of an enterprise account. For more information,
 * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
 */
/**
 * @description The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
 * for and sent to a GitHub App. For more information,
 * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
 */
/**
 * @description A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
 * organization, or when the event occurs from activity in a repository owned by an organization.
 */
/**
 * @description The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
 * when the event occurs from activity in a repository.
 */
/**
 * @description The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
 */
/**
 * @description A suite of checks performed on the code of a given code change
 */
/**
 * @description A check performed on the code of a given code change
 */
/**
 * @description The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
 */
/**
 * @description The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
 */
/**
 * @description The pusher type for the event. Can be either `user` or a deploy key.
 */
/**
 * @description The [`git ref`](https://docs.github.com/rest/git/refs#get-a-reference) resource.
 */
/**
 * @description The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource.
 */
/**
 * @description A Discussion in a repository.
 */
/**
 * @description An array of repository objects that the installation can access.
 */
/**
 * @description An array of repository objects, which were added to the installation.
 */
/**
 * @description Describe whether all repositories have been selected or there's a selection involved
 */
/**
 * @description The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.
 */
/**
 * @description The changes to the comment.
 */
/**
 * @description The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
 */
/**
 * @description A collection of related issues and pull requests.
 */
/**
 * @description The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
 */
/**
 * @description Groups of organization members that gives permissions on specified repositories.
 */
/**
 * @description A group of pull requests that the merge queue has grouped together to be merged.
 */
/**
 * @description The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
 * when the event occurs from activity in a repository.
 */
/**
 * @description A collection of related issues and pull requests.
 */
/**
 * @description The membership between the user and the organization. Not present when the action is `member_invited`.
 */
/**
 * @description Details of a Personal Access Token Request.
 */
/**
 * @description An item belonging to a project
 */
/**
 * @description An option for a single select field
 */
/**
 * @description An iteration setting for an iteration field
 */
/**
 * @description An status update belonging to a project
 */
/**
 * @description The pull request number.
 */
/**
 * @description The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.
 */
/**
 * @description The review that was affected.
 */
/**
 * @description The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
 */
/**
 * @description The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
 */
/**
 * @description The security alert of the vulnerable dependency.
 */
/**
 * @description The reason for resolving the alert.
 */
type AcceptedResponse = {};
type ActionsRunnerLabelsResponse = {
  total_count: number;
  labels: RunnerLabelSchema[];
};
type ActionsRunnerLabelsReadonlyResponse = {
  total_count: number;
  labels: RunnerLabelSchema[];
};

export interface Endpoints {
  /**
   * @name meta/root
   * @summary GitHub API Root
   * @description Get Hypermedia links to resources accessible in GitHub's REST API
   * @see https://docs.github.com/rest/meta/meta#github-api-root
   */
  "GET /": {
    parameters: {};
    request: {
      method: "GET";
      url: "/";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RootSchema;
    };
  };

  /**
   * @name security-advisories/list-global-advisories
   * @summary List global security advisories
   * @description Lists all global security advisories that match the specified parameters. If no other parameters are defined, the request will return only GitHub-reviewed advisories that are not malware.
   *
   * By default, all responses will exclude advisories for malware, because malware are not standard vulnerabilities. To list advisories for malware, you must include the `type` parameter in your request, with the value `malware`. For more information about the different types of security advisories, see "[About the GitHub Advisory database](https://docs.github.com/code-security/security-advisories/global-security-advisories/about-the-github-advisory-database#about-types-of-security-advisories)."
   * @see https://docs.github.com/rest/security-advisories/global-advisories#list-global-security-advisories
   */
  "GET /advisories": {
    parameters: {
      /**
       * @description If specified, only advisories with this GHSA (GitHub Security Advisory) identifier will be returned.
       */
      ghsa_id?: string;

      /**
       * @description If specified, only advisories of this type will be returned. By default, a request with no other parameters defined will only return reviewed advisories that are not malware.
       */
      type?: "reviewed" | "malware" | "unreviewed";

      /**
       * @description If specified, only advisories with this CVE (Common Vulnerabilities and Exposures) identifier will be returned.
       */
      cve_id?: string;

      /**
       * @description If specified, only advisories for these ecosystems will be returned.
       */
      ecosystem?: {};

      /**
       * @description If specified, only advisories with these severities will be returned.
       */
      severity?: "unknown" | "low" | "medium" | "high" | "critical";

      /**
       * @description If specified, only advisories with these Common Weakness Enumerations (CWEs) will be returned.
       *
       * Example: `cwes=79,284,22` or `cwes[]=79&cwes[]=284&cwes[]=22`
       */
      cwes?: string | string[];

      /**
       * @description Whether to only return advisories that have been withdrawn.
       */
      is_withdrawn?: boolean;

      /**
       * @description If specified, only return advisories that affect any of `package` or `package@version`. A maximum of 1000 packages can be specified.
       * If the query parameter causes the URL to exceed the maximum URL length supported by your client, you must specify fewer packages.
       *
       * Example: `affects=package1,package2@1.0.0,package3@2.0.0` or `affects[]=package1&affects[]=package2@1.0.0`
       */
      affects?: string | string[];

      /**
       * @description If specified, only return advisories that were published on a date or date range.
       *
       * For more information on the syntax of the date range, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
       */
      published?: string;

      /**
       * @description If specified, only return advisories that were updated on a date or date range.
       *
       * For more information on the syntax of the date range, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
       */
      updated?: string;

      /**
       * @description If specified, only show advisories that were updated or published on a date or date range.
       *
       * For more information on the syntax of the date range, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
       */
      modified?: string;

      /**
       * @description If specified, only return advisories that have an EPSS percentage score that matches the provided value.
       * The EPSS percentage represents the likelihood of a CVE being exploited.
       */
      epss_percentage?: string;

      /**
       * @description If specified, only return advisories that have an EPSS percentile score that matches the provided value.
       * The EPSS percentile represents the relative rank of the CVE's likelihood of being exploited compared to other CVEs.
       */
      epss_percentile?: string;
      before?: string;
      after?: string;
      direction?: "asc" | "desc";

      /**
       * @description The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
       */
      per_page?: number;

      /**
       * @description The property to sort the results by.
       */
      sort?: "updated" | "published" | "epss_percentage" | "epss_percentile";
    };
    request: {
      method: "GET";
      url: "/advisories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: GlobalAdvisorySchema[];
    };
  };

  /**
   * @name security-advisories/get-global-advisory
   * @summary Get a global security advisory
   * @description Gets a global security advisory using its GitHub Security Advisory (GHSA) identifier.
   * @see https://docs.github.com/rest/security-advisories/global-advisories#get-a-global-security-advisory
   */
  "GET /advisories/{ghsa_id}": {
    parameters: {
      ghsa_id: string;
    };
    request: {
      method: "GET";
      url: "/advisories/{ghsa_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: GlobalAdvisorySchema;
    };
  };

  /**
   * @name apps/get-authenticated
   * @summary Get the authenticated app
   * @description Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/apps/apps#list-installations-for-the-authenticated-app)" endpoint.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * @see https://docs.github.com/rest/apps/apps#get-the-authenticated-app
   */
  "GET /app": {
    parameters: {};
    request: {
      method: "GET";
      url: "/app";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IntegrationSchema;
    };
  };

  /**
   * @name apps/create-from-manifest
   * @summary Create a GitHub App from a manifest
   * @description Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
   * @see https://docs.github.com/rest/apps/apps#create-a-github-app-from-a-manifest
   */
  "POST /app-manifests/{code}/conversions": {
    parameters: {
      code: string;
    };
    request: {
      method: "POST";
      url: "/app-manifests/{code}/conversions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name apps/get-webhook-config-for-app
   * @summary Get a webhook configuration for an app
   * @description Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * @see https://docs.github.com/rest/apps/webhooks#get-a-webhook-configuration-for-an-app
   */
  "GET /app/hook/config": {
    parameters: {};
    request: {
      method: "GET";
      url: "/app/hook/config";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: WebhookConfigSchema;
    };
  };

  /**
   * @name apps/update-webhook-config-for-app
   * @summary Update a webhook configuration for an app
   * @description Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * @see https://docs.github.com/rest/apps/webhooks#update-a-webhook-configuration-for-an-app
   */
  "PATCH /app/hook/config": {
    parameters: {} & Endpoints["PATCH /app/hook/config"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/app/hook/config";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        url?: WebhookConfigUrlSchema;
        content_type?: WebhookConfigContentTypeSchema;
        secret?: WebhookConfigSecretSchema;
        insecure_ssl?: WebhookConfigInsecureSslSchema;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: WebhookConfigSchema;
    };
  };

  /**
   * @name apps/list-webhook-deliveries
   * @summary List deliveries for an app webhook
   * @description Returns a list of webhook deliveries for the webhook configured for a GitHub App.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * @see https://docs.github.com/rest/apps/webhooks#list-deliveries-for-an-app-webhook
   */
  "GET /app/hook/deliveries": {
    parameters: {
      per_page?: number;
      cursor?: string;
    };
    request: {
      method: "GET";
      url: "/app/hook/deliveries";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: HookDeliveryItemSchema[];
    };
  };

  /**
   * @name apps/get-webhook-delivery
   * @summary Get a delivery for an app webhook
   * @description Returns a delivery for the webhook configured for a GitHub App.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * @see https://docs.github.com/rest/apps/webhooks#get-a-delivery-for-an-app-webhook
   */
  "GET /app/hook/deliveries/{delivery_id}": {
    parameters: {
      delivery_id: number;
    };
    request: {
      method: "GET";
      url: "/app/hook/deliveries/{delivery_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: HookDeliverySchema;
    };
  };

  /**
   * @name apps/redeliver-webhook-delivery
   * @summary Redeliver a delivery for an app webhook
   * @description Redeliver a delivery for the webhook configured for a GitHub App.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * @see https://docs.github.com/rest/apps/webhooks#redeliver-a-delivery-for-an-app-webhook
   */
  "POST /app/hook/deliveries/{delivery_id}/attempts": {
    parameters: {
      delivery_id: number;
    };
    request: {
      method: "POST";
      url: "/app/hook/deliveries/{delivery_id}/attempts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: AcceptedResponse;
    };
  };

  /**
   * @name apps/list-installation-requests-for-authenticated-app
   * @summary List installation requests for the authenticated app
   * @description Lists all the pending installation requests for the authenticated GitHub App.
   * @see https://docs.github.com/rest/apps/apps#list-installation-requests-for-the-authenticated-app
   */
  "GET /app/installation-requests": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/app/installation-requests";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IntegrationInstallationRequestSchema[];
    };
  };

  /**
   * @name apps/list-installations
   * @summary List installations for the authenticated app
   * @description You must use a [JWT](https://docs.github.com/enterprise-server@3.9/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   *
   * The permissions the installation has are included under the `permissions` key.
   * @see https://docs.github.com/enterprise-server@3.9/rest/apps/apps#list-installations-for-the-authenticated-app
   */
  "GET /app/installations": {
    parameters: {
      per_page?: number;
      page?: number;
      since?: string;
      outdated?: string;
    };
    request: {
      method: "GET";
      url: "/app/installations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        /**
         * @description The ID of the installation.
         * @example 1
         */
        id: number;
        account:
          | ({
              name?: string | null;
              email?: string | null;

              /**
               * @example octocat
               */
              login: string;

              /**
               * @example 1
               */
              id: number;

              /**
               * @example MDQ6VXNlcjE=
               */
              node_id: string;

              /**
               * @example https://github.com/images/error/octocat_happy.gif
               */
              avatar_url: string;

              /**
               * @example 41d064eb2195891e12d0413f63227ea7
               */
              gravatar_id: string | null;

              /**
               * @example https://api.github.com/users/octocat
               */
              url: string;

              /**
               * @example https://github.com/octocat
               */
              html_url: string;

              /**
               * @example https://api.github.com/users/octocat/followers
               */
              followers_url: string;

              /**
               * @example https://api.github.com/users/octocat/following{/other_user}
               */
              following_url: string;

              /**
               * @example https://api.github.com/users/octocat/gists{/gist_id}
               */
              gists_url: string;

              /**
               * @example https://api.github.com/users/octocat/starred{/owner}{/repo}
               */
              starred_url: string;

              /**
               * @example https://api.github.com/users/octocat/subscriptions
               */
              subscriptions_url: string;

              /**
               * @example https://api.github.com/users/octocat/orgs
               */
              organizations_url: string;

              /**
               * @example https://api.github.com/users/octocat/repos
               */
              repos_url: string;

              /**
               * @example https://api.github.com/users/octocat/events{/privacy}
               */
              events_url: string;

              /**
               * @example https://api.github.com/users/octocat/received_events
               */
              received_events_url: string;

              /**
               * @example User
               */
              type: string;
              site_admin: boolean;

              /**
               * @example "2020-07-09T00:17:55Z"
               */
              starred_at?: string;
            } & {
              /**
               * @description A short description of the enterprise.
               */
              description?: string | null;

              /**
               * @example https://github.com/enterprises/octo-business
               */
              html_url: string;

              /**
               * @description The enterprise's website URL.
               */
              website_url?: string | null;

              /**
               * @description Unique identifier of the enterprise
               * @example 42
               */
              id: number;

              /**
               * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
               */
              node_id: string;

              /**
               * @description The name of the enterprise.
               * @example Octo Business
               */
              name: string;

              /**
               * @description The slug url identifier for the enterprise.
               * @example octo-business
               */
              slug: string;

              /**
               * @example 2019-01-26T19:01:12Z
               */
              created_at: string | null;

              /**
               * @example 2019-01-26T19:14:43Z
               */
              updated_at: string | null;
              avatar_url: string;
            })
          | null;

        /**
         * @description Describe whether all repositories have been selected or there's a selection involved
         */
        repository_selection: "all" | "selected";

        /**
         * @example https://api.github.com/installations/1/access_tokens
         */
        access_tokens_url: string;

        /**
         * @example https://api.github.com/installation/repositories
         */
        repositories_url: string;

        /**
         * @example https://github.com/organizations/github/settings/installations/1
         */
        html_url: string;

        /**
         * @example 1
         */
        app_id: number;

        /**
         * @description The ID of the user or organization this token is being scoped to.
         */
        target_id: number;

        /**
         * @example Organization
         */
        target_type: string;

        /**
 * @description The permissions granted to the user access token.
 * @example {
  "contents": "read",
  "issues": "read",
  "deployments": "write",
  "single_file": "read"
}
  */
        permissions: {
          /**
           * @description The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
           */
          actions?: "read" | "write";

          /**
           * @description The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
           */
          administration?: "read" | "write";

          /**
           * @description The level of permission to grant the access token for checks on code.
           */
          checks?: "read" | "write";

          /**
           * @description The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
           */
          contents?: "read" | "write";

          /**
           * @description The level of permission to grant the access token for deployments and deployment statuses.
           */
          deployments?: "read" | "write";

          /**
           * @description The level of permission to grant the access token for managing repository environments.
           */
          environments?: "read" | "write";

          /**
           * @description The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
           */
          issues?: "read" | "write";

          /**
           * @description The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
           */
          metadata?: "read" | "write";

          /**
           * @description The level of permission to grant the access token for packages published to GitHub Packages.
           */
          packages?: "read" | "write";

          /**
           * @description The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
           */
          pages?: "read" | "write";

          /**
           * @description The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
           */
          pull_requests?: "read" | "write";

          /**
           * @description The level of permission to grant the access token to manage the post-receive hooks for a repository.
           */
          repository_hooks?: "read" | "write";

          /**
           * @description The level of permission to grant the access token to manage repository projects, columns, and cards.
           */
          repository_projects?: "read" | "write" | "admin";

          /**
           * @description The level of permission to grant the access token to view and manage secret scanning alerts.
           */
          secret_scanning_alerts?: "read" | "write";

          /**
           * @description The level of permission to grant the access token to manage repository secrets.
           */
          secrets?: "read" | "write";

          /**
           * @description The level of permission to grant the access token to view and manage security events like code scanning alerts.
           */
          security_events?: "read" | "write";

          /**
           * @description The level of permission to grant the access token to manage just a single file.
           */
          single_file?: "read" | "write";

          /**
           * @description The level of permission to grant the access token for commit statuses.
           */
          statuses?: "read" | "write";

          /**
           * @description The level of permission to grant the access token to manage Dependabot alerts.
           */
          vulnerability_alerts?: "read" | "write";

          /**
           * @description The level of permission to grant the access token to update GitHub Actions workflow files.
           */
          workflows?: "write";

          /**
           * @description The level of permission to grant the access token for organization teams and members.
           */
          members?: "read" | "write";

          /**
           * @description The level of permission to grant the access token to manage access to an organization.
           */
          organization_administration?: "read" | "write";

          /**
           * @description The level of permission to grant the access token for custom repository roles management. This property is in beta and is subject to change.
           */
          organization_custom_roles?: "read" | "write";

          /**
           * @description The level of permission to grant the access token to view and manage announcement banners for an organization.
           */
          organization_announcement_banners?: "read" | "write";

          /**
           * @description The level of permission to grant the access token to manage the post-receive hooks for an organization.
           */
          organization_hooks?: "read" | "write";

          /**
           * @description The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
           */
          organization_personal_access_tokens?: "read" | "write";

          /**
           * @description The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
           */
          organization_personal_access_token_requests?: "read" | "write";

          /**
           * @description The level of permission to grant the access token for viewing an organization's plan.
           */
          organization_plan?: "read";

          /**
           * @description The level of permission to grant the access token to manage organization projects and projects beta (where available).
           */
          organization_projects?: "read" | "write" | "admin";

          /**
           * @description The level of permission to grant the access token for organization packages published to GitHub Packages.
           */
          organization_packages?: "read" | "write";

          /**
           * @description The level of permission to grant the access token to manage organization secrets.
           */
          organization_secrets?: "read" | "write";

          /**
           * @description The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
           */
          organization_self_hosted_runners?: "read" | "write";

          /**
           * @description The level of permission to grant the access token to view and manage users blocked by the organization.
           */
          organization_user_blocking?: "read" | "write";

          /**
           * @description The level of permission to grant the access token to manage team discussions and related comments.
           */
          team_discussions?: "read" | "write";
        };
        events: string[];
        created_at: string;
        updated_at: string;

        /**
         * @example config.yaml
         */
        single_file_name: string | null;

        /**
         * @example true
         */
        has_multiple_single_files?: boolean;

        /**
 * @example [
  "config.yml",
  ".github/issue_TEMPLATE.md"
]
  */
        single_file_paths?: string[];

        /**
         * @example github-actions
         */
        app_slug: string;

        /**
         * @description A GitHub user.
         */
        suspended_by: {
          name?: string | null;
          email?: string | null;

          /**
           * @example octocat
           */
          login: string;

          /**
           * @example 1
           */
          id: number;

          /**
           * @example MDQ6VXNlcjE=
           */
          node_id: string;

          /**
           * @example https://github.com/images/error/octocat_happy.gif
           */
          avatar_url: string;

          /**
           * @example 41d064eb2195891e12d0413f63227ea7
           */
          gravatar_id: string | null;

          /**
           * @example https://api.github.com/users/octocat
           */
          url: string;

          /**
           * @example https://github.com/octocat
           */
          html_url: string;

          /**
           * @example https://api.github.com/users/octocat/followers
           */
          followers_url: string;

          /**
           * @example https://api.github.com/users/octocat/following{/other_user}
           */
          following_url: string;

          /**
           * @example https://api.github.com/users/octocat/gists{/gist_id}
           */
          gists_url: string;

          /**
           * @example https://api.github.com/users/octocat/starred{/owner}{/repo}
           */
          starred_url: string;

          /**
           * @example https://api.github.com/users/octocat/subscriptions
           */
          subscriptions_url: string;

          /**
           * @example https://api.github.com/users/octocat/orgs
           */
          organizations_url: string;

          /**
           * @example https://api.github.com/users/octocat/repos
           */
          repos_url: string;

          /**
           * @example https://api.github.com/users/octocat/events{/privacy}
           */
          events_url: string;

          /**
           * @example https://api.github.com/users/octocat/received_events
           */
          received_events_url: string;

          /**
           * @example User
           */
          type: string;
          site_admin: boolean;

          /**
           * @example "2020-07-09T00:17:55Z"
           */
          starred_at?: string;
        } | null;
        suspended_at: string | null;

        /**
         * @example "test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"
         */
        contact_email?: string | null;
      }[];
    };
  };

  /**
   * @name apps/get-installation
   * @summary Get an installation for the authenticated app
   * @description Enables an authenticated GitHub App to find an installation's information using the installation id.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * @see https://docs.github.com/rest/apps/apps#get-an-installation-for-the-authenticated-app
   */
  "GET /app/installations/{installation_id}": {
    parameters: {
      installation_id: number;
    };
    request: {
      method: "GET";
      url: "/app/installations/{installation_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: InstallationSchema;
    };
  };

  /**
   * @name apps/delete-installation
   * @summary Delete an installation for the authenticated app
   * @description Uninstalls a GitHub App on a user, organization, or enterprise account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/apps/apps#suspend-an-app-installation)" endpoint.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * @see https://docs.github.com/rest/apps/apps#delete-an-installation-for-the-authenticated-app
   */
  "DELETE /app/installations/{installation_id}": {
    parameters: {
      installation_id: number;
    };
    request: {
      method: "DELETE";
      url: "/app/installations/{installation_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name apps/create-installation-access-token
   * @summary Create an installation access token for an app
   * @description Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access.
   *
   * Optionally, you can use the `repositories` or `repository_ids` body parameters to specify individual repositories that the installation access token can access. If you don't use `repositories` or `repository_ids` to grant access to specific repositories, the installation access token will have access to all repositories that the installation was granted access to. The installation access token cannot be granted access to repositories that the installation was not granted access to. Up to 500 repositories can be listed in this manner.
   *
   * Optionally, use the `permissions` body parameter to specify the permissions that the installation access token should have. If `permissions` is not specified, the installation access token will have all of the permissions that were granted to the app. The installation access token cannot be granted permissions that the app was not granted.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * @see https://docs.github.com/rest/apps/apps#create-an-installation-access-token-for-an-app
   */
  "POST /app/installations/{installation_id}/access_tokens": {
    parameters: {
      installation_id: number;
    } & Endpoints["POST /app/installations/{installation_id}/access_tokens"]["request"]["data"];
    request: {
      method: "POST";
      url: "/app/installations/{installation_id}/access_tokens";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description List of repository names that the token should have access to
         */
        repositories?: string[];

        /**
 * @description List of repository IDs that the token should have access to
 * @example [
  1
]
  */
        repository_ids?: number[];
        permissions?: AppPermissionsSchema;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name apps/suspend-installation
   * @summary Suspend an app installation
   * @description Suspends a GitHub App on a user, organization, or enterprise account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * @see https://docs.github.com/rest/apps/apps#suspend-an-app-installation
   */
  "PUT /app/installations/{installation_id}/suspended": {
    parameters: {
      installation_id: number;
    };
    request: {
      method: "PUT";
      url: "/app/installations/{installation_id}/suspended";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name apps/unsuspend-installation
   * @summary Unsuspend an app installation
   * @description Removes a GitHub App installation suspension.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * @see https://docs.github.com/rest/apps/apps#unsuspend-an-app-installation
   */
  "DELETE /app/installations/{installation_id}/suspended": {
    parameters: {
      installation_id: number;
    };
    request: {
      method: "DELETE";
      url: "/app/installations/{installation_id}/suspended";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name apps/delete-authorization
   * @summary Delete an app authorization
   * @description OAuth and GitHub application owners can revoke a grant for their application and a specific user. You must provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
   * Deleting an application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
   * @see https://docs.github.com/rest/apps/oauth-applications#delete-an-app-authorization
   */
  "DELETE /applications/{client_id}/grant": {
    parameters: {
      client_id: string;
    } & Endpoints["DELETE /applications/{client_id}/grant"]["request"]["data"];
    request: {
      method: "DELETE";
      url: "/applications/{client_id}/grant";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The OAuth access token used to authenticate to the GitHub API.
         */
        access_token: string;
      };
    };
    response: never;
  };

  /**
   * @name apps/check-token
   * @summary Check a token
   * @description OAuth applications and GitHub applications with OAuth authorizations can use this API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. Invalid tokens will return `404 NOT FOUND`.
   * @see https://docs.github.com/rest/apps/oauth-applications#check-a-token
   */
  "POST /applications/{client_id}/token": {
    parameters: {
      client_id: string;
    } & Endpoints["POST /applications/{client_id}/token"]["request"]["data"];
    request: {
      method: "POST";
      url: "/applications/{client_id}/token";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The access_token of the OAuth or GitHub application.
         */
        access_token: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: AuthorizationSchema;
    };
  };

  /**
   * @name apps/reset-token
   * @summary Reset a token
   * @description OAuth applications and GitHub applications with OAuth authorizations can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. Invalid tokens will return `404 NOT FOUND`.
   * @see https://docs.github.com/rest/apps/oauth-applications#reset-a-token
   */
  "PATCH /applications/{client_id}/token": {
    parameters: {
      client_id: string;
    } & Endpoints["PATCH /applications/{client_id}/token"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/applications/{client_id}/token";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The access_token of the OAuth or GitHub application.
         */
        access_token: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: AuthorizationSchema;
    };
  };

  /**
   * @name apps/delete-token
   * @summary Delete an app token
   * @description OAuth  or GitHub application owners can revoke a single token for an OAuth application or a GitHub application with an OAuth authorization.
   * @see https://docs.github.com/rest/apps/oauth-applications#delete-an-app-token
   */
  "DELETE /applications/{client_id}/token": {
    parameters: {
      client_id: string;
    } & Endpoints["DELETE /applications/{client_id}/token"]["request"]["data"];
    request: {
      method: "DELETE";
      url: "/applications/{client_id}/token";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The OAuth access token used to authenticate to the GitHub API.
         */
        access_token: string;
      };
    };
    response: never;
  };

  /**
   * @name apps/scope-token
   * @summary Create a scoped access token
   * @description Use a non-scoped user access token to create a repository-scoped and/or permission-scoped user access token. You can specify
   * which repositories the token can access and which permissions are granted to the
   * token.
   *
   * Invalid tokens will return `404 NOT FOUND`.
   * @see https://docs.github.com/rest/apps/apps#create-a-scoped-access-token
   */
  "POST /applications/{client_id}/token/scoped": {
    parameters: {
      client_id: string;
    } & Endpoints["POST /applications/{client_id}/token/scoped"]["request"]["data"];
    request: {
      method: "POST";
      url: "/applications/{client_id}/token/scoped";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The access token used to authenticate to the GitHub API.
         * @example e72e16c7e42f292c6912e7710c838347ae178b4a
         */
        access_token: string;

        /**
         * @description The name of the user or organization to scope the user access token to. **Required** unless `target_id` is specified.
         * @example octocat
         */
        target?: string;

        /**
         * @description The ID of the user or organization to scope the user access token to. **Required** unless `target` is specified.
         * @example 1
         */
        target_id?: number;

        /**
         * @description The list of repository names to scope the user access token to. `repositories` may not be specified if `repository_ids` is specified.
         */
        repositories?: string[];

        /**
 * @description The list of repository IDs to scope the user access token to. `repository_ids` may not be specified if `repositories` is specified.
 * @example [
  1
]
  */
        repository_ids?: number[];
        permissions?: AppPermissionsSchema;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: AuthorizationSchema;
    };
  };

  /**
   * @name apps/get-by-slug
   * @summary Get an app
   * @description > [!NOTE]
   * > The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
   * @see https://docs.github.com/rest/apps/apps#get-an-app
   */
  "GET /apps/{app_slug}": {
    parameters: {
      app_slug: string;
    };
    request: {
      method: "GET";
      url: "/apps/{app_slug}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IntegrationSchema;
    };
  };

  /**
   * @name classroom/get-an-assignment
   * @summary Get an assignment
   * @description Gets a GitHub Classroom assignment. Assignment will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
   * @see https://docs.github.com/rest/classroom/classroom#get-an-assignment
   */
  "GET /assignments/{assignment_id}": {
    parameters: {
      assignment_id: number;
    };
    request: {
      method: "GET";
      url: "/assignments/{assignment_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ClassroomAssignmentSchema;
    };
  };

  /**
   * @name classroom/list-accepted-assignments-for-an-assignment
   * @summary List accepted assignments for an assignment
   * @description Lists any assignment repositories that have been created by students accepting a GitHub Classroom assignment. Accepted assignments will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
   * @see https://docs.github.com/rest/classroom/classroom#list-accepted-assignments-for-an-assignment
   */
  "GET /assignments/{assignment_id}/accepted_assignments": {
    parameters: {
      assignment_id: number;
      page?: number;
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/assignments/{assignment_id}/accepted_assignments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ClassroomAcceptedAssignmentSchema[];
    };
  };

  /**
   * @name classroom/get-assignment-grades
   * @summary Get assignment grades
   * @description Gets grades for a GitHub Classroom assignment. Grades will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
   * @see https://docs.github.com/rest/classroom/classroom#get-assignment-grades
   */
  "GET /assignments/{assignment_id}/grades": {
    parameters: {
      assignment_id: number;
    };
    request: {
      method: "GET";
      url: "/assignments/{assignment_id}/grades";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ClassroomAssignmentGradeSchema[];
    };
  };

  /**
   * @name classroom/list-classrooms
   * @summary List classrooms
   * @description Lists GitHub Classroom classrooms for the current user. Classrooms will only be returned if the current user is an administrator of one or more GitHub Classrooms.
   * @see https://docs.github.com/rest/classroom/classroom#list-classrooms
   */
  "GET /classrooms": {
    parameters: {
      page?: number;
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/classrooms";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SimpleClassroomSchema[];
    };
  };

  /**
   * @name classroom/get-a-classroom
   * @summary Get a classroom
   * @description Gets a GitHub Classroom classroom for the current user. Classroom will only be returned if the current user is an administrator of the GitHub Classroom.
   * @see https://docs.github.com/rest/classroom/classroom#get-a-classroom
   */
  "GET /classrooms/{classroom_id}": {
    parameters: {
      classroom_id: number;
    };
    request: {
      method: "GET";
      url: "/classrooms/{classroom_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ClassroomSchema;
    };
  };

  /**
   * @name classroom/list-assignments-for-a-classroom
   * @summary List assignments for a classroom
   * @description Lists GitHub Classroom assignments for a classroom. Assignments will only be returned if the current user is an administrator of the GitHub Classroom.
   * @see https://docs.github.com/rest/classroom/classroom#list-assignments-for-a-classroom
   */
  "GET /classrooms/{classroom_id}/assignments": {
    parameters: {
      classroom_id: number;
      page?: number;
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/classrooms/{classroom_id}/assignments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SimpleClassroomAssignmentSchema[];
    };
  };

  /**
   * @name codes-of-conduct/get-all-codes-of-conduct
   * @summary Get all codes of conduct
   * @description Returns array of all GitHub's codes of conduct.
   * @see https://docs.github.com/rest/codes-of-conduct/codes-of-conduct#get-all-codes-of-conduct
   */
  "GET /codes_of_conduct": {
    parameters: {};
    request: {
      method: "GET";
      url: "/codes_of_conduct";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeOfConductSchema[];
    };
  };

  /**
   * @name codes-of-conduct/get-conduct-code
   * @summary Get a code of conduct
   * @description Returns information about the specified GitHub code of conduct.
   * @see https://docs.github.com/rest/codes-of-conduct/codes-of-conduct#get-a-code-of-conduct
   */
  "GET /codes_of_conduct/{key}": {
    parameters: {
      key: string;
    };
    request: {
      method: "GET";
      url: "/codes_of_conduct/{key}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeOfConductSchema;
    };
  };

  /**
   * @name credentials/revoke
   * @summary Revoke a list of credentials
   * @description Submit a list of credentials to be revoked. This endpoint is intended to revoke credentials the caller does not own and may have found exposed on GitHub.com or elsewhere. It can also be used for credentials associated with an old user account that you no longer have access to. Credential owners will be notified of the revocation.
   *
   * This endpoint currently accepts the following credential types:
   * - Personal access tokens (classic)
   * - Fine-grained personal access tokens
   *
   * Revoked credentials may impact users on GitHub Free, Pro, & Team and GitHub Enterprise Cloud, and GitHub Enterprise Cloud with Enterprise Managed Users.
   * GitHub cannot reactivate any credentials that have been revoked; new credentials will need to be generated.
   *
   * To prevent abuse, this API is limited to only 60 unauthenticated requests per hour and a max of 1000 tokens per API request.
   *
   * > [!NOTE]
   * > Any authenticated requests will return a 403.
   * @see https://docs.github.com/rest/credentials/revoke#revoke-a-list-of-credentials
   */
  "POST /credentials/revoke": {
    parameters: {} & Endpoints["POST /credentials/revoke"]["request"]["data"];
    request: {
      method: "POST";
      url: "/credentials/revoke";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description A list of credentials to be revoked, up to 1000 per request.
         */
        credentials: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: AcceptedResponse;
    };
  };

  /**
   * @name emojis/get
   * @summary Get emojis
   * @description Lists all the emojis available to use on GitHub.
   * @see https://docs.github.com/rest/emojis/emojis#get-emojis
   */
  "GET /emojis": {
    parameters: {};
    request: {
      method: "GET";
      url: "/emojis";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        [key: string]: string;
      };
    };
  };

  /**
   * @name code-security/get-configurations-for-enterprise
   * @summary Get code security configurations for an enterprise
   * @description Lists all code security configurations available in an enterprise.
   *
   * The authenticated user must be an administrator of the enterprise in order to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:enterprise` scope to use this endpoint.
   * @see https://docs.github.com/rest/code-security/configurations#get-code-security-configurations-for-an-enterprise
   */
  "GET /enterprises/{enterprise}/code-security/configurations": {
    parameters: {
      enterprise: string;

      /**
       * @description The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
       */
      per_page?: number;
      before?: string;
      after?: string;
    };
    request: {
      method: "GET";
      url: "/enterprises/{enterprise}/code-security/configurations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeSecurityConfigurationSchema[];
    };
  };

  /**
   * @name code-security/create-configuration-for-enterprise
   * @summary Create a code security configuration for an enterprise
   * @description Creates a code security configuration in an enterprise.
   *
   * The authenticated user must be an administrator of the enterprise in order to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.
   * @see https://docs.github.com/rest/code-security/configurations#create-a-code-security-configuration-for-an-enterprise
   */
  "POST /enterprises/{enterprise}/code-security/configurations": {
    parameters: {
      enterprise: string;
    } & Endpoints["POST /enterprises/{enterprise}/code-security/configurations"]["request"]["data"];
    request: {
      method: "POST";
      url: "/enterprises/{enterprise}/code-security/configurations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the code security configuration. Must be unique within the enterprise.
         */
        name: string;

        /**
         * @description A description of the code security configuration
         */
        description: string;

        /**
         * @description The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
         *
         * > [!WARNING]
         * > `code_security` and `secret_protection` are deprecated values for this field. Prefer the individual `code_security` and `secret_protection` fields to set the status of these features.
         *
         * @default "disabled"
         */
        advanced_security?:
          | "enabled"
          | "disabled"
          | "code_security"
          | "secret_protection";

        /**
         * @description The enablement status of GitHub Code Security features.
         */
        code_security?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of Dependency Graph
         * @default "enabled"
         */
        dependency_graph?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of Automatic dependency submission
         * @default "disabled"
         */
        dependency_graph_autosubmit_action?: "enabled" | "disabled" | "not_set";

        /**
         * @description Feature options for Automatic dependency submission
         */
        dependency_graph_autosubmit_action_options?: {
          /**
           * @description Whether to use runners labeled with 'dependency-submission' or standard GitHub runners.
           * @default false
           */
          labeled_runners?: boolean;
        };

        /**
         * @description The enablement status of Dependabot alerts
         * @default "disabled"
         */
        dependabot_alerts?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of Dependabot security updates
         * @default "disabled"
         */
        dependabot_security_updates?: "enabled" | "disabled" | "not_set";
        code_scanning_options?: CodeScanningOptionsSchema;

        /**
         * @description The enablement status of code scanning default setup
         * @default "disabled"
         */
        code_scanning_default_setup?: "enabled" | "disabled" | "not_set";
        code_scanning_default_setup_options?: CodeScanningDefaultSetupOptionsSchema;

        /**
         * @description The enablement status of code scanning delegated alert dismissal
         * @default "disabled"
         */
        code_scanning_delegated_alert_dismissal?:
          | "enabled"
          | "disabled"
          | "not_set";

        /**
         * @description The enablement status of GitHub Secret Protection features.
         */
        secret_protection?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of secret scanning
         * @default "disabled"
         */
        secret_scanning?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of secret scanning push protection
         * @default "disabled"
         */
        secret_scanning_push_protection?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of secret scanning validity checks
         * @default "disabled"
         */
        secret_scanning_validity_checks?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of secret scanning non provider patterns
         * @default "disabled"
         */
        secret_scanning_non_provider_patterns?:
          | "enabled"
          | "disabled"
          | "not_set";

        /**
         * @description The enablement status of Copilot secret scanning
         * @default "disabled"
         */
        secret_scanning_generic_secrets?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of secret scanning delegated alert dismissal
         * @default "disabled"
         */
        secret_scanning_delegated_alert_dismissal?:
          | "enabled"
          | "disabled"
          | "not_set";

        /**
         * @description The enablement status of private vulnerability reporting
         * @default "disabled"
         */
        private_vulnerability_reporting?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enforcement status for a security configuration
         * @default "enforced"
         */
        enforcement?: "enforced" | "unenforced";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name code-security/get-default-configurations-for-enterprise
   * @summary Get default code security configurations for an enterprise
   * @description Lists the default code security configurations for an enterprise.
   *
   * The authenticated user must be an administrator of the enterprise in order to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:enterprise` scope to use this endpoint.
   * @see https://docs.github.com/rest/code-security/configurations#get-default-code-security-configurations-for-an-enterprise
   */
  "GET /enterprises/{enterprise}/code-security/configurations/defaults": {
    parameters: {
      enterprise: string;
    };
    request: {
      method: "GET";
      url: "/enterprises/{enterprise}/code-security/configurations/defaults";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeSecurityDefaultConfigurationsSchema;
    };
  };

  /**
   * @name code-security/get-single-configuration-for-enterprise
   * @summary Retrieve a code security configuration of an enterprise
   * @description Gets a code security configuration available in an enterprise.
   *
   * The authenticated user must be an administrator of the enterprise in order to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:enterprise` scope to use this endpoint.
   * @see https://docs.github.com/rest/code-security/configurations#retrieve-a-code-security-configuration-of-an-enterprise
   */
  "GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}": {
    parameters: {
      enterprise: string;
      configuration_id: number;
    };
    request: {
      method: "GET";
      url: "/enterprises/{enterprise}/code-security/configurations/{configuration_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeSecurityConfigurationSchema;
    };
  };

  /**
   * @name code-security/update-enterprise-configuration
   * @summary Update a custom code security configuration for an enterprise
   * @description Updates a code security configuration in an enterprise.
   *
   * The authenticated user must be an administrator of the enterprise in order to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.
   * @see https://docs.github.com/rest/code-security/configurations#update-a-custom-code-security-configuration-for-an-enterprise
   */
  "PATCH /enterprises/{enterprise}/code-security/configurations/{configuration_id}": {
    parameters: {
      enterprise: string;
      configuration_id: number;
    } & Endpoints["PATCH /enterprises/{enterprise}/code-security/configurations/{configuration_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/enterprises/{enterprise}/code-security/configurations/{configuration_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the code security configuration. Must be unique across the enterprise.
         */
        name?: string;

        /**
         * @description A description of the code security configuration
         */
        description?: string;

        /**
         * @description The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
         *
         * > [!WARNING]
         * > `code_security` and `secret_protection` are deprecated values for this field. Prefer the individual `code_security` and `secret_protection` fields to set the status of these features.
         *
         */
        advanced_security?:
          | "enabled"
          | "disabled"
          | "code_security"
          | "secret_protection";

        /**
         * @description The enablement status of GitHub Code Security features.
         */
        code_security?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of Dependency Graph
         */
        dependency_graph?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of Automatic dependency submission
         */
        dependency_graph_autosubmit_action?: "enabled" | "disabled" | "not_set";

        /**
         * @description Feature options for Automatic dependency submission
         */
        dependency_graph_autosubmit_action_options?: {
          /**
           * @description Whether to use runners labeled with 'dependency-submission' or standard GitHub runners.
           */
          labeled_runners?: boolean;
        };

        /**
         * @description The enablement status of Dependabot alerts
         */
        dependabot_alerts?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of Dependabot security updates
         */
        dependabot_security_updates?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of code scanning default setup
         */
        code_scanning_default_setup?: "enabled" | "disabled" | "not_set";
        code_scanning_default_setup_options?: CodeScanningDefaultSetupOptionsSchema;

        /**
         * @description The enablement status of code scanning delegated alert dismissal
         * @default "disabled"
         */
        code_scanning_delegated_alert_dismissal?:
          | "enabled"
          | "disabled"
          | "not_set";

        /**
         * @description The enablement status of GitHub Secret Protection features.
         */
        secret_protection?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of secret scanning
         */
        secret_scanning?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of secret scanning push protection
         */
        secret_scanning_push_protection?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of secret scanning validity checks
         */
        secret_scanning_validity_checks?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of secret scanning non-provider patterns
         */
        secret_scanning_non_provider_patterns?:
          | "enabled"
          | "disabled"
          | "not_set";

        /**
         * @description The enablement status of Copilot secret scanning
         * @default "disabled"
         */
        secret_scanning_generic_secrets?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of secret scanning delegated alert dismissal
         * @default "disabled"
         */
        secret_scanning_delegated_alert_dismissal?:
          | "enabled"
          | "disabled"
          | "not_set";

        /**
         * @description The enablement status of private vulnerability reporting
         */
        private_vulnerability_reporting?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enforcement status for a security configuration
         */
        enforcement?: "enforced" | "unenforced";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeSecurityConfigurationSchema;
    };
  };

  /**
   * @name code-security/delete-configuration-for-enterprise
   * @summary Delete a code security configuration for an enterprise
   * @description Deletes a code security configuration from an enterprise.
   * Repositories attached to the configuration will retain their settings but will no longer be associated with
   * the configuration.
   *
   * The authenticated user must be an administrator for the enterprise to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.
   * @see https://docs.github.com/rest/code-security/configurations#delete-a-code-security-configuration-for-an-enterprise
   */
  "DELETE /enterprises/{enterprise}/code-security/configurations/{configuration_id}": {
    parameters: {
      enterprise: string;
      configuration_id: number;
    };
    request: {
      method: "DELETE";
      url: "/enterprises/{enterprise}/code-security/configurations/{configuration_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 204;
      data: never;
    };
  };

  /**
   * @name code-security/attach-enterprise-configuration
   * @summary Attach an enterprise configuration to repositories
   * @description Attaches an enterprise code security configuration to repositories. If the repositories specified are already attached to a configuration, they will be re-attached to the provided configuration.
   *
   * If insufficient GHAS licenses are available to attach the configuration to a repository, only free features will be enabled.
   *
   * The authenticated user must be an administrator for the enterprise to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.
   * @see https://docs.github.com/rest/code-security/configurations#attach-an-enterprise-configuration-to-repositories
   */
  "POST /enterprises/{enterprise}/code-security/configurations/{configuration_id}/attach": {
    parameters: {
      enterprise: string;
      configuration_id: number;
    } & Endpoints["POST /enterprises/{enterprise}/code-security/configurations/{configuration_id}/attach"]["request"]["data"];
    request: {
      method: "POST";
      url: "/enterprises/{enterprise}/code-security/configurations/{configuration_id}/attach";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The type of repositories to attach the configuration to.
         */
        scope: "all" | "all_without_configurations";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: AcceptedResponse;
    };
  };

  /**
   * @name code-security/set-configuration-as-default-for-enterprise
   * @summary Set a code security configuration as a default for an enterprise
   * @description Sets a code security configuration as a default to be applied to new repositories in your enterprise.
   *
   * This configuration will be applied by default to the matching repository type when created, but only for organizations within the enterprise that do not already have a default code security configuration set.
   *
   * The authenticated user must be an administrator for the enterprise to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.
   * @see https://docs.github.com/rest/code-security/configurations#set-a-code-security-configuration-as-a-default-for-an-enterprise
   */
  "PUT /enterprises/{enterprise}/code-security/configurations/{configuration_id}/defaults": {
    parameters: {
      enterprise: string;
      configuration_id: number;
    } & Endpoints["PUT /enterprises/{enterprise}/code-security/configurations/{configuration_id}/defaults"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/enterprises/{enterprise}/code-security/configurations/{configuration_id}/defaults";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Specify which types of repository this security configuration should be applied to by default.
         */
        default_for_new_repos?:
          | "all"
          | "none"
          | "private_and_internal"
          | "public";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        /**
         * @description Specifies which types of repository this security configuration is applied to by default.
         */
        default_for_new_repos?:
          | "all"
          | "none"
          | "private_and_internal"
          | "public";
        configuration?: CodeSecurityConfigurationSchema;
      };
    };
  };

  /**
   * @name code-security/get-repositories-for-enterprise-configuration
   * @summary Get repositories associated with an enterprise code security configuration
   * @description Lists the repositories associated with an enterprise code security configuration in an organization.
   *
   * The authenticated user must be an administrator of the enterprise in order to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:enterprise` scope to use this endpoint.
   * @see https://docs.github.com/rest/code-security/configurations#get-repositories-associated-with-an-enterprise-code-security-configuration
   */
  "GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}/repositories": {
    parameters: {
      enterprise: string;
      configuration_id: number;

      /**
       * @description The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
       */
      per_page?: number;
      before?: string;
      after?: string;

      /**
       * @description A comma-separated list of statuses. If specified, only repositories with these attachment statuses will be returned.
       *
       * Can be: `all`, `attached`, `attaching`, `removed`, `enforced`, `failed`, `updating`, `removed_by_enterprise`
       */
      status?: string;
    };
    request: {
      method: "GET";
      url: "/enterprises/{enterprise}/code-security/configurations/{configuration_id}/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeSecurityConfigurationRepositoriesSchema[];
    };
  };

  /**
   * @name dependabot/list-alerts-for-enterprise
   * @summary List Dependabot alerts for an enterprise
   * @description Lists Dependabot alerts for repositories that are owned by the specified enterprise.
   *
   * The authenticated user must be a member of the enterprise to use this endpoint.
   *
   * Alerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint.
   * @see https://docs.github.com/rest/dependabot/alerts#list-dependabot-alerts-for-an-enterprise
   */
  "GET /enterprises/{enterprise}/dependabot/alerts": {
    parameters: {
      enterprise: string;
      state?: string;
      severity?: string;
      ecosystem?: string;
      package?: string;
      epss_percentage?: string;
      has?: string | "patch"[];
      scope?: "development" | "runtime";
      sort?: "created" | "updated" | "epss_percentage";
      direction?: "asc" | "desc";
      before?: string;
      after?: string;
      first?: number;
      last?: number;
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/enterprises/{enterprise}/dependabot/alerts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DependabotAlertWithRepositorySchema[];
    };
  };

  /**
   * @name secret-scanning/list-alerts-for-enterprise
   * @summary List secret scanning alerts for an enterprise
   * @description Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
   *
   * Alerts are only returned for organizations in the enterprise for which the authenticated user is an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
   *
   * The authenticated user must be a member of the enterprise in order to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope or `security_events` scope to use this endpoint.
   * @see https://docs.github.com/rest/secret-scanning/secret-scanning#list-secret-scanning-alerts-for-an-enterprise
   */
  "GET /enterprises/{enterprise}/secret-scanning/alerts": {
    parameters: {
      enterprise: string;
      state?: "open" | "resolved";
      secret_type?: string;
      resolution?: string;
      sort?: "created" | "updated";
      direction?: "asc" | "desc";
      per_page?: number;
      before?: string;
      after?: string;
      validity?: string;
      is_publicly_leaked?: boolean;
      is_multi_repo?: boolean;
      hide_secret?: boolean;
    };
    request: {
      method: "GET";
      url: "/enterprises/{enterprise}/secret-scanning/alerts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrganizationSecretScanningAlertSchema[];
    };
  };

  /**
   * @name activity/list-public-events
   * @summary List public events
   * @description > [!NOTE]
   * > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
   * @see https://docs.github.com/rest/activity/events#list-public-events
   */
  "GET /events": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/events";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: EventSchema[];
    };
  };

  /**
   * @name activity/get-feeds
   * @summary Get feeds
   * @description Lists the feeds available to the authenticated user. The response provides a URL for each feed. You can then get a specific feed by sending a request to one of the feed URLs.
   *
   * *   **Timeline**: The GitHub global public timeline
   * *   **User**: The public timeline for any user, using `uri_template`. For more information, see "[Hypermedia](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."
   * *   **Current user public**: The public timeline for the authenticated user
   * *   **Current user**: The private timeline for the authenticated user
   * *   **Current user actor**: The private timeline for activity created by the authenticated user
   * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
   * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
   *
   * By default, timeline resources are returned in JSON. You can specify the `application/atom+xml` type in the `Accept` header to return timeline resources in Atom format. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * > [!NOTE]
   * > Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) since current feed URIs use the older, non revocable auth tokens.
   * @see https://docs.github.com/rest/activity/feeds#get-feeds
   */
  "GET /feeds": {
    parameters: {};
    request: {
      method: "GET";
      url: "/feeds";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: FeedSchema;
    };
  };

  /**
   * @name gists/list
   * @summary List gists for the authenticated user
   * @description Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
   * @see https://docs.github.com/rest/gists/gists#list-gists-for-the-authenticated-user
   */
  "GET /gists": {
    parameters: {
      since?: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/gists";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: BaseGistSchema[];
    };
  };

  /**
   * @name gists/create
   * @summary Create a gist
   * @description Allows you to add a new gist with one or more files.
   *
   * > [!NOTE]
   * > Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
   * @see https://docs.github.com/rest/gists/gists#create-a-gist
   */
  "POST /gists": {
    parameters: {} & Endpoints["POST /gists"]["request"]["data"];
    request: {
      method: "POST";
      url: "/gists";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Description of the gist
         * @example Example Ruby script
         */
        description?: string;

        /**
 * @description Names and content for the files that make up the gist
 * @example {
  "hello.rb": {
    "content": "puts \"Hello, World!\""
  }
}
  */
        files: {
          [key: string]: {
            /**
             * @description Content of the file
             */
            content: string;
          };
        };
        public?: boolean | "true" | "false";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name gists/list-public
   * @summary List public gists
   * @description List public gists sorted by most recently updated to least recently updated.
   *
   * Note: With [pagination](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
   * @see https://docs.github.com/rest/gists/gists#list-public-gists
   */
  "GET /gists/public": {
    parameters: {
      since?: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/gists/public";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: BaseGistSchema[];
    };
  };

  /**
   * @name gists/list-starred
   * @summary List starred gists
   * @description List the authenticated user's starred gists:
   * @see https://docs.github.com/rest/gists/gists#list-starred-gists
   */
  "GET /gists/starred": {
    parameters: {
      since?: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/gists/starred";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: BaseGistSchema[];
    };
  };

  /**
   * @name gists/get
   * @summary Get a gist
   * @description Gets a specified gist.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
   * @see https://docs.github.com/rest/gists/gists#get-a-gist
   */
  "GET /gists/{gist_id}": {
    parameters: {
      gist_id: string;
    };
    request: {
      method: "GET";
      url: "/gists/{gist_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: GistSimpleSchema;
    };
  };

  /**
   * @name gists/update
   * @summary Update a gist
   * @description Allows you to update a gist's description and to update, delete, or rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
   * @see https://docs.github.com/rest/reference/gists/#update-a-gist
   */
  "PATCH /gists/{gist_id}": {
    parameters: {
      gist_id: string;
    } & Endpoints["PATCH /gists/{gist_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/gists/{gist_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The description of the gist.
         * @example Example Ruby script
         */
        description?: string;

        /**
 * @description The gist files to be updated, renamed, or deleted. Each `key` must match the current filename
 * (including extension) of the targeted gist file. For example: `hello.py`.
 * 
 * To delete a file, set the whole file to null. For example: `hello.py : null`.
 * @example {
  "hello.rb": {
    "content": "blah",
    "filename": "goodbye.rb"
  }
}
  */
        files?: {
          [key: string]: {
            /**
             * @description The new content of the file.
             */
            content?: string;

            /**
             * @description The new filename for the file.
             */
            filename?: string | null;
          };
        };
      } | null;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: GistSimpleSchema;
    };
  };

  /**
   * @name gists/delete
   * @summary Delete a gist
   * @see https://docs.github.com/rest/gists/gists#delete-a-gist
   */
  "DELETE /gists/{gist_id}": {
    parameters: {
      gist_id: string;
    };
    request: {
      method: "DELETE";
      url: "/gists/{gist_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name gists/list-comments
   * @summary List gist comments
   * @description Lists the comments on a gist.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
   * @see https://docs.github.com/rest/gists/comments#list-gist-comments
   */
  "GET /gists/{gist_id}/comments": {
    parameters: {
      gist_id: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/gists/{gist_id}/comments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: GistCommentSchema[];
    };
  };

  /**
   * @name gists/create-comment
   * @summary Create a gist comment
   * @description Creates a comment on a gist.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
   * @see https://docs.github.com/rest/gists/comments#create-a-gist-comment
   */
  "POST /gists/{gist_id}/comments": {
    parameters: {
      gist_id: string;
    } & Endpoints["POST /gists/{gist_id}/comments"]["request"]["data"];
    request: {
      method: "POST";
      url: "/gists/{gist_id}/comments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The comment text.
         * @example Body of the attachment
         */
        body: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name gists/get-comment
   * @summary Get a gist comment
   * @description Gets a comment on a gist.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
   * @see https://docs.github.com/rest/gists/comments#get-a-gist-comment
   */
  "GET /gists/{gist_id}/comments/{comment_id}": {
    parameters: {
      gist_id: string;
      comment_id: number;
    };
    request: {
      method: "GET";
      url: "/gists/{gist_id}/comments/{comment_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: GistCommentSchema;
    };
  };

  /**
   * @name gists/update-comment
   * @summary Update a gist comment
   * @description Updates a comment on a gist.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
   * @see https://docs.github.com/rest/gists/comments#update-a-gist-comment
   */
  "PATCH /gists/{gist_id}/comments/{comment_id}": {
    parameters: {
      gist_id: string;
      comment_id: number;
    } & Endpoints["PATCH /gists/{gist_id}/comments/{comment_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/gists/{gist_id}/comments/{comment_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The comment text.
         * @example Body of the attachment
         */
        body: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: GistCommentSchema;
    };
  };

  /**
   * @name gists/delete-comment
   * @summary Delete a gist comment
   * @see https://docs.github.com/rest/gists/comments#delete-a-gist-comment
   */
  "DELETE /gists/{gist_id}/comments/{comment_id}": {
    parameters: {
      gist_id: string;
      comment_id: number;
    };
    request: {
      method: "DELETE";
      url: "/gists/{gist_id}/comments/{comment_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name gists/list-commits
   * @summary List gist commits
   * @see https://docs.github.com/rest/gists/gists#list-gist-commits
   */
  "GET /gists/{gist_id}/commits": {
    parameters: {
      gist_id: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/gists/{gist_id}/commits";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: GistCommitSchema[];
    };
  };

  /**
   * @name gists/list-forks
   * @summary List gist forks
   * @see https://docs.github.com/rest/gists/gists#list-gist-forks
   */
  "GET /gists/{gist_id}/forks": {
    parameters: {
      gist_id: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/gists/{gist_id}/forks";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: GistSimpleSchema[];
    };
  };

  /**
   * @name gists/fork
   * @summary Fork a gist
   * @see https://docs.github.com/rest/gists/gists#fork-a-gist
   */
  "POST /gists/{gist_id}/forks": {
    parameters: {
      gist_id: string;
    };
    request: {
      method: "POST";
      url: "/gists/{gist_id}/forks";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name gists/check-is-starred
   * @summary Check if a gist is starred
   * @see https://docs.github.com/rest/gists/gists#check-if-a-gist-is-starred
   */
  "GET /gists/{gist_id}/star": {
    parameters: {
      gist_id: string;
    };
    request: {
      method: "GET";
      url: "/gists/{gist_id}/star";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name gists/star
   * @summary Star a gist
   * @description Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
   * @see https://docs.github.com/rest/gists/gists#star-a-gist
   */
  "PUT /gists/{gist_id}/star": {
    parameters: {
      gist_id: string;
    };
    request: {
      method: "PUT";
      url: "/gists/{gist_id}/star";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name gists/unstar
   * @summary Unstar a gist
   * @see https://docs.github.com/rest/gists/gists#unstar-a-gist
   */
  "DELETE /gists/{gist_id}/star": {
    parameters: {
      gist_id: string;
    };
    request: {
      method: "DELETE";
      url: "/gists/{gist_id}/star";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name gists/get-revision
   * @summary Get a gist revision
   * @description Gets a specified gist revision.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
   * @see https://docs.github.com/rest/gists/gists#get-a-gist-revision
   */
  "GET /gists/{gist_id}/{sha}": {
    parameters: {
      gist_id: string;
      sha: string;
    };
    request: {
      method: "GET";
      url: "/gists/{gist_id}/{sha}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: GistSimpleSchema;
    };
  };

  /**
   * @name gitignore/get-all-templates
   * @summary Get all gitignore templates
   * @description List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/repos/repos#create-a-repository-for-the-authenticated-user).
   * @see https://docs.github.com/rest/gitignore/gitignore#get-all-gitignore-templates
   */
  "GET /gitignore/templates": {
    parameters: {};
    request: {
      method: "GET";
      url: "/gitignore/templates";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: string[];
    };
  };

  /**
   * @name gitignore/get-template
   * @summary Get a gitignore template
   * @description Get the content of a gitignore template.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw .gitignore contents.
   * @see https://docs.github.com/rest/gitignore/gitignore#get-a-gitignore-template
   */
  "GET /gitignore/templates/{name}": {
    parameters: {
      name: string;
    };
    request: {
      method: "GET";
      url: "/gitignore/templates/{name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: GitignoreTemplateSchema;
    };
  };

  /**
   * @name apps/list-repos-accessible-to-installation
   * @summary List repositories accessible to the app installation
   * @description List repositories that an app installation can access.
   * @see https://docs.github.com/rest/apps/installations#list-repositories-accessible-to-the-app-installation
   */
  "GET /installation/repositories": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/installation/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        repositories: RepositorySchema[];

        /**
         * @example selected
         */
        repository_selection?: string;
      };
    };
  };

  /**
   * @name apps/revoke-installation-access-token
   * @summary Revoke an installation access token
   * @description Revokes the installation token you're using to authenticate as an installation and access this endpoint.
   *
   * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/apps/apps#create-an-installation-access-token-for-an-app)" endpoint.
   * @see https://docs.github.com/rest/apps/installations#revoke-an-installation-access-token
   */
  "DELETE /installation/token": {
    parameters: {};
    request: {
      method: "DELETE";
      url: "/installation/token";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name issues/list
   * @summary List issues assigned to the authenticated user
   * @description List issues assigned to the authenticated user across all visible repositories including owned repositories, member
   * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
   * necessarily assigned to you.
   *
   * > [!NOTE]
   * > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/issues/issues#list-issues-assigned-to-the-authenticated-user
   */
  "GET /issues": {
    parameters: {
      /**
       * @description Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
       */
      filter?:
        | "assigned"
        | "created"
        | "mentioned"
        | "subscribed"
        | "repos"
        | "all";

      /**
       * @description Indicates the state of the issues to return.
       */
      state?: "open" | "closed" | "all";
      labels?: string;

      /**
       * @description What to sort results by.
       */
      sort?: "created" | "updated" | "comments";
      direction?: "asc" | "desc";
      since?: string;
      collab?: boolean;
      orgs?: boolean;
      owned?: boolean;
      pulls?: boolean;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/issues";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueSchema[];
    };
  };

  /**
   * @name licenses/get-all-commonly-used
   * @summary Get all commonly used licenses
   * @description Lists the most commonly used licenses on GitHub. For more information, see "[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)."
   * @see https://docs.github.com/rest/licenses/licenses#get-all-commonly-used-licenses
   */
  "GET /licenses": {
    parameters: {
      featured?: boolean;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/licenses";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: LicenseSimpleSchema[];
    };
  };

  /**
   * @name licenses/get
   * @summary Get a license
   * @description Gets information about a specific license. For more information, see "[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)."
   * @see https://docs.github.com/rest/licenses/licenses#get-a-license
   */
  "GET /licenses/{license}": {
    parameters: {
      license: string;
    };
    request: {
      method: "GET";
      url: "/licenses/{license}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: LicenseSchema;
    };
  };

  /**
   * @name markdown/render
   * @summary Render a Markdown document
   * @description Depending on what is rendered in the Markdown, you may need to provide additional token scopes for labels, such as `issues:read` or `pull_requests:read`.
   * @see https://docs.github.com/rest/markdown/markdown#render-a-markdown-document
   */
  "POST /markdown": {
    parameters: {} & Endpoints["POST /markdown"]["request"]["data"];
    request: {
      method: "POST";
      url: "/markdown";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The Markdown text to render in HTML.
         */
        text: string;

        /**
         * @description The rendering mode.
         * @example markdown
         * @default "markdown"
         */
        mode?: "markdown" | "gfm";

        /**
         * @description The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository.
         */
        context?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: string;
    };
  };

  /**
   * @name markdown/render-raw
   * @summary Render a Markdown document in raw mode
   * @description You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
   * @see https://docs.github.com/rest/markdown/markdown#render-a-markdown-document-in-raw-mode
   */
  "POST /markdown/raw": {
    parameters: {} & Endpoints["POST /markdown/raw"]["request"]["data"];
    request: {
      method: "POST";
      url: "/markdown/raw";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: string;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: string;
    };
  };

  /**
   * @name apps/get-subscription-plan-for-account
   * @summary Get a subscription plan for an account
   * @description Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
   *
   * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
   * @see https://docs.github.com/rest/apps/marketplace#get-a-subscription-plan-for-an-account
   */
  "GET /marketplace_listing/accounts/{account_id}": {
    parameters: {
      account_id: number;
    };
    request: {
      method: "GET";
      url: "/marketplace_listing/accounts/{account_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MarketplacePurchaseSchema;
    };
  };

  /**
   * @name apps/list-plans
   * @summary List plans
   * @description Lists all plans that are part of your GitHub Marketplace listing.
   *
   * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
   * @see https://docs.github.com/rest/apps/marketplace#list-plans
   */
  "GET /marketplace_listing/plans": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/marketplace_listing/plans";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MarketplaceListingPlanSchema[];
    };
  };

  /**
   * @name apps/list-accounts-for-plan
   * @summary List accounts for a plan
   * @description Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
   *
   * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
   * @see https://docs.github.com/rest/apps/marketplace#list-accounts-for-a-plan
   */
  "GET /marketplace_listing/plans/{plan_id}/accounts": {
    parameters: {
      plan_id: number;
      sort?: "created" | "updated";

      /**
       * @description To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter.
       */
      direction?: "asc" | "desc";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/marketplace_listing/plans/{plan_id}/accounts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MarketplacePurchaseSchema[];
    };
  };

  /**
   * @name apps/get-subscription-plan-for-account-stubbed
   * @summary Get a subscription plan for an account (stubbed)
   * @description Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
   *
   * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
   * @see https://docs.github.com/rest/apps/marketplace#get-a-subscription-plan-for-an-account-stubbed
   */
  "GET /marketplace_listing/stubbed/accounts/{account_id}": {
    parameters: {
      account_id: number;
    };
    request: {
      method: "GET";
      url: "/marketplace_listing/stubbed/accounts/{account_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MarketplacePurchaseSchema;
    };
  };

  /**
   * @name apps/list-plans-stubbed
   * @summary List plans (stubbed)
   * @description Lists all plans that are part of your GitHub Marketplace listing.
   *
   * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
   * @see https://docs.github.com/rest/apps/marketplace#list-plans-stubbed
   */
  "GET /marketplace_listing/stubbed/plans": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/marketplace_listing/stubbed/plans";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MarketplaceListingPlanSchema[];
    };
  };

  /**
   * @name apps/list-accounts-for-plan-stubbed
   * @summary List accounts for a plan (stubbed)
   * @description Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
   *
   * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
   * @see https://docs.github.com/rest/apps/marketplace#list-accounts-for-a-plan-stubbed
   */
  "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts": {
    parameters: {
      plan_id: number;
      sort?: "created" | "updated";

      /**
       * @description To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter.
       */
      direction?: "asc" | "desc";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/marketplace_listing/stubbed/plans/{plan_id}/accounts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MarketplacePurchaseSchema[];
    };
  };

  /**
   * @name meta/get
   * @summary Get GitHub meta information
   * @description Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/)."
   *
   * The API's response also includes a list of GitHub's domain names.
   *
   * The values shown in the documentation's response are example values. You must always query the API directly to get the latest values.
   *
   * > [!NOTE]
   * > This endpoint returns both IPv4 and IPv6 addresses. However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if IPv6 is supported.
   * @see https://docs.github.com/rest/meta/meta#get-apiname-meta-information
   */
  "GET /meta": {
    parameters: {};
    request: {
      method: "GET";
      url: "/meta";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ApiOverviewSchema;
    };
  };

  /**
   * @name activity/list-public-events-for-repo-network
   * @summary List public events for a network of repositories
   * @description > [!NOTE]
   * > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
   * @see https://docs.github.com/rest/activity/events#list-public-events-for-a-network-of-repositories
   */
  "GET /networks/{owner}/{repo}/events": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/networks/{owner}/{repo}/events";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: EventSchema[];
    };
  };

  /**
   * @name activity/list-notifications-for-authenticated-user
   * @summary List notifications for the authenticated user
   * @description List all notifications for the current user, sorted by most recently updated.
   * @see https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user
   */
  "GET /notifications": {
    parameters: {
      all?: boolean;
      participating?: boolean;
      since?: string;
      before?: string;
      page?: number;

      /**
       * @description The number of results per page (max 50). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
       */
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/notifications";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ThreadSchema[];
    };
  };

  /**
   * @name activity/mark-notifications-as-read
   * @summary Mark notifications as read
   * @description Marks all notifications as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
   * @see https://docs.github.com/rest/activity/notifications#mark-notifications-as-read
   */
  "PUT /notifications": {
    parameters: {} & Endpoints["PUT /notifications"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/notifications";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
         */
        last_read_at?: string;

        /**
         * @description Whether the notification has been read.
         */
        read?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: {
        message?: string;
      };
    };
  };

  /**
   * @name activity/get-thread
   * @summary Get a thread
   * @description Gets information about a notification thread.
   * @see https://docs.github.com/rest/activity/notifications#get-a-thread
   */
  "GET /notifications/threads/{thread_id}": {
    parameters: {
      thread_id: number;
    };
    request: {
      method: "GET";
      url: "/notifications/threads/{thread_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ThreadSchema;
    };
  };

  /**
   * @name activity/mark-thread-as-read
   * @summary Mark a thread as read
   * @description Marks a thread as "read." Marking a thread as "read" is equivalent to clicking a notification in your notification inbox on GitHub: https://github.com/notifications.
   * @see https://docs.github.com/rest/activity/notifications#mark-a-thread-as-read
   */
  "PATCH /notifications/threads/{thread_id}": {
    parameters: {
      thread_id: number;
    };
    request: {
      method: "PATCH";
      url: "/notifications/threads/{thread_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name activity/mark-thread-as-done
   * @summary Mark a thread as done
   * @description Marks a thread as "done." Marking a thread as "done" is equivalent to marking a notification in your notification inbox on GitHub as done: https://github.com/notifications.
   * @see https://docs.github.com/rest/activity/notifications#mark-a-thread-as-done
   */
  "DELETE /notifications/threads/{thread_id}": {
    parameters: {
      thread_id: number;
    };
    request: {
      method: "DELETE";
      url: "/notifications/threads/{thread_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name activity/get-thread-subscription-for-authenticated-user
   * @summary Get a thread subscription for the authenticated user
   * @description This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/activity/watching#get-a-repository-subscription).
   *
   * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
   * @see https://docs.github.com/rest/activity/notifications#get-a-thread-subscription-for-the-authenticated-user
   */
  "GET /notifications/threads/{thread_id}/subscription": {
    parameters: {
      thread_id: number;
    };
    request: {
      method: "GET";
      url: "/notifications/threads/{thread_id}/subscription";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ThreadSubscriptionSchema;
    };
  };

  /**
   * @name activity/set-thread-subscription
   * @summary Set a thread subscription
   * @description If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
   *
   * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
   *
   * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/activity/notifications#delete-a-thread-subscription) endpoint.
   * @see https://docs.github.com/rest/activity/notifications#set-a-thread-subscription
   */
  "PUT /notifications/threads/{thread_id}/subscription": {
    parameters: {
      thread_id: number;
    } & Endpoints["PUT /notifications/threads/{thread_id}/subscription"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/notifications/threads/{thread_id}/subscription";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Whether to block all notifications from a thread.
         * @default false
         */
        ignored?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ThreadSubscriptionSchema;
    };
  };

  /**
   * @name activity/delete-thread-subscription
   * @summary Delete a thread subscription
   * @description Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/activity/notifications#set-a-thread-subscription) endpoint and set `ignore` to `true`.
   * @see https://docs.github.com/rest/activity/notifications#delete-a-thread-subscription
   */
  "DELETE /notifications/threads/{thread_id}/subscription": {
    parameters: {
      thread_id: number;
    };
    request: {
      method: "DELETE";
      url: "/notifications/threads/{thread_id}/subscription";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name meta/get-octocat
   * @summary Get Octocat
   * @description Get the octocat as ASCII art
   * @see https://docs.github.com/rest/meta/meta#get-octocat
   */
  "GET /octocat": {
    parameters: {
      /**
       * @description The words to show in Octocat's speech bubble
       */
      s?: string;
    };
    request: {
      method: "GET";
      url: "/octocat";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: string;
    };
  };

  /**
   * @name orgs/list
   * @summary List organizations
   * @description Lists all organizations, in the order that they were created.
   *
   * > [!NOTE]
   * > Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of organizations.
   * @see https://docs.github.com/rest/orgs/orgs#list-organizations
   */
  "GET /organizations": {
    parameters: {
      since?: number;
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/organizations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrganizationSimpleSchema[];
    };
  };

  /**
   * @name dependabot/repository-access-for-org
   * @summary Lists the repositories Dependabot can access in an organization
   * @description Lists repositories that organization admins have allowed Dependabot to access when updating dependencies.
   * > [!NOTE]
   * >    This operation supports both server-to-server and user-to-server access.
   * Unauthorized users will not see the existence of this endpoint.
   * @see https://docs.github.com/rest/dependabot/repository-access#lists-the-repositories-dependabot-can-access-in-an-organization
   */
  "GET /organizations/{org}/dependabot/repository-access": {
    parameters: {
      org: string;

      /**
       * @description The page number of results to fetch.
       */
      page?: number;

      /**
       * @description Number of results per page.
       */
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/organizations/{org}/dependabot/repository-access";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DependabotRepositoryAccessDetailsSchema;
    };
  };

  /**
   * @name dependabot/update-repository-access-for-org
   * @summary Updates Dependabot's repository access list for an organization
   * @description Updates repositories according to the list of repositories that organization admins have given Dependabot access to when they've updated dependencies.
   *
   * > [!NOTE]
   * >    This operation supports both server-to-server and user-to-server access.
   * Unauthorized users will not see the existence of this endpoint.
   *
   * **Example request body:**
   * ```json
   * {
   *   "repository_ids_to_add": [123, 456],
   *   "repository_ids_to_remove": [789]
   * }
   * ```
   * @see https://docs.github.com/rest/dependabot/repository-access#updates-dependabots-repository-access-list-for-an-organization
   */
  "PATCH /organizations/{org}/dependabot/repository-access": {
    parameters: {
      org: string;
    } & Endpoints["PATCH /organizations/{org}/dependabot/repository-access"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/organizations/{org}/dependabot/repository-access";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description List of repository IDs to add.
         */
        repository_ids_to_add?: number[];

        /**
         * @description List of repository IDs to remove.
         */
        repository_ids_to_remove?: number[];
      };
    };
    response: never;
  };

  /**
   * @name dependabot/set-repository-access-default-level
   * @summary Set the default repository access level for Dependabot
   * @description Sets the default level of repository access Dependabot will have while performing an update.  Available values are:
   * - 'public' - Dependabot will only have access to public repositories, unless access is explicitly granted to non-public repositories.
   * - 'internal' - Dependabot will only have access to public and internal repositories, unless access is explicitly granted to private repositories.
   *
   * Unauthorized users will not see the existence of this endpoint.
   *
   * This operation supports both server-to-server and user-to-server access.
   * @see https://docs.github.com/rest/dependabot/repository-access#set-the-default-repository-access-level-for-dependabot
   */
  "PUT /organizations/{org}/dependabot/repository-access/default-level": {
    parameters: {
      org: string;
    } & Endpoints["PUT /organizations/{org}/dependabot/repository-access/default-level"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/organizations/{org}/dependabot/repository-access/default-level";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The default repository access level for Dependabot updates.
         * @example internal
         */
        default_level: "public" | "internal";
      };
    };
    response: never;
  };

  /**
   * @name billing/get-github-billing-usage-report-org
   * @summary Get billing usage report for an organization
   * @description Gets a report of the total usage for an organization. To use this endpoint, you must be an administrator of an organization within an enterprise or an organization account.
   *
   * **Note:** This endpoint is only available to organizations with access to the enhanced billing platform. For more information, see "[About the enhanced billing platform](https://docs.github.com/billing/using-the-new-billing-platform)."
   * @see https://docs.github.com/rest/billing/enhanced-billing#get-billing-usage-report-for-an-organization
   */
  "GET /organizations/{org}/settings/billing/usage": {
    parameters: {
      org: string;
      year?: number;
      month?: number;
      day?: number;
      hour?: number;
    };
    request: {
      method: "GET";
      url: "/organizations/{org}/settings/billing/usage";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: BillingUsageReportSchema;
    };
  };

  /**
   * @name orgs/get
   * @summary Get an organization
   * @description Gets information about an organization.
   *
   * When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, outside collaborators, guest collaborators, repository collaborators, or everyone with access to any repository within the organization to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
   *
   * To see the full details about an organization, the authenticated user must be an organization owner.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to see the full details about an organization.
   *
   * To see information about an organization's GitHub plan, GitHub Apps need the `Organization plan` permission.
   * @see https://docs.github.com/rest/orgs/orgs#get-an-organization
   */
  "GET /orgs/{org}": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrganizationFullSchema;
    };
  };

  /**
   * @name orgs/update
   * @summary Update an organization
   * @description > [!WARNING]
   * > **Closing down notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
   *
   * > [!WARNING]
   * > **Closing down notice:** Code security product enablement for new repositories through the organization API is closing down. Please use [code security configurations](https://docs.github.com/rest/code-security/configurations#set-a-code-security-configuration-as-a-default-for-an-organization) to set defaults instead. For more information on setting a default security configuration, see the [changelog](https://github.blog/changelog/2024-07-09-sunsetting-security-settings-defaults-parameters-in-the-organizations-rest-api/).
   *
   * Updates the organization's profile and member privileges.
   *
   * The authenticated user must be an organization owner to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` or `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/orgs#update-an-organization
   */
  "PATCH /orgs/{org}": {
    parameters: {
      org: string;
    } & Endpoints["PATCH /orgs/{org}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/orgs/{org}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Billing email address. This address is not publicized.
         */
        billing_email?: string;

        /**
         * @description The company name.
         */
        company?: string;

        /**
         * @description The publicly visible email address.
         */
        email?: string;

        /**
         * @description The Twitter username of the company.
         */
        twitter_username?: string;

        /**
         * @description The location.
         */
        location?: string;

        /**
         * @description The shorthand name of the company.
         */
        name?: string;

        /**
         * @description The description of the company. The maximum size is 160 characters.
         */
        description?: string;

        /**
         * @description Whether an organization can use organization projects.
         */
        has_organization_projects?: boolean;

        /**
         * @description Whether repositories that belong to the organization can use repository projects.
         */
        has_repository_projects?: boolean;

        /**
         * @description Default permission level members have for organization repositories.
         * @default "read"
         */
        default_repository_permission?: "read" | "write" | "admin" | "none";

        /**
         * @description Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
         * @default true
         */
        members_can_create_repositories?: boolean;

        /**
         * @description Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
         */
        members_can_create_internal_repositories?: boolean;

        /**
         * @description Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
         */
        members_can_create_private_repositories?: boolean;

        /**
         * @description Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
         */
        members_can_create_public_repositories?: boolean;

        /**
         * @description Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud.
         * **Note:** This parameter is closing down and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
         */
        members_allowed_repository_creation_type?: "all" | "private" | "none";

        /**
         * @description Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
         * @default true
         */
        members_can_create_pages?: boolean;

        /**
         * @description Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
         * @default true
         */
        members_can_create_public_pages?: boolean;

        /**
         * @description Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
         * @default true
         */
        members_can_create_private_pages?: boolean;

        /**
         * @description Whether organization members can fork private organization repositories.
         * @default false
         */
        members_can_fork_private_repositories?: boolean;

        /**
         * @description Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.
         * @default false
         */
        web_commit_signoff_required?: boolean;

        /**
         * @example "http://github.blog"
         */
        blog?: string;

        /**
         * @description **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
         *
         * Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to this organization.
         *
         * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
         *
         * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
         * @deprecated
         */
        advanced_security_enabled_for_new_repositories?: boolean;

        /**
         * @description **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
         *
         * Whether Dependabot alerts are automatically enabled for new repositories and repositories transferred to this organization.
         *
         * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
         *
         * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
         * @deprecated
         */
        dependabot_alerts_enabled_for_new_repositories?: boolean;

        /**
         * @description **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
         *
         * Whether Dependabot security updates are automatically enabled for new repositories and repositories transferred to this organization.
         *
         * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
         *
         * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
         * @deprecated
         */
        dependabot_security_updates_enabled_for_new_repositories?: boolean;

        /**
         * @description **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
         *
         * Whether dependency graph is automatically enabled for new repositories and repositories transferred to this organization.
         *
         * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
         *
         * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
         * @deprecated
         */
        dependency_graph_enabled_for_new_repositories?: boolean;

        /**
         * @description **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
         *
         * Whether secret scanning is automatically enabled for new repositories and repositories transferred to this organization.
         *
         * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
         *
         * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
         * @deprecated
         */
        secret_scanning_enabled_for_new_repositories?: boolean;

        /**
         * @description **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
         *
         * Whether secret scanning push protection is automatically enabled for new repositories and repositories transferred to this organization.
         *
         * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
         *
         * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
         * @deprecated
         */
        secret_scanning_push_protection_enabled_for_new_repositories?: boolean;

        /**
         * @description Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
         */
        secret_scanning_push_protection_custom_link_enabled?: boolean;

        /**
         * @description If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret.
         */
        secret_scanning_push_protection_custom_link?: string;

        /**
         * @description Controls whether or not deploy keys may be added and used for repositories in the organization.
         */
        deploy_keys_enabled_for_repositories?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrganizationFullSchema;
    };
  };

  /**
   * @name orgs/delete
   * @summary Delete an organization
   * @description Deletes an organization and all its repositories.
   *
   * The organization login will be unavailable for 90 days after deletion.
   *
   * Please review the Terms of Service regarding account deletion before using this endpoint:
   *
   * https://docs.github.com/site-policy/github-terms/github-terms-of-service
   * @see https://docs.github.com/rest/orgs/orgs#delete-an-organization
   */
  "DELETE /orgs/{org}": {
    parameters: {
      org: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: AcceptedResponse;
    };
  };

  /**
   * @name actions/get-actions-cache-usage-for-org
   * @summary Get GitHub Actions cache usage for an organization
   * @description Gets the total GitHub Actions cache usage for an organization.
   * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
   *
   * OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/cache#get-github-actions-cache-usage-for-an-organization
   */
  "GET /orgs/{org}/actions/cache/usage": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/cache/usage";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsCacheUsageOrgEnterpriseSchema;
    };
  };

  /**
   * @name actions/get-actions-cache-usage-by-repo-for-org
   * @summary List repositories with GitHub Actions cache usage for an organization
   * @description Lists repositories and their GitHub Actions cache usage for an organization.
   * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
   *
   * OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/cache#list-repositories-with-github-actions-cache-usage-for-an-organization
   */
  "GET /orgs/{org}/actions/cache/usage-by-repository": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/cache/usage-by-repository";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        repository_cache_usages: ActionsCacheUsageByRepositorySchema[];
      };
    };
  };

  /**
   * @name actions/list-hosted-runners-for-org
   * @summary List GitHub-hosted runners for an organization
   * @description Lists all GitHub-hosted runners configured in an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `manage_runner:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/hosted-runners#list-github-hosted-runners-for-an-organization
   */
  "GET /orgs/{org}/actions/hosted-runners": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/hosted-runners";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        runners: ActionsHostedRunnerSchema[];
      };
    };
  };

  /**
   * @name actions/create-hosted-runner-for-org
   * @summary Create a GitHub-hosted runner for an organization
   * @description Creates a GitHub-hosted runner for an organization.
   * OAuth tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/hosted-runners#create-a-github-hosted-runner-for-an-organization
   */
  "POST /orgs/{org}/actions/hosted-runners": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/actions/hosted-runners"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/actions/hosted-runners";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Name of the runner. Must be between 1 and 64 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'.
         */
        name: string;

        /**
         * @description The image of runner. To list all available images, use `GET /actions/hosted-runners/images/github-owned` or `GET /actions/hosted-runners/images/partner`.
         */
        image: {
          /**
           * @description The unique identifier of the runner image.
           */
          id?: string;

          /**
           * @description The source of the runner image.
           */
          source?: "github" | "partner" | "custom";
        };

        /**
         * @description The machine size of the runner. To list available sizes, use `GET actions/hosted-runners/machine-sizes`
         */
        size: string;

        /**
         * @description The existing runner group to add this runner to.
         */
        runner_group_id: number;

        /**
         * @description The maximum amount of runners to scale up to. Runners will not auto-scale above this number. Use this setting to limit your cost.
         */
        maximum_runners?: number;

        /**
         * @description Whether this runner should be created with a static public IP. Note limit on account. To list limits on account, use `GET actions/hosted-runners/limits`
         */
        enable_static_ip?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name actions/get-hosted-runners-github-owned-images-for-org
   * @summary Get GitHub-owned images for GitHub-hosted runners in an organization
   * @description Get the list of GitHub-owned images available for GitHub-hosted runners for an organization.
   * @see https://docs.github.com/rest/actions/hosted-runners#get-github-owned-images-for-github-hosted-runners-in-an-organization
   */
  "GET /orgs/{org}/actions/hosted-runners/images/github-owned": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/hosted-runners/images/github-owned";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        images: ActionsHostedRunnerCuratedImageSchema[];
      };
    };
  };

  /**
   * @name actions/get-hosted-runners-partner-images-for-org
   * @summary Get partner images for GitHub-hosted runners in an organization
   * @description Get the list of partner images available for GitHub-hosted runners for an organization.
   * @see https://docs.github.com/rest/actions/hosted-runners#get-partner-images-for-github-hosted-runners-in-an-organization
   */
  "GET /orgs/{org}/actions/hosted-runners/images/partner": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/hosted-runners/images/partner";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        images: ActionsHostedRunnerCuratedImageSchema[];
      };
    };
  };

  /**
   * @name actions/get-hosted-runners-limits-for-org
   * @summary Get limits on GitHub-hosted runners for an organization
   * @description Get the GitHub-hosted runners limits for an organization.
   * @see https://docs.github.com/rest/actions/hosted-runners#get-limits-on-github-hosted-runners-for-an-organization
   */
  "GET /orgs/{org}/actions/hosted-runners/limits": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/hosted-runners/limits";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsHostedRunnerLimitsSchema;
    };
  };

  /**
   * @name actions/get-hosted-runners-machine-specs-for-org
   * @summary Get GitHub-hosted runners machine specs for an organization
   * @description Get the list of machine specs available for GitHub-hosted runners for an organization.
   * @see https://docs.github.com/rest/actions/hosted-runners#get-github-hosted-runners-machine-specs-for-an-organization
   */
  "GET /orgs/{org}/actions/hosted-runners/machine-sizes": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/hosted-runners/machine-sizes";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        machine_specs: ActionsHostedRunnerMachineSpecSchema[];
      };
    };
  };

  /**
   * @name actions/get-hosted-runners-platforms-for-org
   * @summary Get platforms for GitHub-hosted runners in an organization
   * @description Get the list of platforms available for GitHub-hosted runners for an organization.
   * @see https://docs.github.com/rest/actions/hosted-runners#get-platforms-for-github-hosted-runners-in-an-organization
   */
  "GET /orgs/{org}/actions/hosted-runners/platforms": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/hosted-runners/platforms";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        platforms: string[];
      };
    };
  };

  /**
   * @name actions/get-hosted-runner-for-org
   * @summary Get a GitHub-hosted runner for an organization
   * @description Gets a GitHub-hosted runner configured in an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/hosted-runners#get-a-github-hosted-runner-for-an-organization
   */
  "GET /orgs/{org}/actions/hosted-runners/{hosted_runner_id}": {
    parameters: {
      org: string;
      hosted_runner_id: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsHostedRunnerSchema;
    };
  };

  /**
   * @name actions/update-hosted-runner-for-org
   * @summary Update a GitHub-hosted runner for an organization
   * @description Updates a GitHub-hosted runner for an organization.
   * OAuth app tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/hosted-runners#update-a-github-hosted-runner-for-an-organization
   */
  "PATCH /orgs/{org}/actions/hosted-runners/{hosted_runner_id}": {
    parameters: {
      org: string;
      hosted_runner_id: number;
    } & Endpoints["PATCH /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Name of the runner. Must be between 1 and 64 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'.
         */
        name?: string;

        /**
         * @description The existing runner group to add this runner to.
         */
        runner_group_id?: number;

        /**
         * @description The maximum amount of runners to scale up to. Runners will not auto-scale above this number. Use this setting to limit your cost.
         */
        maximum_runners?: number;

        /**
         * @description Whether this runner should be updated with a static public IP. Note limit on account. To list limits on account, use `GET actions/hosted-runners/limits`
         */
        enable_static_ip?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsHostedRunnerSchema;
    };
  };

  /**
   * @name actions/delete-hosted-runner-for-org
   * @summary Delete a GitHub-hosted runner for an organization
   * @description Deletes a GitHub-hosted runner for an organization.
   * @see https://docs.github.com/rest/actions/hosted-runners#delete-a-github-hosted-runner-for-an-organization
   */
  "DELETE /orgs/{org}/actions/hosted-runners/{hosted_runner_id}": {
    parameters: {
      org: string;
      hosted_runner_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: ActionsHostedRunnerSchema;
    };
  };

  /**
   * @name oidc/get-oidc-custom-sub-template-for-org
   * @summary Get the customization template for an OIDC subject claim for an organization
   * @description Gets the customization template for an OpenID Connect (OIDC) subject claim.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-an-organization
   */
  "GET /orgs/{org}/actions/oidc/customization/sub": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/oidc/customization/sub";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OidcCustomSubSchema;
    };
  };

  /**
   * @name oidc/update-oidc-custom-sub-template-for-org
   * @summary Set the customization template for an OIDC subject claim for an organization
   * @description Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-an-organization
   */
  "PUT /orgs/{org}/actions/oidc/customization/sub": {
    parameters: {
      org: string;
    } & Endpoints["PUT /orgs/{org}/actions/oidc/customization/sub"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/actions/oidc/customization/sub";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name actions/get-github-actions-permissions-organization
   * @summary Get GitHub Actions permissions for an organization
   * @description Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
   *
   * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#get-github-actions-permissions-for-an-organization
   */
  "GET /orgs/{org}/actions/permissions": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/permissions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsOrganizationPermissionsSchema;
    };
  };

  /**
   * @name actions/set-github-actions-permissions-organization
   * @summary Set GitHub Actions permissions for an organization
   * @description Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#set-github-actions-permissions-for-an-organization
   */
  "PUT /orgs/{org}/actions/permissions": {
    parameters: {
      org: string;
    } & Endpoints["PUT /orgs/{org}/actions/permissions"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/actions/permissions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        enabled_repositories: EnabledRepositoriesSchema;
        allowed_actions?: AllowedActionsSchema;
        sha_pinning_required?: ShaPinningRequiredSchema;
      };
    };
    response: never;
  };

  /**
   * @name actions/get-artifact-and-log-retention-settings-organization
   * @summary Get artifact and log retention settings for an organization
   * @description Gets artifact and log retention settings for an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#get-artifact-and-log-retention-settings-for-an-organization
   */
  "GET /orgs/{org}/actions/permissions/artifact-and-log-retention": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/permissions/artifact-and-log-retention";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsArtifactAndLogRetentionResponseSchema;
    };
  };

  /**
   * @name actions/set-artifact-and-log-retention-settings-organization
   * @summary Set artifact and log retention settings for an organization
   * @description Sets artifact and log retention settings for an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#set-artifact-and-log-retention-settings-for-an-organization
   */
  "PUT /orgs/{org}/actions/permissions/artifact-and-log-retention": {
    parameters: {
      org: string;
    } & Endpoints["PUT /orgs/{org}/actions/permissions/artifact-and-log-retention"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/actions/permissions/artifact-and-log-retention";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: never;
  };

  /**
   * @name actions/get-fork-pr-contributor-approval-permissions-organization
   * @summary Get fork PR contributor approval permissions for an organization
   * @description Gets the fork PR contributor approval policy for an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#get-fork-pr-contributor-approval-permissions-for-an-organization
   */
  "GET /orgs/{org}/actions/permissions/fork-pr-contributor-approval": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/permissions/fork-pr-contributor-approval";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsForkPrContributorApprovalSchema;
    };
  };

  /**
   * @name actions/set-fork-pr-contributor-approval-permissions-organization
   * @summary Set fork PR contributor approval permissions for an organization
   * @description Sets the fork PR contributor approval policy for an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#set-fork-pr-contributor-approval-permissions-for-an-organization
   */
  "PUT /orgs/{org}/actions/permissions/fork-pr-contributor-approval": {
    parameters: {
      org: string;
    } & Endpoints["PUT /orgs/{org}/actions/permissions/fork-pr-contributor-approval"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/actions/permissions/fork-pr-contributor-approval";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: never;
  };

  /**
   * @name actions/get-private-repo-fork-pr-workflows-settings-organization
   * @summary Get private repo fork PR workflow settings for an organization
   * @description Gets the settings for whether workflows from fork pull requests can run on private repositories in an organization.
   * @see https://docs.github.com/rest/actions/permissions#get-private-repo-fork-pr-workflow-settings-for-an-organization
   */
  "GET /orgs/{org}/actions/permissions/fork-pr-workflows-private-repos": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/permissions/fork-pr-workflows-private-repos";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsForkPrWorkflowsPrivateReposSchema;
    };
  };

  /**
   * @name actions/set-private-repo-fork-pr-workflows-settings-organization
   * @summary Set private repo fork PR workflow settings for an organization
   * @description Sets the settings for whether workflows from fork pull requests can run on private repositories in an organization.
   * @see https://docs.github.com/rest/actions/permissions#set-private-repo-fork-pr-workflow-settings-for-an-organization
   */
  "PUT /orgs/{org}/actions/permissions/fork-pr-workflows-private-repos": {
    parameters: {
      org: string;
    } & Endpoints["PUT /orgs/{org}/actions/permissions/fork-pr-workflows-private-repos"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/actions/permissions/fork-pr-workflows-private-repos";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: never;
  };

  /**
   * @name actions/list-selected-repositories-enabled-github-actions-organization
   * @summary List selected repositories enabled for GitHub Actions in an organization
   * @description Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#list-selected-repositories-enabled-for-github-actions-in-an-organization
   */
  "GET /orgs/{org}/actions/permissions/repositories": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/permissions/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        repositories: RepositorySchema[];
      };
    };
  };

  /**
   * @name actions/set-selected-repositories-enabled-github-actions-organization
   * @summary Set selected repositories enabled for GitHub Actions in an organization
   * @description Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#set-selected-repositories-enabled-for-github-actions-in-an-organization
   */
  "PUT /orgs/{org}/actions/permissions/repositories": {
    parameters: {
      org: string;
    } & Endpoints["PUT /orgs/{org}/actions/permissions/repositories"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/actions/permissions/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description List of repository IDs to enable for GitHub Actions.
         */
        selected_repository_ids: number[];
      };
    };
    response: never;
  };

  /**
   * @name actions/enable-selected-repository-github-actions-organization
   * @summary Enable a selected repository for GitHub Actions in an organization
   * @description Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#enable-a-selected-repository-for-github-actions-in-an-organization
   */
  "PUT /orgs/{org}/actions/permissions/repositories/{repository_id}": {
    parameters: {
      org: string;
      repository_id: number;
    };
    request: {
      method: "PUT";
      url: "/orgs/{org}/actions/permissions/repositories/{repository_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/disable-selected-repository-github-actions-organization
   * @summary Disable a selected repository for GitHub Actions in an organization
   * @description Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#disable-a-selected-repository-for-github-actions-in-an-organization
   */
  "DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}": {
    parameters: {
      org: string;
      repository_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/actions/permissions/repositories/{repository_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/get-allowed-actions-organization
   * @summary Get allowed actions and reusable workflows for an organization
   * @description Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#get-allowed-actions-and-reusable-workflows-for-an-organization
   */
  "GET /orgs/{org}/actions/permissions/selected-actions": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/permissions/selected-actions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SelectedActionsSchema;
    };
  };

  /**
   * @name actions/set-allowed-actions-organization
   * @summary Set allowed actions and reusable workflows for an organization
   * @description Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#set-allowed-actions-and-reusable-workflows-for-an-organization
   */
  "PUT /orgs/{org}/actions/permissions/selected-actions": {
    parameters: {
      org: string;
    } & Endpoints["PUT /orgs/{org}/actions/permissions/selected-actions"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/actions/permissions/selected-actions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: never;
  };

  /**
   * @name actions/get-self-hosted-runners-permissions-organization
   * @summary Get self-hosted runners settings for an organization
   * @description Gets the settings for self-hosted runners for an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#get-self-hosted-runners-settings-for-an-organization
   */
  "GET /orgs/{org}/actions/permissions/self-hosted-runners": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/permissions/self-hosted-runners";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SelfHostedRunnersSettingsSchema;
    };
  };

  /**
   * @name actions/set-self-hosted-runners-permissions-organization
   * @summary Set self-hosted runners settings for an organization
   * @description Sets the settings for self-hosted runners for an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#set-self-hosted-runners-settings-for-an-organization
   */
  "PUT /orgs/{org}/actions/permissions/self-hosted-runners": {
    parameters: {
      org: string;
    } & Endpoints["PUT /orgs/{org}/actions/permissions/self-hosted-runners"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/actions/permissions/self-hosted-runners";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The policy that controls whether self-hosted runners can be used in the organization
         */
        enabled_repositories: "all" | "selected" | "none";
      };
    };
    response: never;
  };

  /**
   * @name actions/list-selected-repositories-self-hosted-runners-organization
   * @summary List repositories allowed to use self-hosted runners in an organization
   * @description Lists repositories that are allowed to use self-hosted runners in an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#list-repositories-allowed-to-use-self-hosted-runners-in-an-organization
   */
  "GET /orgs/{org}/actions/permissions/self-hosted-runners/repositories": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/permissions/self-hosted-runners/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count?: number;
        repositories?: RepositorySchema[];
      };
    };
  };

  /**
   * @name actions/set-selected-repositories-self-hosted-runners-organization
   * @summary Set repositories allowed to use self-hosted runners in an organization
   * @description Sets repositories that are allowed to use self-hosted runners in an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#set-repositories-allowed-to-use-self-hosted-runners-in-an-organization
   */
  "PUT /orgs/{org}/actions/permissions/self-hosted-runners/repositories": {
    parameters: {
      org: string;
    } & Endpoints["PUT /orgs/{org}/actions/permissions/self-hosted-runners/repositories"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/actions/permissions/self-hosted-runners/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description IDs of repositories that can use repository-level self-hosted runners
         */
        selected_repository_ids: number[];
      };
    };
    response: never;
  };

  /**
   * @name actions/enable-selected-repository-self-hosted-runners-organization
   * @summary Add a repository to the list of repositories allowed to use self-hosted runners in an organization
   * @description Adds a repository to the list of repositories that are allowed to use self-hosted runners in an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#add-a-repository-to-the-list-of-repositories-allowed-to-use-self-hosted-runners-in-an-organization
   */
  "PUT /orgs/{org}/actions/permissions/self-hosted-runners/repositories/{repository_id}": {
    parameters: {
      org: string;
      repository_id: number;
    };
    request: {
      method: "PUT";
      url: "/orgs/{org}/actions/permissions/self-hosted-runners/repositories/{repository_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/disable-selected-repository-self-hosted-runners-organization
   * @summary Remove a repository from the list of repositories allowed to use self-hosted runners in an organization
   * @description Removes a repository from the list of repositories that are allowed to use self-hosted runners in an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#remove-a-repository-from-the-list-of-repositories-allowed-to-use-self-hosted-runners-in-an-organization
   */
  "DELETE /orgs/{org}/actions/permissions/self-hosted-runners/repositories/{repository_id}": {
    parameters: {
      org: string;
      repository_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/actions/permissions/self-hosted-runners/repositories/{repository_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/get-github-actions-default-workflow-permissions-organization
   * @summary Get default workflow permissions for an organization
   * @description Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,
   * as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
   * "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
   *
   * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#get-default-workflow-permissions-for-an-organization
   */
  "GET /orgs/{org}/actions/permissions/workflow": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/permissions/workflow";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsGetDefaultWorkflowPermissionsSchema;
    };
  };

  /**
   * @name actions/set-github-actions-default-workflow-permissions-organization
   * @summary Set default workflow permissions for an organization
   * @description Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions
   * can submit approving pull request reviews. For more information, see
   * "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#set-default-workflow-permissions-for-an-organization
   */
  "PUT /orgs/{org}/actions/permissions/workflow": {
    parameters: {
      org: string;
    } & Endpoints["PUT /orgs/{org}/actions/permissions/workflow"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/actions/permissions/workflow";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: never;
  };

  /**
   * @name actions/list-self-hosted-runner-groups-for-org
   * @summary List self-hosted runner groups for an organization
   * @description Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runner-groups#list-self-hosted-runner-groups-for-an-organization
   */
  "GET /orgs/{org}/actions/runner-groups": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;
      visible_to_repository?: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/runner-groups";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        runner_groups: RunnerGroupsOrgSchema[];
      };
    };
  };

  /**
   * @name actions/create-self-hosted-runner-group-for-org
   * @summary Create a self-hosted runner group for an organization
   * @description Creates a new self-hosted runner group for an organization.
   *
   * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runner-groups#create-a-self-hosted-runner-group-for-an-organization
   */
  "POST /orgs/{org}/actions/runner-groups": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/actions/runner-groups"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/actions/runner-groups";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Name of the runner group.
         */
        name: string;

        /**
         * @description Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories.
         * @default "all"
         */
        visibility?: "selected" | "all" | "private";

        /**
         * @description List of repository IDs that can access the runner group.
         */
        selected_repository_ids?: number[];

        /**
         * @description List of runner IDs to add to the runner group.
         */
        runners?: number[];

        /**
         * @description Whether the runner group can be used by `public` repositories.
         * @default false
         */
        allows_public_repositories?: boolean;

        /**
         * @description If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
         * @default false
         */
        restricted_to_workflows?: boolean;

        /**
         * @description List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
         */
        selected_workflows?: string[];

        /**
         * @description The identifier of a hosted compute network configuration.
         */
        network_configuration_id?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name actions/get-self-hosted-runner-group-for-org
   * @summary Get a self-hosted runner group for an organization
   * @description Gets a specific self-hosted runner group for an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runner-groups#get-a-self-hosted-runner-group-for-an-organization
   */
  "GET /orgs/{org}/actions/runner-groups/{runner_group_id}": {
    parameters: {
      org: string;
      runner_group_id: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/runner-groups/{runner_group_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RunnerGroupsOrgSchema;
    };
  };

  /**
   * @name actions/update-self-hosted-runner-group-for-org
   * @summary Update a self-hosted runner group for an organization
   * @description Updates the `name` and `visibility` of a self-hosted runner group in an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runner-groups#update-a-self-hosted-runner-group-for-an-organization
   */
  "PATCH /orgs/{org}/actions/runner-groups/{runner_group_id}": {
    parameters: {
      org: string;
      runner_group_id: number;
    } & Endpoints["PATCH /orgs/{org}/actions/runner-groups/{runner_group_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/orgs/{org}/actions/runner-groups/{runner_group_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Name of the runner group.
         */
        name: string;

        /**
         * @description Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories.
         */
        visibility?: "selected" | "all" | "private";

        /**
         * @description Whether the runner group can be used by `public` repositories.
         * @default false
         */
        allows_public_repositories?: boolean;

        /**
         * @description If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
         * @default false
         */
        restricted_to_workflows?: boolean;

        /**
         * @description List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
         */
        selected_workflows?: string[];

        /**
         * @description The identifier of a hosted compute network configuration.
         */
        network_configuration_id?: string | null;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RunnerGroupsOrgSchema;
    };
  };

  /**
   * @name actions/delete-self-hosted-runner-group-from-org
   * @summary Delete a self-hosted runner group from an organization
   * @description Deletes a self-hosted runner group for an organization.
   *
   * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runner-groups#delete-a-self-hosted-runner-group-from-an-organization
   */
  "DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}": {
    parameters: {
      org: string;
      runner_group_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/actions/runner-groups/{runner_group_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/list-github-hosted-runners-in-group-for-org
   * @summary List GitHub-hosted runners in a group for an organization
   * @description Lists the GitHub-hosted runners in an organization group.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runner-groups#list-github-hosted-runners-in-a-group-for-an-organization
   */
  "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runners": {
    parameters: {
      org: string;
      runner_group_id: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runners";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        runners: ActionsHostedRunnerSchema[];
      };
    };
  };

  /**
   * @name actions/list-repo-access-to-self-hosted-runner-group-in-org
   * @summary List repository access to a self-hosted runner group in an organization
   * @description Lists the repositories with access to a self-hosted runner group configured in an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runner-groups#list-repository-access-to-a-self-hosted-runner-group-in-an-organization
   */
  "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories": {
    parameters: {
      org: string;
      runner_group_id: number;
      page?: number;
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        repositories: MinimalRepositorySchema[];
      };
    };
  };

  /**
   * @name actions/set-repo-access-to-self-hosted-runner-group-in-org
   * @summary Set repository access for a self-hosted runner group in an organization
   * @description Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runner-groups#set-repository-access-for-a-self-hosted-runner-group-in-an-organization
   */
  "PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories": {
    parameters: {
      org: string;
      runner_group_id: number;
    } & Endpoints["PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description List of repository IDs that can access the runner group.
         */
        selected_repository_ids: number[];
      };
    };
    response: never;
  };

  /**
   * @name actions/add-repo-access-to-self-hosted-runner-group-in-org
   * @summary Add repository access to a self-hosted runner group in an organization
   * @description Adds a repository to the list of repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
   *
   * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runner-groups#add-repository-access-to-a-self-hosted-runner-group-in-an-organization
   */
  "PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}": {
    parameters: {
      org: string;
      runner_group_id: number;
      repository_id: number;
    };
    request: {
      method: "PUT";
      url: "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/remove-repo-access-to-self-hosted-runner-group-in-org
   * @summary Remove repository access to a self-hosted runner group in an organization
   * @description Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runner-groups#remove-repository-access-to-a-self-hosted-runner-group-in-an-organization
   */
  "DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}": {
    parameters: {
      org: string;
      runner_group_id: number;
      repository_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/list-self-hosted-runners-in-group-for-org
   * @summary List self-hosted runners in a group for an organization
   * @description Lists self-hosted runners that are in a specific organization group.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runner-groups#list-self-hosted-runners-in-a-group-for-an-organization
   */
  "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners": {
    parameters: {
      org: string;
      runner_group_id: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        runners: RunnerSchema[];
      };
    };
  };

  /**
   * @name actions/set-self-hosted-runners-in-group-for-org
   * @summary Set self-hosted runners in a group for an organization
   * @description Replaces the list of self-hosted runners that are part of an organization runner group.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runner-groups#set-self-hosted-runners-in-a-group-for-an-organization
   */
  "PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runners": {
    parameters: {
      org: string;
      runner_group_id: number;
    } & Endpoints["PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runners"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description List of runner IDs to add to the runner group.
         */
        runners: number[];
      };
    };
    response: never;
  };

  /**
   * @name actions/add-self-hosted-runner-to-group-for-org
   * @summary Add a self-hosted runner to a group for an organization
   * @description Adds a self-hosted runner to a runner group configured in an organization.
   *
   * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runner-groups#add-a-self-hosted-runner-to-a-group-for-an-organization
   */
  "PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}": {
    parameters: {
      org: string;
      runner_group_id: number;
      runner_id: number;
    };
    request: {
      method: "PUT";
      url: "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/remove-self-hosted-runner-from-group-for-org
   * @summary Remove a self-hosted runner from a group for an organization
   * @description Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runner-groups#remove-a-self-hosted-runner-from-a-group-for-an-organization
   */
  "DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}": {
    parameters: {
      org: string;
      runner_group_id: number;
      runner_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/list-self-hosted-runners-for-org
   * @summary List self-hosted runners for an organization
   * @description Lists all self-hosted runners configured in an organization.
   *
   * Authenticated users must have admin access to the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#list-self-hosted-runners-for-an-organization
   */
  "GET /orgs/{org}/actions/runners": {
    parameters: {
      /**
       * @description The name of a self-hosted runner.
       */
      name?: string;
      org: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/runners";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        runners: RunnerSchema[];
      };
    };
  };

  /**
   * @name actions/list-runner-applications-for-org
   * @summary List runner applications for an organization
   * @description Lists binaries for the runner application that you can download and run.
   *
   * Authenticated users must have admin access to the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.  If the repository is private, the `repo` scope is also required.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#list-runner-applications-for-an-organization
   */
  "GET /orgs/{org}/actions/runners/downloads": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/runners/downloads";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RunnerApplicationSchema[];
    };
  };

  /**
   * @name actions/generate-runner-jitconfig-for-org
   * @summary Create configuration for a just-in-time runner for an organization
   * @description Generates a configuration that can be passed to the runner application at startup.
   *
   * The authenticated user must have admin access to the organization.
   *
   * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#create-configuration-for-a-just-in-time-runner-for-an-organization
   */
  "POST /orgs/{org}/actions/runners/generate-jitconfig": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/actions/runners/generate-jitconfig"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/actions/runners/generate-jitconfig";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the new runner.
         */
        name: string;

        /**
         * @description The ID of the runner group to register the runner to.
         */
        runner_group_id: number;

        /**
         * @description The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.
         */
        labels: string[];

        /**
         * @description The working directory to be used for job execution, relative to the runner install directory.
         * @default "_work"
         */
        work_folder?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name actions/create-registration-token-for-org
   * @summary Create a registration token for an organization
   * @description Returns a token that you can pass to the `config` script. The token expires after one hour.
   *
   * For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:
   *
   * ```
   * ./config.sh --url https://github.com/octo-org --token TOKEN
   * ```
   *
   * Authenticated users must have admin access to the organization to use this endpoint.
   *
   * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#create-a-registration-token-for-an-organization
   */
  "POST /orgs/{org}/actions/runners/registration-token": {
    parameters: {
      org: string;
    };
    request: {
      method: "POST";
      url: "/orgs/{org}/actions/runners/registration-token";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name actions/create-remove-token-for-org
   * @summary Create a remove token for an organization
   * @description Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
   *
   * For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:
   *
   * ```
   * ./config.sh remove --token TOKEN
   * ```
   *
   * Authenticated users must have admin access to the organization to use this endpoint.
   *
   * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#create-a-remove-token-for-an-organization
   */
  "POST /orgs/{org}/actions/runners/remove-token": {
    parameters: {
      org: string;
    };
    request: {
      method: "POST";
      url: "/orgs/{org}/actions/runners/remove-token";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name actions/get-self-hosted-runner-for-org
   * @summary Get a self-hosted runner for an organization
   * @description Gets a specific self-hosted runner configured in an organization.
   *
   * Authenticated users must have admin access to the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#get-a-self-hosted-runner-for-an-organization
   */
  "GET /orgs/{org}/actions/runners/{runner_id}": {
    parameters: {
      org: string;
      runner_id: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/runners/{runner_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RunnerSchema;
    };
  };

  /**
   * @name actions/delete-self-hosted-runner-from-org
   * @summary Delete a self-hosted runner from an organization
   * @description Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
   *
   * Authenticated users must have admin access to the organization to use this endpoint.
   *
   * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#delete-a-self-hosted-runner-from-an-organization
   */
  "DELETE /orgs/{org}/actions/runners/{runner_id}": {
    parameters: {
      org: string;
      runner_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/actions/runners/{runner_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/list-labels-for-self-hosted-runner-for-org
   * @summary List labels for a self-hosted runner for an organization
   * @description Lists all labels for a self-hosted runner configured in an organization.
   *
   * Authenticated users must have admin access to the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#list-labels-for-a-self-hosted-runner-for-an-organization
   */
  "GET /orgs/{org}/actions/runners/{runner_id}/labels": {
    parameters: {
      org: string;
      runner_id: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/runners/{runner_id}/labels";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsRunnerLabelsResponse;
    };
  };

  /**
   * @name actions/add-custom-labels-to-self-hosted-runner-for-org
   * @summary Add custom labels to a self-hosted runner for an organization
   * @description Adds custom labels to a self-hosted runner configured in an organization.
   *
   * Authenticated users must have admin access to the organization to use this endpoint.
   *
   * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#add-custom-labels-to-a-self-hosted-runner-for-an-organization
   */
  "POST /orgs/{org}/actions/runners/{runner_id}/labels": {
    parameters: {
      org: string;
      runner_id: number;
    } & Endpoints["POST /orgs/{org}/actions/runners/{runner_id}/labels"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/actions/runners/{runner_id}/labels";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The names of the custom labels to add to the runner.
         */
        labels: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsRunnerLabelsResponse;
    };
  };

  /**
   * @name actions/set-custom-labels-for-self-hosted-runner-for-org
   * @summary Set custom labels for a self-hosted runner for an organization
   * @description Remove all previous custom labels and set the new custom labels for a specific
   * self-hosted runner configured in an organization.
   *
   * Authenticated users must have admin access to the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#set-custom-labels-for-a-self-hosted-runner-for-an-organization
   */
  "PUT /orgs/{org}/actions/runners/{runner_id}/labels": {
    parameters: {
      org: string;
      runner_id: number;
    } & Endpoints["PUT /orgs/{org}/actions/runners/{runner_id}/labels"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/actions/runners/{runner_id}/labels";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
         */
        labels: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsRunnerLabelsResponse;
    };
  };

  /**
   * @name actions/remove-all-custom-labels-from-self-hosted-runner-for-org
   * @summary Remove all custom labels from a self-hosted runner for an organization
   * @description Remove all custom labels from a self-hosted runner configured in an
   * organization. Returns the remaining read-only labels from the runner.
   *
   * Authenticated users must have admin access to the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#remove-all-custom-labels-from-a-self-hosted-runner-for-an-organization
   */
  "DELETE /orgs/{org}/actions/runners/{runner_id}/labels": {
    parameters: {
      org: string;
      runner_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/actions/runners/{runner_id}/labels";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsRunnerLabelsReadonlyResponse;
    };
  };

  /**
   * @name actions/remove-custom-label-from-self-hosted-runner-for-org
   * @summary Remove a custom label from a self-hosted runner for an organization
   * @description Remove a custom label from a self-hosted runner configured
   * in an organization. Returns the remaining labels from the runner.
   *
   * This endpoint returns a `404 Not Found` status if the custom label is not
   * present on the runner.
   *
   * Authenticated users must have admin access to the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#remove-a-custom-label-from-a-self-hosted-runner-for-an-organization
   */
  "DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}": {
    parameters: {
      org: string;
      runner_id: number;
      name: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/actions/runners/{runner_id}/labels/{name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsRunnerLabelsResponse;
    };
  };

  /**
   * @name actions/list-org-secrets
   * @summary List organization secrets
   * @description Lists all secrets available in an organization without revealing their
   * encrypted values.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
   * @see https://docs.github.com/rest/actions/secrets#list-organization-secrets
   */
  "GET /orgs/{org}/actions/secrets": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/secrets";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        secrets: OrganizationActionsSecretSchema[];
      };
    };
  };

  /**
   * @name actions/get-org-public-key
   * @summary Get an organization public key
   * @description Gets your public key, which you need to encrypt secrets. You need to
   * encrypt a secret before you can create or update secrets.
   *
   * The authenticated user must have collaborator access to a repository to create, update, or read secrets.
   *
   * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/secrets#get-an-organization-public-key
   */
  "GET /orgs/{org}/actions/secrets/public-key": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/secrets/public-key";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsPublicKeySchema;
    };
  };

  /**
   * @name actions/get-org-secret
   * @summary Get an organization secret
   * @description Gets a single organization secret without revealing its encrypted value.
   *
   * The authenticated user must have collaborator access to a repository to create, update, or read secrets
   *
   * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/secrets#get-an-organization-secret
   */
  "GET /orgs/{org}/actions/secrets/{secret_name}": {
    parameters: {
      org: string;
      secret_name: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrganizationActionsSecretSchema;
    };
  };

  /**
   * @name actions/create-or-update-org-secret
   * @summary Create or update an organization secret
   * @description Creates or updates an organization secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
   * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
   * use this endpoint.
   *
   * #### Example encrypting a secret using Node.js
   *
   * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
   *
   * ```
   * const sodium = require('tweetsodium');
   *
   * const key = "base64-encoded-public-key";
   * const value = "plain-text-secret";
   *
   * // Convert the message and key to Uint8Array's (Buffer implements that interface)
   * const messageBytes = Buffer.from(value);
   * const keyBytes = Buffer.from(key, 'base64');
   *
   * // Encrypt using LibSodium.
   * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
   *
   * // Base64 the encrypted secret
   * const encrypted = Buffer.from(encryptedBytes).toString('base64');
   *
   * console.log(encrypted);
   * ```
   *
   *
   * #### Example encrypting a secret using Python
   *
   * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
   *
   * ```
   * from base64 import b64encode
   * from nacl import encoding, public
   *
   * def encrypt(public_key: str, secret_value: str) -> str:
   *   """Encrypt a Unicode string using the public key."""
   *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
   *   sealed_box = public.SealedBox(public_key)
   *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
   *   return b64encode(encrypted).decode("utf-8")
   * ```
   *
   * #### Example encrypting a secret using C#
   *
   * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
   *
   * ```
   * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
   * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
   *
   * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
   *
   * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
   * ```
   *
   * #### Example encrypting a secret using Ruby
   *
   * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
   *
   * ```ruby
   * require "rbnacl"
   * require "base64"
   *
   * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
   * public_key = RbNaCl::PublicKey.new(key)
   *
   * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
   * encrypted_secret = box.encrypt("my_secret")
   *
   * # Print the base64 encoded secret
   * puts Base64.strict_encode64(encrypted_secret)
   * ```
   * @see https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret
   */
  "PUT /orgs/{org}/actions/secrets/{secret_name}": {
    parameters: {
      org: string;
      secret_name: string;
    } & Endpoints["PUT /orgs/{org}/actions/secrets/{secret_name}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/actions/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/actions#get-an-organization-public-key) endpoint.
         */
        encrypted_value?: string;

        /**
         * @description ID of the key you used to encrypt the secret.
         */
        key_id?: string;

        /**
         * @description Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
         */
        visibility: "all" | "private" | "selected";

        /**
         * @description An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
         */
        selected_repository_ids?: (number | string)[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name actions/delete-org-secret
   * @summary Delete an organization secret
   * @description Deletes a secret in an organization using the secret name.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
   *
   * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/secrets#delete-an-organization-secret
   */
  "DELETE /orgs/{org}/actions/secrets/{secret_name}": {
    parameters: {
      org: string;
      secret_name: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/actions/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/list-selected-repos-for-org-secret
   * @summary List selected repositories for an organization secret
   * @description Lists all repositories that have been selected when the `visibility`
   * for repository access to a secret is set to `selected`.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
   * @see https://docs.github.com/rest/actions/secrets#list-selected-repositories-for-an-organization-secret
   */
  "GET /orgs/{org}/actions/secrets/{secret_name}/repositories": {
    parameters: {
      org: string;
      secret_name: string;
      page?: number;
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/secrets/{secret_name}/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        repositories: MinimalRepositorySchema[];
      };
    };
  };

  /**
   * @name actions/set-selected-repos-for-org-secret
   * @summary Set selected repositories for an organization secret
   * @description Replaces all repositories for an organization secret when the `visibility`
   * for repository access is set to `selected`. The visibility is set when you [Create
   * or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
   * @see https://docs.github.com/rest/actions/secrets#set-selected-repositories-for-an-organization-secret
   */
  "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories": {
    parameters: {
      org: string;
      secret_name: string;
    } & Endpoints["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/actions/secrets/{secret_name}/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints.
         */
        selected_repository_ids: number[];
      };
    };
    response: never;
  };

  /**
   * @name actions/add-selected-repo-to-org-secret
   * @summary Add selected repository to an organization secret
   * @description Adds a repository to an organization secret when the `visibility` for
   * repository access is set to `selected`. For more information about setting the visibility, see [Create or
   * update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
   *
   * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret
   */
  "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}": {
    parameters: {
      org: string;
      secret_name: string;
      repository_id: number;
    };
    request: {
      method: "PUT";
      url: "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/remove-selected-repo-from-org-secret
   * @summary Remove selected repository from an organization secret
   * @description Removes a repository from an organization secret when the `visibility`
   * for repository access is set to `selected`. The visibility is set when you [Create
   * or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
   * @see https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret
   */
  "DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}": {
    parameters: {
      org: string;
      secret_name: string;
      repository_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/list-org-variables
   * @summary List organization variables
   * @description Lists all organization variables.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read variables.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
   * @see https://docs.github.com/rest/actions/variables#list-organization-variables
   */
  "GET /orgs/{org}/actions/variables": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/variables";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        variables: OrganizationActionsVariableSchema[];
      };
    };
  };

  /**
   * @name actions/create-org-variable
   * @summary Create an organization variable
   * @description Creates an organization variable that you can reference in a GitHub Actions workflow.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read variables.
   *
   * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/variables#create-an-organization-variable
   */
  "POST /orgs/{org}/actions/variables": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/actions/variables"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/actions/variables";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the variable.
         */
        name: string;

        /**
         * @description The value of the variable.
         */
        value: string;

        /**
         * @description The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.
         */
        visibility: "all" | "private" | "selected";

        /**
         * @description An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.
         */
        selected_repository_ids?: number[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name actions/get-org-variable
   * @summary Get an organization variable
   * @description Gets a specific variable in an organization.
   *
   * The authenticated user must have collaborator access to a repository to create, update, or read variables.
   *
   * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/variables#get-an-organization-variable
   */
  "GET /orgs/{org}/actions/variables/{name}": {
    parameters: {
      org: string;
      name: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/variables/{name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrganizationActionsVariableSchema;
    };
  };

  /**
   * @name actions/update-org-variable
   * @summary Update an organization variable
   * @description Updates an organization variable that you can reference in a GitHub Actions workflow.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read variables.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
   * @see https://docs.github.com/rest/actions/variables#update-an-organization-variable
   */
  "PATCH /orgs/{org}/actions/variables/{name}": {
    parameters: {
      org: string;
      name: string;
    } & Endpoints["PATCH /orgs/{org}/actions/variables/{name}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/orgs/{org}/actions/variables/{name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the variable.
         */
        name?: string;

        /**
         * @description The value of the variable.
         */
        value?: string;

        /**
         * @description The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.
         */
        visibility?: "all" | "private" | "selected";

        /**
         * @description An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.
         */
        selected_repository_ids?: number[];
      };
    };
    response: never;
  };

  /**
   * @name actions/delete-org-variable
   * @summary Delete an organization variable
   * @description Deletes an organization variable using the variable name.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read variables.
   *
   * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/variables#delete-an-organization-variable
   */
  "DELETE /orgs/{org}/actions/variables/{name}": {
    parameters: {
      org: string;
      name: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/actions/variables/{name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/list-selected-repos-for-org-variable
   * @summary List selected repositories for an organization variable
   * @description Lists all repositories that can access an organization variable
   * that is available to selected repositories.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read variables.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
   * @see https://docs.github.com/rest/actions/variables#list-selected-repositories-for-an-organization-variable
   */
  "GET /orgs/{org}/actions/variables/{name}/repositories": {
    parameters: {
      org: string;
      name: string;
      page?: number;
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/actions/variables/{name}/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        repositories: MinimalRepositorySchema[];
      };
    };
  };

  /**
   * @name actions/set-selected-repos-for-org-variable
   * @summary Set selected repositories for an organization variable
   * @description Replaces all repositories for an organization variable that is available
   * to selected repositories. Organization variables that are available to selected
   * repositories have their `visibility` field set to `selected`.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read variables.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
   * @see https://docs.github.com/rest/actions/variables#set-selected-repositories-for-an-organization-variable
   */
  "PUT /orgs/{org}/actions/variables/{name}/repositories": {
    parameters: {
      org: string;
      name: string;
    } & Endpoints["PUT /orgs/{org}/actions/variables/{name}/repositories"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/actions/variables/{name}/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The IDs of the repositories that can access the organization variable.
         */
        selected_repository_ids: number[];
      };
    };
    response: never;
  };

  /**
   * @name actions/add-selected-repo-to-org-variable
   * @summary Add selected repository to an organization variable
   * @description Adds a repository to an organization variable that is available to selected repositories.
   * Organization variables that are available to selected repositories have their `visibility` field set to `selected`.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
   *
   * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/variables#add-selected-repository-to-an-organization-variable
   */
  "PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}": {
    parameters: {
      org: string;
      name: string;
      repository_id: number;
    };
    request: {
      method: "PUT";
      url: "/orgs/{org}/actions/variables/{name}/repositories/{repository_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/remove-selected-repo-from-org-variable
   * @summary Remove selected repository from an organization variable
   * @description Removes a repository from an organization variable that is
   * available to selected repositories. Organization variables that are available to
   * selected repositories have their `visibility` field set to `selected`.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read variables.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
   * @see https://docs.github.com/rest/actions/variables#remove-selected-repository-from-an-organization-variable
   */
  "DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}": {
    parameters: {
      org: string;
      name: string;
      repository_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/actions/variables/{name}/repositories/{repository_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name orgs/create-artifact-storage-record
   * @summary Create artifact metadata storage record
   * @description Create metadata storage records for artifacts associated with an organization.
   * This endpoint will create a new artifact storage record on behalf of any artifact matching the provided digest and
   * associated with a repository owned by the organization.
   * @see https://docs.github.com/rest/orgs/artifact-metadata#create-artifact-metadata-storage-record
   */
  "POST /orgs/{org}/artifacts/metadata/storage-record": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/artifacts/metadata/storage-record"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/artifacts/metadata/storage-record";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the artifact.
         * @example libfoo-1.2.3
         */
        name: string;

        /**
         * @description The digest of the artifact (algorithm:hex-encoded-digest).
         * @example sha256:0ecbaa601dba202129058746c7d8e3f282d0efb5fff0...
         */
        digest: string;

        /**
         * @description The URL where the artifact is stored.
         * @example https://reg.example.com/artifactory/bar/libfoo-1.2.3
         */
        artifact_url?: string;

        /**
         * @description The path of the artifact.
         * @example com/github/bar/libfoo-1.2.3
         */
        path?: string;

        /**
         * @description The base URL of the artifact registry.
         * @example https://reg.example.com/artifactory/
         */
        registry_url: string;

        /**
         * @description The repository name within the registry.
         * @example bar
         */
        repository?: string;

        /**
         * @description The status of the artifact (e.g., active, inactive).
         * @example active
         * @default "active"
         */
        status?: "active" | "eol" | "deleted";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        /**
         * @example 1
         */
        total_count?: number;
        storage_records?: {
          id?: number;
          name?: string;
          digest?: string;
          artifact_url?: string;
          registry_url?: string;
          repository?: string;
          status?: string;
          created_at?: string;
          updated_at?: string;
        }[];
      };
    };
  };

  /**
   * @name orgs/list-artifact-storage-records
   * @summary List artifact storage records
   * @description List a collection of artifact storage records with a given subject digest that are associated with repositories owned by an organization.
   *
   * The collection of storage records returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `content:read` permission is required.
   * @see https://docs.github.com/rest/orgs/artifact-metadata#list-artifact-storage-records
   */
  "GET /orgs/{org}/artifacts/{subject_digest}/metadata/storage-records": {
    parameters: {
      org: string;

      /**
       * @description The parameter should be set to the attestation's subject's SHA256 digest, in the form `sha256:HEX_DIGEST`.
       * @example sha256:1bb1e949e55dcefc6353e7b36c8897d2a107d8e8dca49d4e3c0ea8493fc0bc72
       */
      subject_digest: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/artifacts/{subject_digest}/metadata/storage-records";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        /**
         * @description The number of storage records for this digest and organization
         * @example 3
         */
        total_count?: number;
        storage_records?: {
          id?: number;
          name?: string;
          digest?: string;
          artifact_url?: string;
          registry_url?: string;
          repository?: string;
          status?: string;
          created_at?: string;
          updated_at?: string;
        }[];
      };
    };
  };

  /**
   * @name orgs/list-attestations-bulk
   * @summary List attestations by bulk subject digests
   * @description List a collection of artifact attestations associated with any entry in a list of subject digests owned by an organization.
   *
   * The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.
   *
   * **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
   * @see https://docs.github.com/rest/orgs/orgs#list-attestations-by-bulk-subject-digests
   */
  "POST /orgs/{org}/attestations/bulk-list": {
    parameters: {
      per_page?: number;
      before?: string;
      after?: string;
      org: string;
    } & Endpoints["POST /orgs/{org}/attestations/bulk-list"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/attestations/bulk-list";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description List of subject digests to fetch attestations for.
         */
        subject_digests: string[];

        /**
         * @description Optional filter for fetching attestations with a given predicate type.
         * This option accepts `provenance`, `sbom`, or freeform text for custom predicate types.
         */
        predicate_type?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        /**
         * @description Mapping of subject digest to bundles.
         */
        attestations_subject_digests?: {
          [key: string]:
            | {
                /**
                 * @description The bundle of the attestation.
                 */
                bundle?: {
                  mediaType?: string;
                  verificationMaterial?: {
                    [key: string]: any;
                  };
                  dsseEnvelope?: {
                    [key: string]: any;
                  };
                };
                repository_id?: number;
                bundle_url?: string;
              }[]
            | null;
        };

        /**
         * @description Information about the current page.
         */
        page_info?: {
          /**
           * @description Indicates whether there is a next page.
           */
          has_next?: boolean;

          /**
           * @description Indicates whether there is a previous page.
           */
          has_previous?: boolean;

          /**
           * @description The cursor to the next page.
           */
          next?: string;

          /**
           * @description The cursor to the previous page.
           */
          previous?: string;
        };
      };
    };
  };

  /**
   * @name orgs/delete-attestations-bulk
   * @summary Delete attestations in bulk
   * @description Delete artifact attestations in bulk by either subject digests or unique ID.
   * @see https://docs.github.com/rest/orgs/attestations#delete-attestations-in-bulk
   */
  "POST /orgs/{org}/attestations/delete-request": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/attestations/delete-request"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/attestations/delete-request";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data:
        | {
            /**
             * @description List of subject digests associated with the artifact attestations to delete.
             */
            subject_digests: string[];
          }
        | {
            /**
             * @description List of unique IDs associated with the artifact attestations to delete.
             */
            attestation_ids: number[];
          };
    };
    response: never;
  };

  /**
   * @name orgs/delete-attestations-by-subject-digest
   * @summary Delete attestations by subject digest
   * @description Delete an artifact attestation by subject digest.
   * @see https://docs.github.com/rest/orgs/attestations#delete-attestations-by-subject-digest
   */
  "DELETE /orgs/{org}/attestations/digest/{subject_digest}": {
    parameters: {
      org: string;

      /**
       * @description Subject Digest
       */
      subject_digest: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/attestations/digest/{subject_digest}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name orgs/delete-attestations-by-id
   * @summary Delete attestations by ID
   * @description Delete an artifact attestation by unique ID that is associated with a repository owned by an org.
   * @see https://docs.github.com/rest/orgs/attestations#delete-attestations-by-id
   */
  "DELETE /orgs/{org}/attestations/{attestation_id}": {
    parameters: {
      org: string;

      /**
       * @description Attestation ID
       */
      attestation_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/attestations/{attestation_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name orgs/list-attestations
   * @summary List attestations
   * @description List a collection of artifact attestations with a given subject digest that are associated with repositories owned by an organization.
   *
   * The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.
   *
   * **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
   * @see https://docs.github.com/rest/orgs/orgs#list-attestations
   */
  "GET /orgs/{org}/attestations/{subject_digest}": {
    parameters: {
      per_page?: number;
      before?: string;
      after?: string;
      org: string;

      /**
       * @description The parameter should be set to the attestation's subject's SHA256 digest, in the form `sha256:HEX_DIGEST`.
       */
      subject_digest: string;

      /**
       * @description Optional filter for fetching attestations with a given predicate type.
       * This option accepts `provenance`, `sbom`, or freeform text for custom predicate types.
       */
      predicate_type?: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/attestations/{subject_digest}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        attestations?: {
          /**
           * @description The attestation's Sigstore Bundle.
           * Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
           */
          bundle?: {
            mediaType?: string;
            verificationMaterial?: {
              [key: string]: any;
            };
            dsseEnvelope?: {
              [key: string]: any;
            };
          };
          repository_id?: number;
          bundle_url?: string;
        }[];
      };
    };
  };

  /**
   * @name orgs/list-blocked-users
   * @summary List users blocked by an organization
   * @description List the users blocked by an organization.
   * @see https://docs.github.com/rest/orgs/blocking#list-users-blocked-by-an-organization
   */
  "GET /orgs/{org}/blocks": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/blocks";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SimpleUserSchema[];
    };
  };

  /**
   * @name orgs/check-blocked-user
   * @summary Check if a user is blocked by an organization
   * @description Returns a 204 if the given user is blocked by the given organization. Returns a 404 if the organization is not blocking the user, or if the user account has been identified as spam by GitHub.
   * @see https://docs.github.com/rest/orgs/blocking#check-if-a-user-is-blocked-by-an-organization
   */
  "GET /orgs/{org}/blocks/{username}": {
    parameters: {
      org: string;
      username: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/blocks/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name orgs/block-user
   * @summary Block a user from an organization
   * @description Blocks the given user on behalf of the specified organization and returns a 204. If the organization cannot block the given user a 422 is returned.
   * @see https://docs.github.com/rest/orgs/blocking#block-a-user-from-an-organization
   */
  "PUT /orgs/{org}/blocks/{username}": {
    parameters: {
      org: string;
      username: string;
    };
    request: {
      method: "PUT";
      url: "/orgs/{org}/blocks/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name orgs/unblock-user
   * @summary Unblock a user from an organization
   * @description Unblocks the given user on behalf of the specified organization.
   * @see https://docs.github.com/rest/orgs/blocking#unblock-a-user-from-an-organization
   */
  "DELETE /orgs/{org}/blocks/{username}": {
    parameters: {
      org: string;
      username: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/blocks/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name campaigns/list-org-campaigns
   * @summary List campaigns for an organization
   * @description Lists campaigns in an organization.
   *
   * The authenticated user must be an owner or security manager for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
   * @see https://docs.github.com/rest/campaigns/campaigns#list-campaigns-for-an-organization
   */
  "GET /orgs/{org}/campaigns": {
    parameters: {
      org: string;
      page?: number;
      per_page?: number;
      direction?: "asc" | "desc";

      /**
       * @description If specified, only campaigns with this state will be returned.
       */
      state?: {};

      /**
       * @description The property by which to sort the results.
       */
      sort?: "created" | "updated" | "ends_at" | "published";
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/campaigns";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CampaignSummarySchema[];
    };
  };

  /**
   * @name campaigns/create-campaign
   * @summary Create a campaign for an organization
   * @description Create a campaign for an organization.
   *
   * The authenticated user must be an owner or security manager for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
   *
   * Fine-grained tokens must have the "Code scanning alerts" repository permissions (read) on all repositories included
   * in the campaign.
   * @see https://docs.github.com/rest/campaigns/campaigns#create-a-campaign-for-an-organization
   */
  "POST /orgs/{org}/campaigns": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/campaigns"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/campaigns";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the campaign
         */
        name: string;

        /**
         * @description A description for the campaign
         */
        description: string;

        /**
         * @description The logins of the users to set as the campaign managers. At this time, only a single manager can be supplied.
         */
        managers?: string[];

        /**
         * @description The slugs of the teams to set as the campaign managers.
         */
        team_managers?: string[];

        /**
         * @description The end date and time of the campaign. The date must be in the future.
         */
        ends_at: string;

        /**
         * @description The contact link of the campaign. Must be a URI.
         */
        contact_link?: string | null;

        /**
         * @description The code scanning alerts to include in this campaign
         */
        code_scanning_alerts: {
          /**
           * @description The repository id
           */
          repository_id: number;

          /**
           * @description The alert numbers
           */
          alert_numbers: number[];
        }[];

        /**
         * @description If true, will automatically generate issues for the campaign. The default is false.
         * @default false
         */
        generate_issues?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CampaignSummarySchema;
    };
  };

  /**
   * @name campaigns/get-campaign-summary
   * @summary Get a campaign for an organization
   * @description Gets a campaign for an organization.
   *
   * The authenticated user must be an owner or security manager for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
   * @see https://docs.github.com/rest/campaigns/campaigns#get-a-campaign-for-an-organization
   */
  "GET /orgs/{org}/campaigns/{campaign_number}": {
    parameters: {
      org: string;

      /**
       * @description The campaign number.
       */
      campaign_number: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/campaigns/{campaign_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CampaignSummarySchema;
    };
  };

  /**
   * @name campaigns/update-campaign
   * @summary Update a campaign
   * @description Updates a campaign in an organization.
   *
   * The authenticated user must be an owner or security manager for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
   * @see https://docs.github.com/rest/campaigns/campaigns#update-a-campaign
   */
  "PATCH /orgs/{org}/campaigns/{campaign_number}": {
    parameters: {
      org: string;

      /**
       * @description The campaign number.
       */
      campaign_number: number;
    } & Endpoints["PATCH /orgs/{org}/campaigns/{campaign_number}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/orgs/{org}/campaigns/{campaign_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the campaign
         */
        name?: string;

        /**
         * @description A description for the campaign
         */
        description?: string;

        /**
         * @description The logins of the users to set as the campaign managers. At this time, only a single manager can be supplied.
         */
        managers?: string[];

        /**
         * @description The slugs of the teams to set as the campaign managers.
         */
        team_managers?: string[];

        /**
         * @description The end date and time of the campaign, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
         */
        ends_at?: string;

        /**
         * @description The contact link of the campaign. Must be a URI.
         */
        contact_link?: string | null;
        state?: CampaignStateSchema;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CampaignSummarySchema;
    };
  };

  /**
   * @name campaigns/delete-campaign
   * @summary Delete a campaign for an organization
   * @description Deletes a campaign in an organization.
   *
   * The authenticated user must be an owner or security manager for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
   * @see https://docs.github.com/rest/campaigns/campaigns#delete-a-campaign-for-an-organization
   */
  "DELETE /orgs/{org}/campaigns/{campaign_number}": {
    parameters: {
      org: string;

      /**
       * @description The campaign number.
       */
      campaign_number: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/campaigns/{campaign_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name code-scanning/list-alerts-for-org
   * @summary List code scanning alerts for an organization
   * @description Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
   *
   * The authenticated user must be an owner or security manager for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `security_events` or `repo`s cope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
   * @see https://docs.github.com/rest/code-scanning/code-scanning#list-code-scanning-alerts-for-an-organization
   */
  "GET /orgs/{org}/code-scanning/alerts": {
    parameters: {
      org: string;
      tool_name?: {};
      tool_guid?: {};
      before?: string;
      after?: string;
      page?: number;
      per_page?: number;
      direction?: "asc" | "desc";

      /**
       * @description If specified, only code scanning alerts with this state will be returned.
       */
      state?: {};

      /**
       * @description The property by which to sort the results.
       */
      sort?: "created" | "updated";

      /**
       * @description If specified, only code scanning alerts with this severity will be returned.
       */
      severity?: {};
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/code-scanning/alerts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeScanningOrganizationAlertItemsSchema[];
    };
  };

  /**
   * @name code-security/get-configurations-for-org
   * @summary Get code security configurations for an organization
   * @description Lists all code security configurations available in an organization.
   *
   * The authenticated user must be an administrator or security manager for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/code-security/configurations#get-code-security-configurations-for-an-organization
   */
  "GET /orgs/{org}/code-security/configurations": {
    parameters: {
      org: string;

      /**
       * @description The target type of the code security configuration
       */
      target_type?: "global" | "all";

      /**
       * @description The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
       */
      per_page?: number;
      before?: string;
      after?: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/code-security/configurations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeSecurityConfigurationSchema[];
    };
  };

  /**
   * @name code-security/create-configuration
   * @summary Create a code security configuration
   * @description Creates a code security configuration in an organization.
   *
   * The authenticated user must be an administrator or security manager for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/code-security/configurations#create-a-code-security-configuration
   */
  "POST /orgs/{org}/code-security/configurations": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/code-security/configurations"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/code-security/configurations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the code security configuration. Must be unique within the organization.
         */
        name: string;

        /**
         * @description A description of the code security configuration
         */
        description: string;

        /**
         * @description The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
         *
         * > [!WARNING]
         * > `code_security` and `secret_protection` are deprecated values for this field. Prefer the individual `code_security` and `secret_protection` fields to set the status of these features.
         *
         * @default "disabled"
         */
        advanced_security?:
          | "enabled"
          | "disabled"
          | "code_security"
          | "secret_protection";

        /**
         * @description The enablement status of GitHub Code Security features.
         */
        code_security?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of Dependency Graph
         * @default "enabled"
         */
        dependency_graph?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of Automatic dependency submission
         * @default "disabled"
         */
        dependency_graph_autosubmit_action?: "enabled" | "disabled" | "not_set";

        /**
         * @description Feature options for Automatic dependency submission
         */
        dependency_graph_autosubmit_action_options?: {
          /**
           * @description Whether to use runners labeled with 'dependency-submission' or standard GitHub runners.
           * @default false
           */
          labeled_runners?: boolean;
        };

        /**
         * @description The enablement status of Dependabot alerts
         * @default "disabled"
         */
        dependabot_alerts?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of Dependabot security updates
         * @default "disabled"
         */
        dependabot_security_updates?: "enabled" | "disabled" | "not_set";
        code_scanning_options?: CodeScanningOptionsSchema;

        /**
         * @description The enablement status of code scanning default setup
         * @default "disabled"
         */
        code_scanning_default_setup?: "enabled" | "disabled" | "not_set";
        code_scanning_default_setup_options?: CodeScanningDefaultSetupOptionsSchema;

        /**
         * @description The enablement status of code scanning delegated alert dismissal
         * @default "not_set"
         */
        code_scanning_delegated_alert_dismissal?:
          | "enabled"
          | "disabled"
          | "not_set";

        /**
         * @description The enablement status of GitHub Secret Protection features.
         */
        secret_protection?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of secret scanning
         * @default "disabled"
         */
        secret_scanning?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of secret scanning push protection
         * @default "disabled"
         */
        secret_scanning_push_protection?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of secret scanning delegated bypass
         * @default "disabled"
         */
        secret_scanning_delegated_bypass?: "enabled" | "disabled" | "not_set";

        /**
         * @description Feature options for secret scanning delegated bypass
         */
        secret_scanning_delegated_bypass_options?: {
          /**
           * @description The bypass reviewers for secret scanning delegated bypass
           */
          reviewers?: {
            /**
             * @description The ID of the team or role selected as a bypass reviewer
             */
            reviewer_id: number;

            /**
             * @description The type of the bypass reviewer
             */
            reviewer_type: "TEAM" | "ROLE";
          }[];
        };

        /**
         * @description The enablement status of secret scanning validity checks
         * @default "disabled"
         */
        secret_scanning_validity_checks?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of secret scanning non provider patterns
         * @default "disabled"
         */
        secret_scanning_non_provider_patterns?:
          | "enabled"
          | "disabled"
          | "not_set";

        /**
         * @description The enablement status of Copilot secret scanning
         * @default "disabled"
         */
        secret_scanning_generic_secrets?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of secret scanning delegated alert dismissal
         */
        secret_scanning_delegated_alert_dismissal?:
          | "enabled"
          | "disabled"
          | "not_set";

        /**
         * @description The enablement status of private vulnerability reporting
         * @default "disabled"
         */
        private_vulnerability_reporting?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enforcement status for a security configuration
         * @default "enforced"
         */
        enforcement?: "enforced" | "unenforced";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name code-security/get-default-configurations
   * @summary Get default code security configurations
   * @description Lists the default code security configurations for an organization.
   *
   * The authenticated user must be an administrator or security manager for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/code-security/configurations#get-default-code-security-configurations
   */
  "GET /orgs/{org}/code-security/configurations/defaults": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/code-security/configurations/defaults";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeSecurityDefaultConfigurationsSchema;
    };
  };

  /**
   * @name code-security/detach-configuration
   * @summary Detach configurations from repositories
   * @description Detach code security configuration(s) from a set of repositories.
   * Repositories will retain their settings but will no longer be associated with the configuration.
   *
   * The authenticated user must be an administrator or security manager for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/code-security/configurations#detach-configurations-from-repositories
   */
  "DELETE /orgs/{org}/code-security/configurations/detach": {
    parameters: {
      org: string;
    } & Endpoints["DELETE /orgs/{org}/code-security/configurations/detach"]["request"]["data"];
    request: {
      method: "DELETE";
      url: "/orgs/{org}/code-security/configurations/detach";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description An array of repository IDs to detach from configurations. Up to 250 IDs can be provided.
         */
        selected_repository_ids?: number[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 204;
      data: never;
    };
  };

  /**
   * @name code-security/get-configuration
   * @summary Get a code security configuration
   * @description Gets a code security configuration available in an organization.
   *
   * The authenticated user must be an administrator or security manager for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/code-security/configurations#get-a-code-security-configuration
   */
  "GET /orgs/{org}/code-security/configurations/{configuration_id}": {
    parameters: {
      org: string;
      configuration_id: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/code-security/configurations/{configuration_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeSecurityConfigurationSchema;
    };
  };

  /**
   * @name code-security/update-configuration
   * @summary Update a code security configuration
   * @description Updates a code security configuration in an organization.
   *
   * The authenticated user must be an administrator or security manager for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/code-security/configurations#update-a-code-security-configuration
   */
  "PATCH /orgs/{org}/code-security/configurations/{configuration_id}": {
    parameters: {
      org: string;
      configuration_id: number;
    } & Endpoints["PATCH /orgs/{org}/code-security/configurations/{configuration_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/orgs/{org}/code-security/configurations/{configuration_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the code security configuration. Must be unique within the organization.
         */
        name?: string;

        /**
         * @description A description of the code security configuration
         */
        description?: string;

        /**
         * @description The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
         *
         * > [!WARNING]
         * > `code_security` and `secret_protection` are deprecated values for this field. Prefer the individual `code_security` and `secret_protection` fields to set the status of these features.
         *
         */
        advanced_security?:
          | "enabled"
          | "disabled"
          | "code_security"
          | "secret_protection";

        /**
         * @description The enablement status of GitHub Code Security features.
         */
        code_security?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of Dependency Graph
         */
        dependency_graph?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of Automatic dependency submission
         */
        dependency_graph_autosubmit_action?: "enabled" | "disabled" | "not_set";

        /**
         * @description Feature options for Automatic dependency submission
         */
        dependency_graph_autosubmit_action_options?: {
          /**
           * @description Whether to use runners labeled with 'dependency-submission' or standard GitHub runners.
           */
          labeled_runners?: boolean;
        };

        /**
         * @description The enablement status of Dependabot alerts
         */
        dependabot_alerts?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of Dependabot security updates
         */
        dependabot_security_updates?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of code scanning default setup
         */
        code_scanning_default_setup?: "enabled" | "disabled" | "not_set";
        code_scanning_default_setup_options?: CodeScanningDefaultSetupOptionsSchema;

        /**
         * @description The enablement status of code scanning delegated alert dismissal
         * @default "disabled"
         */
        code_scanning_delegated_alert_dismissal?:
          | "enabled"
          | "disabled"
          | "not_set";

        /**
         * @description The enablement status of GitHub Secret Protection features.
         */
        secret_protection?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of secret scanning
         */
        secret_scanning?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of secret scanning push protection
         */
        secret_scanning_push_protection?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of secret scanning delegated bypass
         */
        secret_scanning_delegated_bypass?: "enabled" | "disabled" | "not_set";

        /**
         * @description Feature options for secret scanning delegated bypass
         */
        secret_scanning_delegated_bypass_options?: {
          /**
           * @description The bypass reviewers for secret scanning delegated bypass
           */
          reviewers?: {
            /**
             * @description The ID of the team or role selected as a bypass reviewer
             */
            reviewer_id: number;

            /**
             * @description The type of the bypass reviewer
             */
            reviewer_type: "TEAM" | "ROLE";
          }[];
        };

        /**
         * @description The enablement status of secret scanning validity checks
         */
        secret_scanning_validity_checks?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of secret scanning non-provider patterns
         */
        secret_scanning_non_provider_patterns?:
          | "enabled"
          | "disabled"
          | "not_set";

        /**
         * @description The enablement status of Copilot secret scanning
         */
        secret_scanning_generic_secrets?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enablement status of secret scanning delegated alert dismissal
         */
        secret_scanning_delegated_alert_dismissal?:
          | "enabled"
          | "disabled"
          | "not_set";

        /**
         * @description The enablement status of private vulnerability reporting
         */
        private_vulnerability_reporting?: "enabled" | "disabled" | "not_set";

        /**
         * @description The enforcement status for a security configuration
         */
        enforcement?: "enforced" | "unenforced";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeSecurityConfigurationSchema;
    };
  };

  /**
   * @name code-security/delete-configuration
   * @summary Delete a code security configuration
   * @description Deletes the desired code security configuration from an organization.
   * Repositories attached to the configuration will retain their settings but will no longer be associated with
   * the configuration.
   *
   * The authenticated user must be an administrator or security manager for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/code-security/configurations#delete-a-code-security-configuration
   */
  "DELETE /orgs/{org}/code-security/configurations/{configuration_id}": {
    parameters: {
      org: string;
      configuration_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/code-security/configurations/{configuration_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 204;
      data: never;
    };
  };

  /**
   * @name code-security/attach-configuration
   * @summary Attach a configuration to repositories
   * @description Attach a code security configuration to a set of repositories. If the repositories specified are already attached to a configuration, they will be re-attached to the provided configuration.
   *
   * If insufficient GHAS licenses are available to attach the configuration to a repository, only free features will be enabled.
   *
   * The authenticated user must be an administrator or security manager for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/code-security/configurations#attach-a-configuration-to-repositories
   */
  "POST /orgs/{org}/code-security/configurations/{configuration_id}/attach": {
    parameters: {
      org: string;
      configuration_id: number;
    } & Endpoints["POST /orgs/{org}/code-security/configurations/{configuration_id}/attach"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/code-security/configurations/{configuration_id}/attach";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The type of repositories to attach the configuration to. `selected` means the configuration will be attached to only the repositories specified by `selected_repository_ids`
         */
        scope:
          | "all"
          | "all_without_configurations"
          | "public"
          | "private_or_internal"
          | "selected";

        /**
         * @description An array of repository IDs to attach the configuration to. You can only provide a list of repository ids when the `scope` is set to `selected`.
         */
        selected_repository_ids?: number[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: AcceptedResponse;
    };
  };

  /**
   * @name code-security/set-configuration-as-default
   * @summary Set a code security configuration as a default for an organization
   * @description Sets a code security configuration as a default to be applied to new repositories in your organization.
   *
   * This configuration will be applied to the matching repository type (all, none, public, private and internal) by default when they are created.
   *
   * The authenticated user must be an administrator or security manager for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/code-security/configurations#set-a-code-security-configuration-as-a-default-for-an-organization
   */
  "PUT /orgs/{org}/code-security/configurations/{configuration_id}/defaults": {
    parameters: {
      org: string;
      configuration_id: number;
    } & Endpoints["PUT /orgs/{org}/code-security/configurations/{configuration_id}/defaults"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/code-security/configurations/{configuration_id}/defaults";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Specify which types of repository this security configuration should be applied to by default.
         */
        default_for_new_repos?:
          | "all"
          | "none"
          | "private_and_internal"
          | "public";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        /**
         * @description Specifies which types of repository this security configuration is applied to by default.
         */
        default_for_new_repos?:
          | "all"
          | "none"
          | "private_and_internal"
          | "public";
        configuration?: CodeSecurityConfigurationSchema;
      };
    };
  };

  /**
   * @name code-security/get-repositories-for-configuration
   * @summary Get repositories associated with a code security configuration
   * @description Lists the repositories associated with a code security configuration in an organization.
   *
   * The authenticated user must be an administrator or security manager for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/code-security/configurations#get-repositories-associated-with-a-code-security-configuration
   */
  "GET /orgs/{org}/code-security/configurations/{configuration_id}/repositories": {
    parameters: {
      org: string;
      configuration_id: number;

      /**
       * @description The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
       */
      per_page?: number;
      before?: string;
      after?: string;

      /**
       * @description A comma-separated list of statuses. If specified, only repositories with these attachment statuses will be returned.
       *
       * Can be: `all`, `attached`, `attaching`, `detached`, `removed`, `enforced`, `failed`, `updating`, `removed_by_enterprise`
       */
      status?: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/code-security/configurations/{configuration_id}/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeSecurityConfigurationRepositoriesSchema[];
    };
  };

  /**
   * @name codespaces/list-in-organization
   * @summary List codespaces for the organization
   * @description Lists the codespaces associated to a specified organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/organizations#list-codespaces-for-the-organization
   */
  "GET /orgs/{org}/codespaces": {
    parameters: {
      per_page?: number;
      page?: number;
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/codespaces";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        codespaces: CodespaceSchema[];
      };
    };
  };

  /**
   * @name codespaces/set-codespaces-access
   * @summary Manage access control for organization codespaces
   * @description Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces access permissions for users according to the visibility.
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @deprecated
   * @see https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces
   */
  "PUT /orgs/{org}/codespaces/access": {
    parameters: {
      org: string;
    } & Endpoints["PUT /orgs/{org}/codespaces/access"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/codespaces/access";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization.
         */
        visibility:
          | "disabled"
          | "selected_members"
          | "all_members"
          | "all_members_and_outside_collaborators";

        /**
         * @description The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value.
         */
        selected_usernames?: string[];
      };
    };
    response: never;
  };

  /**
   * @name codespaces/set-codespaces-access-users
   * @summary Add users to Codespaces access for an organization
   * @description Codespaces for the specified users will be billed to the organization.
   *
   * To use this endpoint, the access settings for the organization must be set to `selected_members`.
   * For information on how to change this setting, see "[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @deprecated
   * @see https://docs.github.com/rest/codespaces/organizations#add-users-to-codespaces-access-for-an-organization
   */
  "POST /orgs/{org}/codespaces/access/selected_users": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/codespaces/access/selected_users"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/codespaces/access/selected_users";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The usernames of the organization members whose codespaces be billed to the organization.
         */
        selected_usernames: string[];
      };
    };
    response: never;
  };

  /**
   * @name codespaces/delete-codespaces-access-users
   * @summary Remove users from Codespaces access for an organization
   * @description Codespaces for the specified users will no longer be billed to the organization.
   *
   * To use this endpoint, the access settings for the organization must be set to `selected_members`.
   * For information on how to change this setting, see "[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @deprecated
   * @see https://docs.github.com/rest/codespaces/organizations#remove-users-from-codespaces-access-for-an-organization
   */
  "DELETE /orgs/{org}/codespaces/access/selected_users": {
    parameters: {
      org: string;
    } & Endpoints["DELETE /orgs/{org}/codespaces/access/selected_users"]["request"]["data"];
    request: {
      method: "DELETE";
      url: "/orgs/{org}/codespaces/access/selected_users";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The usernames of the organization members whose codespaces should not be billed to the organization.
         */
        selected_usernames: string[];
      };
    };
    response: never;
  };

  /**
   * @name codespaces/list-org-secrets
   * @summary List organization secrets
   * @description Lists all Codespaces development environment secrets available at the organization-level without revealing their encrypted
   * values.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/organization-secrets#list-organization-secrets
   */
  "GET /orgs/{org}/codespaces/secrets": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/codespaces/secrets";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        secrets: CodespacesOrgSecretSchema[];
      };
    };
  };

  /**
   * @name codespaces/get-org-public-key
   * @summary Get an organization public key
   * @description Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets.
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/organization-secrets#get-an-organization-public-key
   */
  "GET /orgs/{org}/codespaces/secrets/public-key": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/codespaces/secrets/public-key";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodespacesPublicKeySchema;
    };
  };

  /**
   * @name codespaces/get-org-secret
   * @summary Get an organization secret
   * @description Gets an organization development environment secret without revealing its encrypted value.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/organization-secrets#get-an-organization-secret
   */
  "GET /orgs/{org}/codespaces/secrets/{secret_name}": {
    parameters: {
      org: string;
      secret_name: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/codespaces/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodespacesOrgSecretSchema;
    };
  };

  /**
   * @name codespaces/create-or-update-org-secret
   * @summary Create or update an organization secret
   * @description Creates or updates an organization development environment secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret
   */
  "PUT /orgs/{org}/codespaces/secrets/{secret_name}": {
    parameters: {
      org: string;
      secret_name: string;
    } & Endpoints["PUT /orgs/{org}/codespaces/secrets/{secret_name}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/codespaces/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/codespaces/organization-secrets#get-an-organization-public-key) endpoint.
         */
        encrypted_value?: string;

        /**
         * @description The ID of the key you used to encrypt the secret.
         */
        key_id?: string;

        /**
         * @description Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
         */
        visibility: "all" | "private" | "selected";

        /**
         * @description An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints.
         */
        selected_repository_ids?: number[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name codespaces/delete-org-secret
   * @summary Delete an organization secret
   * @description Deletes an organization development environment secret using the secret name.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/organization-secrets#delete-an-organization-secret
   */
  "DELETE /orgs/{org}/codespaces/secrets/{secret_name}": {
    parameters: {
      org: string;
      secret_name: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/codespaces/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name codespaces/list-selected-repos-for-org-secret
   * @summary List selected repositories for an organization secret
   * @description Lists all repositories that have been selected when the `visibility`
   * for repository access to a secret is set to `selected`.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/organization-secrets#list-selected-repositories-for-an-organization-secret
   */
  "GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories": {
    parameters: {
      org: string;
      secret_name: string;
      page?: number;
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/codespaces/secrets/{secret_name}/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        repositories: MinimalRepositorySchema[];
      };
    };
  };

  /**
   * @name codespaces/set-selected-repos-for-org-secret
   * @summary Set selected repositories for an organization secret
   * @description Replaces all repositories for an organization development environment secret when the `visibility`
   * for repository access is set to `selected`. The visibility is set when you [Create
   * or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret
   */
  "PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories": {
    parameters: {
      org: string;
      secret_name: string;
    } & Endpoints["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/codespaces/secrets/{secret_name}/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints.
         */
        selected_repository_ids: number[];
      };
    };
    response: never;
  };

  /**
   * @name codespaces/add-selected-repo-to-org-secret
   * @summary Add selected repository to an organization secret
   * @description Adds a repository to an organization development environment secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/organization-secrets#add-selected-repository-to-an-organization-secret
   */
  "PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}": {
    parameters: {
      org: string;
      secret_name: string;
      repository_id: number;
    };
    request: {
      method: "PUT";
      url: "/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name codespaces/remove-selected-repo-from-org-secret
   * @summary Remove selected repository from an organization secret
   * @description Removes a repository from an organization development environment secret when the `visibility`
   * for repository access is set to `selected`. The visibility is set when you [Create
   * or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret
   */
  "DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}": {
    parameters: {
      org: string;
      secret_name: string;
      repository_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name copilot/get-copilot-organization-details
   * @summary Get Copilot seat information and settings for an organization
   * @description > [!NOTE]
   * > This endpoint is in public preview and is subject to change.
   *
   * Gets information about an organization's Copilot subscription, including seat breakdown
   * and feature policies. To configure these settings, go to your organization's settings on GitHub.com.
   * For more information, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-copilot-business-in-your-organization)."
   *
   * Only organization owners can view details about the organization's Copilot Business or Copilot Enterprise subscription.
   *
   * OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
   * @see https://docs.github.com/rest/copilot/copilot-user-management#get-copilot-seat-information-and-settings-for-an-organization
   */
  "GET /orgs/{org}/copilot/billing": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/copilot/billing";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CopilotOrganizationDetailsSchema;
    };
  };

  /**
   * @name copilot/list-copilot-seats
   * @summary List all Copilot seat assignments for an organization
   * @description > [!NOTE]
   * > This endpoint is in public preview and is subject to change.
   *
   * Lists all Copilot seats for which an organization with a Copilot Business or Copilot Enterprise subscription is currently being billed.
   * Only organization owners can view assigned seats.
   *
   * Each seat object contains information about the assigned user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`.
   * For more information about activity data, see [Metrics data properties for GitHub Copilot](https://docs.github.com/copilot/reference/metrics-data).
   *
   * OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
   * @see https://docs.github.com/rest/copilot/copilot-user-management#list-all-copilot-seat-assignments-for-an-organization
   */
  "GET /orgs/{org}/copilot/billing/seats": {
    parameters: {
      org: string;
      page?: number;

      /**
       * @description The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
       */
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/copilot/billing/seats";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        /**
         * @description Total number of Copilot seats for the organization currently being billed.
         */
        total_seats?: number;
        seats?: CopilotSeatDetailsSchema[];
      };
    };
  };

  /**
   * @name copilot/add-copilot-seats-for-teams
   * @summary Add teams to the Copilot subscription for an organization
   * @description > [!NOTE]
   * > This endpoint is in public preview and is subject to change.
   *
   * Purchases a GitHub Copilot seat for all users within each specified team.
   * The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see "[About billing for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization)."
   *
   * Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy.
   * For more information about setting up a Copilot subscription, see "[Subscribing to Copilot for your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization)."
   * For more information about setting a suggestion matching policy, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching)."
   *
   * The response contains the total number of new seats that were created and existing seats that were refreshed.
   *
   * OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
   * @see https://docs.github.com/rest/copilot/copilot-user-management#add-teams-to-the-copilot-subscription-for-an-organization
   */
  "POST /orgs/{org}/copilot/billing/selected_teams": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/copilot/billing/selected_teams"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/copilot/billing/selected_teams";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description List of team names within the organization to which to grant access to GitHub Copilot.
         */
        selected_teams: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name copilot/cancel-copilot-seat-assignment-for-teams
   * @summary Remove teams from the Copilot subscription for an organization
   * @description > [!NOTE]
   * > This endpoint is in public preview and is subject to change.
   *
   * Sets seats for all members of each team specified to "pending cancellation".
   * This will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through another team.
   * For more information about disabling access to Copilot, see "[Revoking access to Copilot for members of your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization)."
   *
   * Only organization owners can cancel Copilot seats for their organization members.
   *
   * The response contains the total number of seats set to "pending cancellation".
   *
   * OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
   * @see https://docs.github.com/rest/copilot/copilot-user-management#remove-teams-from-the-copilot-subscription-for-an-organization
   */
  "DELETE /orgs/{org}/copilot/billing/selected_teams": {
    parameters: {
      org: string;
    } & Endpoints["DELETE /orgs/{org}/copilot/billing/selected_teams"]["request"]["data"];
    request: {
      method: "DELETE";
      url: "/orgs/{org}/copilot/billing/selected_teams";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The names of teams from which to revoke access to GitHub Copilot.
         */
        selected_teams: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        seats_cancelled: number;
      };
    };
  };

  /**
   * @name copilot/add-copilot-seats-for-users
   * @summary Add users to the Copilot subscription for an organization
   * @description > [!NOTE]
   * > This endpoint is in public preview and is subject to change.
   *
   * Purchases a GitHub Copilot seat for each user specified.
   * The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see "[About billing for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization)."
   *
   * Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy.
   * For more information about setting up a Copilot subscription, see "[Subscribing to Copilot for your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization)."
   * For more information about setting a suggestion matching policy, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching)."
   *
   * The response contains the total number of new seats that were created and existing seats that were refreshed.
   *
   * OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
   * @see https://docs.github.com/rest/copilot/copilot-user-management#add-users-to-the-copilot-subscription-for-an-organization
   */
  "POST /orgs/{org}/copilot/billing/selected_users": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/copilot/billing/selected_users"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/copilot/billing/selected_users";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The usernames of the organization members to be granted access to GitHub Copilot.
         */
        selected_usernames: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name copilot/cancel-copilot-seat-assignment-for-users
   * @summary Remove users from the Copilot subscription for an organization
   * @description > [!NOTE]
   * > This endpoint is in public preview and is subject to change.
   *
   * Sets seats for all users specified to "pending cancellation".
   * This will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through team membership.
   * For more information about disabling access to Copilot, see "[Revoking access to Copilot for members of your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization)."
   *
   * Only organization owners can cancel Copilot seats for their organization members.
   *
   * The response contains the total number of seats set to "pending cancellation".
   *
   * OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
   * @see https://docs.github.com/rest/copilot/copilot-user-management#remove-users-from-the-copilot-subscription-for-an-organization
   */
  "DELETE /orgs/{org}/copilot/billing/selected_users": {
    parameters: {
      org: string;
    } & Endpoints["DELETE /orgs/{org}/copilot/billing/selected_users"]["request"]["data"];
    request: {
      method: "DELETE";
      url: "/orgs/{org}/copilot/billing/selected_users";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The usernames of the organization members for which to revoke access to GitHub Copilot.
         */
        selected_usernames: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        seats_cancelled: number;
      };
    };
  };

  /**
   * @name copilot/copilot-metrics-for-organization
   * @summary Get Copilot metrics for an organization
   * @description Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.
   *
   * > [!NOTE]
   * > This endpoint will only return results for a given day if the organization contained **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.
   *
   * The response contains metrics for up to 100 days prior. Metrics are processed once per day for the previous day,
   * and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
   * they must have telemetry enabled in their IDE.
   *
   * To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization.
   * Only organization owners and owners and billing managers of the parent enterprise can view Copilot metrics.
   *
   * OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
   * @see https://docs.github.com/rest/copilot/copilot-metrics#get-copilot-metrics-for-an-organization
   */
  "GET /orgs/{org}/copilot/metrics": {
    parameters: {
      org: string;

      /**
       * @description Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 100 days ago.
       */
      since?: string;

      /**
       * @description Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed.
       */
      until?: string;
      page?: number;

      /**
       * @description The number of days of metrics to display per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
       */
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/copilot/metrics";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CopilotUsageMetricsDaySchema[];
    };
  };

  /**
   * @name dependabot/list-alerts-for-org
   * @summary List Dependabot alerts for an organization
   * @description Lists Dependabot alerts for an organization.
   *
   * The authenticated user must be an owner or security manager for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
   * @see https://docs.github.com/rest/dependabot/alerts#list-dependabot-alerts-for-an-organization
   */
  "GET /orgs/{org}/dependabot/alerts": {
    parameters: {
      org: string;
      state?: string;
      severity?: string;
      ecosystem?: string;
      package?: string;
      epss_percentage?: string;
      artifact_registry_url?: string;
      artifact_registry?: string;
      has?: string | "patch"[];
      scope?: "development" | "runtime";
      sort?: "created" | "updated" | "epss_percentage";
      direction?: "asc" | "desc";
      before?: string;
      after?: string;
      first?: number;
      last?: number;
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/dependabot/alerts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DependabotAlertWithRepositorySchema[];
    };
  };

  /**
   * @name dependabot/list-org-secrets
   * @summary List organization secrets
   * @description Lists all secrets available in an organization without revealing their
   * encrypted values.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/dependabot/secrets#list-organization-secrets
   */
  "GET /orgs/{org}/dependabot/secrets": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/dependabot/secrets";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        secrets: OrganizationDependabotSecretSchema[];
      };
    };
  };

  /**
   * @name dependabot/get-org-public-key
   * @summary Get an organization public key
   * @description Gets your public key, which you need to encrypt secrets. You need to
   * encrypt a secret before you can create or update secrets.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/dependabot/secrets#get-an-organization-public-key
   */
  "GET /orgs/{org}/dependabot/secrets/public-key": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/dependabot/secrets/public-key";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DependabotPublicKeySchema;
    };
  };

  /**
   * @name dependabot/get-org-secret
   * @summary Get an organization secret
   * @description Gets a single organization secret without revealing its encrypted value.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/dependabot/secrets#get-an-organization-secret
   */
  "GET /orgs/{org}/dependabot/secrets/{secret_name}": {
    parameters: {
      org: string;
      secret_name: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/dependabot/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrganizationDependabotSecretSchema;
    };
  };

  /**
   * @name dependabot/create-or-update-org-secret
   * @summary Create or update an organization secret
   * @description Creates or updates an organization secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
   * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization
   * permission to use this endpoint.
   *
   * #### Example encrypting a secret using Node.js
   *
   * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
   *
   * ```
   * const sodium = require('tweetsodium');
   *
   * const key = "base64-encoded-public-key";
   * const value = "plain-text-secret";
   *
   * // Convert the message and key to Uint8Array's (Buffer implements that interface)
   * const messageBytes = Buffer.from(value);
   * const keyBytes = Buffer.from(key, 'base64');
   *
   * // Encrypt using LibSodium.
   * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
   *
   * // Base64 the encrypted secret
   * const encrypted = Buffer.from(encryptedBytes).toString('base64');
   *
   * console.log(encrypted);
   * ```
   *
   *
   * #### Example encrypting a secret using Python
   *
   * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
   *
   * ```
   * from base64 import b64encode
   * from nacl import encoding, public
   *
   * def encrypt(public_key: str, secret_value: str) -> str:
   *   """Encrypt a Unicode string using the public key."""
   *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
   *   sealed_box = public.SealedBox(public_key)
   *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
   *   return b64encode(encrypted).decode("utf-8")
   * ```
   *
   * #### Example encrypting a secret using C#
   *
   * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
   *
   * ```
   * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
   * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
   *
   * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
   *
   * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
   * ```
   *
   * #### Example encrypting a secret using Ruby
   *
   * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
   *
   * ```ruby
   * require "rbnacl"
   * require "base64"
   *
   * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
   * public_key = RbNaCl::PublicKey.new(key)
   *
   * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
   * encrypted_secret = box.encrypt("my_secret")
   *
   * # Print the base64 encoded secret
   * puts Base64.strict_encode64(encrypted_secret)
   * ```
   * @see https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret
   */
  "PUT /orgs/{org}/dependabot/secrets/{secret_name}": {
    parameters: {
      org: string;
      secret_name: string;
    } & Endpoints["PUT /orgs/{org}/dependabot/secrets/{secret_name}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/dependabot/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/dependabot#get-an-organization-public-key) endpoint.
         */
        encrypted_value?: string;

        /**
         * @description ID of the key you used to encrypt the secret.
         */
        key_id?: string;

        /**
         * @description Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
         */
        visibility: "all" | "private" | "selected";

        /**
         * @description An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints.
         */
        selected_repository_ids?: (string | number)[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name dependabot/delete-org-secret
   * @summary Delete an organization secret
   * @description Deletes a secret in an organization using the secret name.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/dependabot/secrets#delete-an-organization-secret
   */
  "DELETE /orgs/{org}/dependabot/secrets/{secret_name}": {
    parameters: {
      org: string;
      secret_name: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/dependabot/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name dependabot/list-selected-repos-for-org-secret
   * @summary List selected repositories for an organization secret
   * @description Lists all repositories that have been selected when the `visibility`
   * for repository access to a secret is set to `selected`.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/dependabot/secrets#list-selected-repositories-for-an-organization-secret
   */
  "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories": {
    parameters: {
      org: string;
      secret_name: string;
      page?: number;
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/dependabot/secrets/{secret_name}/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        repositories: MinimalRepositorySchema[];
      };
    };
  };

  /**
   * @name dependabot/set-selected-repos-for-org-secret
   * @summary Set selected repositories for an organization secret
   * @description Replaces all repositories for an organization secret when the `visibility`
   * for repository access is set to `selected`. The visibility is set when you [Create
   * or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret
   */
  "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories": {
    parameters: {
      org: string;
      secret_name: string;
    } & Endpoints["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/dependabot/secrets/{secret_name}/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints.
         */
        selected_repository_ids: number[];
      };
    };
    response: never;
  };

  /**
   * @name dependabot/add-selected-repo-to-org-secret
   * @summary Add selected repository to an organization secret
   * @description Adds a repository to an organization secret when the `visibility` for
   * repository access is set to `selected`. The visibility is set when you [Create or
   * update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/dependabot/secrets#add-selected-repository-to-an-organization-secret
   */
  "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}": {
    parameters: {
      org: string;
      secret_name: string;
      repository_id: number;
    };
    request: {
      method: "PUT";
      url: "/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name dependabot/remove-selected-repo-from-org-secret
   * @summary Remove selected repository from an organization secret
   * @description Removes a repository from an organization secret when the `visibility`
   * for repository access is set to `selected`. The visibility is set when you [Create
   * or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret
   */
  "DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}": {
    parameters: {
      org: string;
      secret_name: string;
      repository_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name packages/list-docker-migration-conflicting-packages-for-organization
   * @summary Get list of conflicting packages during Docker migration for organization
   * @description Lists all packages that are in a specific organization, are readable by the requesting user, and that encountered a conflict during a Docker migration.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
   * @see https://docs.github.com/rest/packages/packages#get-list-of-conflicting-packages-during-docker-migration-for-organization
   */
  "GET /orgs/{org}/docker/conflicts": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/docker/conflicts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PackageSchema[];
    };
  };

  /**
   * @name activity/list-public-org-events
   * @summary List public organization events
   * @description > [!NOTE]
   * > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
   * @see https://docs.github.com/rest/activity/events#list-public-organization-events
   */
  "GET /orgs/{org}/events": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/events";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: EventSchema[];
    };
  };

  /**
   * @name orgs/list-failed-invitations
   * @summary List failed organization invitations
   * @description The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
   * @see https://docs.github.com/rest/orgs/members#list-failed-organization-invitations
   */
  "GET /orgs/{org}/failed_invitations": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/failed_invitations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrganizationInvitationSchema[];
    };
  };

  /**
   * @name orgs/list-webhooks
   * @summary List organization webhooks
   * @description List webhooks for an organization.
   *
   * The authenticated user must be an organization owner to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
   * webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
   * @see https://docs.github.com/rest/orgs/webhooks#list-organization-webhooks
   */
  "GET /orgs/{org}/hooks": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/hooks";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrgHookSchema[];
    };
  };

  /**
   * @name orgs/create-webhook
   * @summary Create an organization webhook
   * @description Create a hook that posts payloads in JSON format.
   *
   * You must be an organization owner to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or
   * edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
   * @see https://docs.github.com/rest/orgs/webhooks#create-an-organization-webhook
   */
  "POST /orgs/{org}/hooks": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/hooks"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/hooks";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Must be passed as "web".
         */
        name: string;

        /**
         * @description Key/value pairs to provide settings for this webhook.
         */
        config: {
          url: WebhookConfigUrlSchema;
          content_type?: WebhookConfigContentTypeSchema;
          secret?: WebhookConfigSecretSchema;
          insecure_ssl?: WebhookConfigInsecureSslSchema;

          /**
           * @example "kdaigle"
           */
          username?: string;

          /**
           * @example "password"
           */
          password?: string;
        };

        /**
         * @description Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. Set to `["*"]` to receive all possible events.
         * @default ["push"]
         */
        events?: string[];

        /**
         * @description Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
         * @default true
         */
        active?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name orgs/get-webhook
   * @summary Get an organization webhook
   * @description Returns a webhook configured in an organization. To get only the webhook
   * `config` properties, see "[Get a webhook configuration for an organization](/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization).
   *
   * You must be an organization owner to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
   * webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
   * @see https://docs.github.com/rest/orgs/webhooks#get-an-organization-webhook
   */
  "GET /orgs/{org}/hooks/{hook_id}": {
    parameters: {
      org: string;
      hook_id: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/hooks/{hook_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrgHookSchema;
    };
  };

  /**
   * @name orgs/update-webhook
   * @summary Update an organization webhook
   * @description Updates a webhook configured in an organization. When you update a webhook,
   * the `secret` will be overwritten. If you previously had a `secret` set, you must
   * provide the same `secret` or set a new `secret` or the secret will be removed. If
   * you are only updating individual webhook `config` properties, use "[Update a webhook
   * configuration for an organization](/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization)".
   *
   * You must be an organization owner to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
   * webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
   * @see https://docs.github.com/rest/orgs/webhooks#update-an-organization-webhook
   */
  "PATCH /orgs/{org}/hooks/{hook_id}": {
    parameters: {
      org: string;
      hook_id: number;
    } & Endpoints["PATCH /orgs/{org}/hooks/{hook_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/orgs/{org}/hooks/{hook_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Key/value pairs to provide settings for this webhook.
         */
        config?: {
          url: WebhookConfigUrlSchema;
          content_type?: WebhookConfigContentTypeSchema;
          secret?: WebhookConfigSecretSchema;
          insecure_ssl?: WebhookConfigInsecureSslSchema;
        };

        /**
         * @description Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
         * @default ["push"]
         */
        events?: string[];

        /**
         * @description Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
         * @default true
         */
        active?: boolean;

        /**
         * @example "web"
         */
        name?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrgHookSchema;
    };
  };

  /**
   * @name orgs/delete-webhook
   * @summary Delete an organization webhook
   * @description Delete a webhook for an organization.
   *
   * The authenticated user must be an organization owner to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
   * webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
   * @see https://docs.github.com/rest/orgs/webhooks#delete-an-organization-webhook
   */
  "DELETE /orgs/{org}/hooks/{hook_id}": {
    parameters: {
      org: string;
      hook_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/hooks/{hook_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name orgs/get-webhook-config-for-org
   * @summary Get a webhook configuration for an organization
   * @description Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/orgs/webhooks#get-an-organization-webhook)."
   *
   * You must be an organization owner to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
   * webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
   * @see https://docs.github.com/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization
   */
  "GET /orgs/{org}/hooks/{hook_id}/config": {
    parameters: {
      org: string;
      hook_id: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/hooks/{hook_id}/config";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: WebhookConfigSchema;
    };
  };

  /**
   * @name orgs/update-webhook-config-for-org
   * @summary Update a webhook configuration for an organization
   * @description Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/orgs/webhooks#update-an-organization-webhook)."
   *
   * You must be an organization owner to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
   * webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
   * @see https://docs.github.com/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization
   */
  "PATCH /orgs/{org}/hooks/{hook_id}/config": {
    parameters: {
      org: string;
      hook_id: number;
    } & Endpoints["PATCH /orgs/{org}/hooks/{hook_id}/config"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/orgs/{org}/hooks/{hook_id}/config";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        url?: WebhookConfigUrlSchema;
        content_type?: WebhookConfigContentTypeSchema;
        secret?: WebhookConfigSecretSchema;
        insecure_ssl?: WebhookConfigInsecureSslSchema;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: WebhookConfigSchema;
    };
  };

  /**
   * @name orgs/list-webhook-deliveries
   * @summary List deliveries for an organization webhook
   * @description Returns a list of webhook deliveries for a webhook configured in an organization.
   *
   * You must be an organization owner to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
   * webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
   * @see https://docs.github.com/rest/orgs/webhooks#list-deliveries-for-an-organization-webhook
   */
  "GET /orgs/{org}/hooks/{hook_id}/deliveries": {
    parameters: {
      org: string;
      hook_id: number;
      per_page?: number;
      cursor?: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/hooks/{hook_id}/deliveries";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: HookDeliveryItemSchema[];
    };
  };

  /**
   * @name orgs/get-webhook-delivery
   * @summary Get a webhook delivery for an organization webhook
   * @description Returns a delivery for a webhook configured in an organization.
   *
   * You must be an organization owner to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
   * webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
   * @see https://docs.github.com/rest/orgs/webhooks#get-a-webhook-delivery-for-an-organization-webhook
   */
  "GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}": {
    parameters: {
      org: string;
      hook_id: number;
      delivery_id: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: HookDeliverySchema;
    };
  };

  /**
   * @name orgs/redeliver-webhook-delivery
   * @summary Redeliver a delivery for an organization webhook
   * @description Redeliver a delivery for a webhook configured in an organization.
   *
   * You must be an organization owner to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
   * webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
   * @see https://docs.github.com/rest/orgs/webhooks#redeliver-a-delivery-for-an-organization-webhook
   */
  "POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts": {
    parameters: {
      org: string;
      hook_id: number;
      delivery_id: number;
    };
    request: {
      method: "POST";
      url: "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: AcceptedResponse;
    };
  };

  /**
   * @name orgs/ping-webhook
   * @summary Ping an organization webhook
   * @description This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event)
   * to be sent to the hook.
   *
   * You must be an organization owner to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
   * webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
   * @see https://docs.github.com/rest/orgs/webhooks#ping-an-organization-webhook
   */
  "POST /orgs/{org}/hooks/{hook_id}/pings": {
    parameters: {
      org: string;
      hook_id: number;
    };
    request: {
      method: "POST";
      url: "/orgs/{org}/hooks/{hook_id}/pings";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name api-insights/get-route-stats-by-actor
   * @summary Get route stats by actor
   * @description Get API request count statistics for an actor broken down by route within a specified time frame.
   * @see https://docs.github.com/rest/orgs/api-insights#get-route-stats-by-actor
   */
  "GET /orgs/{org}/insights/api/route-stats/{actor_type}/{actor_id}": {
    parameters: {
      org: string;
      actor_type:
        | "installation"
        | "classic_pat"
        | "fine_grained_pat"
        | "oauth_app"
        | "github_app_user_to_server";
      actor_id: number;
      min_timestamp: string;
      max_timestamp?: string;
      page?: number;
      per_page?: number;
      direction?: "asc" | "desc";
      sort?: (
        | "last_rate_limited_timestamp"
        | "last_request_timestamp"
        | "rate_limited_request_count"
        | "http_method"
        | "api_route"
        | "total_request_count"
      )[];
      api_route_substring?: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/insights/api/route-stats/{actor_type}/{actor_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ApiInsightsRouteStatsSchema;
    };
  };

  /**
   * @name api-insights/get-subject-stats
   * @summary Get subject stats
   * @description Get API request statistics for all subjects within an organization within a specified time frame. Subjects can be users or GitHub Apps.
   * @see https://docs.github.com/rest/orgs/api-insights#get-subject-stats
   */
  "GET /orgs/{org}/insights/api/subject-stats": {
    parameters: {
      org: string;
      min_timestamp: string;
      max_timestamp?: string;
      page?: number;
      per_page?: number;
      direction?: "asc" | "desc";
      sort?: (
        | "last_rate_limited_timestamp"
        | "last_request_timestamp"
        | "rate_limited_request_count"
        | "subject_name"
        | "total_request_count"
      )[];
      subject_name_substring?: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/insights/api/subject-stats";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ApiInsightsSubjectStatsSchema;
    };
  };

  /**
   * @name api-insights/get-summary-stats
   * @summary Get summary stats
   * @description Get overall statistics of API requests made within an organization by all users and apps within a specified time frame.
   * @see https://docs.github.com/rest/orgs/api-insights#get-summary-stats
   */
  "GET /orgs/{org}/insights/api/summary-stats": {
    parameters: {
      org: string;
      min_timestamp: string;
      max_timestamp?: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/insights/api/summary-stats";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ApiInsightsSummaryStatsSchema;
    };
  };

  /**
   * @name api-insights/get-summary-stats-by-user
   * @summary Get summary stats by user
   * @description Get overall statistics of API requests within the organization for a user.
   * @see https://docs.github.com/rest/orgs/api-insights#get-summary-stats-by-user
   */
  "GET /orgs/{org}/insights/api/summary-stats/users/{user_id}": {
    parameters: {
      org: string;
      user_id: string;
      min_timestamp: string;
      max_timestamp?: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/insights/api/summary-stats/users/{user_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ApiInsightsSummaryStatsSchema;
    };
  };

  /**
   * @name api-insights/get-summary-stats-by-actor
   * @summary Get summary stats by actor
   * @description Get overall statistics of API requests within the organization made by a specific actor. Actors can be GitHub App installations, OAuth apps or other tokens on behalf of a user.
   * @see https://docs.github.com/rest/orgs/api-insights#get-summary-stats-by-actor
   */
  "GET /orgs/{org}/insights/api/summary-stats/{actor_type}/{actor_id}": {
    parameters: {
      org: string;
      min_timestamp: string;
      max_timestamp?: string;
      actor_type:
        | "installation"
        | "classic_pat"
        | "fine_grained_pat"
        | "oauth_app"
        | "github_app_user_to_server";
      actor_id: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/insights/api/summary-stats/{actor_type}/{actor_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ApiInsightsSummaryStatsSchema;
    };
  };

  /**
   * @name api-insights/get-time-stats
   * @summary Get time stats
   * @description Get the number of API requests and rate-limited requests made within an organization over a specified time period.
   * @see https://docs.github.com/rest/orgs/api-insights#get-time-stats
   */
  "GET /orgs/{org}/insights/api/time-stats": {
    parameters: {
      org: string;
      min_timestamp: string;
      max_timestamp?: string;
      timestamp_increment: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/insights/api/time-stats";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ApiInsightsTimeStatsSchema;
    };
  };

  /**
   * @name api-insights/get-time-stats-by-user
   * @summary Get time stats by user
   * @description Get the number of API requests and rate-limited requests made within an organization by a specific user over a specified time period.
   * @see https://docs.github.com/rest/orgs/api-insights#get-time-stats-by-user
   */
  "GET /orgs/{org}/insights/api/time-stats/users/{user_id}": {
    parameters: {
      org: string;
      user_id: string;
      min_timestamp: string;
      max_timestamp?: string;
      timestamp_increment: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/insights/api/time-stats/users/{user_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ApiInsightsTimeStatsSchema;
    };
  };

  /**
   * @name api-insights/get-time-stats-by-actor
   * @summary Get time stats by actor
   * @description Get the number of API requests and rate-limited requests made within an organization by a specific actor within a specified time period.
   * @see https://docs.github.com/rest/orgs/api-insights#get-time-stats-by-actor
   */
  "GET /orgs/{org}/insights/api/time-stats/{actor_type}/{actor_id}": {
    parameters: {
      org: string;
      actor_type:
        | "installation"
        | "classic_pat"
        | "fine_grained_pat"
        | "oauth_app"
        | "github_app_user_to_server";
      actor_id: number;
      min_timestamp: string;
      max_timestamp?: string;
      timestamp_increment: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/insights/api/time-stats/{actor_type}/{actor_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ApiInsightsTimeStatsSchema;
    };
  };

  /**
   * @name api-insights/get-user-stats
   * @summary Get user stats
   * @description Get API usage statistics within an organization for a user broken down by the type of access.
   * @see https://docs.github.com/rest/orgs/api-insights#get-user-stats
   */
  "GET /orgs/{org}/insights/api/user-stats/{user_id}": {
    parameters: {
      org: string;
      user_id: string;
      min_timestamp: string;
      max_timestamp?: string;
      page?: number;
      per_page?: number;
      direction?: "asc" | "desc";
      sort?: (
        | "last_rate_limited_timestamp"
        | "last_request_timestamp"
        | "rate_limited_request_count"
        | "subject_name"
        | "total_request_count"
      )[];
      actor_name_substring?: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/insights/api/user-stats/{user_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ApiInsightsUserStatsSchema;
    };
  };

  /**
   * @name apps/get-org-installation
   * @summary Get an organization installation for the authenticated app
   * @description Enables an authenticated GitHub App to find the organization's installation information.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * @see https://docs.github.com/rest/apps/apps#get-an-organization-installation-for-the-authenticated-app
   */
  "GET /orgs/{org}/installation": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/installation";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: InstallationSchema;
    };
  };

  /**
   * @name orgs/list-app-installations
   * @summary List app installations for an organization
   * @description Lists all GitHub Apps in an organization. The installation count includes
   * all GitHub Apps installed on repositories in the organization.
   *
   * The authenticated user must be an organization owner to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:read` scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/orgs#list-app-installations-for-an-organization
   */
  "GET /orgs/{org}/installations": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/installations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        installations: InstallationSchema[];
      };
    };
  };

  /**
   * @name interactions/get-restrictions-for-org
   * @summary Get interaction restrictions for an organization
   * @description Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
   * @see https://docs.github.com/rest/interactions/orgs#get-interaction-restrictions-for-an-organization
   */
  "GET /orgs/{org}/interaction-limits": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/interaction-limits";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: InteractionLimitResponseSchema | {};
    };
  };

  /**
   * @name interactions/set-restrictions-for-org
   * @summary Set interaction restrictions for an organization
   * @description Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
   * @see https://docs.github.com/rest/interactions/orgs#set-interaction-restrictions-for-an-organization
   */
  "PUT /orgs/{org}/interaction-limits": {
    parameters: {
      org: string;
    } & Endpoints["PUT /orgs/{org}/interaction-limits"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/interaction-limits";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: InteractionLimitResponseSchema;
    };
  };

  /**
   * @name interactions/remove-restrictions-for-org
   * @summary Remove interaction restrictions for an organization
   * @description Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
   * @see https://docs.github.com/rest/interactions/orgs#remove-interaction-restrictions-for-an-organization
   */
  "DELETE /orgs/{org}/interaction-limits": {
    parameters: {
      org: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/interaction-limits";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name orgs/list-pending-invitations
   * @summary List pending organization invitations
   * @description The return hash contains a `role` field which refers to the Organization
   * Invitation role and will be one of the following values: `direct_member`, `admin`,
   * `billing_manager`, or `hiring_manager`. If the invitee is not a GitHub
   * member, the `login` field in the return hash will be `null`.
   * @see https://docs.github.com/rest/orgs/members#list-pending-organization-invitations
   */
  "GET /orgs/{org}/invitations": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;

      /**
       * @description Filter invitations by their member role.
       */
      role?:
        | "all"
        | "admin"
        | "direct_member"
        | "billing_manager"
        | "hiring_manager";

      /**
       * @description Filter invitations by their invitation source.
       */
      invitation_source?: "all" | "member" | "scim";
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/invitations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrganizationInvitationSchema[];
    };
  };

  /**
   * @name orgs/create-invitation
   * @summary Create an organization invitation
   * @description Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
   *
   * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
   * and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
   * @see https://docs.github.com/rest/orgs/members#create-an-organization-invitation
   */
  "POST /orgs/{org}/invitations": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/invitations"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/invitations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description **Required unless you provide `email`**. GitHub user ID for the person you are inviting.
         */
        invitee_id?: number;

        /**
         * @description **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.
         */
        email?: string;

        /**
         * @description The role for the new member.
         *  * `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.
         *  * `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.
         *  * `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.
         *  * `reinstate` - The previous role assigned to the invitee before they were removed from your organization. Can be one of the roles listed above. Only works if the invitee was previously part of your organization.
         * @default "direct_member"
         */
        role?: "admin" | "direct_member" | "billing_manager" | "reinstate";

        /**
         * @description Specify IDs for the teams you want to invite new members to.
         */
        team_ids?: number[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name orgs/cancel-invitation
   * @summary Cancel an organization invitation
   * @description Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
   *
   * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
   * @see https://docs.github.com/rest/orgs/members#cancel-an-organization-invitation
   */
  "DELETE /orgs/{org}/invitations/{invitation_id}": {
    parameters: {
      org: string;
      invitation_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/invitations/{invitation_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name orgs/list-invitation-teams
   * @summary List organization invitation teams
   * @description List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
   * @see https://docs.github.com/rest/orgs/members#list-organization-invitation-teams
   */
  "GET /orgs/{org}/invitations/{invitation_id}/teams": {
    parameters: {
      org: string;
      invitation_id: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/invitations/{invitation_id}/teams";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamSchema[];
    };
  };

  /**
   * @name orgs/list-issue-types
   * @summary List issue types for an organization
   * @description Lists all issue types for an organization. OAuth app tokens and personal access tokens (classic) need the read:org scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/issue-types#list-issue-types-for-an-organization
   */
  "GET /orgs/{org}/issue-types": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/issue-types";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueTypeSchema[];
    };
  };

  /**
   * @name orgs/create-issue-type
   * @summary Create issue type for an organization
   * @description Create a new issue type for an organization.
   *
   * You can find out more about issue types in [Managing issue types in an organization](https://docs.github.com/issues/tracking-your-work-with-issues/configuring-issues/managing-issue-types-in-an-organization).
   *
   * To use this endpoint, the authenticated user must be an administrator for the organization. OAuth app tokens and
   * personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/issue-types#create-issue-type-for-an-organization
   */
  "POST /orgs/{org}/issue-types": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/issue-types"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/issue-types";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueTypeSchema;
    };
  };

  /**
   * @name orgs/update-issue-type
   * @summary Update issue type for an organization
   * @description Updates an issue type for an organization.
   *
   * You can find out more about issue types in [Managing issue types in an organization](https://docs.github.com/issues/tracking-your-work-with-issues/configuring-issues/managing-issue-types-in-an-organization).
   *
   * To use this endpoint, the authenticated user must be an administrator for the organization. OAuth app tokens and
   * personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/issue-types#update-issue-type-for-an-organization
   */
  "PUT /orgs/{org}/issue-types/{issue_type_id}": {
    parameters: {
      org: string;
      issue_type_id: number;
    } & Endpoints["PUT /orgs/{org}/issue-types/{issue_type_id}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/issue-types/{issue_type_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueTypeSchema;
    };
  };

  /**
   * @name orgs/delete-issue-type
   * @summary Delete issue type for an organization
   * @description Deletes an issue type for an organization.
   *
   * You can find out more about issue types in [Managing issue types in an organization](https://docs.github.com/issues/tracking-your-work-with-issues/configuring-issues/managing-issue-types-in-an-organization).
   *
   * To use this endpoint, the authenticated user must be an administrator for the organization. OAuth app tokens and
   * personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/issue-types#delete-issue-type-for-an-organization
   */
  "DELETE /orgs/{org}/issue-types/{issue_type_id}": {
    parameters: {
      org: string;
      issue_type_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/issue-types/{issue_type_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name issues/list-for-org
   * @summary List organization issues assigned to the authenticated user
   * @description List issues in an organization assigned to the authenticated user.
   *
   * > [!NOTE]
   * > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/issues/issues#list-organization-issues-assigned-to-the-authenticated-user
   */
  "GET /orgs/{org}/issues": {
    parameters: {
      org: string;

      /**
       * @description Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
       */
      filter?:
        | "assigned"
        | "created"
        | "mentioned"
        | "subscribed"
        | "repos"
        | "all";

      /**
       * @description Indicates the state of the issues to return.
       */
      state?: "open" | "closed" | "all";
      labels?: string;

      /**
       * @description Can be the name of an issue type.
       */
      type?: string;

      /**
       * @description What to sort results by.
       */
      sort?: "created" | "updated" | "comments";
      direction?: "asc" | "desc";
      since?: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/issues";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueSchema[];
    };
  };

  /**
   * @name orgs/list-members
   * @summary List organization members
   * @description List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
   * @see https://docs.github.com/rest/orgs/members#list-organization-members
   */
  "GET /orgs/{org}/members": {
    parameters: {
      org: string;

      /**
       * @description Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. `2fa_insecure` means that only members with [insecure 2FA methods](https://docs.github.com/organizations/keeping-your-organization-secure/managing-two-factor-authentication-for-your-organization/requiring-two-factor-authentication-in-your-organization#requiring-secure-methods-of-two-factor-authentication-in-your-organization) will be returned. These options are only available for organization owners.
       */
      filter?: "2fa_disabled" | "2fa_insecure" | "all";

      /**
       * @description Filter members returned by their role.
       */
      role?: "all" | "admin" | "member";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/members";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SimpleUserSchema[];
    };
  };

  /**
   * @name orgs/check-membership-for-user
   * @summary Check organization membership for a user
   * @description Check if a user is, publicly or privately, a member of the organization.
   * @see https://docs.github.com/rest/orgs/members#check-organization-membership-for-a-user
   */
  "GET /orgs/{org}/members/{username}": {
    parameters: {
      org: string;
      username: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/members/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name orgs/remove-member
   * @summary Remove an organization member
   * @description Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
   *
   * > [!NOTE]
   * > If a user has both direct membership in the organization as well as indirect membership via an enterprise team, only their direct membership will be removed. Their indirect membership via an enterprise team remains until the user is removed from the enterprise team.
   * @see https://docs.github.com/rest/orgs/members#remove-an-organization-member
   */
  "DELETE /orgs/{org}/members/{username}": {
    parameters: {
      org: string;
      username: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/members/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name codespaces/get-codespaces-for-user-in-org
   * @summary List codespaces for a user in organization
   * @description Lists the codespaces that a member of an organization has for repositories in that organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/organizations#list-codespaces-for-a-user-in-organization
   */
  "GET /orgs/{org}/members/{username}/codespaces": {
    parameters: {
      per_page?: number;
      page?: number;
      org: string;
      username: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/members/{username}/codespaces";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        codespaces: CodespaceSchema[];
      };
    };
  };

  /**
   * @name codespaces/delete-from-organization
   * @summary Delete a codespace from the organization
   * @description Deletes a user's codespace.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/organizations#delete-a-codespace-from-the-organization
   */
  "DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}": {
    parameters: {
      org: string;
      username: string;
      codespace_name: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/members/{username}/codespaces/{codespace_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: AcceptedResponse;
    };
  };

  /**
   * @name codespaces/stop-in-organization
   * @summary Stop a codespace for an organization user
   * @description Stops a user's codespace.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/organizations#stop-a-codespace-for-an-organization-user
   */
  "POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop": {
    parameters: {
      org: string;
      username: string;
      codespace_name: string;
    };
    request: {
      method: "POST";
      url: "/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodespaceSchema;
    };
  };

  /**
   * @name copilot/get-copilot-seat-details-for-user
   * @summary Get Copilot seat assignment details for a user
   * @description > [!NOTE]
   * > This endpoint is in public preview and is subject to change.
   *
   * Gets the GitHub Copilot seat details for a member of an organization who currently has access to GitHub Copilot.
   *
   * The seat object contains information about the user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`.
   * For more information about activity data, see [Metrics data properties for GitHub Copilot](https://docs.github.com/copilot/reference/metrics-data).
   *
   * Only organization owners can view Copilot seat assignment details for members of their organization.
   *
   * OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
   * @see https://docs.github.com/rest/copilot/copilot-user-management#get-copilot-seat-assignment-details-for-a-user
   */
  "GET /orgs/{org}/members/{username}/copilot": {
    parameters: {
      org: string;
      username: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/members/{username}/copilot";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CopilotSeatDetailsSchema;
    };
  };

  /**
   * @name orgs/get-membership-for-user
   * @summary Get organization membership for a user
   * @description In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
   * @see https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user
   */
  "GET /orgs/{org}/memberships/{username}": {
    parameters: {
      org: string;
      username: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/memberships/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrgMembershipSchema;
    };
  };

  /**
   * @name orgs/set-membership-for-user
   * @summary Set organization membership for a user
   * @description Only authenticated organization owners can add a member to the organization or update the member's role.
   *
   * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
   *
   * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
   *
   * **Rate limits**
   *
   * To prevent abuse, organization owners are limited to creating 50 organization invitations for an organization within a 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
   * @see https://docs.github.com/rest/orgs/members#set-organization-membership-for-a-user
   */
  "PUT /orgs/{org}/memberships/{username}": {
    parameters: {
      org: string;
      username: string;
    } & Endpoints["PUT /orgs/{org}/memberships/{username}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/memberships/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The role to give the user in the organization. Can be one of:
         *  * `admin` - The user will become an owner of the organization.
         *  * `member` - The user will become a non-owner member of the organization.
         * @default "member"
         */
        role?: "admin" | "member";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrgMembershipSchema;
    };
  };

  /**
   * @name orgs/remove-membership-for-user
   * @summary Remove organization membership for a user
   * @description In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
   *
   * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
   *
   * > [!NOTE]
   * > If a user has both direct membership in the organization as well as indirect membership via an enterprise team, only their direct membership will be removed. Their indirect membership via an enterprise team remains until the user is removed from the enterprise team.
   * @see https://docs.github.com/rest/orgs/members#remove-organization-membership-for-a-user
   */
  "DELETE /orgs/{org}/memberships/{username}": {
    parameters: {
      org: string;
      username: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/memberships/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name migrations/list-for-org
   * @summary List organization migrations
   * @description Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).
   *
   * A list of `repositories` is only returned for export migrations.
   * @see https://docs.github.com/rest/migrations/orgs#list-organization-migrations
   */
  "GET /orgs/{org}/migrations": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;

      /**
       * @description Exclude attributes from the API response to improve performance
       */
      exclude?: "repositories"[];
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/migrations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MigrationSchema[];
    };
  };

  /**
   * @name migrations/start-for-org
   * @summary Start an organization migration
   * @description Initiates the generation of a migration archive.
   * @see https://docs.github.com/rest/migrations/orgs#start-an-organization-migration
   */
  "POST /orgs/{org}/migrations": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/migrations"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/migrations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description A list of arrays indicating which repositories should be migrated.
         */
        repositories: string[];

        /**
         * @description Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
         * @example true
         * @default false
         */
        lock_repositories?: boolean;

        /**
         * @description Indicates whether metadata should be excluded and only git source should be included for the migration.
         * @default false
         */
        exclude_metadata?: boolean;

        /**
         * @description Indicates whether the repository git data should be excluded from the migration.
         * @default false
         */
        exclude_git_data?: boolean;

        /**
         * @description Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
         * @example true
         * @default false
         */
        exclude_attachments?: boolean;

        /**
         * @description Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
         * @example true
         * @default false
         */
        exclude_releases?: boolean;

        /**
         * @description Indicates whether projects owned by the organization or users should be excluded. from the migration.
         * @example true
         * @default false
         */
        exclude_owner_projects?: boolean;

        /**
         * @description Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
         * @example true
         * @default false
         */
        org_metadata_only?: boolean;

        /**
         * @description Exclude related items from being returned in the response in order to improve performance of the request.
         */
        exclude?: "repositories"[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name migrations/get-status-for-org
   * @summary Get an organization migration status
   * @description Fetches the status of a migration.
   *
   * The `state` of a migration can be one of the following values:
   *
   * *   `pending`, which means the migration hasn't started yet.
   * *   `exporting`, which means the migration is in progress.
   * *   `exported`, which means the migration finished successfully.
   * *   `failed`, which means the migration failed.
   * @see https://docs.github.com/rest/migrations/orgs#get-an-organization-migration-status
   */
  "GET /orgs/{org}/migrations/{migration_id}": {
    parameters: {
      org: string;
      migration_id: number;

      /**
       * @description Exclude attributes from the API response to improve performance
       */
      exclude?: "repositories"[];
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/migrations/{migration_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MigrationSchema;
    };
  };

  /**
   * @name migrations/download-archive-for-org
   * @summary Download an organization migration archive
   * @description Fetches the URL to a migration archive.
   * @see https://docs.github.com/rest/migrations/orgs#download-an-organization-migration-archive
   */
  "GET /orgs/{org}/migrations/{migration_id}/archive": {
    parameters: {
      org: string;
      migration_id: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/migrations/{migration_id}/archive";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: any;
  };

  /**
   * @name migrations/delete-archive-for-org
   * @summary Delete an organization migration archive
   * @description Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
   * @see https://docs.github.com/rest/migrations/orgs#delete-an-organization-migration-archive
   */
  "DELETE /orgs/{org}/migrations/{migration_id}/archive": {
    parameters: {
      org: string;
      migration_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/migrations/{migration_id}/archive";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name migrations/unlock-repo-for-org
   * @summary Unlock an organization repository
   * @description Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
   * @see https://docs.github.com/rest/migrations/orgs#unlock-an-organization-repository
   */
  "DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock": {
    parameters: {
      org: string;
      migration_id: number;
      repo_name: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name migrations/list-repos-for-org
   * @summary List repositories in an organization migration
   * @description List all the repositories for this organization migration.
   * @see https://docs.github.com/rest/migrations/orgs#list-repositories-in-an-organization-migration
   */
  "GET /orgs/{org}/migrations/{migration_id}/repositories": {
    parameters: {
      org: string;
      migration_id: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/migrations/{migration_id}/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MinimalRepositorySchema[];
    };
  };

  /**
   * @name orgs/list-org-roles
   * @summary Get all organization roles for an organization
   * @description Lists the organization roles available in this organization. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
   *
   * To use this endpoint, the authenticated user must be one of:
   *
   * - An administrator for the organization.
   * - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/organization-roles#get-all-organization-roles-for-an-organization
   */
  "GET /orgs/{org}/organization-roles": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/organization-roles";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        /**
         * @description The total number of organization roles available to the organization.
         */
        total_count?: number;

        /**
         * @description The list of organization roles available to the organization.
         */
        roles?: OrganizationRoleSchema[];
      };
    };
  };

  /**
   * @name orgs/revoke-all-org-roles-team
   * @summary Remove all organization roles for a team
   * @description Removes all assigned organization roles from a team. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
   *
   * The authenticated user must be an administrator for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/organization-roles#remove-all-organization-roles-for-a-team
   */
  "DELETE /orgs/{org}/organization-roles/teams/{team_slug}": {
    parameters: {
      org: string;
      team_slug: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/organization-roles/teams/{team_slug}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name orgs/assign-team-to-org-role
   * @summary Assign an organization role to a team
   * @description Assigns an organization role to a team in an organization. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
   *
   * The authenticated user must be an administrator for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/organization-roles#assign-an-organization-role-to-a-team
   */
  "PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}": {
    parameters: {
      org: string;
      team_slug: string;
      role_id: number;
    };
    request: {
      method: "PUT";
      url: "/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name orgs/revoke-org-role-team
   * @summary Remove an organization role from a team
   * @description Removes an organization role from a team. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
   *
   * The authenticated user must be an administrator for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/organization-roles#remove-an-organization-role-from-a-team
   */
  "DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}": {
    parameters: {
      org: string;
      team_slug: string;
      role_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name orgs/revoke-all-org-roles-user
   * @summary Remove all organization roles for a user
   * @description Revokes all assigned organization roles from a user. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
   *
   * The authenticated user must be an administrator for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/organization-roles#remove-all-organization-roles-for-a-user
   */
  "DELETE /orgs/{org}/organization-roles/users/{username}": {
    parameters: {
      org: string;
      username: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/organization-roles/users/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name orgs/assign-user-to-org-role
   * @summary Assign an organization role to a user
   * @description Assigns an organization role to a member of an organization. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
   *
   * The authenticated user must be an administrator for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/organization-roles#assign-an-organization-role-to-a-user
   */
  "PUT /orgs/{org}/organization-roles/users/{username}/{role_id}": {
    parameters: {
      org: string;
      username: string;
      role_id: number;
    };
    request: {
      method: "PUT";
      url: "/orgs/{org}/organization-roles/users/{username}/{role_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name orgs/revoke-org-role-user
   * @summary Remove an organization role from a user
   * @description Remove an organization role from a user. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
   *
   * The authenticated user must be an administrator for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/organization-roles#remove-an-organization-role-from-a-user
   */
  "DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}": {
    parameters: {
      org: string;
      username: string;
      role_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/organization-roles/users/{username}/{role_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name orgs/get-org-role
   * @summary Get an organization role
   * @description Gets an organization role that is available to this organization. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
   *
   * To use this endpoint, the authenticated user must be one of:
   *
   * - An administrator for the organization.
   * - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/organization-roles#get-an-organization-role
   */
  "GET /orgs/{org}/organization-roles/{role_id}": {
    parameters: {
      org: string;
      role_id: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/organization-roles/{role_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrganizationRoleSchema;
    };
  };

  /**
   * @name orgs/list-org-role-teams
   * @summary List teams that are assigned to an organization role
   * @description Lists the teams that are assigned to an organization role. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
   *
   * To use this endpoint, you must be an administrator for the organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/organization-roles#list-teams-that-are-assigned-to-an-organization-role
   */
  "GET /orgs/{org}/organization-roles/{role_id}/teams": {
    parameters: {
      org: string;
      role_id: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/organization-roles/{role_id}/teams";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamRoleAssignmentSchema[];
    };
  };

  /**
   * @name orgs/list-org-role-users
   * @summary List users that are assigned to an organization role
   * @description Lists organization members that are assigned to an organization role. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
   *
   * To use this endpoint, you must be an administrator for the organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/organization-roles#list-users-that-are-assigned-to-an-organization-role
   */
  "GET /orgs/{org}/organization-roles/{role_id}/users": {
    parameters: {
      org: string;
      role_id: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/organization-roles/{role_id}/users";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: UserRoleAssignmentSchema[];
    };
  };

  /**
   * @name orgs/list-outside-collaborators
   * @summary List outside collaborators for an organization
   * @description List all users who are outside collaborators of an organization.
   * @see https://docs.github.com/rest/orgs/outside-collaborators#list-outside-collaborators-for-an-organization
   */
  "GET /orgs/{org}/outside_collaborators": {
    parameters: {
      org: string;

      /**
       * @description Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. `2fa_insecure` means that only outside collaborators with [insecure 2FA methods](https://docs.github.com/organizations/keeping-your-organization-secure/managing-two-factor-authentication-for-your-organization/requiring-two-factor-authentication-in-your-organization#requiring-secure-methods-of-two-factor-authentication-in-your-organization) will be returned.
       */
      filter?: "2fa_disabled" | "2fa_insecure" | "all";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/outside_collaborators";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SimpleUserSchema[];
    };
  };

  /**
   * @name orgs/convert-member-to-outside-collaborator
   * @summary Convert an organization member to outside collaborator
   * @description When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
   * @see https://docs.github.com/rest/orgs/outside-collaborators#convert-an-organization-member-to-outside-collaborator
   */
  "PUT /orgs/{org}/outside_collaborators/{username}": {
    parameters: {
      org: string;
      username: string;
    } & Endpoints["PUT /orgs/{org}/outside_collaborators/{username}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/outside_collaborators/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.
         * @default false
         */
        async?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: {};
    };
  };

  /**
   * @name orgs/remove-outside-collaborator
   * @summary Remove outside collaborator from an organization
   * @description Removing a user from this list will remove them from all the organization's repositories.
   * @see https://docs.github.com/rest/orgs/outside-collaborators#remove-outside-collaborator-from-an-organization
   */
  "DELETE /orgs/{org}/outside_collaborators/{username}": {
    parameters: {
      org: string;
      username: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/outside_collaborators/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name packages/list-packages-for-organization
   * @summary List packages for an organization
   * @description Lists packages in an organization readable by the user.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#list-packages-for-an-organization
   */
  "GET /orgs/{org}/packages": {
    parameters: {
      /**
       * @description The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
       */
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      org: string;
      visibility?: "public" | "private" | "internal";

      /**
       * @description The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
       */
      page?: number;

      /**
       * @description The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
       */
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/packages";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PackageSchema[];
    };
  };

  /**
   * @name packages/get-package-for-organization
   * @summary Get a package for an organization
   * @description Gets a specific package in an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#get-a-package-for-an-organization
   */
  "GET /orgs/{org}/packages/{package_type}/{package_name}": {
    parameters: {
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      package_name: string;
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/packages/{package_type}/{package_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PackageSchema;
    };
  };

  /**
   * @name packages/delete-package-for-org
   * @summary Delete a package for an organization
   * @description Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
   *
   * The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#delete-a-package-for-an-organization
   */
  "DELETE /orgs/{org}/packages/{package_type}/{package_name}": {
    parameters: {
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      package_name: string;
      org: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/packages/{package_type}/{package_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name packages/restore-package-for-org
   * @summary Restore a package for an organization
   * @description Restores an entire package in an organization.
   *
   * You can restore a deleted package under the following conditions:
   *   - The package was deleted within the last 30 days.
   *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
   *
   * The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#restore-a-package-for-an-organization
   */
  "POST /orgs/{org}/packages/{package_type}/{package_name}/restore": {
    parameters: {
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      package_name: string;
      org: string;

      /**
       * @description package token
       */
      token?: string;
    };
    request: {
      method: "POST";
      url: "/orgs/{org}/packages/{package_type}/{package_name}/restore";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name packages/get-all-package-versions-for-package-owned-by-org
   * @summary List package versions for a package owned by an organization
   * @description Lists package versions for a package owned by an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#list-package-versions-for-a-package-owned-by-an-organization
   */
  "GET /orgs/{org}/packages/{package_type}/{package_name}/versions": {
    parameters: {
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      package_name: string;
      org: string;
      page?: number;
      per_page?: number;

      /**
       * @description The state of the package, either active or deleted.
       */
      state?: "active" | "deleted";
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/packages/{package_type}/{package_name}/versions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PackageVersionSchema[];
    };
  };

  /**
   * @name packages/get-package-version-for-organization
   * @summary Get a package version for an organization
   * @description Gets a specific package version in an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#get-a-package-version-for-an-organization
   */
  "GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}": {
    parameters: {
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      package_name: string;
      org: string;
      package_version_id: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PackageVersionSchema;
    };
  };

  /**
   * @name packages/delete-package-version-for-org
   * @summary Delete package version for an organization
   * @description Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
   *
   * The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#delete-package-version-for-an-organization
   */
  "DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}": {
    parameters: {
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      package_name: string;
      org: string;
      package_version_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name packages/restore-package-version-for-org
   * @summary Restore package version for an organization
   * @description Restores a specific package version in an organization.
   *
   * You can restore a deleted package under the following conditions:
   *   - The package was deleted within the last 30 days.
   *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
   *
   * The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#restore-package-version-for-an-organization
   */
  "POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore": {
    parameters: {
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      package_name: string;
      org: string;
      package_version_id: number;
    };
    request: {
      method: "POST";
      url: "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name orgs/list-pat-grant-requests
   * @summary List requests to access organization resources with fine-grained personal access tokens
   * @description Lists requests from organization members to access organization resources with a fine-grained personal access token.
   *
   * Only GitHub Apps can use this endpoint.
   * @see https://docs.github.com/rest/orgs/personal-access-tokens#list-requests-to-access-organization-resources-with-fine-grained-personal-access-tokens
   */
  "GET /orgs/{org}/personal-access-token-requests": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;
      sort?: "created_at";
      direction?: "asc" | "desc";
      owner?: string[];
      repository?: string;
      permission?: string;
      last_used_before?: string;
      last_used_after?: string;
      token_id?: string[];
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/personal-access-token-requests";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrganizationProgrammaticAccessGrantRequestSchema[];
    };
  };

  /**
   * @name orgs/review-pat-grant-requests-in-bulk
   * @summary Review requests to access organization resources with fine-grained personal access tokens
   * @description Approves or denies multiple pending requests to access organization resources via a fine-grained personal access token.
   *
   * Only GitHub Apps can use this endpoint.
   * @see https://docs.github.com/rest/orgs/personal-access-tokens#review-requests-to-access-organization-resources-with-fine-grained-personal-access-tokens
   */
  "POST /orgs/{org}/personal-access-token-requests": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/personal-access-token-requests"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/personal-access-token-requests";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Unique identifiers of the requests for access via fine-grained personal access token. Must be formed of between 1 and 100 `pat_request_id` values.
         */
        pat_request_ids?: number[];

        /**
         * @description Action to apply to the requests.
         */
        action: "approve" | "deny";

        /**
         * @description Reason for approving or denying the requests. Max 1024 characters.
         */
        reason?: string | null;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: AcceptedResponse;
    };
  };

  /**
   * @name orgs/review-pat-grant-request
   * @summary Review a request to access organization resources with a fine-grained personal access token
   * @description Approves or denies a pending request to access organization resources via a fine-grained personal access token.
   *
   * Only GitHub Apps can use this endpoint.
   * @see https://docs.github.com/rest/orgs/personal-access-tokens#review-a-request-to-access-organization-resources-with-a-fine-grained-personal-access-token
   */
  "POST /orgs/{org}/personal-access-token-requests/{pat_request_id}": {
    parameters: {
      org: string;

      /**
       * @description Unique identifier of the request for access via fine-grained personal access token.
       */
      pat_request_id: number;
    } & Endpoints["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/personal-access-token-requests/{pat_request_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Action to apply to the request.
         */
        action: "approve" | "deny";

        /**
         * @description Reason for approving or denying the request. Max 1024 characters.
         */
        reason?: string | null;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 204;
      data: never;
    };
  };

  /**
   * @name orgs/list-pat-grant-request-repositories
   * @summary List repositories requested to be accessed by a fine-grained personal access token
   * @description Lists the repositories a fine-grained personal access token request is requesting access to.
   *
   * Only GitHub Apps can use this endpoint.
   * @see https://docs.github.com/rest/orgs/personal-access-tokens#list-repositories-requested-to-be-accessed-by-a-fine-grained-personal-access-token
   */
  "GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories": {
    parameters: {
      org: string;

      /**
       * @description Unique identifier of the request for access via fine-grained personal access token.
       */
      pat_request_id: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MinimalRepositorySchema[];
    };
  };

  /**
   * @name orgs/list-pat-grants
   * @summary List fine-grained personal access tokens with access to organization resources
   * @description Lists approved fine-grained personal access tokens owned by organization members that can access organization resources.
   *
   * Only GitHub Apps can use this endpoint.
   * @see https://docs.github.com/rest/orgs/personal-access-tokens#list-fine-grained-personal-access-tokens-with-access-to-organization-resources
   */
  "GET /orgs/{org}/personal-access-tokens": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;
      sort?: "created_at";
      direction?: "asc" | "desc";
      owner?: string[];
      repository?: string;
      permission?: string;
      last_used_before?: string;
      last_used_after?: string;
      token_id?: string[];
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/personal-access-tokens";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrganizationProgrammaticAccessGrantSchema[];
    };
  };

  /**
   * @name orgs/update-pat-accesses
   * @summary Update the access to organization resources via fine-grained personal access tokens
   * @description Updates the access organization members have to organization resources via fine-grained personal access tokens. Limited to revoking a token's existing access.
   *
   * Only GitHub Apps can use this endpoint.
   * @see https://docs.github.com/rest/orgs/personal-access-tokens#update-the-access-to-organization-resources-via-fine-grained-personal-access-tokens
   */
  "POST /orgs/{org}/personal-access-tokens": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/personal-access-tokens"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/personal-access-tokens";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Action to apply to the fine-grained personal access token.
         */
        action: "revoke";

        /**
         * @description The IDs of the fine-grained personal access tokens.
         */
        pat_ids: number[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: AcceptedResponse;
    };
  };

  /**
   * @name orgs/update-pat-access
   * @summary Update the access a fine-grained personal access token has to organization resources
   * @description Updates the access an organization member has to organization resources via a fine-grained personal access token. Limited to revoking the token's existing access. Limited to revoking a token's existing access.
   *
   * Only GitHub Apps can use this endpoint.
   * @see https://docs.github.com/rest/orgs/personal-access-tokens#update-the-access-a-fine-grained-personal-access-token-has-to-organization-resources
   */
  "POST /orgs/{org}/personal-access-tokens/{pat_id}": {
    parameters: {
      org: string;
      pat_id: number;
    } & Endpoints["POST /orgs/{org}/personal-access-tokens/{pat_id}"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/personal-access-tokens/{pat_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Action to apply to the fine-grained personal access token.
         */
        action: "revoke";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 204;
      data: never;
    };
  };

  /**
   * @name orgs/list-pat-grant-repositories
   * @summary List repositories a fine-grained personal access token has access to
   * @description Lists the repositories a fine-grained personal access token has access to.
   *
   * Only GitHub Apps can use this endpoint.
   * @see https://docs.github.com/rest/orgs/personal-access-tokens#list-repositories-a-fine-grained-personal-access-token-has-access-to
   */
  "GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories": {
    parameters: {
      org: string;

      /**
       * @description Unique identifier of the fine-grained personal access token.
       */
      pat_id: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/personal-access-tokens/{pat_id}/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MinimalRepositorySchema[];
    };
  };

  /**
   * @name private-registries/list-org-private-registries
   * @summary List private registries for an organization
   * @description
   * Lists all private registry configurations available at the organization-level without revealing their encrypted
   * values.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/private-registries/organization-configurations#list-private-registries-for-an-organization
   */
  "GET /orgs/{org}/private-registries": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/private-registries";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        configurations: OrgPrivateRegistryConfigurationSchema[];
      };
    };
  };

  /**
   * @name private-registries/create-org-private-registry
   * @summary Create a private registry for an organization
   * @description
   * Creates a private registry configuration with an encrypted value for an organization. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/private-registries/organization-configurations#create-a-private-registry-for-an-organization
   */
  "POST /orgs/{org}/private-registries": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/private-registries"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/private-registries";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The registry type.
         */
        registry_type:
          | "maven_repository"
          | "nuget_feed"
          | "goproxy_server"
          | "npm_registry"
          | "rubygems_server"
          | "cargo_registry"
          | "composer_repository"
          | "docker_registry"
          | "git_source"
          | "helm_registry"
          | "hex_organization"
          | "hex_repository"
          | "pub_repository"
          | "python_index"
          | "terraform_registry";

        /**
         * @description The URL of the private registry.
         */
        url: string;

        /**
         * @description The username to use when authenticating with the private registry. This field should be omitted if the private registry does not require a username for authentication.
         */
        username?: string | null;

        /**
         * @description The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get private registries public key for an organization](https://docs.github.com/rest/private-registries/organization-configurations#get-private-registries-public-key-for-an-organization) endpoint.
         */
        encrypted_value: string;

        /**
         * @description The ID of the key you used to encrypt the secret.
         */
        key_id: string;

        /**
         * @description Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry.
         */
        visibility: "all" | "private" | "selected";

        /**
         * @description An array of repository IDs that can access the organization private registry. You can only provide a list of repository IDs when `visibility` is set to `selected`. You can manage the list of selected repositories using the [Update a private registry for an organization](https://docs.github.com/rest/private-registries/organization-configurations#update-a-private-registry-for-an-organization) endpoint. This field should be omitted if `visibility` is set to `all` or `private`.
         */
        selected_repository_ids?: number[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name private-registries/get-org-public-key
   * @summary Get private registries public key for an organization
   * @description
   * Gets the org public key, which is needed to encrypt private registry secrets. You need to encrypt a secret before you can create or update secrets.
   *
   * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/private-registries/organization-configurations#get-private-registries-public-key-for-an-organization
   */
  "GET /orgs/{org}/private-registries/public-key": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/private-registries/public-key";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        /**
         * @description The identifier for the key.
         * @example 012345678912345678
         */
        key_id: string;

        /**
         * @description The Base64 encoded public key.
         * @example 2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234
         */
        key: string;
      };
    };
  };

  /**
   * @name private-registries/get-org-private-registry
   * @summary Get a private registry for an organization
   * @description
   * Get the configuration of a single private registry defined for an organization, omitting its encrypted value.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/private-registries/organization-configurations#get-a-private-registry-for-an-organization
   */
  "GET /orgs/{org}/private-registries/{secret_name}": {
    parameters: {
      org: string;
      secret_name: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/private-registries/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrgPrivateRegistryConfigurationSchema;
    };
  };

  /**
   * @name private-registries/update-org-private-registry
   * @summary Update a private registry for an organization
   * @description
   * Updates a private registry configuration with an encrypted value for an organization. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/private-registries/organization-configurations#update-a-private-registry-for-an-organization
   */
  "PATCH /orgs/{org}/private-registries/{secret_name}": {
    parameters: {
      org: string;
      secret_name: string;
    } & Endpoints["PATCH /orgs/{org}/private-registries/{secret_name}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/orgs/{org}/private-registries/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The registry type.
         */
        registry_type?:
          | "maven_repository"
          | "nuget_feed"
          | "goproxy_server"
          | "npm_registry"
          | "rubygems_server"
          | "cargo_registry"
          | "composer_repository"
          | "docker_registry"
          | "git_source"
          | "helm_registry"
          | "hex_organization"
          | "hex_repository"
          | "pub_repository"
          | "python_index"
          | "terraform_registry";

        /**
         * @description The URL of the private registry.
         */
        url?: string;

        /**
         * @description The username to use when authenticating with the private registry. This field should be omitted if the private registry does not require a username for authentication.
         */
        username?: string | null;

        /**
         * @description The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get private registries public key for an organization](https://docs.github.com/rest/private-registries/organization-configurations#get-private-registries-public-key-for-an-organization) endpoint.
         */
        encrypted_value?: string;

        /**
         * @description The ID of the key you used to encrypt the secret.
         */
        key_id?: string;

        /**
         * @description Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry.
         */
        visibility?: "all" | "private" | "selected";

        /**
         * @description An array of repository IDs that can access the organization private registry. You can only provide a list of repository IDs when `visibility` is set to `selected`. This field should be omitted if `visibility` is set to `all` or `private`.
         */
        selected_repository_ids?: number[];
      };
    };
    response: never;
  };

  /**
   * @name private-registries/delete-org-private-registry
   * @summary Delete a private registry for an organization
   * @description
   * Delete a private registry configuration at the organization-level.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/private-registries/organization-configurations#delete-a-private-registry-for-an-organization
   */
  "DELETE /orgs/{org}/private-registries/{secret_name}": {
    parameters: {
      org: string;
      secret_name: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/private-registries/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name projects-classic/list-for-org
   * @summary List organization projects
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/projects-classic/projects#list-organization-projects
   */
  "GET /orgs/{org}/projects": {
    parameters: {
      org: string;

      /**
       * @description Indicates the state of the projects to return.
       */
      state?: "open" | "closed" | "all";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/projects";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectSchema[];
    };
  };

  /**
   * @name projects-classic/create-for-org
   * @summary Create an organization project
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/projects-classic/projects#create-an-organization-project
   */
  "POST /orgs/{org}/projects": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/projects"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/projects";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the project.
         */
        name: string;

        /**
         * @description The description of the project.
         */
        body?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name projects/list-for-org
   * @summary List projects for organization
   * @description List all projects owned by a specific organization accessible by the authenticated user.
   * @see https://docs.github.com/rest/projects/projects#list-projects-for-organization
   */
  "GET /orgs/{org}/projectsV2": {
    parameters: {
      org: string;

      /**
       * @description Limit results to projects of the specified type.
       */
      q?: string;
      before?: string;
      after?: string;
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/projectsV2";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectsV2Schema[];
    };
  };

  /**
   * @name projects/get-for-org
   * @summary Get project for organization
   * @description Get a specific organization-owned project.
   * @see https://docs.github.com/rest/projects/projects#get-project-for-organization
   */
  "GET /orgs/{org}/projectsV2/{project_number}": {
    parameters: {
      project_number: number;
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/projectsV2/{project_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectsV2Schema;
    };
  };

  /**
   * @name projects/list-fields-for-org
   * @summary List project fields for organization
   * @description List all fields for a specific organization-owned project.
   * @see https://docs.github.com/rest/projects/fields#list-project-fields-for-organization
   */
  "GET /orgs/{org}/projectsV2/{project_number}/fields": {
    parameters: {
      project_number: number;
      org: string;
      per_page?: number;
      before?: string;
      after?: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/projectsV2/{project_number}/fields";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectsV2FieldSchema[];
    };
  };

  /**
   * @name projects/get-field-for-org
   * @summary Get project field for organization
   * @description Get a specific field for an organization-owned project.
   * @see https://docs.github.com/rest/projects/fields#get-project-field-for-organization
   */
  "GET /orgs/{org}/projectsV2/{project_number}/fields/{field_id}": {
    parameters: {
      project_number: number;
      field_id: number;
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/projectsV2/{project_number}/fields/{field_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectsV2FieldSchema;
    };
  };

  /**
   * @name projects/list-items-for-org
   * @summary List items for an organization owned project
   * @description List all items for a specific organization-owned project accessible by the authenticated user.
   * @see https://docs.github.com/rest/projects/items#list-items-for-an-organization-owned-project
   */
  "GET /orgs/{org}/projectsV2/{project_number}/items": {
    parameters: {
      project_number: number;
      org: string;

      /**
       * @description Search query to filter items, see [Filtering projects](https://docs.github.com/issues/planning-and-tracking-with-projects/customizing-views-in-your-project/filtering-projects) for more information.
       */
      q?: string;

      /**
       * @description Limit results to specific fields, by their IDs. If not specified, the title field will be returned.
       */
      fields?: string[];
      before?: string;
      after?: string;
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/projectsV2/{project_number}/items";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectsV2ItemWithContentSchema[];
    };
  };

  /**
   * @name projects/add-item-for-org
   * @summary Add item to organization owned project
   * @description Add an issue or pull request item to the specified organization owned project.
   * @see https://docs.github.com/rest/projects/items#add-item-to-organization-owned-project
   */
  "POST /orgs/{org}/projectsV2/{project_number}/items": {
    parameters: {
      org: string;
      project_number: number;
    } & Endpoints["POST /orgs/{org}/projectsV2/{project_number}/items"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/projectsV2/{project_number}/items";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The type of item to add to the project. Must be either Issue or PullRequest.
         */
        type: "Issue" | "PullRequest";

        /**
         * @description The numeric ID of the issue or pull request to add to the project.
         */
        id: number;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name projects/get-org-item
   * @summary Get an item for an organization owned project
   * @description Get a specific item from an organization-owned project.
   * @see https://docs.github.com/rest/projects/items#get-an-item-for-an-organization-owned-project
   */
  "GET /orgs/{org}/projectsV2/{project_number}/items/{item_id}": {
    parameters: {
      project_number: number;
      org: string;
      item_id: number;

      /**
       * @description Limit results to specific fields, by their IDs. If not specified, the title field will be returned.
       */
      fields?: string[];
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/projectsV2/{project_number}/items/{item_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectsV2ItemWithContentSchema;
    };
  };

  /**
   * @name projects/update-item-for-org
   * @summary Update project item for organization
   * @description Update a specific item in an organization-owned project.
   * @see https://docs.github.com/rest/projects/items#update-project-item-for-organization
   */
  "PATCH /orgs/{org}/projectsV2/{project_number}/items/{item_id}": {
    parameters: {
      project_number: number;
      org: string;
      item_id: number;
    } & Endpoints["PATCH /orgs/{org}/projectsV2/{project_number}/items/{item_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/orgs/{org}/projectsV2/{project_number}/items/{item_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description A list of field updates to apply.
         */
        fields: {
          /**
           * @description The ID of the project field to update.
           */
          id: number;

          /**
           * @description The new value for the field:
           * - For text, number, and date fields, provide the new value directly.
           * - For single select and iteration fields, provide the ID of the option or iteration.
           * - To clear the field, set this to null.
           */
          value: string | number | null;
        }[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectsV2ItemWithContentSchema;
    };
  };

  /**
   * @name projects/delete-item-for-org
   * @summary Delete project item for organization
   * @description Delete a specific item from an organization-owned project.
   * @see https://docs.github.com/rest/projects/items#delete-project-item-for-organization
   */
  "DELETE /orgs/{org}/projectsV2/{project_number}/items/{item_id}": {
    parameters: {
      project_number: number;
      org: string;
      item_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/projectsV2/{project_number}/items/{item_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name orgs/get-all-custom-properties
   * @summary Get all custom properties for an organization
   * @description Gets all custom properties defined for an organization.
   * Organization members can read these properties.
   * @see https://docs.github.com/rest/orgs/custom-properties#get-all-custom-properties-for-an-organization
   */
  "GET /orgs/{org}/properties/schema": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/properties/schema";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CustomPropertySchema[];
    };
  };

  /**
   * @name orgs/create-or-update-custom-properties
   * @summary Create or update custom properties for an organization
   * @description Creates new or updates existing custom properties defined for an organization in a batch.
   *
   * If the property already exists, the existing property will be replaced with the new values.
   * Missing optional values will fall back to default values, previous values will be overwritten.
   * E.g. if a property exists with `values_editable_by: org_and_repo_actors` and it's updated without specifying `values_editable_by`, it will be updated to default value `org_actors`.
   *
   * To use this endpoint, the authenticated user must be one of:
   *   - An administrator for the organization.
   *   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
   * @see https://docs.github.com/rest/orgs/custom-properties#create-or-update-custom-properties-for-an-organization
   */
  "PATCH /orgs/{org}/properties/schema": {
    parameters: {
      org: string;
    } & Endpoints["PATCH /orgs/{org}/properties/schema"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/orgs/{org}/properties/schema";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The array of custom properties to create or update.
         */
        properties: CustomPropertySchema[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CustomPropertySchema[];
    };
  };

  /**
   * @name orgs/get-custom-property
   * @summary Get a custom property for an organization
   * @description Gets a custom property that is defined for an organization.
   * Organization members can read these properties.
   * @see https://docs.github.com/rest/orgs/custom-properties#get-a-custom-property-for-an-organization
   */
  "GET /orgs/{org}/properties/schema/{custom_property_name}": {
    parameters: {
      org: string;
      custom_property_name: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/properties/schema/{custom_property_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CustomPropertySchema;
    };
  };

  /**
   * @name orgs/create-or-update-custom-property
   * @summary Create or update a custom property for an organization
   * @description Creates a new or updates an existing custom property that is defined for an organization.
   *
   * To use this endpoint, the authenticated user must be one of:
   * - An administrator for the organization.
   * - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
   * @see https://docs.github.com/rest/orgs/custom-properties#create-or-update-a-custom-property-for-an-organization
   */
  "PUT /orgs/{org}/properties/schema/{custom_property_name}": {
    parameters: {
      org: string;
      custom_property_name: string;
    } & Endpoints["PUT /orgs/{org}/properties/schema/{custom_property_name}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/properties/schema/{custom_property_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CustomPropertySchema;
    };
  };

  /**
   * @name orgs/remove-custom-property
   * @summary Remove a custom property for an organization
   * @description Removes a custom property that is defined for an organization.
   *
   * To use this endpoint, the authenticated user must be one of:
   *   - An administrator for the organization.
   *   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
   * @see https://docs.github.com/rest/orgs/custom-properties#remove-a-custom-property-for-an-organization
   */
  "DELETE /orgs/{org}/properties/schema/{custom_property_name}": {
    parameters: {
      org: string;
      custom_property_name: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/properties/schema/{custom_property_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 204;
      data: never;
    };
  };

  /**
   * @name orgs/list-custom-properties-values-for-repos
   * @summary List custom property values for organization repositories
   * @description Lists organization repositories with all of their custom property values.
   * Organization members can read these properties.
   * @see https://docs.github.com/rest/orgs/custom-properties#list-custom-property-values-for-organization-repositories
   */
  "GET /orgs/{org}/properties/values": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;

      /**
       * @description Finds repositories in the organization with a query containing one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers.
       */
      repository_query?: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/properties/values";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrgRepoCustomPropertyValuesSchema[];
    };
  };

  /**
   * @name orgs/create-or-update-custom-properties-values-for-repos
   * @summary Create or update custom property values for organization repositories
   * @description Create new or update existing custom property values for repositories in a batch that belong to an organization.
   * Each target repository will have its custom property values updated to match the values provided in the request.
   *
   * A maximum of 30 repositories can be updated in a single request.
   *
   * Using a value of `null` for a custom property will remove or 'unset' the property value from the repository.
   *
   * To use this endpoint, the authenticated user must be one of:
   *   - An administrator for the organization.
   *   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_values_editor` in the organization.
   * @see https://docs.github.com/rest/orgs/custom-properties#create-or-update-custom-property-values-for-organization-repositories
   */
  "PATCH /orgs/{org}/properties/values": {
    parameters: {
      org: string;
    } & Endpoints["PATCH /orgs/{org}/properties/values"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/orgs/{org}/properties/values";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The names of repositories that the custom property values will be applied to.
         */
        repository_names: string[];

        /**
         * @description List of custom property names and associated values to apply to the repositories.
         */
        properties: CustomPropertyValueSchema[];
      };
    };
    response: never;
  };

  /**
   * @name orgs/list-public-members
   * @summary List public organization members
   * @description Members of an organization can choose to have their membership publicized or not.
   * @see https://docs.github.com/rest/orgs/members#list-public-organization-members
   */
  "GET /orgs/{org}/public_members": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/public_members";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SimpleUserSchema[];
    };
  };

  /**
   * @name orgs/check-public-membership-for-user
   * @summary Check public organization membership for a user
   * @description Check if the provided user is a public member of the organization.
   * @see https://docs.github.com/rest/orgs/members#check-public-organization-membership-for-a-user
   */
  "GET /orgs/{org}/public_members/{username}": {
    parameters: {
      org: string;
      username: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/public_members/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name orgs/set-public-membership-for-authenticated-user
   * @summary Set public organization membership for the authenticated user
   * @description The user can publicize their own membership. (A user cannot publicize the membership for another user.)
   *
   * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
   * @see https://docs.github.com/rest/orgs/members#set-public-organization-membership-for-the-authenticated-user
   */
  "PUT /orgs/{org}/public_members/{username}": {
    parameters: {
      org: string;
      username: string;
    };
    request: {
      method: "PUT";
      url: "/orgs/{org}/public_members/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name orgs/remove-public-membership-for-authenticated-user
   * @summary Remove public organization membership for the authenticated user
   * @description Removes the public membership for the authenticated user from the specified organization, unless public visibility is enforced by default.
   * @see https://docs.github.com/rest/orgs/members#remove-public-organization-membership-for-the-authenticated-user
   */
  "DELETE /orgs/{org}/public_members/{username}": {
    parameters: {
      org: string;
      username: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/public_members/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/list-for-org
   * @summary List organization repositories
   * @description Lists repositories for the specified organization.
   *
   * > [!NOTE]
   * > In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
   * @see https://docs.github.com/rest/repos/repos#list-organization-repositories
   */
  "GET /orgs/{org}/repos": {
    parameters: {
      org: string;

      /**
       * @description Specifies the types of repositories you want returned.
       */
      type?: "all" | "public" | "private" | "forks" | "sources" | "member";

      /**
       * @description The property to sort the results by.
       */
      sort?: "created" | "updated" | "pushed" | "full_name";

      /**
       * @description The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.
       */
      direction?: "asc" | "desc";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/repos";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MinimalRepositorySchema[];
    };
  };

  /**
   * @name repos/create-in-org
   * @summary Create an organization repository
   * @description Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
   * @see https://docs.github.com/rest/repos/repos#create-an-organization-repository
   */
  "POST /orgs/{org}/repos": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/repos"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/repos";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the repository.
         */
        name: string;

        /**
         * @description A short description of the repository.
         */
        description?: string;

        /**
         * @description A URL with more information about the repository.
         */
        homepage?: string;

        /**
         * @description Whether the repository is private.
         * @default false
         */
        private?: boolean;

        /**
         * @description The visibility of the repository.
         */
        visibility?: "public" | "private";

        /**
         * @description Either `true` to enable issues for this repository or `false` to disable them.
         * @default true
         */
        has_issues?: boolean;

        /**
         * @description Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
         * @default true
         */
        has_projects?: boolean;

        /**
         * @description Either `true` to enable the wiki for this repository or `false` to disable it.
         * @default true
         */
        has_wiki?: boolean;

        /**
         * @description Whether downloads are enabled.
         * @example true
         * @default true
         */
        has_downloads?: boolean;

        /**
         * @description Either `true` to make this repo available as a template repository or `false` to prevent it.
         * @default false
         */
        is_template?: boolean;

        /**
         * @description The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
         */
        team_id?: number;

        /**
         * @description Pass `true` to create an initial commit with empty README.
         * @default false
         */
        auto_init?: boolean;

        /**
         * @description Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".
         */
        gitignore_template?: string;

        /**
         * @description Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".
         */
        license_template?: string;

        /**
         * @description Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
         * @default true
         */
        allow_squash_merge?: boolean;

        /**
         * @description Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
         * @default true
         */
        allow_merge_commit?: boolean;

        /**
         * @description Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
         * @default true
         */
        allow_rebase_merge?: boolean;

        /**
         * @description Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
         * @default false
         */
        allow_auto_merge?: boolean;

        /**
         * @description Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**
         * @default false
         */
        delete_branch_on_merge?: boolean;

        /**
         * @description Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @deprecated
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;

        /**
         * @description Required when using `squash_merge_commit_message`.
         *
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";

        /**
         * @description The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";

        /**
         * @description Required when using `merge_commit_message`.
         *
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";

        /**
         * @description The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";

        /**
         * @description The custom properties for the new repository. The keys are the custom property names, and the values are the corresponding custom property values.
         */
        custom_properties?: {
          [key: string]: any;
        };
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name repos/get-org-rulesets
   * @summary Get all organization repository rulesets
   * @description Get all the repository rulesets for an organization.
   * @see https://docs.github.com/rest/orgs/rules#get-all-organization-repository-rulesets
   */
  "GET /orgs/{org}/rulesets": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;
      targets?: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/rulesets";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RepositoryRulesetSchema[];
    };
  };

  /**
   * @name repos/create-org-ruleset
   * @summary Create an organization repository ruleset
   * @description Create a repository ruleset for an organization.
   * @see https://docs.github.com/rest/orgs/rules#create-an-organization-repository-ruleset
   */
  "POST /orgs/{org}/rulesets": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/rulesets"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/rulesets";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the ruleset.
         */
        name: string;

        /**
         * @description The target of the ruleset
         * @default "branch"
         */
        target?: "branch" | "tag" | "push" | "repository";
        enforcement: RepositoryRuleEnforcementSchema;

        /**
         * @description The actors that can bypass the rules in this ruleset
         */
        bypass_actors?: RepositoryRulesetBypassActorSchema[];
        conditions?: OrgRulesetConditionsSchema;

        /**
         * @description An array of rules within the ruleset.
         */
        rules?: OrgRulesSchema[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name repos/get-org-rule-suites
   * @summary List organization rule suites
   * @description Lists suites of rule evaluations at the organization level.
   * For more information, see "[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets)."
   * @see https://docs.github.com/rest/orgs/rule-suites#list-organization-rule-suites
   */
  "GET /orgs/{org}/rulesets/rule-suites": {
    parameters: {
      org: string;
      ref?: string;
      repository_name?: string;
      time_period?: "hour" | "day" | "week" | "month";
      actor_name?: string;
      rule_suite_result?: "pass" | "fail" | "bypass" | "all";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/rulesets/rule-suites";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RuleSuitesSchema;
    };
  };

  /**
   * @name repos/get-org-rule-suite
   * @summary Get an organization rule suite
   * @description Gets information about a suite of rule evaluations from within an organization.
   * For more information, see "[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets)."
   * @see https://docs.github.com/rest/orgs/rule-suites#get-an-organization-rule-suite
   */
  "GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}": {
    parameters: {
      org: string;
      rule_suite_id: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/rulesets/rule-suites/{rule_suite_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RuleSuiteSchema;
    };
  };

  /**
   * @name repos/get-org-ruleset
   * @summary Get an organization repository ruleset
   * @description Get a repository ruleset for an organization.
   *
   * **Note:** To prevent leaking sensitive information, the `bypass_actors` property is only returned if the user
   * making the API request has write access to the ruleset.
   * @see https://docs.github.com/rest/orgs/rules#get-an-organization-repository-ruleset
   */
  "GET /orgs/{org}/rulesets/{ruleset_id}": {
    parameters: {
      org: string;

      /**
       * @description The ID of the ruleset.
       */
      ruleset_id: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/rulesets/{ruleset_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RepositoryRulesetSchema;
    };
  };

  /**
   * @name repos/update-org-ruleset
   * @summary Update an organization repository ruleset
   * @description Update a ruleset for an organization.
   * @see https://docs.github.com/rest/orgs/rules#update-an-organization-repository-ruleset
   */
  "PUT /orgs/{org}/rulesets/{ruleset_id}": {
    parameters: {
      org: string;

      /**
       * @description The ID of the ruleset.
       */
      ruleset_id: number;
    } & Endpoints["PUT /orgs/{org}/rulesets/{ruleset_id}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/rulesets/{ruleset_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the ruleset.
         */
        name?: string;

        /**
         * @description The target of the ruleset
         */
        target?: "branch" | "tag" | "push" | "repository";
        enforcement?: RepositoryRuleEnforcementSchema;

        /**
         * @description The actors that can bypass the rules in this ruleset
         */
        bypass_actors?: RepositoryRulesetBypassActorSchema[];
        conditions?: OrgRulesetConditionsSchema;

        /**
         * @description An array of rules within the ruleset.
         */
        rules?: OrgRulesSchema[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RepositoryRulesetSchema;
    };
  };

  /**
   * @name repos/delete-org-ruleset
   * @summary Delete an organization repository ruleset
   * @description Delete a ruleset for an organization.
   * @see https://docs.github.com/rest/orgs/rules#delete-an-organization-repository-ruleset
   */
  "DELETE /orgs/{org}/rulesets/{ruleset_id}": {
    parameters: {
      org: string;

      /**
       * @description The ID of the ruleset.
       */
      ruleset_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/rulesets/{ruleset_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name orgs/get-org-ruleset-history
   * @summary Get organization ruleset history
   * @description Get the history of an organization ruleset.
   * @see https://docs.github.com/rest/orgs/rules#get-organization-ruleset-history
   */
  "GET /orgs/{org}/rulesets/{ruleset_id}/history": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;

      /**
       * @description The ID of the ruleset.
       */
      ruleset_id: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/rulesets/{ruleset_id}/history";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RulesetVersionSchema[];
    };
  };

  /**
   * @name orgs/get-org-ruleset-version
   * @summary Get organization ruleset version
   * @description Get a version of an organization ruleset.
   * @see https://docs.github.com/rest/orgs/rules#get-organization-ruleset-version
   */
  "GET /orgs/{org}/rulesets/{ruleset_id}/history/{version_id}": {
    parameters: {
      org: string;

      /**
       * @description The ID of the ruleset.
       */
      ruleset_id: number;

      /**
       * @description The ID of the version
       */
      version_id: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/rulesets/{ruleset_id}/history/{version_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RulesetVersionWithStateSchema;
    };
  };

  /**
   * @name secret-scanning/list-alerts-for-org
   * @summary List secret scanning alerts for an organization
   * @description Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
   *
   * The authenticated user must be an administrator or security manager for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
   * @see https://docs.github.com/rest/secret-scanning/secret-scanning#list-secret-scanning-alerts-for-an-organization
   */
  "GET /orgs/{org}/secret-scanning/alerts": {
    parameters: {
      org: string;
      state?: "open" | "resolved";
      secret_type?: string;
      resolution?: string;
      sort?: "created" | "updated";
      direction?: "asc" | "desc";
      page?: number;
      per_page?: number;
      before?: string;
      after?: string;
      validity?: string;
      is_publicly_leaked?: boolean;
      is_multi_repo?: boolean;
      hide_secret?: boolean;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/secret-scanning/alerts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrganizationSecretScanningAlertSchema[];
    };
  };

  /**
   * @name secret-scanning/list-org-pattern-configs
   * @summary List organization pattern configurations
   * @description Lists the secret scanning pattern configurations for an organization.
   *
   * Personal access tokens (classic) need the `read:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/secret-scanning/push-protection#list-organization-pattern-configurations
   */
  "GET /orgs/{org}/secret-scanning/pattern-configurations": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/secret-scanning/pattern-configurations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SecretScanningPatternConfigurationSchema;
    };
  };

  /**
   * @name secret-scanning/update-org-pattern-configs
   * @summary Update organization pattern configurations
   * @description Updates the secret scanning pattern configurations for an organization.
   *
   * Personal access tokens (classic) need the `write:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/secret-scanning/push-protection#update-organization-pattern-configurations
   */
  "PATCH /orgs/{org}/secret-scanning/pattern-configurations": {
    parameters: {
      org: string;
    } & Endpoints["PATCH /orgs/{org}/secret-scanning/pattern-configurations"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/orgs/{org}/secret-scanning/pattern-configurations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        pattern_config_version?: SecretScanningRowVersionSchema;

        /**
         * @description Pattern settings for provider patterns.
         */
        provider_pattern_settings?: {
          /**
           * @description The ID of the pattern to configure.
           */
          token_type?: string;

          /**
           * @description Push protection setting to set for the pattern.
           */
          push_protection_setting?: "not-set" | "disabled" | "enabled";
        }[];

        /**
         * @description Pattern settings for custom patterns.
         */
        custom_pattern_settings?: {
          /**
           * @description The ID of the pattern to configure.
           */
          token_type?: string;
          custom_pattern_version?: SecretScanningRowVersionSchema;

          /**
           * @description Push protection setting to set for the pattern.
           */
          push_protection_setting?: "disabled" | "enabled";
        }[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        /**
         * @description The updated pattern configuration version.
         */
        pattern_config_version?: string;
      };
    };
  };

  /**
   * @name security-advisories/list-org-repository-advisories
   * @summary List repository security advisories for an organization
   * @description Lists repository security advisories for an organization.
   *
   * The authenticated user must be an owner or security manager for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
   * @see https://docs.github.com/rest/security-advisories/repository-advisories#list-repository-security-advisories-for-an-organization
   */
  "GET /orgs/{org}/security-advisories": {
    parameters: {
      org: string;
      direction?: "asc" | "desc";

      /**
       * @description The property to sort the results by.
       */
      sort?: "created" | "updated" | "published";
      before?: string;
      after?: string;

      /**
       * @description The number of advisories to return per page. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
       */
      per_page?: number;

      /**
       * @description Filter by the state of the repository advisories. Only advisories of this state will be returned.
       */
      state?: "triage" | "draft" | "published" | "closed";
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/security-advisories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RepositoryAdvisorySchema[];
    };
  };

  /**
   * @name orgs/list-security-manager-teams
   * @summary List security manager teams
   * @description > [!WARNING]
   * > **Closing down notice:** This operation is closing down and will be removed starting January 1, 2026. Please use the "[Organization Roles](https://docs.github.com/rest/orgs/organization-roles)" endpoints instead.
   * @deprecated
   * @see https://docs.github.com/rest/orgs/security-managers#list-security-manager-teams
   */
  "GET /orgs/{org}/security-managers": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/security-managers";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamSimpleSchema[];
    };
  };

  /**
   * @name orgs/add-security-manager-team
   * @summary Add a security manager team
   * @description > [!WARNING]
   * > **Closing down notice:** This operation is closing down and will be removed starting January 1, 2026. Please use the "[Organization Roles](https://docs.github.com/rest/orgs/organization-roles)" endpoints instead.
   * @deprecated
   * @see https://docs.github.com/rest/orgs/security-managers#add-a-security-manager-team
   */
  "PUT /orgs/{org}/security-managers/teams/{team_slug}": {
    parameters: {
      org: string;
      team_slug: string;
    };
    request: {
      method: "PUT";
      url: "/orgs/{org}/security-managers/teams/{team_slug}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name orgs/remove-security-manager-team
   * @summary Remove a security manager team
   * @description > [!WARNING]
   * > **Closing down notice:** This operation is closing down and will be removed starting January 1, 2026. Please use the "[Organization Roles](https://docs.github.com/rest/orgs/organization-roles)" endpoints instead.
   * @deprecated
   * @see https://docs.github.com/rest/orgs/security-managers#remove-a-security-manager-team
   */
  "DELETE /orgs/{org}/security-managers/teams/{team_slug}": {
    parameters: {
      org: string;
      team_slug: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/security-managers/teams/{team_slug}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name billing/get-github-actions-billing-org
   * @summary Get GitHub Actions billing for an organization
   * @description Gets the summary of the free and paid GitHub Actions minutes used.
   *
   * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/billing/billing#get-github-actions-billing-for-an-organization
   */
  "GET /orgs/{org}/settings/billing/actions": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/settings/billing/actions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsBillingUsageSchema;
    };
  };

  /**
   * @name billing/get-github-packages-billing-org
   * @summary Get GitHub Packages billing for an organization
   * @description Gets the free and paid storage used for GitHub Packages in gigabytes.
   *
   * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/billing/billing#get-github-packages-billing-for-an-organization
   */
  "GET /orgs/{org}/settings/billing/packages": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/settings/billing/packages";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PackagesBillingUsageSchema;
    };
  };

  /**
   * @name billing/get-shared-storage-billing-org
   * @summary Get shared storage billing for an organization
   * @description Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
   *
   * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/billing/billing#get-shared-storage-billing-for-an-organization
   */
  "GET /orgs/{org}/settings/billing/shared-storage": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/settings/billing/shared-storage";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CombinedBillingUsageSchema;
    };
  };

  /**
   * @name hosted-compute/list-network-configurations-for-org
   * @summary List hosted compute network configurations for an organization
   * @description Lists all hosted compute network configurations configured in an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/network-configurations#list-hosted-compute-network-configurations-for-an-organization
   */
  "GET /orgs/{org}/settings/network-configurations": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/settings/network-configurations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        network_configurations: NetworkConfigurationSchema[];
      };
    };
  };

  /**
   * @name hosted-compute/create-network-configuration-for-org
   * @summary Create a hosted compute network configuration for an organization
   * @description Creates a hosted compute network configuration for an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/network-configurations#create-a-hosted-compute-network-configuration-for-an-organization
   */
  "POST /orgs/{org}/settings/network-configurations": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/settings/network-configurations"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/settings/network-configurations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Name of the network configuration. Must be between 1 and 100 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'.
         */
        name: string;

        /**
         * @description The hosted compute service to use for the network configuration.
         */
        compute_service?: "none" | "actions";

        /**
         * @description The identifier of the network settings to use for the network configuration. Exactly one network settings must be specified.
         */
        network_settings_ids: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name hosted-compute/get-network-configuration-for-org
   * @summary Get a hosted compute network configuration for an organization
   * @description Gets a hosted compute network configuration configured in an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/network-configurations#get-a-hosted-compute-network-configuration-for-an-organization
   */
  "GET /orgs/{org}/settings/network-configurations/{network_configuration_id}": {
    parameters: {
      org: string;
      network_configuration_id: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/settings/network-configurations/{network_configuration_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: NetworkConfigurationSchema;
    };
  };

  /**
   * @name hosted-compute/update-network-configuration-for-org
   * @summary Update a hosted compute network configuration for an organization
   * @description Updates a hosted compute network configuration for an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/network-configurations#update-a-hosted-compute-network-configuration-for-an-organization
   */
  "PATCH /orgs/{org}/settings/network-configurations/{network_configuration_id}": {
    parameters: {
      org: string;
      network_configuration_id: string;
    } & Endpoints["PATCH /orgs/{org}/settings/network-configurations/{network_configuration_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/orgs/{org}/settings/network-configurations/{network_configuration_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Name of the network configuration. Must be between 1 and 100 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'.
         */
        name?: string;

        /**
         * @description The hosted compute service to use for the network configuration.
         */
        compute_service?: "none" | "actions";

        /**
         * @description The identifier of the network settings to use for the network configuration. Exactly one network settings must be specified.
         */
        network_settings_ids?: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: NetworkConfigurationSchema;
    };
  };

  /**
   * @name hosted-compute/delete-network-configuration-from-org
   * @summary Delete a hosted compute network configuration from an organization
   * @description Deletes a hosted compute network configuration from an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/network-configurations#delete-a-hosted-compute-network-configuration-from-an-organization
   */
  "DELETE /orgs/{org}/settings/network-configurations/{network_configuration_id}": {
    parameters: {
      org: string;
      network_configuration_id: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/settings/network-configurations/{network_configuration_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name hosted-compute/get-network-settings-for-org
   * @summary Get a hosted compute network settings resource for an organization
   * @description Gets a hosted compute network settings resource configured for an organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/network-configurations#get-a-hosted-compute-network-settings-resource-for-an-organization
   */
  "GET /orgs/{org}/settings/network-settings/{network_settings_id}": {
    parameters: {
      org: string;
      network_settings_id: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/settings/network-settings/{network_settings_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: NetworkSettingsSchema;
    };
  };

  /**
   * @name copilot/copilot-metrics-for-team
   * @summary Get Copilot metrics for a team
   * @description Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.
   *
   * > [!NOTE]
   * > This endpoint will only return results for a given day if the team had **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.
   *
   * The response contains metrics for up to 100 days prior. Metrics are processed once per day for the previous day,
   * and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
   * they must have telemetry enabled in their IDE.
   *
   * To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization containing the team within GitHub settings.
   * Only organization owners for the organization that contains this team and owners and billing managers of the parent enterprise can view Copilot metrics for a team.
   *
   * OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
   * @see https://docs.github.com/rest/copilot/copilot-metrics#get-copilot-metrics-for-a-team
   */
  "GET /orgs/{org}/team/{team_slug}/copilot/metrics": {
    parameters: {
      org: string;
      team_slug: string;

      /**
       * @description Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 100 days ago.
       */
      since?: string;

      /**
       * @description Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed.
       */
      until?: string;
      page?: number;

      /**
       * @description The number of days of metrics to display per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
       */
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/team/{team_slug}/copilot/metrics";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CopilotUsageMetricsDaySchema[];
    };
  };

  /**
   * @name teams/list
   * @summary List teams
   * @description Lists all teams in an organization that are visible to the authenticated user.
   * @see https://docs.github.com/rest/teams/teams#list-teams
   */
  "GET /orgs/{org}/teams": {
    parameters: {
      org: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/teams";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamSchema[];
    };
  };

  /**
   * @name teams/create
   * @summary Create a team
   * @description To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://docs.github.com/articles/setting-team-creation-permissions-in-your-organization)."
   *
   * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/about-teams)".
   * @see https://docs.github.com/rest/teams/teams#create-a-team
   */
  "POST /orgs/{org}/teams": {
    parameters: {
      org: string;
    } & Endpoints["POST /orgs/{org}/teams"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/teams";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the team.
         */
        name: string;

        /**
         * @description The description of the team.
         */
        description?: string;

        /**
         * @description List GitHub usernames for organization members who will become team maintainers.
         */
        maintainers?: string[];

        /**
         * @description The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
         */
        repo_names?: string[];

        /**
         * @description The level of privacy this team should have. The options are:
         * **For a non-nested team:**
         *  * `secret` - only visible to organization owners and members of this team.
         *  * `closed` - visible to all members of this organization.
         * Default: `secret`
         * **For a parent or child team:**
         *  * `closed` - visible to all members of this organization.
         * Default for child team: `closed`
         */
        privacy?: "secret" | "closed";

        /**
         * @description The notification setting the team has chosen. The options are:
         *  * `notifications_enabled` - team members receive notifications when the team is @mentioned.
         *  * `notifications_disabled` - no one receives notifications.
         * Default: `notifications_enabled`
         */
        notification_setting?:
          | "notifications_enabled"
          | "notifications_disabled";

        /**
         * @description **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
         * @default "pull"
         */
        permission?: "pull" | "push";

        /**
         * @description The ID of a team to set as the parent team.
         */
        parent_team_id?: number;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name teams/get-by-name
   * @summary Get a team by name
   * @description Gets a team using the team's `slug`. To create the `slug`, GitHub replaces special characters in the `name` string, changes all words to lowercase, and replaces spaces with a `-` separator. For example, `"My TEam Näme"` would become `my-team-name`.
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
   * @see https://docs.github.com/rest/teams/teams#get-a-team-by-name
   */
  "GET /orgs/{org}/teams/{team_slug}": {
    parameters: {
      org: string;
      team_slug: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/teams/{team_slug}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamFullSchema;
    };
  };

  /**
   * @name teams/update-in-org
   * @summary Update a team
   * @description To edit a team, the authenticated user must either be an organization owner or a team maintainer.
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
   * @see https://docs.github.com/rest/teams/teams#update-a-team
   */
  "PATCH /orgs/{org}/teams/{team_slug}": {
    parameters: {
      org: string;
      team_slug: string;
    } & Endpoints["PATCH /orgs/{org}/teams/{team_slug}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/orgs/{org}/teams/{team_slug}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the team.
         */
        name?: string;

        /**
         * @description The description of the team.
         */
        description?: string;

        /**
         * @description The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:
         * **For a non-nested team:**
         *  * `secret` - only visible to organization owners and members of this team.
         *  * `closed` - visible to all members of this organization.
         * **For a parent or child team:**
         *  * `closed` - visible to all members of this organization.
         */
        privacy?: "secret" | "closed";

        /**
         * @description The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are:
         *  * `notifications_enabled` - team members receive notifications when the team is @mentioned.
         *  * `notifications_disabled` - no one receives notifications.
         */
        notification_setting?:
          | "notifications_enabled"
          | "notifications_disabled";

        /**
         * @description **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
         * @default "pull"
         */
        permission?: "pull" | "push" | "admin";

        /**
         * @description The ID of a team to set as the parent team.
         */
        parent_team_id?: number | null;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamFullSchema;
    };
  };

  /**
   * @name teams/delete-in-org
   * @summary Delete a team
   * @description To delete a team, the authenticated user must be an organization owner or team maintainer.
   *
   * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
   * @see https://docs.github.com/rest/teams/teams#delete-a-team
   */
  "DELETE /orgs/{org}/teams/{team_slug}": {
    parameters: {
      org: string;
      team_slug: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/teams/{team_slug}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name teams/list-discussions-in-org
   * @summary List discussions
   * @description List all discussions on a team's page.
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
   * @see https://docs.github.com/rest/teams/discussions#list-discussions
   */
  "GET /orgs/{org}/teams/{team_slug}/discussions": {
    parameters: {
      org: string;
      team_slug: string;
      direction?: "asc" | "desc";
      per_page?: number;
      page?: number;

      /**
       * @description Pinned discussions only filter
       */
      pinned?: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/teams/{team_slug}/discussions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamDiscussionSchema[];
    };
  };

  /**
   * @name teams/create-discussion-in-org
   * @summary Create a discussion
   * @description Creates a new discussion post on a team's page.
   *
   * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
   * @see https://docs.github.com/rest/teams/discussions#create-a-discussion
   */
  "POST /orgs/{org}/teams/{team_slug}/discussions": {
    parameters: {
      org: string;
      team_slug: string;
    } & Endpoints["POST /orgs/{org}/teams/{team_slug}/discussions"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/teams/{team_slug}/discussions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The discussion post's title.
         */
        title: string;

        /**
         * @description The discussion post's body text.
         */
        body: string;

        /**
         * @description Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
         * @default false
         */
        private?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name teams/get-discussion-in-org
   * @summary Get a discussion
   * @description Get a specific discussion on a team's page.
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
   * @see https://docs.github.com/rest/teams/discussions#get-a-discussion
   */
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}": {
    parameters: {
      org: string;
      team_slug: string;
      discussion_number: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamDiscussionSchema;
    };
  };

  /**
   * @name teams/update-discussion-in-org
   * @summary Update a discussion
   * @description Edits the title and body text of a discussion post. Only the parameters you provide are updated.
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
   * @see https://docs.github.com/rest/teams/discussions#update-a-discussion
   */
  "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}": {
    parameters: {
      org: string;
      team_slug: string;
      discussion_number: number;
    } & Endpoints["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The discussion post's title.
         */
        title?: string;

        /**
         * @description The discussion post's body text.
         */
        body?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamDiscussionSchema;
    };
  };

  /**
   * @name teams/delete-discussion-in-org
   * @summary Delete a discussion
   * @description Delete a discussion from a team's page.
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
   * @see https://docs.github.com/rest/teams/discussions#delete-a-discussion
   */
  "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}": {
    parameters: {
      org: string;
      team_slug: string;
      discussion_number: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name teams/list-discussion-comments-in-org
   * @summary List discussion comments
   * @description List all comments on a team discussion.
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
   * @see https://docs.github.com/rest/teams/discussion-comments#list-discussion-comments
   */
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments": {
    parameters: {
      org: string;
      team_slug: string;
      discussion_number: number;
      direction?: "asc" | "desc";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamDiscussionCommentSchema[];
    };
  };

  /**
   * @name teams/create-discussion-comment-in-org
   * @summary Create a discussion comment
   * @description Creates a new comment on a team discussion.
   *
   * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
   * @see https://docs.github.com/rest/teams/discussion-comments#create-a-discussion-comment
   */
  "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments": {
    parameters: {
      org: string;
      team_slug: string;
      discussion_number: number;
    } & Endpoints["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The discussion comment's body text.
         */
        body: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name teams/get-discussion-comment-in-org
   * @summary Get a discussion comment
   * @description Get a specific comment on a team discussion.
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
   * @see https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment
   */
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}": {
    parameters: {
      org: string;
      team_slug: string;
      discussion_number: number;
      comment_number: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamDiscussionCommentSchema;
    };
  };

  /**
   * @name teams/update-discussion-comment-in-org
   * @summary Update a discussion comment
   * @description Edits the body text of a discussion comment.
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
   * @see https://docs.github.com/rest/teams/discussion-comments#update-a-discussion-comment
   */
  "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}": {
    parameters: {
      org: string;
      team_slug: string;
      discussion_number: number;
      comment_number: number;
    } & Endpoints["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The discussion comment's body text.
         */
        body: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamDiscussionCommentSchema;
    };
  };

  /**
   * @name teams/delete-discussion-comment-in-org
   * @summary Delete a discussion comment
   * @description Deletes a comment on a team discussion.
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
   * @see https://docs.github.com/rest/teams/discussion-comments#delete-a-discussion-comment
   */
  "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}": {
    parameters: {
      org: string;
      team_slug: string;
      discussion_number: number;
      comment_number: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name reactions/list-for-team-discussion-comment-in-org
   * @summary List reactions for a team discussion comment
   * @description List the reactions to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
   * @see https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion-comment
   */
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
    parameters: {
      org: string;
      team_slug: string;
      discussion_number: number;
      comment_number: number;

      /**
       * @description Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion comment.
       */
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReactionSchema[];
    };
  };

  /**
   * @name reactions/create-for-team-discussion-comment-in-org
   * @summary Create reaction for a team discussion comment
   * @description Create a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).
   *
   * A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
   * @see https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion-comment
   */
  "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
    parameters: {
      org: string;
      team_slug: string;
      discussion_number: number;
      comment_number: number;
    } & Endpoints["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment.
         */
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReactionSchema;
    };
  };

  /**
   * @name reactions/delete-for-team-discussion-comment
   * @summary Delete team discussion comment reaction
   * @description > [!NOTE]
   * > You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
   *
   * Delete a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
   * @see https://docs.github.com/rest/reactions/reactions#delete-team-discussion-comment-reaction
   */
  "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}": {
    parameters: {
      org: string;
      team_slug: string;
      discussion_number: number;
      comment_number: number;
      reaction_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name reactions/list-for-team-discussion-in-org
   * @summary List reactions for a team discussion
   * @description List the reactions to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
   * @see https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion
   */
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions": {
    parameters: {
      org: string;
      team_slug: string;
      discussion_number: number;

      /**
       * @description Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion.
       */
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReactionSchema[];
    };
  };

  /**
   * @name reactions/create-for-team-discussion-in-org
   * @summary Create reaction for a team discussion
   * @description Create a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).
   *
   * A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
   * @see https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion
   */
  "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions": {
    parameters: {
      org: string;
      team_slug: string;
      discussion_number: number;
    } & Endpoints["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion.
         */
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReactionSchema;
    };
  };

  /**
   * @name reactions/delete-for-team-discussion
   * @summary Delete team discussion reaction
   * @description > [!NOTE]
   * > You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
   *
   * Delete a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
   * @see https://docs.github.com/rest/reactions/reactions#delete-team-discussion-reaction
   */
  "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}": {
    parameters: {
      org: string;
      team_slug: string;
      discussion_number: number;
      reaction_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name teams/list-pending-invitations-in-org
   * @summary List pending team invitations
   * @description The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
   * @see https://docs.github.com/rest/teams/members#list-pending-team-invitations
   */
  "GET /orgs/{org}/teams/{team_slug}/invitations": {
    parameters: {
      org: string;
      team_slug: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/teams/{team_slug}/invitations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrganizationInvitationSchema[];
    };
  };

  /**
   * @name teams/list-members-in-org
   * @summary List team members
   * @description Team members will include the members of child teams.
   *
   * To list members in a team, the team must be visible to the authenticated user.
   * @see https://docs.github.com/rest/teams/members#list-team-members
   */
  "GET /orgs/{org}/teams/{team_slug}/members": {
    parameters: {
      org: string;
      team_slug: string;

      /**
       * @description Filters members returned by their role in the team.
       */
      role?: "member" | "maintainer" | "all";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/teams/{team_slug}/members";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SimpleUserSchema[];
    };
  };

  /**
   * @name teams/get-membership-for-user-in-org
   * @summary Get team membership for a user
   * @description Team members will include the members of child teams.
   *
   * To get a user's membership with a team, the team must be visible to the authenticated user.
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
   *
   * > [!NOTE]
   * > The response contains the `state` of the membership and the member's `role`.
   *
   * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team).
   * @see https://docs.github.com/rest/teams/members#get-team-membership-for-a-user
   */
  "GET /orgs/{org}/teams/{team_slug}/memberships/{username}": {
    parameters: {
      org: string;
      team_slug: string;
      username: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/teams/{team_slug}/memberships/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamMembershipSchema;
    };
  };

  /**
   * @name teams/add-or-update-membership-for-user-in-org
   * @summary Add or update team membership for a user
   * @description Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * > [!NOTE]
   * > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   *
   * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
   *
   * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
   * @see https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user
   */
  "PUT /orgs/{org}/teams/{team_slug}/memberships/{username}": {
    parameters: {
      org: string;
      team_slug: string;
      username: string;
    } & Endpoints["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/teams/{team_slug}/memberships/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The role that this user should have in the team.
         * @default "member"
         */
        role?: "member" | "maintainer";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamMembershipSchema;
    };
  };

  /**
   * @name teams/remove-membership-for-user-in-org
   * @summary Remove team membership for a user
   * @description To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * > [!NOTE]
   * > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
   * @see https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user
   */
  "DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}": {
    parameters: {
      org: string;
      team_slug: string;
      username: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/teams/{team_slug}/memberships/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name teams/list-projects-in-org
   * @summary List team projects
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/teams/teams#list-team-projects
   */
  "GET /orgs/{org}/teams/{team_slug}/projects": {
    parameters: {
      org: string;
      team_slug: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/teams/{team_slug}/projects";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamProjectSchema[];
    };
  };

  /**
   * @name teams/check-permissions-for-project-in-org
   * @summary Check team permissions for a project
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-project
   */
  "GET /orgs/{org}/teams/{team_slug}/projects/{project_id}": {
    parameters: {
      org: string;
      team_slug: string;
      project_id: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/teams/{team_slug}/projects/{project_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamProjectSchema;
    };
  };

  /**
   * @name teams/add-or-update-project-permissions-in-org
   * @summary Add or update team project permissions
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/teams/teams#add-or-update-team-project-permissions
   */
  "PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}": {
    parameters: {
      org: string;
      team_slug: string;
      project_id: number;
    } & Endpoints["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/teams/{team_slug}/projects/{project_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
         */
        permission?: "read" | "write" | "admin";
      } | null;
    };
    response: never;
  };

  /**
   * @name teams/remove-project-in-org
   * @summary Remove a project from a team
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/teams/teams#remove-a-project-from-a-team
   */
  "DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}": {
    parameters: {
      org: string;
      team_slug: string;
      project_id: number;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/teams/{team_slug}/projects/{project_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name teams/list-repos-in-org
   * @summary List team repositories
   * @description Lists a team's repositories visible to the authenticated user.
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
   * @see https://docs.github.com/rest/teams/teams#list-team-repositories
   */
  "GET /orgs/{org}/teams/{team_slug}/repos": {
    parameters: {
      org: string;
      team_slug: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/teams/{team_slug}/repos";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MinimalRepositorySchema[];
    };
  };

  /**
   * @name teams/check-permissions-for-repo-in-org
   * @summary Check team permissions for a repository
   * @description Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
   *
   * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types/) via the `application/vnd.github.v3.repository+json` accept header.
   *
   * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
   *
   * If the repository is private, you must have at least `read` permission for that repository, and your token must have the `repo` or `admin:org` scope. Otherwise, you will receive a `404 Not Found` response status.
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
   * @see https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-repository
   */
  "GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}": {
    parameters: {
      org: string;
      team_slug: string;
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamRepositorySchema;
    };
  };

  /**
   * @name teams/add-or-update-repo-permissions-in-org
   * @summary Add or update team repository permissions
   * @description To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
   *
   * For more information about the permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
   * @see https://docs.github.com/rest/teams/teams#add-or-update-team-repository-permissions
   */
  "PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}": {
    parameters: {
      org: string;
      team_slug: string;
      owner: string;
      repo: string;
    } & Endpoints["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The permission to grant the team on this repository. We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
         */
        permission?: string;
      };
    };
    response: never;
  };

  /**
   * @name teams/remove-repo-in-org
   * @summary Remove a repository from a team
   * @description If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
   * @see https://docs.github.com/rest/teams/teams#remove-a-repository-from-a-team
   */
  "DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}": {
    parameters: {
      org: string;
      team_slug: string;
      owner: string;
      repo: string;
    };
    request: {
      method: "DELETE";
      url: "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name teams/list-child-in-org
   * @summary List child teams
   * @description Lists the child teams of the team specified by `{team_slug}`.
   *
   * > [!NOTE]
   * > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
   * @see https://docs.github.com/rest/teams/teams#list-child-teams
   */
  "GET /orgs/{org}/teams/{team_slug}/teams": {
    parameters: {
      org: string;
      team_slug: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/teams/{team_slug}/teams";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamSchema[];
    };
  };

  /**
   * @name orgs/enable-or-disable-security-product-on-all-org-repos
   * @summary Enable or disable a security feature for an organization
   * @description > [!WARNING]
   * > **Closing down notice:** The ability to enable or disable a security feature for all eligible repositories in an organization is closing down. Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead. For more information, see the [changelog](https://github.blog/changelog/2024-07-22-deprecation-of-api-endpoint-to-enable-or-disable-a-security-feature-for-an-organization/).
   *
   * Enables or disables the specified security feature for all eligible repositories in an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
   *
   * The authenticated user must be an organization owner or be member of a team with the security manager role to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org`, `write:org`, or `repo` scopes to use this endpoint.
   * @deprecated
   * @see https://docs.github.com/rest/orgs/orgs#enable-or-disable-a-security-feature-for-an-organization
   */
  "POST /orgs/{org}/{security_product}/{enablement}": {
    parameters: {
      org: string;
      security_product:
        | "dependency_graph"
        | "dependabot_alerts"
        | "dependabot_security_updates"
        | "advanced_security"
        | "code_scanning_default_setup"
        | "secret_scanning"
        | "secret_scanning_push_protection";
      enablement: "enable_all" | "disable_all";
    } & Endpoints["POST /orgs/{org}/{security_product}/{enablement}"]["request"]["data"];
    request: {
      method: "POST";
      url: "/orgs/{org}/{security_product}/{enablement}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description CodeQL query suite to be used. If you specify the `query_suite` parameter, the default setup will be configured with this query suite only on all repositories that didn't have default setup already configured. It will not change the query suite on repositories that already have default setup configured.
         * If you don't specify any `query_suite` in your request, the preferred query suite of the organization will be applied.
         */
        query_suite?: "default" | "extended";
      };
    };
    response: never;
  };

  /**
   * @name projects-classic/get-column
   * @summary Get a project column
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/projects-classic/columns#get-a-project-column
   */
  "GET /projects/columns/{column_id}": {
    parameters: {
      column_id: number;
    };
    request: {
      method: "GET";
      url: "/projects/columns/{column_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectColumnSchema;
    };
  };

  /**
   * @name projects-classic/update-column
   * @summary Update an existing project column
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/projects-classic/columns#update-an-existing-project-column
   */
  "PATCH /projects/columns/{column_id}": {
    parameters: {
      column_id: number;
    } & Endpoints["PATCH /projects/columns/{column_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/projects/columns/{column_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Name of the project column
         * @example Remaining tasks
         */
        name: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectColumnSchema;
    };
  };

  /**
   * @name projects-classic/delete-column
   * @summary Delete a project column
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/projects-classic/columns#delete-a-project-column
   */
  "DELETE /projects/columns/{column_id}": {
    parameters: {
      column_id: number;
    };
    request: {
      method: "DELETE";
      url: "/projects/columns/{column_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name projects-classic/move-column
   * @summary Move a project column
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/projects-classic/columns#move-a-project-column
   */
  "POST /projects/columns/{column_id}/moves": {
    parameters: {
      column_id: number;
    } & Endpoints["POST /projects/columns/{column_id}/moves"]["request"]["data"];
    request: {
      method: "POST";
      url: "/projects/columns/{column_id}/moves";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.
         * @example last
         */
        position: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name projects-classic/get
   * @summary Get a project
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/projects-classic/projects#get-a-project
   */
  "GET /projects/{project_id}": {
    parameters: {
      project_id: number;
    };
    request: {
      method: "GET";
      url: "/projects/{project_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectSchema;
    };
  };

  /**
   * @name projects-classic/update
   * @summary Update a project
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/projects-classic/projects#update-a-project
   */
  "PATCH /projects/{project_id}": {
    parameters: {
      project_id: number;
    } & Endpoints["PATCH /projects/{project_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/projects/{project_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Name of the project
         * @example Week One Sprint
         */
        name?: string;

        /**
         * @description Body of the project
         * @example This project represents the sprint of the first week in January
         */
        body?: string | null;

        /**
         * @description State of the project; either 'open' or 'closed'
         * @example open
         */
        state?: string;

        /**
         * @description The baseline permission that all organization members have on this project
         */
        organization_permission?: "read" | "write" | "admin" | "none";

        /**
         * @description Whether or not this project can be seen by everyone.
         */
        private?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectSchema;
    };
  };

  /**
   * @name projects-classic/delete
   * @summary Delete a project
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/projects-classic/projects#delete-a-project
   */
  "DELETE /projects/{project_id}": {
    parameters: {
      project_id: number;
    };
    request: {
      method: "DELETE";
      url: "/projects/{project_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name projects-classic/list-collaborators
   * @summary List project collaborators
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/projects-classic/collaborators#list-project-collaborators
   */
  "GET /projects/{project_id}/collaborators": {
    parameters: {
      project_id: number;

      /**
       * @description Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
       */
      affiliation?: "outside" | "direct" | "all";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/projects/{project_id}/collaborators";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SimpleUserSchema[];
    };
  };

  /**
   * @name projects-classic/add-collaborator
   * @summary Add project collaborator
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/projects-classic/collaborators#add-project-collaborator
   */
  "PUT /projects/{project_id}/collaborators/{username}": {
    parameters: {
      project_id: number;
      username: string;
    } & Endpoints["PUT /projects/{project_id}/collaborators/{username}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/projects/{project_id}/collaborators/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The permission to grant the collaborator.
         * @example write
         * @default "write"
         */
        permission?: "read" | "write" | "admin";
      } | null;
    };
    response: never;
  };

  /**
   * @name projects-classic/remove-collaborator
   * @summary Remove user as a collaborator
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/projects-classic/collaborators#remove-user-as-a-collaborator
   */
  "DELETE /projects/{project_id}/collaborators/{username}": {
    parameters: {
      project_id: number;
      username: string;
    };
    request: {
      method: "DELETE";
      url: "/projects/{project_id}/collaborators/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name projects-classic/get-permission-for-user
   * @summary Get project permission for a user
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/projects-classic/collaborators#get-project-permission-for-a-user
   */
  "GET /projects/{project_id}/collaborators/{username}/permission": {
    parameters: {
      project_id: number;
      username: string;
    };
    request: {
      method: "GET";
      url: "/projects/{project_id}/collaborators/{username}/permission";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectCollaboratorPermissionSchema;
    };
  };

  /**
   * @name projects-classic/list-columns
   * @summary List project columns
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/projects-classic/columns#list-project-columns
   */
  "GET /projects/{project_id}/columns": {
    parameters: {
      project_id: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/projects/{project_id}/columns";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectColumnSchema[];
    };
  };

  /**
   * @name projects-classic/create-column
   * @summary Create a project column
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/projects-classic/columns#create-a-project-column
   */
  "POST /projects/{project_id}/columns": {
    parameters: {
      project_id: number;
    } & Endpoints["POST /projects/{project_id}/columns"]["request"]["data"];
    request: {
      method: "POST";
      url: "/projects/{project_id}/columns";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Name of the project column
         * @example Remaining tasks
         */
        name: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name rate-limit/get
   * @summary Get rate limit status for the authenticated user
   * @description > [!NOTE]
   * > Accessing this endpoint does not count against your REST API rate limit.
   *
   * Some categories of endpoints have custom rate limits that are separate from the rate limit governing the other REST API endpoints. For this reason, the API response categorizes your rate limit. Under `resources`, you'll see objects relating to different categories:
   * * The `core` object provides your rate limit status for all non-search-related resources in the REST API.
   * * The `search` object provides your rate limit status for the REST API for searching (excluding code searches). For more information, see "[Search](https://docs.github.com/rest/search/search)."
   * * The `code_search` object provides your rate limit status for the REST API for searching code. For more information, see "[Search code](https://docs.github.com/rest/search/search#search-code)."
   * * The `graphql` object provides your rate limit status for the GraphQL API. For more information, see "[Resource limitations](https://docs.github.com/graphql/overview/resource-limitations#rate-limit)."
   * * The `integration_manifest` object provides your rate limit status for the `POST /app-manifests/{code}/conversions` operation. For more information, see "[Creating a GitHub App from a manifest](https://docs.github.com/apps/creating-github-apps/setting-up-a-github-app/creating-a-github-app-from-a-manifest#3-you-exchange-the-temporary-code-to-retrieve-the-app-configuration)."
   * * The `dependency_snapshots` object provides your rate limit status for submitting snapshots to the dependency graph. For more information, see "[Dependency graph](https://docs.github.com/rest/dependency-graph)."
   * * The `dependency_sbom` object provides your rate limit status for requesting SBOMs from the dependency graph. For more information, see "[Dependency graph](https://docs.github.com/rest/dependency-graph)."
   * * The `code_scanning_upload` object provides your rate limit status for uploading SARIF results to code scanning. For more information, see "[Uploading a SARIF file to GitHub](https://docs.github.com/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github)."
   * * The `actions_runner_registration` object provides your rate limit status for registering self-hosted runners in GitHub Actions. For more information, see "[Self-hosted runners](https://docs.github.com/rest/actions/self-hosted-runners)."
   * * The `source_import` object is no longer in use for any API endpoints, and it will be removed in the next API version. For more information about API versions, see "[API Versions](https://docs.github.com/rest/about-the-rest-api/api-versions)."
   *
   * > [!NOTE]
   * > The `rate` object is closing down. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
   * @see https://docs.github.com/rest/rate-limit/rate-limit#get-rate-limit-status-for-the-authenticated-user
   */
  "GET /rate_limit": {
    parameters: {};
    request: {
      method: "GET";
      url: "/rate_limit";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RateLimitOverviewSchema;
    };
  };

  /**
   * @name repos/get
   * @summary Get a repository
   * @description The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
   *
   * > [!NOTE]
   * > - In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
   * > - To view merge-related settings, you must have the `contents:read` and `contents:write` permissions.
   * @see https://docs.github.com/rest/repos/repos#get-a-repository
   */
  "GET /repos/{owner}/{repo}": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: FullRepositorySchema;
    };
  };

  /**
   * @name repos/update
   * @summary Update a repository
   * @description **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/repos/repos#replace-all-repository-topics) endpoint.
   * @see https://docs.github.com/rest/repos/repos#update-a-repository
   */
  "PATCH /repos/{owner}/{repo}": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["PATCH /repos/{owner}/{repo}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the repository.
         */
        name?: string;

        /**
         * @description A short description of the repository.
         */
        description?: string;

        /**
         * @description A URL with more information about the repository.
         */
        homepage?: string;

        /**
         * @description Either `true` to make the repository private or `false` to make it public. Default: `false`.
         * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
         * @default false
         */
        private?: boolean;

        /**
         * @description The visibility of the repository.
         */
        visibility?: "public" | "private";

        /**
         * @description Specify which security and analysis features to enable or disable for the repository.
         *
         * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
         *
         * For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:
         * `{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.
         *
         * You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
         */
        security_and_analysis?: {
          /**
           * @description Use the `status` property to enable or disable GitHub Advanced Security for this repository.
           * For more information, see "[About GitHub Advanced
           * Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)."
           *
           * For standalone Code Scanning or Secret Protection products, this parameter cannot be used.
           */
          advanced_security?: {
            /**
             * @description Can be `enabled` or `disabled`.
             */
            status?: string;
          };

          /**
           * @description Use the `status` property to enable or disable GitHub Code Security for this repository.
           */
          code_security?: {
            /**
             * @description Can be `enabled` or `disabled`.
             */
            status?: string;
          };

          /**
           * @description Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)."
           */
          secret_scanning?: {
            /**
             * @description Can be `enabled` or `disabled`.
             */
            status?: string;
          };

          /**
           * @description Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)."
           */
          secret_scanning_push_protection?: {
            /**
             * @description Can be `enabled` or `disabled`.
             */
            status?: string;
          };

          /**
           * @description Use the `status` property to enable or disable secret scanning AI detection for this repository. For more information, see "[Responsible detection of generic secrets with AI](https://docs.github.com/code-security/secret-scanning/using-advanced-secret-scanning-and-push-protection-features/generic-secret-detection/responsible-ai-generic-secrets)."
           */
          secret_scanning_ai_detection?: {
            /**
             * @description Can be `enabled` or `disabled`.
             */
            status?: string;
          };

          /**
           * @description Use the `status` property to enable or disable secret scanning non-provider patterns for this repository. For more information, see "[Supported secret scanning patterns](/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)."
           */
          secret_scanning_non_provider_patterns?: {
            /**
             * @description Can be `enabled` or `disabled`.
             */
            status?: string;
          };
        } | null;

        /**
         * @description Either `true` to enable issues for this repository or `false` to disable them.
         * @default true
         */
        has_issues?: boolean;

        /**
         * @description Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
         * @default true
         */
        has_projects?: boolean;

        /**
         * @description Either `true` to enable the wiki for this repository or `false` to disable it.
         * @default true
         */
        has_wiki?: boolean;

        /**
         * @description Either `true` to make this repo available as a template repository or `false` to prevent it.
         * @default false
         */
        is_template?: boolean;

        /**
         * @description Updates the default branch for this repository.
         */
        default_branch?: string;

        /**
         * @description Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
         * @default true
         */
        allow_squash_merge?: boolean;

        /**
         * @description Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
         * @default true
         */
        allow_merge_commit?: boolean;

        /**
         * @description Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
         * @default true
         */
        allow_rebase_merge?: boolean;

        /**
         * @description Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
         * @default false
         */
        allow_auto_merge?: boolean;

        /**
         * @description Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
         * @default false
         */
        delete_branch_on_merge?: boolean;

        /**
         * @description Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
         * @default false
         */
        allow_update_branch?: boolean;

        /**
         * @description Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property is closing down. Please use `squash_merge_commit_title` instead.
         * @deprecated
         * @default false
         */
        use_squash_pr_title_as_default?: boolean;

        /**
         * @description Required when using `squash_merge_commit_message`.
         *
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";

        /**
         * @description The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";

        /**
         * @description Required when using `merge_commit_message`.
         *
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";

        /**
         * @description The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";

        /**
         * @description Whether to archive this repository. `false` will unarchive a previously archived repository.
         * @default false
         */
        archived?: boolean;

        /**
         * @description Either `true` to allow private forks, or `false` to prevent private forks.
         * @default false
         */
        allow_forking?: boolean;

        /**
         * @description Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.
         * @default false
         */
        web_commit_signoff_required?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: FullRepositorySchema;
    };
  };

  /**
   * @name repos/delete
   * @summary Delete a repository
   * @description Deleting a repository requires admin access.
   *
   * If an organization owner has configured the organization to prevent members from deleting organization-owned
   * repositories, you will get a `403 Forbidden` response.
   *
   * OAuth app tokens and personal access tokens (classic) need the `delete_repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/repos/repos#delete-a-repository
   */
  "DELETE /repos/{owner}/{repo}": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/list-artifacts-for-repo
   * @summary List artifacts for a repository
   * @description Lists all artifacts for a repository.
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
   * @see https://docs.github.com/rest/actions/artifacts#list-artifacts-for-a-repository
   */
  "GET /repos/{owner}/{repo}/actions/artifacts": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
      name?: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/artifacts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        artifacts: ArtifactSchema[];
      };
    };
  };

  /**
   * @name actions/get-artifact
   * @summary Get an artifact
   * @description Gets a specific artifact for a workflow run.
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/artifacts#get-an-artifact
   */
  "GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}": {
    parameters: {
      owner: string;
      repo: string;
      artifact_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ArtifactSchema;
    };
  };

  /**
   * @name actions/delete-artifact
   * @summary Delete an artifact
   * @description Deletes an artifact for a workflow run.
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/artifacts#delete-an-artifact
   */
  "DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}": {
    parameters: {
      owner: string;
      repo: string;
      artifact_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/download-artifact
   * @summary Download an artifact
   * @description Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
   * the response header to find the URL for the download. The `:archive_format` must be `zip`.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/artifacts#download-an-artifact
   */
  "GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}": {
    parameters: {
      owner: string;
      repo: string;
      artifact_id: number;
      archive_format: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: any;
  };

  /**
   * @name actions/get-actions-cache-usage
   * @summary Get GitHub Actions cache usage for a repository
   * @description Gets GitHub Actions cache usage for a repository.
   * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/cache#get-github-actions-cache-usage-for-a-repository
   */
  "GET /repos/{owner}/{repo}/actions/cache/usage": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/cache/usage";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsCacheUsageByRepositorySchema;
    };
  };

  /**
   * @name actions/get-actions-cache-list
   * @summary List GitHub Actions caches for a repository
   * @description Lists the GitHub Actions caches for a repository.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/cache#list-github-actions-caches-for-a-repository
   */
  "GET /repos/{owner}/{repo}/actions/caches": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
      ref?: string;
      key?: string;
      sort?: "created_at" | "last_accessed_at" | "size_in_bytes";
      direction?: "asc" | "desc";
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/caches";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsCacheListSchema;
    };
  };

  /**
   * @name actions/delete-actions-cache-by-key
   * @summary Delete GitHub Actions caches for a repository (using a cache key)
   * @description Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/cache#delete-github-actions-caches-for-a-repository-using-a-cache-key
   */
  "DELETE /repos/{owner}/{repo}/actions/caches": {
    parameters: {
      owner: string;
      repo: string;
      key: string;
      ref?: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/actions/caches";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsCacheListSchema;
    };
  };

  /**
   * @name actions/delete-actions-cache-by-id
   * @summary Delete a GitHub Actions cache for a repository (using a cache ID)
   * @description Deletes a GitHub Actions cache for a repository, using a cache ID.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/cache#delete-a-github-actions-cache-for-a-repository-using-a-cache-id
   */
  "DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}": {
    parameters: {
      owner: string;
      repo: string;
      cache_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/actions/caches/{cache_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/get-job-for-workflow-run
   * @summary Get a job for a workflow run
   * @description Gets a specific job in a workflow run.
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/workflow-jobs#get-a-job-for-a-workflow-run
   */
  "GET /repos/{owner}/{repo}/actions/jobs/{job_id}": {
    parameters: {
      owner: string;
      repo: string;
      job_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/jobs/{job_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: JobSchema;
    };
  };

  /**
   * @name actions/download-job-logs-for-workflow-run
   * @summary Download job logs for a workflow run
   * @description Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
   * for `Location:` in the response header to find the URL for the download.
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/workflow-jobs#download-job-logs-for-a-workflow-run
   */
  "GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs": {
    parameters: {
      owner: string;
      repo: string;
      job_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: any;
  };

  /**
   * @name actions/re-run-job-for-workflow-run
   * @summary Re-run a job from a workflow run
   * @description Re-run a job and its dependent jobs in a workflow run.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/workflow-runs#re-run-a-job-from-a-workflow-run
   */
  "POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun": {
    parameters: {
      owner: string;
      repo: string;
      job_id: number;
    } & Endpoints["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Whether to enable debug logging for the re-run.
         * @default false
         */
        enable_debug_logging?: boolean;
      } | null;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name actions/get-custom-oidc-sub-claim-for-repo
   * @summary Get the customization template for an OIDC subject claim for a repository
   * @description Gets the customization template for an OpenID Connect (OIDC) subject claim.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-a-repository
   */
  "GET /repos/{owner}/{repo}/actions/oidc/customization/sub": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/oidc/customization/sub";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OidcCustomSubRepoSchema;
    };
  };

  /**
   * @name actions/set-custom-oidc-sub-claim-for-repo
   * @summary Set the customization template for an OIDC subject claim for a repository
   * @description Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-a-repository
   */
  "PUT /repos/{owner}/{repo}/actions/oidc/customization/sub": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/actions/oidc/customization/sub";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.
         */
        use_default: boolean;

        /**
         * @description Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
         */
        include_claim_keys?: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name actions/list-repo-organization-secrets
   * @summary List repository organization secrets
   * @description Lists all organization secrets shared with a repository without revealing their encrypted
   * values.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/secrets#list-repository-organization-secrets
   */
  "GET /repos/{owner}/{repo}/actions/organization-secrets": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/organization-secrets";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        secrets: ActionsSecretSchema[];
      };
    };
  };

  /**
   * @name actions/list-repo-organization-variables
   * @summary List repository organization variables
   * @description Lists all organization variables shared with a repository.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read variables.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/variables#list-repository-organization-variables
   */
  "GET /repos/{owner}/{repo}/actions/organization-variables": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/organization-variables";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        variables: ActionsVariableSchema[];
      };
    };
  };

  /**
   * @name actions/get-github-actions-permissions-repository
   * @summary Get GitHub Actions permissions for a repository
   * @description Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#get-github-actions-permissions-for-a-repository
   */
  "GET /repos/{owner}/{repo}/actions/permissions": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/permissions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsRepositoryPermissionsSchema;
    };
  };

  /**
   * @name actions/set-github-actions-permissions-repository
   * @summary Set GitHub Actions permissions for a repository
   * @description Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#set-github-actions-permissions-for-a-repository
   */
  "PUT /repos/{owner}/{repo}/actions/permissions": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/actions/permissions"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/actions/permissions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        enabled: ActionsEnabledSchema;
        allowed_actions?: AllowedActionsSchema;
        sha_pinning_required?: ShaPinningRequiredSchema;
      };
    };
    response: never;
  };

  /**
   * @name actions/get-workflow-access-to-repository
   * @summary Get the level of access for workflows outside of the repository
   * @description Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
   * This endpoint only applies to private repositories.
   * For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#get-the-level-of-access-for-workflows-outside-of-the-repository
   */
  "GET /repos/{owner}/{repo}/actions/permissions/access": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/permissions/access";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsWorkflowAccessToRepositorySchema;
    };
  };

  /**
   * @name actions/set-workflow-access-to-repository
   * @summary Set the level of access for workflows outside of the repository
   * @description Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
   * This endpoint only applies to private repositories.
   * For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)".
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#set-the-level-of-access-for-workflows-outside-of-the-repository
   */
  "PUT /repos/{owner}/{repo}/actions/permissions/access": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/actions/permissions/access"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/actions/permissions/access";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: never;
  };

  /**
   * @name actions/get-artifact-and-log-retention-settings-repository
   * @summary Get artifact and log retention settings for a repository
   * @description Gets artifact and log retention settings for a repository.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#get-artifact-and-log-retention-settings-for-a-repository
   */
  "GET /repos/{owner}/{repo}/actions/permissions/artifact-and-log-retention": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/permissions/artifact-and-log-retention";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsArtifactAndLogRetentionResponseSchema;
    };
  };

  /**
   * @name actions/set-artifact-and-log-retention-settings-repository
   * @summary Set artifact and log retention settings for a repository
   * @description Sets artifact and log retention settings for a repository.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#set-artifact-and-log-retention-settings-for-a-repository
   */
  "PUT /repos/{owner}/{repo}/actions/permissions/artifact-and-log-retention": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/actions/permissions/artifact-and-log-retention"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/actions/permissions/artifact-and-log-retention";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: never;
  };

  /**
   * @name actions/get-fork-pr-contributor-approval-permissions-repository
   * @summary Get fork PR contributor approval permissions for a repository
   * @description Gets the fork PR contributor approval policy for a repository.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#get-fork-pr-contributor-approval-permissions-for-a-repository
   */
  "GET /repos/{owner}/{repo}/actions/permissions/fork-pr-contributor-approval": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/permissions/fork-pr-contributor-approval";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsForkPrContributorApprovalSchema;
    };
  };

  /**
   * @name actions/set-fork-pr-contributor-approval-permissions-repository
   * @summary Set fork PR contributor approval permissions for a repository
   * @description Sets the fork PR contributor approval policy for a repository.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#set-fork-pr-contributor-approval-permissions-for-a-repository
   */
  "PUT /repos/{owner}/{repo}/actions/permissions/fork-pr-contributor-approval": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/actions/permissions/fork-pr-contributor-approval"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/actions/permissions/fork-pr-contributor-approval";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: never;
  };

  /**
   * @name actions/get-private-repo-fork-pr-workflows-settings-repository
   * @summary Get private repo fork PR workflow settings for a repository
   * @description Gets the settings for whether workflows from fork pull requests can run on a private repository.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#get-private-repo-fork-pr-workflow-settings-for-a-repository
   */
  "GET /repos/{owner}/{repo}/actions/permissions/fork-pr-workflows-private-repos": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/permissions/fork-pr-workflows-private-repos";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsForkPrWorkflowsPrivateReposSchema;
    };
  };

  /**
   * @name actions/set-private-repo-fork-pr-workflows-settings-repository
   * @summary Set private repo fork PR workflow settings for a repository
   * @description Sets the settings for whether workflows from fork pull requests can run on a private repository.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#set-private-repo-fork-pr-workflow-settings-for-a-repository
   */
  "PUT /repos/{owner}/{repo}/actions/permissions/fork-pr-workflows-private-repos": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/actions/permissions/fork-pr-workflows-private-repos"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/actions/permissions/fork-pr-workflows-private-repos";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: never;
  };

  /**
   * @name actions/get-allowed-actions-repository
   * @summary Get allowed actions and reusable workflows for a repository
   * @description Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#get-allowed-actions-and-reusable-workflows-for-a-repository
   */
  "GET /repos/{owner}/{repo}/actions/permissions/selected-actions": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/permissions/selected-actions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SelectedActionsSchema;
    };
  };

  /**
   * @name actions/set-allowed-actions-repository
   * @summary Set allowed actions and reusable workflows for a repository
   * @description Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#set-allowed-actions-and-reusable-workflows-for-a-repository
   */
  "PUT /repos/{owner}/{repo}/actions/permissions/selected-actions": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/actions/permissions/selected-actions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: never;
  };

  /**
   * @name actions/get-github-actions-default-workflow-permissions-repository
   * @summary Get default workflow permissions for a repository
   * @description Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,
   * as well as if GitHub Actions can submit approving pull request reviews.
   * For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#get-default-workflow-permissions-for-a-repository
   */
  "GET /repos/{owner}/{repo}/actions/permissions/workflow": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/permissions/workflow";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsGetDefaultWorkflowPermissionsSchema;
    };
  };

  /**
   * @name actions/set-github-actions-default-workflow-permissions-repository
   * @summary Set default workflow permissions for a repository
   * @description Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions
   * can submit approving pull request reviews.
   * For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/permissions#set-default-workflow-permissions-for-a-repository
   */
  "PUT /repos/{owner}/{repo}/actions/permissions/workflow": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/actions/permissions/workflow"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/actions/permissions/workflow";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: never;
  };

  /**
   * @name actions/list-self-hosted-runners-for-repo
   * @summary List self-hosted runners for a repository
   * @description Lists all self-hosted runners configured in a repository.
   *
   * Authenticated users must have admin access to the repository to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#list-self-hosted-runners-for-a-repository
   */
  "GET /repos/{owner}/{repo}/actions/runners": {
    parameters: {
      /**
       * @description The name of a self-hosted runner.
       */
      name?: string;
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/runners";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        runners: RunnerSchema[];
      };
    };
  };

  /**
   * @name actions/list-runner-applications-for-repo
   * @summary List runner applications for a repository
   * @description Lists binaries for the runner application that you can download and run.
   *
   * Authenticated users must have admin access to the repository to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#list-runner-applications-for-a-repository
   */
  "GET /repos/{owner}/{repo}/actions/runners/downloads": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/runners/downloads";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RunnerApplicationSchema[];
    };
  };

  /**
   * @name actions/generate-runner-jitconfig-for-repo
   * @summary Create configuration for a just-in-time runner for a repository
   * @description Generates a configuration that can be passed to the runner application at startup.
   *
   * The authenticated user must have admin access to the repository.
   *
   * OAuth tokens and personal access tokens (classic) need the`repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#create-configuration-for-a-just-in-time-runner-for-a-repository
   */
  "POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/actions/runners/generate-jitconfig";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the new runner.
         */
        name: string;

        /**
         * @description The ID of the runner group to register the runner to.
         */
        runner_group_id: number;

        /**
         * @description The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.
         */
        labels: string[];

        /**
         * @description The working directory to be used for job execution, relative to the runner install directory.
         * @default "_work"
         */
        work_folder?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name actions/create-registration-token-for-repo
   * @summary Create a registration token for a repository
   * @description Returns a token that you can pass to the `config` script. The token expires after one hour.
   *
   * For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:
   *
   * ```
   * ./config.sh --url https://github.com/octo-org --token TOKEN
   * ```
   *
   * Authenticated users must have admin access to the repository to use this endpoint.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#create-a-registration-token-for-a-repository
   */
  "POST /repos/{owner}/{repo}/actions/runners/registration-token": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/actions/runners/registration-token";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name actions/create-remove-token-for-repo
   * @summary Create a remove token for a repository
   * @description Returns a token that you can pass to the `config` script to remove a self-hosted runner from an repository. The token expires after one hour.
   *
   * For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:
   *
   * ```
   * ./config.sh remove --token TOKEN
   * ```
   *
   * Authenticated users must have admin access to the repository to use this endpoint.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#create-a-remove-token-for-a-repository
   */
  "POST /repos/{owner}/{repo}/actions/runners/remove-token": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/actions/runners/remove-token";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name actions/get-self-hosted-runner-for-repo
   * @summary Get a self-hosted runner for a repository
   * @description Gets a specific self-hosted runner configured in a repository.
   *
   * Authenticated users must have admin access to the repository to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#get-a-self-hosted-runner-for-a-repository
   */
  "GET /repos/{owner}/{repo}/actions/runners/{runner_id}": {
    parameters: {
      owner: string;
      repo: string;
      runner_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/runners/{runner_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RunnerSchema;
    };
  };

  /**
   * @name actions/delete-self-hosted-runner-from-repo
   * @summary Delete a self-hosted runner from a repository
   * @description Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
   *
   * Authenticated users must have admin access to the repository to use this endpoint.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#delete-a-self-hosted-runner-from-a-repository
   */
  "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}": {
    parameters: {
      owner: string;
      repo: string;
      runner_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/actions/runners/{runner_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/list-labels-for-self-hosted-runner-for-repo
   * @summary List labels for a self-hosted runner for a repository
   * @description Lists all labels for a self-hosted runner configured in a repository.
   *
   * Authenticated users must have admin access to the repository to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#list-labels-for-a-self-hosted-runner-for-a-repository
   */
  "GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels": {
    parameters: {
      owner: string;
      repo: string;
      runner_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsRunnerLabelsResponse;
    };
  };

  /**
   * @name actions/add-custom-labels-to-self-hosted-runner-for-repo
   * @summary Add custom labels to a self-hosted runner for a repository
   * @description Adds custom labels to a self-hosted runner configured in a repository.
   *
   * Authenticated users must have admin access to the organization to use this endpoint.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#add-custom-labels-to-a-self-hosted-runner-for-a-repository
   */
  "POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels": {
    parameters: {
      owner: string;
      repo: string;
      runner_id: number;
    } & Endpoints["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The names of the custom labels to add to the runner.
         */
        labels: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsRunnerLabelsResponse;
    };
  };

  /**
   * @name actions/set-custom-labels-for-self-hosted-runner-for-repo
   * @summary Set custom labels for a self-hosted runner for a repository
   * @description Remove all previous custom labels and set the new custom labels for a specific
   * self-hosted runner configured in a repository.
   *
   * Authenticated users must have admin access to the repository to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#set-custom-labels-for-a-self-hosted-runner-for-a-repository
   */
  "PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels": {
    parameters: {
      owner: string;
      repo: string;
      runner_id: number;
    } & Endpoints["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
         */
        labels: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsRunnerLabelsResponse;
    };
  };

  /**
   * @name actions/remove-all-custom-labels-from-self-hosted-runner-for-repo
   * @summary Remove all custom labels from a self-hosted runner for a repository
   * @description Remove all custom labels from a self-hosted runner configured in a
   * repository. Returns the remaining read-only labels from the runner.
   *
   * Authenticated users must have admin access to the repository to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#remove-all-custom-labels-from-a-self-hosted-runner-for-a-repository
   */
  "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels": {
    parameters: {
      owner: string;
      repo: string;
      runner_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsRunnerLabelsReadonlyResponse;
    };
  };

  /**
   * @name actions/remove-custom-label-from-self-hosted-runner-for-repo
   * @summary Remove a custom label from a self-hosted runner for a repository
   * @description Remove a custom label from a self-hosted runner configured
   * in a repository. Returns the remaining labels from the runner.
   *
   * This endpoint returns a `404 Not Found` status if the custom label is not
   * present on the runner.
   *
   * Authenticated users must have admin access to the repository to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/self-hosted-runners#remove-a-custom-label-from-a-self-hosted-runner-for-a-repository
   */
  "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}": {
    parameters: {
      owner: string;
      repo: string;
      runner_id: number;
      name: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsRunnerLabelsResponse;
    };
  };

  /**
   * @name actions/list-workflow-runs-for-repo
   * @summary List workflow runs for a repository
   * @description Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
   *
   * This endpoint will return up to 1,000 results for each search when using the following parameters: `actor`, `branch`, `check_suite_id`, `created`, `event`, `head_sha`, `status`.
   * @see https://docs.github.com/rest/actions/workflow-runs#list-workflow-runs-for-a-repository
   */
  "GET /repos/{owner}/{repo}/actions/runs": {
    parameters: {
      owner: string;
      repo: string;
      actor?: string;
      branch?: string;
      event?: string;
      status?:
        | "completed"
        | "action_required"
        | "cancelled"
        | "failure"
        | "neutral"
        | "skipped"
        | "stale"
        | "success"
        | "timed_out"
        | "in_progress"
        | "queued"
        | "requested"
        | "waiting"
        | "pending";
      per_page?: number;
      page?: number;
      created?: string;
      exclude_pull_requests?: boolean;
      check_suite_id?: number;
      head_sha?: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/runs";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        workflow_runs: WorkflowRunSchema[];
      };
    };
  };

  /**
   * @name actions/get-workflow-run
   * @summary Get a workflow run
   * @description Gets a specific workflow run.
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
   * @see https://docs.github.com/rest/actions/workflow-runs#get-a-workflow-run
   */
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}": {
    parameters: {
      owner: string;
      repo: string;
      run_id: number;
      exclude_pull_requests?: boolean;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/runs/{run_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: WorkflowRunSchema;
    };
  };

  /**
   * @name actions/delete-workflow-run
   * @summary Delete a workflow run
   * @description Deletes a specific workflow run.
   *
   * Anyone with write access to the repository can use this endpoint.
   *
   * If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/workflow-runs#delete-a-workflow-run
   */
  "DELETE /repos/{owner}/{repo}/actions/runs/{run_id}": {
    parameters: {
      owner: string;
      repo: string;
      run_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/actions/runs/{run_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/get-reviews-for-run
   * @summary Get the review history for a workflow run
   * @description Anyone with read access to the repository can use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
   * @see https://docs.github.com/rest/actions/workflow-runs#get-the-review-history-for-a-workflow-run
   */
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals": {
    parameters: {
      owner: string;
      repo: string;
      run_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/runs/{run_id}/approvals";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: EnvironmentApprovalsSchema[];
    };
  };

  /**
   * @name actions/approve-workflow-run
   * @summary Approve a workflow run for a fork pull request
   * @description Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see ["Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks)."
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/workflow-runs#approve-a-workflow-run-for-a-fork-pull-request
   */
  "POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve": {
    parameters: {
      owner: string;
      repo: string;
      run_id: number;
    };
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/actions/runs/{run_id}/approve";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name actions/list-workflow-run-artifacts
   * @summary List workflow run artifacts
   * @description Lists artifacts for a workflow run.
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
   * @see https://docs.github.com/rest/actions/artifacts#list-workflow-run-artifacts
   */
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts": {
    parameters: {
      owner: string;
      repo: string;
      run_id: number;
      per_page?: number;
      page?: number;
      name?: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        artifacts: ArtifactSchema[];
      };
    };
  };

  /**
   * @name actions/get-workflow-run-attempt
   * @summary Get a workflow run attempt
   * @description Gets a specific workflow run attempt.
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
   * @see https://docs.github.com/rest/actions/workflow-runs#get-a-workflow-run-attempt
   */
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}": {
    parameters: {
      owner: string;
      repo: string;
      run_id: number;
      attempt_number: number;
      exclude_pull_requests?: boolean;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: WorkflowRunSchema;
    };
  };

  /**
   * @name actions/list-jobs-for-workflow-run-attempt
   * @summary List jobs for a workflow run attempt
   * @description Lists jobs for a specific workflow run attempt. You can use parameters to narrow the list of results. For more information
   * about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint  with a private repository.
   * @see https://docs.github.com/rest/actions/workflow-jobs#list-jobs-for-a-workflow-run-attempt
   */
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs": {
    parameters: {
      owner: string;
      repo: string;
      run_id: number;
      attempt_number: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        jobs: JobSchema[];
      };
    };
  };

  /**
   * @name actions/download-workflow-run-attempt-logs
   * @summary Download workflow run attempt logs
   * @description Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
   * 1 minute. Look for `Location:` in the response header to find the URL for the download.
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/workflow-runs#download-workflow-run-attempt-logs
   */
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs": {
    parameters: {
      owner: string;
      repo: string;
      run_id: number;
      attempt_number: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: any;
  };

  /**
   * @name actions/cancel-workflow-run
   * @summary Cancel a workflow run
   * @description Cancels a workflow run using its `id`.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/workflow-runs#cancel-a-workflow-run
   */
  "POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel": {
    parameters: {
      owner: string;
      repo: string;
      run_id: number;
    };
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: EmptyObjectSchema;
    };
  };

  /**
   * @name actions/review-custom-gates-for-run
   * @summary Review custom deployment protection rules for a workflow run
   * @description Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
   *
   * > [!NOTE]
   * > GitHub Apps can only review their own custom deployment protection rules. To approve or reject pending deployments that are waiting for review from a specific person or team, see [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
   * @see https://docs.github.com/rest/actions/workflow-runs#review-custom-deployment-protection-rules-for-a-workflow-run
   */
  "POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule": {
    parameters: {
      owner: string;
      repo: string;
      run_id: number;
    } & Endpoints["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data:
        | ReviewCustomGatesCommentRequiredSchema
        | ReviewCustomGatesStateRequiredSchema;
    };
    response: never;
  };

  /**
   * @name actions/force-cancel-workflow-run
   * @summary Force cancel a workflow run
   * @description Cancels a workflow run and bypasses conditions that would otherwise cause a workflow execution to continue, such as an `always()` condition on a job.
   * You should only use this endpoint to cancel a workflow run when the workflow run is not responding to [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel`](/rest/actions/workflow-runs#cancel-a-workflow-run).
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/workflow-runs#force-cancel-a-workflow-run
   */
  "POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel": {
    parameters: {
      owner: string;
      repo: string;
      run_id: number;
    };
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: EmptyObjectSchema;
    };
  };

  /**
   * @name actions/list-jobs-for-workflow-run
   * @summary List jobs for a workflow run
   * @description Lists jobs for a workflow run. You can use parameters to narrow the list of results. For more information
   * about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
   * @see https://docs.github.com/rest/actions/workflow-jobs#list-jobs-for-a-workflow-run
   */
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs": {
    parameters: {
      owner: string;
      repo: string;
      run_id: number;

      /**
       * @description Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run.
       */
      filter?: "latest" | "all";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        jobs: JobSchema[];
      };
    };
  };

  /**
   * @name actions/download-workflow-run-logs
   * @summary Download workflow run logs
   * @description Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
   * `Location:` in the response header to find the URL for the download.
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/workflow-runs#download-workflow-run-logs
   */
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs": {
    parameters: {
      owner: string;
      repo: string;
      run_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/runs/{run_id}/logs";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: any;
  };

  /**
   * @name actions/delete-workflow-run-logs
   * @summary Delete workflow run logs
   * @description Deletes all logs for a workflow run.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/workflow-runs#delete-workflow-run-logs
   */
  "DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs": {
    parameters: {
      owner: string;
      repo: string;
      run_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/actions/runs/{run_id}/logs";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/get-pending-deployments-for-run
   * @summary Get pending deployments for a workflow run
   * @description Get all deployment environments for a workflow run that are waiting for protection rules to pass.
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/workflow-runs#get-pending-deployments-for-a-workflow-run
   */
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments": {
    parameters: {
      owner: string;
      repo: string;
      run_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PendingDeploymentSchema[];
    };
  };

  /**
   * @name actions/review-pending-deployments-for-run
   * @summary Review pending deployments for a workflow run
   * @description Approve or reject pending deployments that are waiting on approval by a required reviewer.
   *
   * Required reviewers with read access to the repository contents and deployments can use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run
   */
  "POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments": {
    parameters: {
      owner: string;
      repo: string;
      run_id: number;
    } & Endpoints["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
 * @description The list of environment ids to approve or reject
 * @example [
  161171787,
  161171795
]
  */
        environment_ids: number[];

        /**
         * @description Whether to approve or reject deployment to the specified environments.
         * @example approved
         */
        state: "approved" | "rejected";

        /**
         * @description A comment to accompany the deployment review
         * @example Ship it!
         */
        comment: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DeploymentSchema[];
    };
  };

  /**
   * @name actions/re-run-workflow
   * @summary Re-run a workflow
   * @description Re-runs your workflow run using its `id`.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/workflow-runs#re-run-a-workflow
   */
  "POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun": {
    parameters: {
      owner: string;
      repo: string;
      run_id: number;
    } & Endpoints["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Whether to enable debug logging for the re-run.
         * @default false
         */
        enable_debug_logging?: boolean;
      } | null;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name actions/re-run-workflow-failed-jobs
   * @summary Re-run failed jobs from a workflow run
   * @description Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/workflow-runs#re-run-failed-jobs-from-a-workflow-run
   */
  "POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs": {
    parameters: {
      owner: string;
      repo: string;
      run_id: number;
    } & Endpoints["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Whether to enable debug logging for the re-run.
         * @default false
         */
        enable_debug_logging?: boolean;
      } | null;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name actions/get-workflow-run-usage
   * @summary Get workflow run usage
   * @description > [!WARNING]
   * > This endpoint is in the process of closing down. Refer to "[Actions Get workflow usage and Get workflow run usage endpoints closing down](https://github.blog/changelog/2025-02-02-actions-get-workflow-usage-and-get-workflow-run-usage-endpoints-closing-down/)" for more information.
   *
   * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
   * @see https://docs.github.com/rest/actions/workflow-runs#get-workflow-run-usage
   */
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing": {
    parameters: {
      owner: string;
      repo: string;
      run_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/runs/{run_id}/timing";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: WorkflowRunUsageSchema;
    };
  };

  /**
   * @name actions/list-repo-secrets
   * @summary List repository secrets
   * @description Lists all secrets available in a repository without revealing their encrypted
   * values.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/secrets#list-repository-secrets
   */
  "GET /repos/{owner}/{repo}/actions/secrets": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/secrets";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        secrets: ActionsSecretSchema[];
      };
    };
  };

  /**
   * @name actions/get-repo-public-key
   * @summary Get a repository public key
   * @description Gets your public key, which you need to encrypt secrets. You need to
   * encrypt a secret before you can create or update secrets.
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/secrets#get-a-repository-public-key
   */
  "GET /repos/{owner}/{repo}/actions/secrets/public-key": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/secrets/public-key";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsPublicKeySchema;
    };
  };

  /**
   * @name actions/get-repo-secret
   * @summary Get a repository secret
   * @description Gets a single repository secret without revealing its encrypted value.
   *
   * The authenticated user must have collaborator access to the repository to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/secrets#get-a-repository-secret
   */
  "GET /repos/{owner}/{repo}/actions/secrets/{secret_name}": {
    parameters: {
      owner: string;
      repo: string;
      secret_name: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsSecretSchema;
    };
  };

  /**
   * @name actions/create-or-update-repo-secret
   * @summary Create or update a repository secret
   * @description Creates or updates a repository secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/secrets#create-or-update-a-repository-secret
   */
  "PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}": {
    parameters: {
      owner: string;
      repo: string;
      secret_name: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/actions/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/actions/secrets#get-a-repository-public-key) endpoint.
         */
        encrypted_value: string;

        /**
         * @description ID of the key you used to encrypt the secret.
         */
        key_id: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name actions/delete-repo-secret
   * @summary Delete a repository secret
   * @description Deletes a secret in a repository using the secret name.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/secrets#delete-a-repository-secret
   */
  "DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}": {
    parameters: {
      owner: string;
      repo: string;
      secret_name: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/actions/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/list-repo-variables
   * @summary List repository variables
   * @description Lists all repository variables.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read variables.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/variables#list-repository-variables
   */
  "GET /repos/{owner}/{repo}/actions/variables": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/variables";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        variables: ActionsVariableSchema[];
      };
    };
  };

  /**
   * @name actions/create-repo-variable
   * @summary Create a repository variable
   * @description Creates a repository variable that you can reference in a GitHub Actions workflow.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read variables.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/variables#create-a-repository-variable
   */
  "POST /repos/{owner}/{repo}/actions/variables": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/actions/variables"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/actions/variables";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the variable.
         */
        name: string;

        /**
         * @description The value of the variable.
         */
        value: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name actions/get-repo-variable
   * @summary Get a repository variable
   * @description Gets a specific variable in a repository.
   *
   * The authenticated user must have collaborator access to the repository to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/variables#get-a-repository-variable
   */
  "GET /repos/{owner}/{repo}/actions/variables/{name}": {
    parameters: {
      owner: string;
      repo: string;
      name: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/variables/{name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsVariableSchema;
    };
  };

  /**
   * @name actions/update-repo-variable
   * @summary Update a repository variable
   * @description Updates a repository variable that you can reference in a GitHub Actions workflow.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read variables.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/variables#update-a-repository-variable
   */
  "PATCH /repos/{owner}/{repo}/actions/variables/{name}": {
    parameters: {
      owner: string;
      repo: string;
      name: string;
    } & Endpoints["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/actions/variables/{name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the variable.
         */
        name?: string;

        /**
         * @description The value of the variable.
         */
        value?: string;
      };
    };
    response: never;
  };

  /**
   * @name actions/delete-repo-variable
   * @summary Delete a repository variable
   * @description Deletes a repository variable using the variable name.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read variables.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/variables#delete-a-repository-variable
   */
  "DELETE /repos/{owner}/{repo}/actions/variables/{name}": {
    parameters: {
      owner: string;
      repo: string;
      name: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/actions/variables/{name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/list-repo-workflows
   * @summary List repository workflows
   * @description Lists the workflows in a repository.
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
   * @see https://docs.github.com/rest/actions/workflows#list-repository-workflows
   */
  "GET /repos/{owner}/{repo}/actions/workflows": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/workflows";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        workflows: WorkflowSchema[];
      };
    };
  };

  /**
   * @name actions/get-workflow
   * @summary Get a workflow
   * @description Gets a specific workflow. You can replace `workflow_id` with the workflow
   * file name. For example, you could use `main.yaml`.
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
   * @see https://docs.github.com/rest/actions/workflows#get-a-workflow
   */
  "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}": {
    parameters: {
      owner: string;
      repo: string;
      workflow_id: number | string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: WorkflowSchema;
    };
  };

  /**
   * @name actions/disable-workflow
   * @summary Disable a workflow
   * @description Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/workflows#disable-a-workflow
   */
  "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable": {
    parameters: {
      owner: string;
      repo: string;
      workflow_id: number | string;
    };
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/create-workflow-dispatch
   * @summary Create a workflow dispatch event
   * @description You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
   *
   * You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/workflows#create-a-workflow-dispatch-event
   */
  "POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches": {
    parameters: {
      owner: string;
      repo: string;
      workflow_id: number | string;
    } & Endpoints["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The git reference for the workflow. The reference can be a branch or tag name.
         */
        ref: string;

        /**
         * @description Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.
         */
        inputs?: {
          [key: string]: any;
        };
      };
    };
    response: never;
  };

  /**
   * @name actions/enable-workflow
   * @summary Enable a workflow
   * @description Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/workflows#enable-a-workflow
   */
  "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable": {
    parameters: {
      owner: string;
      repo: string;
      workflow_id: number | string;
    };
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/list-workflow-runs
   * @summary List workflow runs for a workflow
   * @description List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
   *
   * Anyone with read access to the repository can use this endpoint
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
   *
   * This endpoint will return up to 1,000 results for each search when using the following parameters: `actor`, `branch`, `check_suite_id`, `created`, `event`, `head_sha`, `status`.
   * @see https://docs.github.com/rest/actions/workflow-runs#list-workflow-runs-for-a-workflow
   */
  "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs": {
    parameters: {
      owner: string;
      repo: string;
      workflow_id: number | string;
      actor?: string;
      branch?: string;
      event?: string;
      status?:
        | "completed"
        | "action_required"
        | "cancelled"
        | "failure"
        | "neutral"
        | "skipped"
        | "stale"
        | "success"
        | "timed_out"
        | "in_progress"
        | "queued"
        | "requested"
        | "waiting"
        | "pending";
      per_page?: number;
      page?: number;
      created?: string;
      exclude_pull_requests?: boolean;
      check_suite_id?: number;
      head_sha?: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        workflow_runs: WorkflowRunSchema[];
      };
    };
  };

  /**
   * @name actions/get-workflow-usage
   * @summary Get workflow usage
   * @description > [!WARNING]
   * > This endpoint is in the process of closing down. Refer to "[Actions Get workflow usage and Get workflow run usage endpoints closing down](https://github.blog/changelog/2025-02-02-actions-get-workflow-usage-and-get-workflow-run-usage-endpoints-closing-down/)" for more information.
   *
   * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
   *
   * You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
   * @see https://docs.github.com/rest/actions/workflows#get-workflow-usage
   */
  "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing": {
    parameters: {
      owner: string;
      repo: string;
      workflow_id: number | string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: WorkflowUsageSchema;
    };
  };

  /**
   * @name repos/list-activities
   * @summary List repository activities
   * @description Lists a detailed history of changes to a repository, such as pushes, merges, force pushes, and branch changes, and associates these changes with commits and users.
   *
   * For more information about viewing repository activity,
   * see "[Viewing activity and data for your repository](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository)."
   * @see https://docs.github.com/rest/repos/repos#list-repository-activities
   */
  "GET /repos/{owner}/{repo}/activity": {
    parameters: {
      owner: string;
      repo: string;
      direction?: "asc" | "desc";
      per_page?: number;
      before?: string;
      after?: string;

      /**
       * @description The Git reference for the activities you want to list.
       *
       * The `ref` for a branch can be formatted either as `refs/heads/BRANCH_NAME` or `BRANCH_NAME`, where `BRANCH_NAME` is the name of your branch.
       */
      ref?: string;

      /**
       * @description The GitHub username to use to filter by the actor who performed the activity.
       */
      actor?: string;

      /**
       * @description The time period to filter by.
       *
       * For example, `day` will filter for activity that occurred in the past 24 hours, and `week` will filter for activity that occurred in the past 7 days (168 hours).
       */
      time_period?: "day" | "week" | "month" | "quarter" | "year";

      /**
       * @description The activity type to filter by.
       *
       * For example, you can choose to filter by "force_push", to see all force pushes to the repository.
       */
      activity_type?:
        | "push"
        | "force_push"
        | "branch_creation"
        | "branch_deletion"
        | "pr_merge"
        | "merge_queue_merge";
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/activity";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActivitySchema[];
    };
  };

  /**
   * @name issues/list-assignees
   * @summary List assignees
   * @description Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
   * @see https://docs.github.com/rest/issues/assignees#list-assignees
   */
  "GET /repos/{owner}/{repo}/assignees": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/assignees";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SimpleUserSchema[];
    };
  };

  /**
   * @name issues/check-user-can-be-assigned
   * @summary Check if a user can be assigned
   * @description Checks if a user has permission to be assigned to an issue in this repository.
   *
   * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
   *
   * Otherwise a `404` status code is returned.
   * @see https://docs.github.com/rest/issues/assignees#check-if-a-user-can-be-assigned
   */
  "GET /repos/{owner}/{repo}/assignees/{assignee}": {
    parameters: {
      owner: string;
      repo: string;
      assignee: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/assignees/{assignee}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/create-attestation
   * @summary Create an attestation
   * @description Store an artifact attestation and associate it with a repository.
   *
   * The authenticated user must have write permission to the repository and, if using a fine-grained access token, the `attestations:write` permission is required.
   *
   * Artifact attestations are meant to be created using the [attest action](https://github.com/actions/attest). For more information, see our guide on [using artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
   * @see https://docs.github.com/rest/repos/repos#create-an-attestation
   */
  "POST /repos/{owner}/{repo}/attestations": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/attestations"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/attestations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The attestation's Sigstore Bundle.
         * Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
         */
        bundle: {
          mediaType?: string;
          verificationMaterial?: {
            [key: string]: any;
          };
          dsseEnvelope?: {
            [key: string]: any;
          };
        };
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name repos/list-attestations
   * @summary List attestations
   * @description List a collection of artifact attestations with a given subject digest that are associated with a repository.
   *
   * The authenticated user making the request must have read access to the repository. In addition, when using a fine-grained access token the `attestations:read` permission is required.
   *
   * **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
   * @see https://docs.github.com/rest/repos/repos#list-attestations
   */
  "GET /repos/{owner}/{repo}/attestations/{subject_digest}": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      before?: string;
      after?: string;

      /**
       * @description The parameter should be set to the attestation's subject's SHA256 digest, in the form `sha256:HEX_DIGEST`.
       */
      subject_digest: string;

      /**
       * @description Optional filter for fetching attestations with a given predicate type.
       * This option accepts `provenance`, `sbom`, or freeform text for custom predicate types.
       */
      predicate_type?: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/attestations/{subject_digest}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        attestations?: {
          /**
           * @description The attestation's Sigstore Bundle.
           * Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
           */
          bundle?: {
            mediaType?: string;
            verificationMaterial?: {
              [key: string]: any;
            };
            dsseEnvelope?: {
              [key: string]: any;
            };
          };
          repository_id?: number;
          bundle_url?: string;
        }[];
      };
    };
  };

  /**
   * @name repos/list-autolinks
   * @summary Get all autolinks of a repository
   * @description Gets all autolinks that are configured for a repository.
   *
   * Information about autolinks are only available to repository administrators.
   * @see https://docs.github.com/rest/repos/autolinks#get-all-autolinks-of-a-repository
   */
  "GET /repos/{owner}/{repo}/autolinks": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/autolinks";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: AutolinkSchema[];
    };
  };

  /**
   * @name repos/create-autolink
   * @summary Create an autolink reference for a repository
   * @description Users with admin access to the repository can create an autolink.
   * @see https://docs.github.com/rest/repos/autolinks#create-an-autolink-reference-for-a-repository
   */
  "POST /repos/{owner}/{repo}/autolinks": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/autolinks"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/autolinks";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit.
         */
        key_prefix: string;

        /**
         * @description The URL must contain `<num>` for the reference number. `<num>` matches different characters depending on the value of `is_alphanumeric`.
         */
        url_template: string;

        /**
         * @description Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters.
         * @default true
         */
        is_alphanumeric?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name repos/get-autolink
   * @summary Get an autolink reference of a repository
   * @description This returns a single autolink reference by ID that was configured for the given repository.
   *
   * Information about autolinks are only available to repository administrators.
   * @see https://docs.github.com/rest/repos/autolinks#get-an-autolink-reference-of-a-repository
   */
  "GET /repos/{owner}/{repo}/autolinks/{autolink_id}": {
    parameters: {
      owner: string;
      repo: string;
      autolink_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/autolinks/{autolink_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: AutolinkSchema;
    };
  };

  /**
   * @name repos/delete-autolink
   * @summary Delete an autolink reference from a repository
   * @description This deletes a single autolink reference by ID that was configured for the given repository.
   *
   * Information about autolinks are only available to repository administrators.
   * @see https://docs.github.com/rest/repos/autolinks#delete-an-autolink-reference-from-a-repository
   */
  "DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}": {
    parameters: {
      owner: string;
      repo: string;
      autolink_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/autolinks/{autolink_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/check-automated-security-fixes
   * @summary Check if Dependabot security updates are enabled for a repository
   * @description Shows whether Dependabot security updates are enabled, disabled or paused for a repository. The authenticated user must have admin read access to the repository. For more information, see "[Configuring Dependabot security updates](https://docs.github.com/articles/configuring-automated-security-fixes)".
   * @see https://docs.github.com/rest/repos/repos#check-if-dependabot-security-updates-are-enabled-for-a-repository
   */
  "GET /repos/{owner}/{repo}/automated-security-fixes": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/automated-security-fixes";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CheckAutomatedSecurityFixesSchema;
    };
  };

  /**
   * @name repos/enable-automated-security-fixes
   * @summary Enable Dependabot security updates
   * @description Enables Dependabot security updates for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring Dependabot security updates](https://docs.github.com/articles/configuring-automated-security-fixes)".
   * @see https://docs.github.com/rest/repos/repos#enable-dependabot-security-updates
   */
  "PUT /repos/{owner}/{repo}/automated-security-fixes": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/automated-security-fixes";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/disable-automated-security-fixes
   * @summary Disable Dependabot security updates
   * @description Disables Dependabot security updates for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring Dependabot security updates](https://docs.github.com/articles/configuring-automated-security-fixes)".
   * @see https://docs.github.com/rest/repos/repos#disable-dependabot-security-updates
   */
  "DELETE /repos/{owner}/{repo}/automated-security-fixes": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/automated-security-fixes";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/list-branches
   * @summary List branches
   * @see https://docs.github.com/rest/branches/branches#list-branches
   */
  "GET /repos/{owner}/{repo}/branches": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description Setting to `true` returns only branches protected by branch protections or rulesets. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.
       */
      protected?: boolean;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/branches";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ShortBranchSchema[];
    };
  };

  /**
   * @name repos/get-branch
   * @summary Get a branch
   * @see https://docs.github.com/rest/branches/branches#get-a-branch
   */
  "GET /repos/{owner}/{repo}/branches/{branch}": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/branches/{branch}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: BranchWithProtectionSchema;
    };
  };

  /**
   * @name repos/get-branch-protection
   * @summary Get branch protection
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * @see https://docs.github.com/rest/branches/branch-protection#get-branch-protection
   */
  "GET /repos/{owner}/{repo}/branches/{branch}/protection": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: BranchProtectionSchema;
    };
  };

  /**
   * @name repos/update-branch-protection
   * @summary Update branch protection
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Protecting a branch requires admin or owner permissions to the repository.
   *
   * > [!NOTE]
   * > Passing new arrays of `users` and `teams` replaces their previous values.
   *
   * > [!NOTE]
   * > The list of users, apps, and teams in total is limited to 100 items.
   * @see https://docs.github.com/rest/branches/branch-protection#update-branch-protection
   */
  "PUT /repos/{owner}/{repo}/branches/{branch}/protection": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/branches/{branch}/protection"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Require status checks to pass before merging. Set to `null` to disable.
         */
        required_status_checks: {
          /**
           * @description Require branches to be up to date before merging.
           */
          strict: boolean;

          /**
           * @description **Closing down notice**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
           * @deprecated
           */
          contexts: string[];

          /**
           * @description The list of status checks to require in order to merge into this branch.
           */
          checks?: {
            /**
             * @description The name of the required check
             */
            context: string;

            /**
             * @description The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
             */
            app_id?: number;
          }[];
        } | null;

        /**
         * @description Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.
         */
        enforce_admins: boolean | null;

        /**
         * @description Require at least one approving review on a pull request, before merging. Set to `null` to disable.
         */
        required_pull_request_reviews: {
          /**
           * @description Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
           */
          dismissal_restrictions?: {
            /**
             * @description The list of user `login`s with dismissal access
             */
            users?: string[];

            /**
             * @description The list of team `slug`s with dismissal access
             */
            teams?: string[];

            /**
             * @description The list of app `slug`s with dismissal access
             */
            apps?: string[];
          };

          /**
           * @description Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
           */
          dismiss_stale_reviews?: boolean;

          /**
           * @description Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them.
           */
          require_code_owner_reviews?: boolean;

          /**
           * @description Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
           */
          required_approving_review_count?: number;

          /**
           * @description Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`.
           * @default false
           */
          require_last_push_approval?: boolean;

          /**
           * @description Allow specific users, teams, or apps to bypass pull request requirements.
           */
          bypass_pull_request_allowances?: {
            /**
             * @description The list of user `login`s allowed to bypass pull request requirements.
             */
            users?: string[];

            /**
             * @description The list of team `slug`s allowed to bypass pull request requirements.
             */
            teams?: string[];

            /**
             * @description The list of app `slug`s allowed to bypass pull request requirements.
             */
            apps?: string[];
          };
        } | null;

        /**
         * @description Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
         */
        restrictions: {
          /**
           * @description The list of user `login`s with push access
           */
          users: string[];

          /**
           * @description The list of team `slug`s with push access
           */
          teams: string[];

          /**
           * @description The list of app `slug`s with push access
           */
          apps?: string[];
        } | null;

        /**
         * @description Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.
         */
        required_linear_history?: boolean;

        /**
         * @description Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."
         */
        allow_force_pushes?: boolean | null;

        /**
         * @description Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.
         */
        allow_deletions?: boolean;

        /**
         * @description If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`.
         */
        block_creations?: boolean;

        /**
         * @description Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.
         */
        required_conversation_resolution?: boolean;

        /**
         * @description Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.
         * @default false
         */
        lock_branch?: boolean;

        /**
         * @description Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.
         * @default false
         */
        allow_fork_syncing?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProtectedBranchSchema;
    };
  };

  /**
   * @name repos/delete-branch-protection
   * @summary Delete branch protection
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * @see https://docs.github.com/rest/branches/branch-protection#delete-branch-protection
   */
  "DELETE /repos/{owner}/{repo}/branches/{branch}/protection": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/get-admin-branch-protection
   * @summary Get admin branch protection
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * @see https://docs.github.com/rest/branches/branch-protection#get-admin-branch-protection
   */
  "GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProtectedBranchAdminEnforcedSchema;
    };
  };

  /**
   * @name repos/set-admin-branch-protection
   * @summary Set admin branch protection
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
   * @see https://docs.github.com/rest/branches/branch-protection#set-admin-branch-protection
   */
  "POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    };
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProtectedBranchAdminEnforcedSchema;
    };
  };

  /**
   * @name repos/delete-admin-branch-protection
   * @summary Delete admin branch protection
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
   * @see https://docs.github.com/rest/branches/branch-protection#delete-admin-branch-protection
   */
  "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/get-pull-request-review-protection
   * @summary Get pull request review protection
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * @see https://docs.github.com/rest/branches/branch-protection#get-pull-request-review-protection
   */
  "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProtectedBranchPullRequestReviewSchema;
    };
  };

  /**
   * @name repos/update-pull-request-review-protection
   * @summary Update pull request review protection
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
   *
   * > [!NOTE]
   * > Passing new arrays of `users` and `teams` replaces their previous values.
   * @see https://docs.github.com/rest/branches/branch-protection#update-pull-request-review-protection
   */
  "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    } & Endpoints["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
         */
        dismissal_restrictions?: {
          /**
           * @description The list of user `login`s with dismissal access
           */
          users?: string[];

          /**
           * @description The list of team `slug`s with dismissal access
           */
          teams?: string[];

          /**
           * @description The list of app `slug`s with dismissal access
           */
          apps?: string[];
        };

        /**
         * @description Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
         */
        dismiss_stale_reviews?: boolean;

        /**
         * @description Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed.
         */
        require_code_owner_reviews?: boolean;

        /**
         * @description Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
         */
        required_approving_review_count?: number;

        /**
         * @description Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`
         * @default false
         */
        require_last_push_approval?: boolean;

        /**
         * @description Allow specific users, teams, or apps to bypass pull request requirements.
         */
        bypass_pull_request_allowances?: {
          /**
           * @description The list of user `login`s allowed to bypass pull request requirements.
           */
          users?: string[];

          /**
           * @description The list of team `slug`s allowed to bypass pull request requirements.
           */
          teams?: string[];

          /**
           * @description The list of app `slug`s allowed to bypass pull request requirements.
           */
          apps?: string[];
        };
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProtectedBranchPullRequestReviewSchema;
    };
  };

  /**
   * @name repos/delete-pull-request-review-protection
   * @summary Delete pull request review protection
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * @see https://docs.github.com/rest/branches/branch-protection#delete-pull-request-review-protection
   */
  "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/get-commit-signature-protection
   * @summary Get commit signature protection
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.
   *
   * > [!NOTE]
   * > You must enable branch protection to require signed commits.
   * @see https://docs.github.com/rest/branches/branch-protection#get-commit-signature-protection
   */
  "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProtectedBranchAdminEnforcedSchema;
    };
  };

  /**
   * @name repos/create-commit-signature-protection
   * @summary Create commit signature protection
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
   * @see https://docs.github.com/rest/branches/branch-protection#create-commit-signature-protection
   */
  "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    };
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProtectedBranchAdminEnforcedSchema;
    };
  };

  /**
   * @name repos/delete-commit-signature-protection
   * @summary Delete commit signature protection
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
   * @see https://docs.github.com/rest/branches/branch-protection#delete-commit-signature-protection
   */
  "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/get-status-checks-protection
   * @summary Get status checks protection
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * @see https://docs.github.com/rest/branches/branch-protection#get-status-checks-protection
   */
  "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: StatusCheckPolicySchema;
    };
  };

  /**
   * @name repos/update-status-check-protection
   * @summary Update status check protection
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
   * @see https://docs.github.com/rest/branches/branch-protection#update-status-check-protection
   */
  "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    } & Endpoints["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Require branches to be up to date before merging.
         */
        strict?: boolean;

        /**
         * @description **Closing down notice**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
         * @deprecated
         */
        contexts?: string[];

        /**
         * @description The list of status checks to require in order to merge into this branch.
         */
        checks?: {
          /**
           * @description The name of the required check
           */
          context: string;

          /**
           * @description The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
           */
          app_id?: number;
        }[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: StatusCheckPolicySchema;
    };
  };

  /**
   * @name repos/remove-status-check-protection
   * @summary Remove status check protection
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * @see https://docs.github.com/rest/branches/branch-protection#remove-status-check-protection
   */
  "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/get-all-status-check-contexts
   * @summary Get all status check contexts
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * @see https://docs.github.com/rest/branches/branch-protection#get-all-status-check-contexts
   */
  "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: string[];
    };
  };

  /**
   * @name repos/add-status-check-contexts
   * @summary Add status check contexts
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * @see https://docs.github.com/rest/branches/branch-protection#add-status-check-contexts
   */
  "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    } & Endpoints["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the status checks
         */
        contexts: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: string[];
    };
  };

  /**
   * @name repos/set-status-check-contexts
   * @summary Set status check contexts
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * @see https://docs.github.com/rest/branches/branch-protection#set-status-check-contexts
   */
  "PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the status checks
         */
        contexts: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: string[];
    };
  };

  /**
   * @name repos/remove-status-check-contexts
   * @summary Remove status check contexts
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * @see https://docs.github.com/rest/branches/branch-protection#remove-status-check-contexts
   */
  "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    } & Endpoints["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"]["request"]["data"];
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the status checks
         */
        contexts: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: string[];
    };
  };

  /**
   * @name repos/get-access-restrictions
   * @summary Get access restrictions
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists who has access to this protected branch.
   *
   * > [!NOTE]
   * > Users, apps, and teams `restrictions` are only available for organization-owned repositories.
   * @see https://docs.github.com/rest/branches/branch-protection#get-access-restrictions
   */
  "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: BranchRestrictionPolicySchema;
    };
  };

  /**
   * @name repos/delete-access-restrictions
   * @summary Delete access restrictions
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Disables the ability to restrict who can push to this branch.
   * @see https://docs.github.com/rest/branches/branch-protection#delete-access-restrictions
   */
  "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/get-apps-with-access-to-protected-branch
   * @summary Get apps with access to the protected branch
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists the GitHub Apps that have push access to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
   * @see https://docs.github.com/rest/branches/branch-protection#get-apps-with-access-to-the-protected-branch
   */
  "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IntegrationSchema[];
    };
  };

  /**
   * @name repos/add-app-access-restrictions
   * @summary Add app access restrictions
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Grants the specified apps push access for this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
   * @see https://docs.github.com/rest/branches/branch-protection#add-app-access-restrictions
   */
  "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    } & Endpoints["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
         */
        apps: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IntegrationSchema[];
    };
  };

  /**
   * @name repos/set-app-access-restrictions
   * @summary Set app access restrictions
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
   * @see https://docs.github.com/rest/branches/branch-protection#set-app-access-restrictions
   */
  "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
         */
        apps: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IntegrationSchema[];
    };
  };

  /**
   * @name repos/remove-app-access-restrictions
   * @summary Remove app access restrictions
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Removes the ability of an app to push to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
   * @see https://docs.github.com/rest/branches/branch-protection#remove-app-access-restrictions
   */
  "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    } & Endpoints["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"]["request"]["data"];
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
         */
        apps: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IntegrationSchema[];
    };
  };

  /**
   * @name repos/get-teams-with-access-to-protected-branch
   * @summary Get teams with access to the protected branch
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists the teams who have push access to this branch. The list includes child teams.
   * @see https://docs.github.com/rest/branches/branch-protection#get-teams-with-access-to-the-protected-branch
   */
  "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamSchema[];
    };
  };

  /**
   * @name repos/add-team-access-restrictions
   * @summary Add team access restrictions
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Grants the specified teams push access for this branch. You can also give push access to child teams.
   * @see https://docs.github.com/rest/branches/branch-protection#add-team-access-restrictions
   */
  "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    } & Endpoints["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The slug values for teams
         */
        teams: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamSchema[];
    };
  };

  /**
   * @name repos/set-team-access-restrictions
   * @summary Set team access restrictions
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
   * @see https://docs.github.com/rest/branches/branch-protection#set-team-access-restrictions
   */
  "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The slug values for teams
         */
        teams: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamSchema[];
    };
  };

  /**
   * @name repos/remove-team-access-restrictions
   * @summary Remove team access restrictions
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Removes the ability of a team to push to this branch. You can also remove push access for child teams.
   * @see https://docs.github.com/rest/branches/branch-protection#remove-team-access-restrictions
   */
  "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    } & Endpoints["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"]["request"]["data"];
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The slug values for teams
         */
        teams: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamSchema[];
    };
  };

  /**
   * @name repos/get-users-with-access-to-protected-branch
   * @summary Get users with access to the protected branch
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists the people who have push access to this branch.
   * @see https://docs.github.com/rest/branches/branch-protection#get-users-with-access-to-the-protected-branch
   */
  "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SimpleUserSchema[];
    };
  };

  /**
   * @name repos/add-user-access-restrictions
   * @summary Add user access restrictions
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Grants the specified people push access for this branch.
   *
   * | Type    | Description                                                                                                                   |
   * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   * @see https://docs.github.com/rest/branches/branch-protection#add-user-access-restrictions
   */
  "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    } & Endpoints["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The username for users
         */
        users: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SimpleUserSchema[];
    };
  };

  /**
   * @name repos/set-user-access-restrictions
   * @summary Set user access restrictions
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
   *
   * | Type    | Description                                                                                                                   |
   * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   * @see https://docs.github.com/rest/branches/branch-protection#set-user-access-restrictions
   */
  "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The username for users
         */
        users: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SimpleUserSchema[];
    };
  };

  /**
   * @name repos/remove-user-access-restrictions
   * @summary Remove user access restrictions
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Removes the ability of a user to push to this branch.
   *
   * | Type    | Description                                                                                                                                   |
   * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   * @see https://docs.github.com/rest/branches/branch-protection#remove-user-access-restrictions
   */
  "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    } & Endpoints["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"]["request"]["data"];
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The username for users
         */
        users: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SimpleUserSchema[];
    };
  };

  /**
   * @name repos/rename-branch
   * @summary Rename a branch
   * @description Renames a branch in a repository.
   *
   * > [!NOTE]
   * > Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".
   *
   * The authenticated user must have push access to the branch. If the branch is the default branch, the authenticated user must also have admin or owner permissions.
   *
   * In order to rename the default branch, fine-grained access tokens also need the `administration:write` repository permission.
   * @see https://docs.github.com/rest/branches/branches#rename-a-branch
   */
  "POST /repos/{owner}/{repo}/branches/{branch}/rename": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
    } & Endpoints["POST /repos/{owner}/{repo}/branches/{branch}/rename"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/branches/{branch}/rename";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The new name of the branch.
         */
        new_name: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name checks/create
   * @summary Create a check run
   * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.
   *
   * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
   * @see https://docs.github.com/rest/reference/checks#create-a-check-run
   */
  "POST /repos/{owner}/{repo}/check-runs": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/check-runs"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/check-runs";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the check. For example, "code-coverage".
         */
        name: string;

        /**
         * @description The SHA of the commit.
         */
        head_sha: string;

        /**
         * @description The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.
         */
        details_url?: string;

        /**
         * @description A reference for the run on the integrator's system.
         */
        external_id?: string;

        /**
         * @description The current status.
         * @default "queued"
         */
        status?: "queued" | "in_progress" | "completed";

        /**
         * @description The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        started_at?: string;

        /**
         * @description **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check.
         * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
         */
        conclusion?:
          | "action_required"
          | "cancelled"
          | "failure"
          | "neutral"
          | "success"
          | "skipped"
          | "stale"
          | "timed_out";

        /**
         * @description The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        completed_at?: string;

        /**
         * @description Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.
         */
        output?: {
          /**
           * @description The title of the check run.
           */
          title: string;

          /**
           * @description The summary of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.
           */
          summary: string;

          /**
           * @description The details of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.
           */
          text?: string;

          /**
           * @description Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. GitHub Actions are limited to 10 warning annotations and 10 error annotations per step. For details about how you can view annotations on GitHub, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)".
           */
          annotations?: {
            /**
             * @description The path of the file to add an annotation to. For example, `assets/css/main.css`.
             */
            path: string;

            /**
             * @description The start line of the annotation. Line numbers start at 1.
             */
            start_line: number;

            /**
             * @description The end line of the annotation.
             */
            end_line: number;

            /**
             * @description The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1.
             */
            start_column?: number;

            /**
             * @description The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
             */
            end_column?: number;

            /**
             * @description The level of the annotation.
             */
            annotation_level: "notice" | "warning" | "failure";

            /**
             * @description A short description of the feedback for these lines of code. The maximum size is 64 KB.
             */
            message: string;

            /**
             * @description The title that represents the annotation. The maximum size is 255 characters.
             */
            title?: string;

            /**
             * @description Details about this annotation. The maximum size is 64 KB.
             */
            raw_details?: string;
          }[];

          /**
           * @description Adds images to the output displayed in the GitHub pull request UI.
           */
          images?: {
            /**
             * @description The alternative text for the image.
             */
            alt: string;

            /**
             * @description The full URL of the image.
             */
            image_url: string;

            /**
             * @description A short image description.
             */
            caption?: string;
          }[];
        };

        /**
         * @description Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)."
         */
        actions?: {
          /**
           * @description The text to be displayed on a button in the web UI. The maximum size is 20 characters.
           */
          label: string;

          /**
           * @description A short explanation of what this action would do. The maximum size is 40 characters.
           */
          description: string;

          /**
           * @description A reference for the action on the integrator's system. The maximum size is 20 characters.
           */
          identifier: string;
        }[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name checks/get
   * @summary Get a check run
   * @description Gets a single check run using its `id`.
   *
   * > [!NOTE]
   * > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
   * @see https://docs.github.com/rest/checks/runs#get-a-check-run
   */
  "GET /repos/{owner}/{repo}/check-runs/{check_run_id}": {
    parameters: {
      owner: string;
      repo: string;
      check_run_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/check-runs/{check_run_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CheckRunSchema;
    };
  };

  /**
   * @name checks/update
   * @summary Update a check run
   * @description Updates a check run for a specific commit in a repository.
   *
   * > [!NOTE]
   * > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * OAuth apps and personal access tokens (classic) cannot use this endpoint.
   * @see https://docs.github.com/rest/checks/runs#update-a-check-run
   */
  "PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}": {
    parameters: {
      owner: string;
      repo: string;
      check_run_id: number;
    } & Endpoints["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/check-runs/{check_run_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        status?: {};
        [key: string]: any;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CheckRunSchema;
    };
  };

  /**
   * @name checks/list-annotations
   * @summary List check run annotations
   * @description Lists annotations for a check run using the annotation `id`.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
   * @see https://docs.github.com/rest/checks/runs#list-check-run-annotations
   */
  "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations": {
    parameters: {
      owner: string;
      repo: string;
      check_run_id: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CheckAnnotationSchema[];
    };
  };

  /**
   * @name checks/rerequest-run
   * @summary Rerequest a check run
   * @description Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action `rerequested`. When a check run is `rerequested`, the `status` of the check suite it belongs to is reset to `queued` and the `conclusion` is cleared. The check run itself is not updated. GitHub apps recieving the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) with the `rerequested` action should then decide if the check run should be reset or updated and call the [update `check_run` endpoint](https://docs.github.com/rest/checks/runs#update-a-check-run) to update the check_run if desired.
   *
   * For more information about how to re-run GitHub Actions jobs, see "[Re-run a job from a workflow run](https://docs.github.com/rest/actions/workflow-runs#re-run-a-job-from-a-workflow-run)".
   * @see https://docs.github.com/rest/checks/runs#rerequest-a-check-run
   */
  "POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest": {
    parameters: {
      owner: string;
      repo: string;
      check_run_id: number;
    };
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name checks/create-suite
   * @summary Create a check suite
   * @description Creates a check suite manually. By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/checks/runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/checks/suites#update-repository-preferences-for-check-suites)".
   *
   * > [!NOTE]
   * > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
   *
   * OAuth apps and personal access tokens (classic) cannot use this endpoint.
   * @see https://docs.github.com/rest/checks/suites#create-a-check-suite
   */
  "POST /repos/{owner}/{repo}/check-suites": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/check-suites"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/check-suites";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The sha of the head commit.
         */
        head_sha: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CheckSuiteSchema;
    };
  };

  /**
   * @name checks/set-suites-preferences
   * @summary Update repository preferences for check suites
   * @description Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/checks/suites#create-a-check-suite).
   * You must have admin permissions in the repository to set preferences for check suites.
   * @see https://docs.github.com/rest/checks/suites#update-repository-preferences-for-check-suites
   */
  "PATCH /repos/{owner}/{repo}/check-suites/preferences": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["PATCH /repos/{owner}/{repo}/check-suites/preferences"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/check-suites/preferences";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default.
         */
        auto_trigger_checks?: {
          /**
           * @description The `id` of the GitHub App.
           */
          app_id: number;

          /**
           * @description Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
           * @default true
           */
          setting: boolean;
        }[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CheckSuitePreferenceSchema;
    };
  };

  /**
   * @name checks/get-suite
   * @summary Get a check suite
   * @description Gets a single check suite using its `id`.
   *
   * > [!NOTE]
   * > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
   * @see https://docs.github.com/rest/checks/suites#get-a-check-suite
   */
  "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}": {
    parameters: {
      owner: string;
      repo: string;
      check_suite_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/check-suites/{check_suite_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CheckSuiteSchema;
    };
  };

  /**
   * @name checks/list-for-suite
   * @summary List check runs in a check suite
   * @description Lists check runs for a check suite using its `id`.
   *
   * > [!NOTE]
   * > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
   * @see https://docs.github.com/rest/checks/runs#list-check-runs-in-a-check-suite
   */
  "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs": {
    parameters: {
      owner: string;
      repo: string;
      check_suite_id: number;
      check_name?: string;
      status?: "queued" | "in_progress" | "completed";

      /**
       * @description Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.
       */
      filter?: "latest" | "all";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        check_runs: CheckRunSchema[];
      };
    };
  };

  /**
   * @name checks/rerequest-suite
   * @summary Rerequest a check suite
   * @description Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
   * @see https://docs.github.com/rest/checks/suites#rerequest-a-check-suite
   */
  "POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest": {
    parameters: {
      owner: string;
      repo: string;
      check_suite_id: number;
    };
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name code-scanning/list-alerts-for-repo
   * @summary List code scanning alerts for a repository
   * @description Lists all open code scanning alerts for the default branch (usually `main`
   * or `master`). You must use an access token with the `security_events` scope to use
   * this endpoint with private repos, the `public_repo` scope also grants permission to read
   * security events on public repos only. GitHub Apps must have the `security_events` read
   * permission to use this endpoint.
   *
   * The response includes a `most_recent_instance` object.
   * This provides details of the most recent instance of this alert
   * for the default branch or for the specified Git reference
   * (if you used `ref` in the request).
   * @see https://docs.github.com/rest/reference/code-scanning#list-code-scanning-alerts-for-a-repository
   */
  "GET /repos/{owner}/{repo}/code-scanning/alerts": {
    parameters: {
      owner: string;
      repo: string;
      tool_name?: {};
      tool_guid?: {};
      page?: number;
      per_page?: number;
      ref?: {};
      direction?: "asc" | "desc";

      /**
       * @description The property by which to sort the results. . `number` is deprecated - we recommend that you use `created` instead.
       */
      sort?: "created" | "number" | "updated";

      /**
       * @description Set to `open`, `closed, `fixed`, or `dismissed` to list code scanning alerts in a specific state.
       */
      state?: {};
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/code-scanning/alerts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeScanningAlertItemsSchema[];
    };
  };

  /**
   * @name code-scanning/get-alert
   * @summary Get a code scanning alert
   * @description Gets a single code scanning alert.
   *
   * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
   * @see https://docs.github.com/rest/code-scanning/code-scanning#get-a-code-scanning-alert
   */
  "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}": {
    parameters: {
      owner: string;
      repo: string;
      alert_number: {};
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeScanningAlertSchema;
    };
  };

  /**
   * @name code-scanning/update-alert
   * @summary Update a code scanning alert
   * @description Updates the status of a single code scanning alert.
   * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
   * @see https://docs.github.com/rest/code-scanning/code-scanning#update-a-code-scanning-alert
   */
  "PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}": {
    parameters: {
      owner: string;
      repo: string;
      alert_number: {};
    } & Endpoints["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        state: CodeScanningAlertSetStateSchema;
        dismissed_reason?: CodeScanningAlertDismissedReasonSchema;
        dismissed_comment?: CodeScanningAlertDismissedCommentSchema;
        create_request?: CodeScanningAlertCreateRequestSchema;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeScanningAlertSchema;
    };
  };

  /**
   * @name code-scanning/get-autofix
   * @summary Get the status of an autofix for a code scanning alert
   * @description Gets the status and description of an autofix for a code scanning alert.
   *
   * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
   * @see https://docs.github.com/rest/code-scanning/code-scanning#get-the-status-of-an-autofix-for-a-code-scanning-alert
   */
  "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix": {
    parameters: {
      owner: string;
      repo: string;
      alert_number: {};
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeScanningAutofixSchema;
    };
  };

  /**
   * @name code-scanning/create-autofix
   * @summary Create an autofix for a code scanning alert
   * @description Creates an autofix for a code scanning alert.
   *
   * If a new autofix is to be created as a result of this request or is currently being generated, then this endpoint will return a 202 Accepted response.
   *
   * If an autofix already exists for a given alert, then this endpoint will return a 200 OK response.
   *
   * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
   * @see https://docs.github.com/rest/code-scanning/code-scanning#create-an-autofix-for-a-code-scanning-alert
   */
  "POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix": {
    parameters: {
      owner: string;
      repo: string;
      alert_number: {};
    };
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeScanningAutofixSchema;
    };
  };

  /**
   * @name code-scanning/commit-autofix
   * @summary Commit an autofix for a code scanning alert
   * @description Commits an autofix for a code scanning alert.
   *
   * If an autofix is committed as a result of this request, then this endpoint will return a 201 Created response.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
   * @see https://docs.github.com/rest/code-scanning/code-scanning#commit-an-autofix-for-a-code-scanning-alert
   */
  "POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commits": {
    parameters: {
      owner: string;
      repo: string;
      alert_number: {};
    } & Endpoints["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commits"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commits";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name code-scanning/list-alert-instances
   * @summary List instances of a code scanning alert
   * @description Lists all instances of the specified code scanning alert.
   *
   * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
   * @see https://docs.github.com/rest/code-scanning/code-scanning#list-instances-of-a-code-scanning-alert
   */
  "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances": {
    parameters: {
      owner: string;
      repo: string;
      alert_number: {};
      page?: number;
      per_page?: number;
      ref?: {};
      pr?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeScanningAlertInstanceSchema[];
    };
  };

  /**
   * @name code-scanning/list-recent-analyses
   * @summary List code scanning analyses for a repository
   * @description Lists the details of all code scanning analyses for a repository,
   * starting with the most recent.
   * The response is paginated and you can use the `page` and `per_page` parameters
   * to list the analyses you're interested in.
   * By default 30 analyses are listed per page.
   *
   * The `rules_count` field in the response give the number of rules
   * that were run in the analysis.
   * For very old analyses this data is not available,
   * and `0` is returned in this field.
   *
   * > [!WARNING]
   * > **Closing down notice:** The `tool_name` field is closing down and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
   *
   * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
   * @see https://docs.github.com/rest/code-scanning/code-scanning#list-code-scanning-analyses-for-a-repository
   */
  "GET /repos/{owner}/{repo}/code-scanning/analyses": {
    parameters: {
      owner: string;
      repo: string;
      tool_name?: {};
      tool_guid?: {};
      page?: number;
      per_page?: number;
      pr?: number;

      /**
       * @description The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
       */
      ref?: {};

      /**
       * @description Filter analyses belonging to the same SARIF upload.
       */
      sarif_id?: {};
      direction?: "asc" | "desc";

      /**
       * @description The property by which to sort the results.
       */
      sort?: "created";
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/code-scanning/analyses";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeScanningAnalysisSchema[];
    };
  };

  /**
   * @name code-scanning/get-analysis
   * @summary Get a code scanning analysis for a repository
   * @description Gets a specified code scanning analysis for a repository.
   *
   * The default JSON response contains fields that describe the analysis.
   * This includes the Git reference and commit SHA to which the analysis relates,
   * the datetime of the analysis, the name of the code scanning tool,
   * and the number of alerts.
   *
   * The `rules_count` field in the default response give the number of rules
   * that were run in the analysis.
   * For very old analyses this data is not available,
   * and `0` is returned in this field.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/sarif+json`**: Instead of returning a summary of the analysis, this endpoint returns a subset of the analysis data that was uploaded. The data is formatted as [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html). It also returns additional data such as the `github/alertNumber` and `github/alertUrl` properties.
   *
   * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
   * @see https://docs.github.com/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository
   */
  "GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.
       */
      analysis_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeScanningAnalysisSchema;
    };
  };

  /**
   * @name code-scanning/delete-analysis
   * @summary Delete a code scanning analysis from a repository
   * @description Deletes a specified code scanning analysis from a repository.
   *
   * You can delete one analysis at a time.
   * To delete a series of analyses, start with the most recent analysis and work backwards.
   * Conceptually, the process is similar to the undo function in a text editor.
   *
   * When you list the analyses for a repository,
   * one or more will be identified as deletable in the response:
   *
   * ```
   * "deletable": true
   * ```
   *
   * An analysis is deletable when it's the most recent in a set of analyses.
   * Typically, a repository will have multiple sets of analyses
   * for each enabled code scanning tool,
   * where a set is determined by a unique combination of analysis values:
   *
   * * `ref`
   * * `tool`
   * * `category`
   *
   * If you attempt to delete an analysis that is not the most recent in a set,
   * you'll get a 400 response with the message:
   *
   * ```
   * Analysis specified is not deletable.
   * ```
   *
   * The response from a successful `DELETE` operation provides you with
   * two alternative URLs for deleting the next analysis in the set:
   * `next_analysis_url` and `confirm_delete_url`.
   * Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
   * in a set. This is a useful option if you want to preserve at least one analysis
   * for the specified tool in your repository.
   * Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
   * When you delete the last analysis in a set, the value of `next_analysis_url` and `confirm_delete_url`
   * in the 200 response is `null`.
   *
   * As an example of the deletion process,
   * let's imagine that you added a workflow that configured a particular code scanning tool
   * to analyze the code in a repository. This tool has added 15 analyses:
   * 10 on the default branch, and another 5 on a topic branch.
   * You therefore have two separate sets of analyses for this tool.
   * You've now decided that you want to remove all of the analyses for the tool.
   * To do this you must make 15 separate deletion requests.
   * To start, you must find an analysis that's identified as deletable.
   * Each set of analyses always has one that's identified as deletable.
   * Having found the deletable analysis for one of the two sets,
   * delete this analysis and then continue deleting the next analysis in the set until they're all deleted.
   * Then repeat the process for the second set.
   * The procedure therefore consists of a nested loop:
   *
   * **Outer loop**:
   * * List the analyses for the repository, filtered by tool.
   * * Parse this list to find a deletable analysis. If found:
   *
   *   **Inner loop**:
   *   * Delete the identified analysis.
   *   * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.
   *
   * The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
   * @see https://docs.github.com/rest/code-scanning/code-scanning#delete-a-code-scanning-analysis-from-a-repository
   */
  "DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.
       */
      analysis_id: number;

      /**
       * @description Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.`
       */
      confirm_delete?: string | null;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeScanningAnalysisDeletionSchema;
    };
  };

  /**
   * @name code-scanning/list-codeql-databases
   * @summary List CodeQL databases for a repository
   * @description Lists the CodeQL databases that are available in a repository.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
   * @see https://docs.github.com/rest/code-scanning/code-scanning#list-codeql-databases-for-a-repository
   */
  "GET /repos/{owner}/{repo}/code-scanning/codeql/databases": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/code-scanning/codeql/databases";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeScanningCodeqlDatabaseSchema[];
    };
  };

  /**
   * @name code-scanning/get-codeql-database
   * @summary Get a CodeQL database for a repository
   * @description Gets a CodeQL database for a language in a repository.
   *
   * By default this endpoint returns JSON metadata about the CodeQL database. To
   * download the CodeQL database binary content, set the `Accept` header of the request
   * to [`application/zip`](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types), and make sure
   * your HTTP client is configured to follow redirects or use the `Location` header
   * to make a second request to get the redirect URL.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
   * @see https://docs.github.com/rest/code-scanning/code-scanning#get-a-codeql-database-for-a-repository
   */
  "GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description The language of the CodeQL database.
       */
      language: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeScanningCodeqlDatabaseSchema;
    };
  };

  /**
   * @name code-scanning/delete-codeql-database
   * @summary Delete a CodeQL database
   * @description Deletes a CodeQL database for a language in a repository.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
   * @see https://docs.github.com/rest/code-scanning/code-scanning#delete-a-codeql-database
   */
  "DELETE /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description The language of the CodeQL database.
       */
      language: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name code-scanning/create-variant-analysis
   * @summary Create a CodeQL variant analysis
   * @description Creates a new CodeQL variant analysis, which will run a CodeQL query against one or more repositories.
   *
   * Get started by learning more about [running CodeQL queries at scale with Multi-Repository Variant Analysis](https://docs.github.com/code-security/codeql-for-vs-code/getting-started-with-codeql-for-vs-code/running-codeql-queries-at-scale-with-multi-repository-variant-analysis).
   *
   * Use the `owner` and `repo` parameters in the URL to specify the controller repository that
   * will be used for running GitHub Actions workflows and storing the results of the CodeQL variant analysis.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/code-scanning/code-scanning#create-a-codeql-variant-analysis
   */
  "POST /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name code-scanning/get-variant-analysis
   * @summary Get the summary of a CodeQL variant analysis
   * @description Gets the summary of a CodeQL variant analysis.
   *
   * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
   * @see https://docs.github.com/rest/code-scanning/code-scanning#get-the-summary-of-a-codeql-variant-analysis
   */
  "GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description The unique identifier of the variant analysis.
       */
      codeql_variant_analysis_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeScanningVariantAnalysisSchema;
    };
  };

  /**
   * @name code-scanning/get-variant-analysis-repo-task
   * @summary Get the analysis status of a repository in a CodeQL variant analysis
   * @description Gets the analysis status of a repository in a CodeQL variant analysis.
   *
   * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
   * @see https://docs.github.com/rest/code-scanning/code-scanning#get-the-analysis-status-of-a-repository-in-a-codeql-variant-analysis
   */
  "GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}": {
    parameters: {
      owner: string;

      /**
       * @description The name of the controller repository.
       */
      repo: string;

      /**
       * @description The ID of the variant analysis.
       */
      codeql_variant_analysis_id: number;

      /**
       * @description The account owner of the variant analysis repository. The name is not case sensitive.
       */
      repo_owner: string;

      /**
       * @description The name of the variant analysis repository.
       */
      repo_name: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeScanningVariantAnalysisRepoTaskSchema;
    };
  };

  /**
   * @name code-scanning/get-default-setup
   * @summary Get a code scanning default setup configuration
   * @description Gets a code scanning default setup configuration.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
   * @see https://docs.github.com/rest/code-scanning/code-scanning#get-a-code-scanning-default-setup-configuration
   */
  "GET /repos/{owner}/{repo}/code-scanning/default-setup": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/code-scanning/default-setup";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeScanningDefaultSetupSchema;
    };
  };

  /**
   * @name code-scanning/update-default-setup
   * @summary Update a code scanning default setup configuration
   * @description Updates a code scanning default setup configuration.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
   * @see https://docs.github.com/rest/code-scanning/code-scanning#update-a-code-scanning-default-setup-configuration
   */
  "PATCH /repos/{owner}/{repo}/code-scanning/default-setup": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/code-scanning/default-setup";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: EmptyObjectSchema;
    };
  };

  /**
   * @name code-scanning/upload-sarif
   * @summary Upload an analysis as SARIF data
   * @description Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. For troubleshooting information, see "[Troubleshooting SARIF uploads](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif)."
   *
   * There are two places where you can upload code scanning results.
   *  - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
   *  - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
   *
   * You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
   *
   * ```
   * gzip -c analysis-data.sarif | base64 -w0
   * ```
   *
   * SARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable.
   * To get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries. For more information, see "[SARIF results exceed one or more limits](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif/results-exceed-limit)."
   *
   *
   * | **SARIF data**                   | **Maximum values** | **Additional limits**                                                            |
   * |----------------------------------|:------------------:|----------------------------------------------------------------------------------|
   * | Runs per file                    |         20         |                                                                                  |
   * | Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            |
   * | Rules per run                    |       25,000       |                                                                                  |
   * | Tool extensions per run          |        100         |                                                                                  |
   * | Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. |
   * | Location per result	             |       1,000        | Only 100 locations will be included.                                             |
   * | Tags per rule	                   |         20         | Only 10 tags will be included.                                                   |
   *
   *
   * The `202 Accepted` response includes an `id` value.
   * You can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint.
   * For more information, see "[Get information about a SARIF upload](/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
   *
   * This endpoint is limited to 1,000 requests per hour for each user or app installation calling it.
   * @see https://docs.github.com/rest/code-scanning/code-scanning#upload-an-analysis-as-sarif-data
   */
  "POST /repos/{owner}/{repo}/code-scanning/sarifs": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/code-scanning/sarifs"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/code-scanning/sarifs";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        commit_sha: CodeScanningAnalysisCommitShaSchema;
        ref: CodeScanningRefFullSchema;
        sarif: CodeScanningAnalysisSarifFileSchema;

        /**
         * @description The base directory used in the analysis, as it appears in the SARIF file.
         * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
         * @example file:///github/workspace/
         */
        checkout_uri?: string;

        /**
         * @description The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        started_at?: string;

        /**
         * @description The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.
         */
        tool_name?: string;

        /**
         * @description Whether the SARIF file will be validated according to the code scanning specifications.
         * This parameter is intended to help integrators ensure that the uploaded SARIF files are correctly rendered by code scanning.
         */
        validate?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: CodeScanningSarifsReceiptSchema;
    };
  };

  /**
   * @name code-scanning/get-sarif
   * @summary Get information about a SARIF upload
   * @description Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository)."
   * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
   * @see https://docs.github.com/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload
   */
  "GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description The SARIF ID obtained after uploading.
       */
      sarif_id: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeScanningSarifsStatusSchema;
    };
  };

  /**
   * @name code-security/get-configuration-for-repository
   * @summary Get the code security configuration associated with a repository
   * @description Get the code security configuration that manages a repository's code security settings.
   *
   * The authenticated user must be an administrator or security manager for the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/code-security/configurations#get-the-code-security-configuration-associated-with-a-repository
   */
  "GET /repos/{owner}/{repo}/code-security-configuration": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/code-security-configuration";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeSecurityConfigurationForRepositorySchema;
    };
  };

  /**
   * @name repos/codeowners-errors
   * @summary List CODEOWNERS errors
   * @description List any syntax errors that are detected in the CODEOWNERS
   * file.
   *
   * For more information about the correct CODEOWNERS syntax,
   * see "[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."
   * @see https://docs.github.com/rest/repos/repos#list-codeowners-errors
   */
  "GET /repos/{owner}/{repo}/codeowners/errors": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default branch (e.g. `main`)
       */
      ref?: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/codeowners/errors";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeownersErrorsSchema;
    };
  };

  /**
   * @name codespaces/list-in-repository-for-authenticated-user
   * @summary List codespaces in a repository for the authenticated user
   * @description Lists the codespaces associated to a specified repository and the authenticated user.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/codespaces#list-codespaces-in-a-repository-for-the-authenticated-user
   */
  "GET /repos/{owner}/{repo}/codespaces": {
    parameters: {
      per_page?: number;
      page?: number;
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/codespaces";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        codespaces: CodespaceSchema[];
      };
    };
  };

  /**
   * @name codespaces/create-with-repo-for-authenticated-user
   * @summary Create a codespace in a repository
   * @description Creates a codespace owned by the authenticated user in the specified repository.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/codespaces#create-a-codespace-in-a-repository
   */
  "POST /repos/{owner}/{repo}/codespaces": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/codespaces"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/codespaces";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Git ref (typically a branch name) for this codespace
         */
        ref?: string;

        /**
         * @description The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
         */
        location?: string;

        /**
         * @description The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down.
         */
        geo?: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest";

        /**
         * @description IP for location auto-detection when proxying a request
         */
        client_ip?: string;

        /**
         * @description Machine type to use for this codespace
         */
        machine?: string;

        /**
         * @description Path to devcontainer.json config to use for this codespace
         */
        devcontainer_path?: string;

        /**
         * @description Whether to authorize requested permissions from devcontainer.json
         */
        multi_repo_permissions_opt_out?: boolean;

        /**
         * @description Working directory for this codespace
         */
        working_directory?: string;

        /**
         * @description Time in minutes before codespace stops from inactivity
         */
        idle_timeout_minutes?: number;

        /**
         * @description Display name for this codespace
         */
        display_name?: string;

        /**
         * @description Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
         */
        retention_period_minutes?: number;
      } | null;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name codespaces/list-devcontainers-in-repository-for-authenticated-user
   * @summary List devcontainer configurations in a repository for the authenticated user
   * @description Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files
   * specify launchpoint configurations for codespaces created within the repository.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/codespaces#list-devcontainer-configurations-in-a-repository-for-the-authenticated-user
   */
  "GET /repos/{owner}/{repo}/codespaces/devcontainers": {
    parameters: {
      per_page?: number;
      page?: number;
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/codespaces/devcontainers";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        devcontainers: {
          path: string;
          name?: string;
          display_name?: string;
        }[];
      };
    };
  };

  /**
   * @name codespaces/repo-machines-for-authenticated-user
   * @summary List available machine types for a repository
   * @description List the machine types available for a given repository based on its configuration.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/machines#list-available-machine-types-for-a-repository
   */
  "GET /repos/{owner}/{repo}/codespaces/machines": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description The location to check for available machines. Assigned by IP if not provided.
       */
      location?: string;

      /**
       * @description IP for location auto-detection when proxying a request
       */
      client_ip?: string;

      /**
       * @description The branch or commit to check for prebuild availability and devcontainer restrictions.
       */
      ref?: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/codespaces/machines";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        machines: CodespaceMachineSchema[];
      };
    };
  };

  /**
   * @name codespaces/pre-flight-with-repo-for-authenticated-user
   * @summary Get default attributes for a codespace
   * @description Gets the default attributes for codespaces created by the user with the repository.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/codespaces#get-default-attributes-for-a-codespace
   */
  "GET /repos/{owner}/{repo}/codespaces/new": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked.
       */
      ref?: string;

      /**
       * @description An alternative IP for default location auto-detection, such as when proxying a request.
       */
      client_ip?: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/codespaces/new";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        billable_owner?: SimpleUserSchema;
        defaults?: {
          location: string;
          devcontainer_path: string | null;
        };
      };
    };
  };

  /**
   * @name codespaces/check-permissions-for-devcontainer
   * @summary Check if permissions defined by a devcontainer have been accepted by the authenticated user
   * @description Checks whether the permissions defined by a given devcontainer configuration have been accepted by the authenticated user.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/codespaces#check-if-permissions-defined-by-a-devcontainer-have-been-accepted-by-the-authenticated-user
   */
  "GET /repos/{owner}/{repo}/codespaces/permissions_check": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description The git reference that points to the location of the devcontainer configuration to use for the permission check. The value of `ref` will typically be a branch name (`heads/BRANCH_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
       */
      ref: string;

      /**
       * @description Path to the devcontainer.json configuration to use for the permission check.
       */
      devcontainer_path: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/codespaces/permissions_check";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodespacesPermissionsCheckForDevcontainerSchema;
    };
  };

  /**
   * @name codespaces/list-repo-secrets
   * @summary List repository secrets
   * @description Lists all development environment secrets available in a repository without revealing their encrypted
   * values.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/repository-secrets#list-repository-secrets
   */
  "GET /repos/{owner}/{repo}/codespaces/secrets": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/codespaces/secrets";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        secrets: RepoCodespacesSecretSchema[];
      };
    };
  };

  /**
   * @name codespaces/get-repo-public-key
   * @summary Get a repository public key
   * @description Gets your public key, which you need to encrypt secrets. You need to
   * encrypt a secret before you can create or update secrets.
   *
   * If the repository is private, OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/repository-secrets#get-a-repository-public-key
   */
  "GET /repos/{owner}/{repo}/codespaces/secrets/public-key": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/codespaces/secrets/public-key";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodespacesPublicKeySchema;
    };
  };

  /**
   * @name codespaces/get-repo-secret
   * @summary Get a repository secret
   * @description Gets a single repository development environment secret without revealing its encrypted value.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/repository-secrets#get-a-repository-secret
   */
  "GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}": {
    parameters: {
      owner: string;
      repo: string;
      secret_name: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RepoCodespacesSecretSchema;
    };
  };

  /**
   * @name codespaces/create-or-update-repo-secret
   * @summary Create or update a repository secret
   * @description Creates or updates a repository development environment secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The associated user must be a repository admin.
   * @see https://docs.github.com/rest/codespaces/repository-secrets#create-or-update-a-repository-secret
   */
  "PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}": {
    parameters: {
      owner: string;
      repo: string;
      secret_name: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/codespaces/repository-secrets#get-a-repository-public-key) endpoint.
         */
        encrypted_value?: string;

        /**
         * @description ID of the key you used to encrypt the secret.
         */
        key_id?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name codespaces/delete-repo-secret
   * @summary Delete a repository secret
   * @description Deletes a development environment secret in a repository using the secret name.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The associated user must be a repository admin.
   * @see https://docs.github.com/rest/codespaces/repository-secrets#delete-a-repository-secret
   */
  "DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}": {
    parameters: {
      owner: string;
      repo: string;
      secret_name: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/list-collaborators
   * @summary List repository collaborators
   * @description For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
   * The `permissions` hash returned in the response contains the base role permissions of the collaborator. The `role_name` is the highest role assigned to the collaborator after considering all sources of grants, including: repo, teams, organization, and enterprise.
   * There is presently not a way to differentiate between an organization level grant and a repository level grant from this endpoint response.
   *
   * Team members will include the members of child teams.
   *
   * The authenticated user must have write, maintain, or admin privileges on the repository to use this endpoint. For organization-owned repositories, the authenticated user needs to be a member of the organization.
   * OAuth app tokens and personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint.
   * @see https://docs.github.com/rest/collaborators/collaborators#list-repository-collaborators
   */
  "GET /repos/{owner}/{repo}/collaborators": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
       */
      affiliation?: "outside" | "direct" | "all";

      /**
       * @description Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned.
       */
      permission?: "pull" | "triage" | "push" | "maintain" | "admin";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/collaborators";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CollaboratorSchema[];
    };
  };

  /**
   * @name repos/check-collaborator
   * @summary Check if a user is a repository collaborator
   * @description For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
   *
   * Team members will include the members of child teams.
   *
   * The authenticated user must have push access to the repository to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint.
   * @see https://docs.github.com/rest/collaborators/collaborators#check-if-a-user-is-a-repository-collaborator
   */
  "GET /repos/{owner}/{repo}/collaborators/{username}": {
    parameters: {
      owner: string;
      repo: string;
      username: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/collaborators/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/add-collaborator
   * @summary Add a repository collaborator
   * @description Add a user to a repository with a specified level of access. If the repository is owned by an organization, this API does not add the user to the organization - a user that has repository access without being an organization member is called an "outside collaborator" (if they are not an Enterprise Managed User) or a "repository collaborator" if they are an Enterprise Managed User. These users are exempt from some organization policies - see "[Adding outside collaborators to repositories](https://docs.github.com/organizations/managing-user-access-to-your-organizations-repositories/managing-outside-collaborators/adding-outside-collaborators-to-repositories-in-your-organization)" to learn more about these collaborator types.
   *
   * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
   *
   * Adding an outside collaborator may be restricted by enterprise and organization administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)" and "[Setting permissions for adding outside collaborators](https://docs.github.com/organizations/managing-organization-settings/setting-permissions-for-adding-outside-collaborators)" for organization settings.
   *
   * For more information on permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the role being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:
   *
   * ```
   * Cannot assign {member} permission of {role name}
   * ```
   *
   * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
   *
   * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [API](https://docs.github.com/rest/collaborators/invitations).
   *
   * For Enterprise Managed Users, this endpoint does not send invitations - these users are automatically added to organizations and repositories. Enterprise Managed Users can only be added to organizations and repositories within their enterprise.
   *
   * **Updating an existing collaborator's permission level**
   *
   * The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.
   *
   * **Rate limits**
   *
   * You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
   * @see https://docs.github.com/rest/collaborators/collaborators#add-a-repository-collaborator
   */
  "PUT /repos/{owner}/{repo}/collaborators/{username}": {
    parameters: {
      owner: string;
      repo: string;
      username: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/collaborators/{username}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/collaborators/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any.
         * @default "push"
         */
        permission?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name repos/remove-collaborator
   * @summary Remove a repository collaborator
   * @description Removes a collaborator from a repository.
   *
   * To use this endpoint, the authenticated user must either be an administrator of the repository or target themselves for removal.
   *
   * This endpoint also:
   * - Cancels any outstanding invitations sent by the collaborator
   * - Unassigns the user from any issues
   * - Removes access to organization projects if the user is not an organization member and is not a collaborator on any other organization repositories.
   * - Unstars the repository
   * - Updates access permissions to packages
   *
   * Removing a user as a collaborator has the following effects on forks:
   *  - If the user had access to a fork through their membership to this repository, the user will also be removed from the fork.
   *  - If the user had their own fork of the repository, the fork will be deleted.
   *  - If the user still has read access to the repository, open pull requests by this user from a fork will be denied.
   *
   * > [!NOTE]
   * > A user can still have access to the repository through organization permissions like base repository permissions.
   *
   * Although the API responds immediately, the additional permission updates might take some extra time to complete in the background.
   *
   * For more information on fork permissions, see "[About permissions and visibility of forks](https://docs.github.com/pull-requests/collaborating-with-pull-requests/working-with-forks/about-permissions-and-visibility-of-forks)".
   * @see https://docs.github.com/rest/collaborators/collaborators#remove-a-repository-collaborator
   */
  "DELETE /repos/{owner}/{repo}/collaborators/{username}": {
    parameters: {
      owner: string;
      repo: string;
      username: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/collaborators/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/get-collaborator-permission-level
   * @summary Get repository permissions for a user
   * @description Checks the repository permission and role of a collaborator.
   *
   * The `permission` attribute provides the legacy base roles of `admin`, `write`, `read`, and `none`, where the
   * `maintain` role is mapped to `write` and the `triage` role is mapped to `read`.
   * The `role_name` attribute provides the name of the assigned role, including custom roles. The
   * `permission` can also be used to determine which base level of access the collaborator has to the repository.
   *
   * The calculated permissions are the highest role assigned to the collaborator after considering all sources of grants, including: repo, teams, organization, and enterprise.
   * There is presently not a way to differentiate between an organization level grant and a repository level grant from this endpoint response.
   * @see https://docs.github.com/rest/collaborators/collaborators#get-repository-permissions-for-a-user
   */
  "GET /repos/{owner}/{repo}/collaborators/{username}/permission": {
    parameters: {
      owner: string;
      repo: string;
      username: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/collaborators/{username}/permission";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RepositoryCollaboratorPermissionSchema;
    };
  };

  /**
   * @name repos/list-commit-comments-for-repo
   * @summary List commit comments for a repository
   * @description Lists the commit comments for a specified repository. Comments are ordered by ascending ID.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/commits/comments#list-commit-comments-for-a-repository
   */
  "GET /repos/{owner}/{repo}/comments": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/comments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CommitCommentSchema[];
    };
  };

  /**
   * @name repos/get-commit-comment
   * @summary Get a commit comment
   * @description Gets a specified commit comment.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/commits/comments#get-a-commit-comment
   */
  "GET /repos/{owner}/{repo}/comments/{comment_id}": {
    parameters: {
      owner: string;
      repo: string;
      comment_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/comments/{comment_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CommitCommentSchema;
    };
  };

  /**
   * @name repos/update-commit-comment
   * @summary Update a commit comment
   * @description Updates the contents of a specified commit comment.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/commits/comments#update-a-commit-comment
   */
  "PATCH /repos/{owner}/{repo}/comments/{comment_id}": {
    parameters: {
      owner: string;
      repo: string;
      comment_id: number;
    } & Endpoints["PATCH /repos/{owner}/{repo}/comments/{comment_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/comments/{comment_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The contents of the comment
         */
        body: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CommitCommentSchema;
    };
  };

  /**
   * @name repos/delete-commit-comment
   * @summary Delete a commit comment
   * @see https://docs.github.com/rest/commits/comments#delete-a-commit-comment
   */
  "DELETE /repos/{owner}/{repo}/comments/{comment_id}": {
    parameters: {
      owner: string;
      repo: string;
      comment_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/comments/{comment_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name reactions/list-for-commit-comment
   * @summary List reactions for a commit comment
   * @description List the reactions to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).
   * @see https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-commit-comment
   */
  "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions": {
    parameters: {
      owner: string;
      repo: string;
      comment_id: number;

      /**
       * @description Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a commit comment.
       */
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/comments/{comment_id}/reactions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReactionSchema[];
    };
  };

  /**
   * @name reactions/create-for-commit-comment
   * @summary Create reaction for a commit comment
   * @description Create a reaction to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
   * @see https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-commit-comment
   */
  "POST /repos/{owner}/{repo}/comments/{comment_id}/reactions": {
    parameters: {
      owner: string;
      repo: string;
      comment_id: number;
    } & Endpoints["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/comments/{comment_id}/reactions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the commit comment.
         */
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReactionSchema;
    };
  };

  /**
   * @name reactions/delete-for-commit-comment
   * @summary Delete a commit comment reaction
   * @description > [!NOTE]
   * > You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
   *
   * Delete a reaction to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).
   * @see https://docs.github.com/rest/reactions/reactions#delete-a-commit-comment-reaction
   */
  "DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}": {
    parameters: {
      owner: string;
      repo: string;
      comment_id: number;
      reaction_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/list-commits
   * @summary List commits
   * @description **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   * | `verified_at` | `string` | The date the signature was verified by GitHub. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   * @see https://docs.github.com/rest/commits/commits#list-commits
   */
  "GET /repos/{owner}/{repo}/commits": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`).
       */
      sha?: string;

      /**
       * @description Only commits containing this file path will be returned.
       */
      path?: string;

      /**
       * @description GitHub username or email address to use to filter by commit author.
       */
      author?: string;

      /**
       * @description GitHub username or email address to use to filter by commit committer.
       */
      committer?: string;

      /**
       * @description Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Due to limitations of Git, timestamps must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results may be returned.
       */
      since?: string;

      /**
       * @description Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Due to limitations of Git, timestamps must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results may be returned.
       */
      until?: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/commits";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CommitSchema[];
    };
  };

  /**
   * @name repos/list-branches-for-head-commit
   * @summary List branches for HEAD commit
   * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
   * @see https://docs.github.com/rest/commits/commits#list-branches-for-head-commit
   */
  "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head": {
    parameters: {
      owner: string;
      repo: string;
      commit_sha: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: BranchShortSchema[];
    };
  };

  /**
   * @name repos/list-comments-for-commit
   * @summary List commit comments
   * @description Lists the comments for a specified commit.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/commits/comments#list-commit-comments
   */
  "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments": {
    parameters: {
      owner: string;
      repo: string;
      commit_sha: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/commits/{commit_sha}/comments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CommitCommentSchema[];
    };
  };

  /**
   * @name repos/create-commit-comment
   * @summary Create a commit comment
   * @description Create a comment for a commit using its `:commit_sha`.
   *
   * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/commits/comments#create-a-commit-comment
   */
  "POST /repos/{owner}/{repo}/commits/{commit_sha}/comments": {
    parameters: {
      owner: string;
      repo: string;
      commit_sha: string;
    } & Endpoints["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/commits/{commit_sha}/comments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The contents of the comment.
         */
        body: string;

        /**
         * @description Relative path of the file to comment on.
         */
        path?: string;

        /**
         * @description Line index in the diff to comment on.
         */
        position?: number;

        /**
         * @description **Closing down notice**. Use **position** parameter instead. Line number in the file to comment on.
         */
        line?: number;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name repos/list-pull-requests-associated-with-commit
   * @summary List pull requests associated with a commit
   * @description Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, it will return merged and open pull requests associated with the commit.
   *
   * To list the open or merged pull requests associated with a branch, you can set the `commit_sha` parameter to the branch name.
   * @see https://docs.github.com/rest/commits/commits#list-pull-requests-associated-with-a-commit
   */
  "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls": {
    parameters: {
      owner: string;
      repo: string;
      commit_sha: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/commits/{commit_sha}/pulls";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PullRequestSimpleSchema[];
    };
  };

  /**
   * @name repos/get-commit
   * @summary Get a commit
   * @description Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
   *
   * > [!NOTE]
   * > If there are more than 300 files in the commit diff and the default JSON media type is requested, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." Pagination query parameters are not supported for these media types.
   *
   * - **`application/vnd.github.diff`**: Returns the diff of the commit. Larger diffs may time out and return a 5xx status code.
   * - **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property. Larger diffs may time out and return a 5xx status code.
   * - **`application/vnd.github.sha`**: Returns the commit's SHA-1 hash. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   * | `verified_at` | `string` | The date the signature was verified by GitHub. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   * @see https://docs.github.com/rest/commits/commits#get-a-commit
   */
  "GET /repos/{owner}/{repo}/commits/{ref}": {
    parameters: {
      owner: string;
      repo: string;
      page?: number;
      per_page?: number;
      ref: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/commits/{ref}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CommitSchema;
    };
  };

  /**
   * @name checks/list-for-ref
   * @summary List check runs for a Git reference
   * @description Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name.
   *
   * > [!NOTE]
   * > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * If there are more than 1000 check suites on a single git reference, this endpoint will limit check runs to the 1000 most recent check suites. To iterate over all possible check runs, use the [List check suites for a Git reference](https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference) endpoint and provide the `check_suite_id` parameter to the [List check runs in a check suite](https://docs.github.com/rest/reference/checks#list-check-runs-in-a-check-suite) endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
   * @see https://docs.github.com/rest/checks/runs#list-check-runs-for-a-git-reference
   */
  "GET /repos/{owner}/{repo}/commits/{ref}/check-runs": {
    parameters: {
      owner: string;
      repo: string;
      ref: string;
      check_name?: string;
      status?: "queued" | "in_progress" | "completed";

      /**
       * @description Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.
       */
      filter?: "latest" | "all";
      per_page?: number;
      page?: number;
      app_id?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/commits/{ref}/check-runs";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        check_runs: CheckRunSchema[];
      };
    };
  };

  /**
   * @name checks/list-suites-for-ref
   * @summary List check suites for a Git reference
   * @description Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name.
   *
   * > [!NOTE]
   * > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
   * @see https://docs.github.com/rest/checks/suites#list-check-suites-for-a-git-reference
   */
  "GET /repos/{owner}/{repo}/commits/{ref}/check-suites": {
    parameters: {
      owner: string;
      repo: string;
      ref: string;

      /**
       * @description Filters check suites by GitHub App `id`.
       * @example 1
       */
      app_id?: number;
      check_name?: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/commits/{ref}/check-suites";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        check_suites: CheckSuiteSchema[];
      };
    };
  };

  /**
   * @name repos/get-combined-status-for-ref
   * @summary Get the combined status for a specific reference
   * @description Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
   *
   *
   * Additionally, a combined `state` is returned. The `state` is one of:
   *
   * *   **failure** if any of the contexts report as `error` or `failure`
   * *   **pending** if there are no statuses or a context is `pending`
   * *   **success** if the latest status for all contexts is `success`
   * @see https://docs.github.com/rest/commits/statuses#get-the-combined-status-for-a-specific-reference
   */
  "GET /repos/{owner}/{repo}/commits/{ref}/status": {
    parameters: {
      owner: string;
      repo: string;
      ref: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/commits/{ref}/status";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CombinedCommitStatusSchema;
    };
  };

  /**
   * @name repos/list-commit-statuses-for-ref
   * @summary List commit statuses for a reference
   * @description Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
   *
   * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
   * @see https://docs.github.com/rest/commits/statuses#list-commit-statuses-for-a-reference
   */
  "GET /repos/{owner}/{repo}/commits/{ref}/statuses": {
    parameters: {
      owner: string;
      repo: string;
      ref: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/commits/{ref}/statuses";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: StatusSchema[];
    };
  };

  /**
   * @name repos/get-community-profile-metrics
   * @summary Get community profile metrics
   * @description Returns all community profile metrics for a repository. The repository cannot be a fork.
   *
   * The returned metrics include an overall health score, the repository description, the presence of documentation, the
   * detected code of conduct, the detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
   * README, and CONTRIBUTING files.
   *
   * The `health_percentage` score is defined as a percentage of how many of
   * the recommended community health files are present. For more information, see
   * "[About community profiles for public repositories](https://docs.github.com/communities/setting-up-your-project-for-healthy-contributions/about-community-profiles-for-public-repositories)."
   *
   * `content_reports_enabled` is only returned for organization-owned repositories.
   * @see https://docs.github.com/rest/metrics/community#get-community-profile-metrics
   */
  "GET /repos/{owner}/{repo}/community/profile": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/community/profile";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CommunityProfileSchema;
    };
  };

  /**
   * @name repos/compare-commits-with-basehead
   * @summary Compare two commits
   * @description Compares two commits against one another. You can compare refs (branches or tags) and commit SHAs in the same repository, or you can compare refs and commit SHAs that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."
   *
   * This endpoint is equivalent to running the `git log BASE..HEAD` command, but it returns commits in a different order. The `git log BASE..HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.diff`**: Returns the diff of the commit.
   * - **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property.
   *
   * The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
   *
   * When calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.
   *
   * **Working with large comparisons**
   *
   * To process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:
   *
   * - The list of changed files is only shown on the first page of results, and it includes up to 300 changed files for the entire comparison.
   * - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.
   *
   * For more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   * | `verified_at` | `string` | The date the signature was verified by GitHub. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   * @see https://docs.github.com/rest/commits/commits#compare-two-commits
   */
  "GET /repos/{owner}/{repo}/compare/{basehead}": {
    parameters: {
      owner: string;
      repo: string;
      page?: number;
      per_page?: number;

      /**
       * @description The base branch and head branch to compare. This parameter expects the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with a branch that exists in a different repository in the same network as `repo`, the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`.
       */
      basehead: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/compare/{basehead}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CommitComparisonSchema;
    };
  };

  /**
   * @name repos/get-content
   * @summary Get repository content
   * @description Gets the contents of a file or directory in a repository. Specify the file path or directory with the `path` parameter. If you omit the `path` parameter, you will receive the contents of the repository's root directory.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw file contents for files and symlinks.
   * - **`application/vnd.github.html+json`**: Returns the file contents in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
   * - **`application/vnd.github.object+json`**: Returns the contents in a consistent object format regardless of the content type. For example, instead of an array of objects for a directory, the response will be an object with an `entries` attribute containing the array of objects.
   *
   * If the content is a directory, the response will be an array of objects, one object for each item in the directory. When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value _should_ be "submodule". This behavior exists [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as "submodule".
   *
   * If the content is a symlink and the symlink's target is a normal file in the repository, then the API responds with the content of the file. Otherwise, the API responds with an object describing the symlink itself.
   *
   * If the content is a submodule, the `submodule_git_url` field identifies the location of the submodule repository, and the `sha` identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit. If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the github.com URLs (`html_url` and `_links["html"]`) will have null values.
   *
   * **Notes**:
   *
   * - To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/git/trees#get-a-tree).
   * - This API has an upper limit of 1,000 files for a directory. If you need to retrieve
   * more files, use the [Git Trees API](https://docs.github.com/rest/git/trees#get-a-tree).
   * - Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.
   * - If the requested file's size is:
   *   - 1 MB or smaller: All features of this endpoint are supported.
   *   - Between 1-100 MB: Only the `raw` or `object` custom media types are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty
   * string and the `encoding` field will be `"none"`. To get the contents of these larger files, use the `raw` media type.
   *   - Greater than 100 MB: This endpoint is not supported.
   * @see https://docs.github.com/rest/repos/contents#get-repository-content
   */
  "GET /repos/{owner}/{repo}/contents/{path}": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description path parameter
       */
      path: string;

      /**
       * @description The name of the commit/branch/tag. Default: the repository’s default branch.
       */
      ref?: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/contents/{path}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data:
        | ContentDirectorySchema
        | ContentFileSchema
        | ContentSymlinkSchema
        | ContentSubmoduleSchema;
    };
  };

  /**
   * @name repos/create-or-update-file-contents
   * @summary Create or update file contents
   * @description Creates a new file or replaces an existing file in a repository.
   *
   * > [!NOTE]
   * > If you use this endpoint and the "[Delete a file](https://docs.github.com/rest/repos/contents/#delete-a-file)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The `workflow` scope is also required in order to modify files in the `.github/workflows` directory.
   * @see https://docs.github.com/rest/repos/contents#create-or-update-file-contents
   */
  "PUT /repos/{owner}/{repo}/contents/{path}": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description path parameter
       */
      path: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/contents/{path}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/contents/{path}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The commit message.
         */
        message: string;

        /**
         * @description The new file content, using Base64 encoding.
         */
        content: string;

        /**
         * @description **Required if you are updating a file**. The blob SHA of the file being replaced.
         */
        sha?: string;

        /**
         * @description The branch name. Default: the repository’s default branch.
         */
        branch?: string;

        /**
         * @description The person that committed the file. Default: the authenticated user.
         */
        committer?: {
          /**
           * @description The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
           */
          name: string;

          /**
           * @description The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
           */
          email: string;

          /**
           * @example "2013-01-05T13:13:22+05:00"
           */
          date?: string;
        };

        /**
         * @description The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
         */
        author?: {
          /**
           * @description The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
           */
          name: string;

          /**
           * @description The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
           */
          email: string;

          /**
           * @example "2013-01-15T17:13:22+05:00"
           */
          date?: string;
        };
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: FileCommitSchema;
    };
  };

  /**
   * @name repos/delete-file
   * @summary Delete a file
   * @description Deletes a file in a repository.
   *
   * You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
   *
   * The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
   *
   * You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
   *
   * > [!NOTE]
   * > If you use this endpoint and the "[Create or update file contents](https://docs.github.com/rest/repos/contents/#create-or-update-file-contents)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
   * @see https://docs.github.com/rest/repos/contents#delete-a-file
   */
  "DELETE /repos/{owner}/{repo}/contents/{path}": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description path parameter
       */
      path: string;
    } & Endpoints["DELETE /repos/{owner}/{repo}/contents/{path}"]["request"]["data"];
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/contents/{path}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The commit message.
         */
        message: string;

        /**
         * @description The blob SHA of the file being deleted.
         */
        sha: string;

        /**
         * @description The branch name. Default: the repository’s default branch
         */
        branch?: string;

        /**
         * @description object containing information about the committer.
         */
        committer?: {
          /**
           * @description The name of the author (or committer) of the commit
           */
          name?: string;

          /**
           * @description The email of the author (or committer) of the commit
           */
          email?: string;
        };

        /**
         * @description object containing information about the author.
         */
        author?: {
          /**
           * @description The name of the author (or committer) of the commit
           */
          name?: string;

          /**
           * @description The email of the author (or committer) of the commit
           */
          email?: string;
        };
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: FileCommitSchema;
    };
  };

  /**
   * @name repos/list-contributors
   * @summary List repository contributors
   * @description Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
   *
   * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
   * @see https://docs.github.com/rest/repos/repos#list-repository-contributors
   */
  "GET /repos/{owner}/{repo}/contributors": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description Set to `1` or `true` to include anonymous contributors in results.
       */
      anon?: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/contributors";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ContributorSchema[];
    };
  };

  /**
   * @name dependabot/list-alerts-for-repo
   * @summary List Dependabot alerts for a repository
   * @description OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
   * @see https://docs.github.com/rest/dependabot/alerts#list-dependabot-alerts-for-a-repository
   */
  "GET /repos/{owner}/{repo}/dependabot/alerts": {
    parameters: {
      owner: string;
      repo: string;
      state?: string;
      severity?: string;
      ecosystem?: string;
      package?: string;
      manifest?: string;
      epss_percentage?: string;
      has?: string | "patch"[];
      scope?: "development" | "runtime";
      sort?: "created" | "updated" | "epss_percentage";
      direction?: "asc" | "desc";

      /**
       * @description **Closing down notice**. Page number of the results to fetch. Use cursor-based pagination with `before` or `after` instead.
       * @deprecated
       * @deprecated
       */
      page?: number;

      /**
       * @description The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
       * @deprecated
       * @deprecated
       */
      per_page?: number;
      before?: string;
      after?: string;
      first?: number;
      last?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/dependabot/alerts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DependabotAlertSchema[];
    };
  };

  /**
   * @name dependabot/get-alert
   * @summary Get a Dependabot alert
   * @description OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
   * @see https://docs.github.com/rest/dependabot/alerts#get-a-dependabot-alert
   */
  "GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}": {
    parameters: {
      owner: string;
      repo: string;
      alert_number: {};
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/dependabot/alerts/{alert_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DependabotAlertSchema;
    };
  };

  /**
   * @name dependabot/update-alert
   * @summary Update a Dependabot alert
   * @description The authenticated user must have access to security alerts for the repository to use this endpoint. For more information, see "[Granting access to security alerts](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository#granting-access-to-security-alerts)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
   * @see https://docs.github.com/rest/dependabot/alerts#update-a-dependabot-alert
   */
  "PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}": {
    parameters: {
      owner: string;
      repo: string;
      alert_number: {};
    } & Endpoints["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/dependabot/alerts/{alert_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The state of the Dependabot alert.
         * A `dismissed_reason` must be provided when setting the state to `dismissed`.
         */
        state: "dismissed" | "open";

        /**
         * @description **Required when `state` is `dismissed`.** A reason for dismissing the alert.
         */
        dismissed_reason?:
          | "fix_started"
          | "inaccurate"
          | "no_bandwidth"
          | "not_used"
          | "tolerable_risk";

        /**
         * @description An optional comment associated with dismissing the alert.
         */
        dismissed_comment?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DependabotAlertSchema;
    };
  };

  /**
   * @name dependabot/list-repo-secrets
   * @summary List repository secrets
   * @description Lists all secrets available in a repository without revealing their encrypted
   * values.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/dependabot/secrets#list-repository-secrets
   */
  "GET /repos/{owner}/{repo}/dependabot/secrets": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/dependabot/secrets";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        secrets: DependabotSecretSchema[];
      };
    };
  };

  /**
   * @name dependabot/get-repo-public-key
   * @summary Get a repository public key
   * @description Gets your public key, which you need to encrypt secrets. You need to
   * encrypt a secret before you can create or update secrets. Anyone with read access
   * to the repository can use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint if the repository is private.
   * @see https://docs.github.com/rest/dependabot/secrets#get-a-repository-public-key
   */
  "GET /repos/{owner}/{repo}/dependabot/secrets/public-key": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/dependabot/secrets/public-key";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DependabotPublicKeySchema;
    };
  };

  /**
   * @name dependabot/get-repo-secret
   * @summary Get a repository secret
   * @description Gets a single repository secret without revealing its encrypted value.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/dependabot/secrets#get-a-repository-secret
   */
  "GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}": {
    parameters: {
      owner: string;
      repo: string;
      secret_name: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DependabotSecretSchema;
    };
  };

  /**
   * @name dependabot/create-or-update-repo-secret
   * @summary Create or update a repository secret
   * @description Creates or updates a repository secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/dependabot/secrets#create-or-update-a-repository-secret
   */
  "PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}": {
    parameters: {
      owner: string;
      repo: string;
      secret_name: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/dependabot/secrets#get-a-repository-public-key) endpoint.
         */
        encrypted_value?: string;

        /**
         * @description ID of the key you used to encrypt the secret.
         */
        key_id?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name dependabot/delete-repo-secret
   * @summary Delete a repository secret
   * @description Deletes a secret in a repository using the secret name.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/dependabot/secrets#delete-a-repository-secret
   */
  "DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}": {
    parameters: {
      owner: string;
      repo: string;
      secret_name: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name dependency-graph/diff-range
   * @summary Get a diff of the dependencies between commits
   * @description Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.
   * @see https://docs.github.com/rest/dependency-graph/dependency-review#get-a-diff-of-the-dependencies-between-commits
   */
  "GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description The base and head Git revisions to compare. The Git revisions will be resolved to commit SHAs. Named revisions will be resolved to their corresponding HEAD commits, and an appropriate merge base will be determined. This parameter expects the format `{base}...{head}`.
       */
      basehead: string;
      name?: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/dependency-graph/compare/{basehead}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DependencyGraphDiffSchema;
    };
  };

  /**
   * @name dependency-graph/export-sbom
   * @summary Export a software bill of materials (SBOM) for a repository.
   * @description Exports the software bill of materials (SBOM) for a repository in SPDX JSON format.
   * @see https://docs.github.com/rest/dependency-graph/sboms#export-a-software-bill-of-materials-sbom-for-a-repository
   */
  "GET /repos/{owner}/{repo}/dependency-graph/sbom": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/dependency-graph/sbom";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DependencyGraphSpdxSbomSchema;
    };
  };

  /**
   * @name dependency-graph/create-repository-snapshot
   * @summary Create a snapshot of dependencies for a repository
   * @description Create a new snapshot of a repository's dependencies.
   *
   * The authenticated user must have access to the repository.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/dependency-graph/dependency-submission#create-a-snapshot-of-dependencies-for-a-repository
   */
  "POST /repos/{owner}/{repo}/dependency-graph/snapshots": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/dependency-graph/snapshots"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/dependency-graph/snapshots";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name repos/list-deployments
   * @summary List deployments
   * @description Simple filtering of deployments is available via query parameters:
   * @see https://docs.github.com/rest/deployments/deployments#list-deployments
   */
  "GET /repos/{owner}/{repo}/deployments": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description The SHA recorded at creation time.
       */
      sha?: string;

      /**
       * @description The name of the ref. This can be a branch, tag, or SHA.
       */
      ref?: string;

      /**
       * @description The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).
       */
      task?: string;

      /**
       * @description The name of the environment that was deployed to (e.g., `staging` or `production`).
       */
      environment?: string | null;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/deployments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DeploymentSchema[];
    };
  };

  /**
   * @name repos/create-deployment
   * @summary Create a deployment
   * @description Deployments offer a few configurable parameters with certain defaults.
   *
   * The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
   * before we merge a pull request.
   *
   * The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
   * multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
   * makes it easier to track which environments have requested deployments. The default environment is `production`.
   *
   * The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
   * the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
   * the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
   * return a failure response.
   *
   * By default, [commit statuses](https://docs.github.com/rest/commits/statuses) for every submitted context must be in a `success`
   * state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
   * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
   * not require any contexts or create any commit statuses, the deployment will always succeed.
   *
   * The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
   * field that will be passed on when a deployment event is dispatched.
   *
   * The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
   * be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
   * application with debugging enabled.
   *
   * Merged branch response:
   *
   * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
   * a deployment. This auto-merge happens when:
   * *   Auto-merge option is enabled in the repository
   * *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
   * *   There are no merge conflicts
   *
   * If there are no new commits in the base branch, a new request to create a deployment should give a successful
   * response.
   *
   * Merge conflict response:
   *
   * This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
   * be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
   *
   * Failed commit status checks:
   *
   * This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
   * status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` or `repo_deployment` scope to use this endpoint.
   * @see https://docs.github.com/rest/deployments/deployments#create-a-deployment
   */
  "POST /repos/{owner}/{repo}/deployments": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/deployments"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/deployments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The ref to deploy. This can be a branch, tag, or SHA.
         */
        ref: string;

        /**
         * @description Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
         * @default "deploy"
         */
        task?: string;

        /**
         * @description Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
         * @default true
         */
        auto_merge?: boolean;

        /**
         * @description The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
         */
        required_contexts?: string[];
        payload?:
          | {
              [key: string]: any;
            }
          | string;

        /**
         * @description Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
         * @default "production"
         */
        environment?: string;

        /**
         * @description Short description of the deployment.
         * @default ""
         */
        description?: string | null;

        /**
         * @description Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
         * @default false
         */
        transient_environment?: boolean;

        /**
         * @description Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
         */
        production_environment?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name repos/get-deployment
   * @summary Get a deployment
   * @see https://docs.github.com/rest/deployments/deployments#get-a-deployment
   */
  "GET /repos/{owner}/{repo}/deployments/{deployment_id}": {
    parameters: {
      owner: string;
      repo: string;
      deployment_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/deployments/{deployment_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DeploymentSchema;
    };
  };

  /**
   * @name repos/delete-deployment
   * @summary Delete a deployment
   * @description If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment.
   *
   * To set a deployment as inactive, you must:
   *
   * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
   * *   Mark the active deployment as inactive by adding any non-successful deployment status.
   *
   * For more information, see "[Create a deployment](https://docs.github.com/rest/deployments/deployments/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/deployments/statuses#create-a-deployment-status)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` or `repo_deployment` scope to use this endpoint.
   * @see https://docs.github.com/rest/deployments/deployments#delete-a-deployment
   */
  "DELETE /repos/{owner}/{repo}/deployments/{deployment_id}": {
    parameters: {
      owner: string;
      repo: string;
      deployment_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/deployments/{deployment_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/list-deployment-statuses
   * @summary List deployment statuses
   * @description Users with pull access can view deployment statuses for a deployment:
   * @see https://docs.github.com/rest/deployments/statuses#list-deployment-statuses
   */
  "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses": {
    parameters: {
      owner: string;
      repo: string;
      deployment_id: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DeploymentStatusSchema[];
    };
  };

  /**
   * @name repos/create-deployment-status
   * @summary Create a deployment status
   * @description Users with `push` access can create deployment statuses for a given deployment.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo_deployment` scope to use this endpoint.
   * @see https://docs.github.com/rest/deployments/statuses#create-a-deployment-status
   */
  "POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses": {
    parameters: {
      owner: string;
      repo: string;
      deployment_id: number;
    } & Endpoints["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
         */
        state:
          | "error"
          | "failure"
          | "inactive"
          | "in_progress"
          | "queued"
          | "pending"
          | "success";

        /**
         * @description The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment.
         *
         * > [!NOTE]
         * > It's recommended to use the `log_url` parameter, which replaces `target_url`.
         * @default ""
         */
        target_url?: string;

        /**
         * @description The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
         * @default ""
         */
        log_url?: string;

        /**
         * @description A short description of the status. The maximum description length is 140 characters.
         * @default ""
         */
        description?: string;

        /**
         * @description Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. If not defined, the environment of the previous status on the deployment will be used, if it exists. Otherwise, the environment of the deployment will be used.
         */
        environment?: string;

        /**
         * @description Sets the URL for accessing your environment. Default: `""`
         * @default ""
         */
        environment_url?: string;

        /**
         * @description Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
         */
        auto_inactive?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name repos/get-deployment-status
   * @summary Get a deployment status
   * @description Users with pull access can view a deployment status for a deployment:
   * @see https://docs.github.com/rest/deployments/statuses#get-a-deployment-status
   */
  "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}": {
    parameters: {
      owner: string;
      repo: string;
      deployment_id: number;
      status_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DeploymentStatusSchema;
    };
  };

  /**
   * @name repos/create-dispatch-event
   * @summary Create a repository dispatch event
   * @description You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."
   *
   * The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
   *
   * This input example shows how you can use the `client_payload` as a test to debug your workflow.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/repos/repos#create-a-repository-dispatch-event
   */
  "POST /repos/{owner}/{repo}/dispatches": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/dispatches"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/dispatches";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description A custom webhook event name. Must be 100 characters or fewer.
         */
        event_type: string;

        /**
         * @description JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10. The total size of the JSON payload must be less than 64KB.
         */
        client_payload?: {
          [key: string]: any;
        };
      };
    };
    response: never;
  };

  /**
   * @name repos/get-all-environments
   * @summary List environments
   * @description Lists the environments for a repository.
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
   * @see https://docs.github.com/rest/deployments/environments#list-environments
   */
  "GET /repos/{owner}/{repo}/environments": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/environments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        /**
         * @description The number of environments in this repository
         * @example 5
         */
        total_count?: number;
        environments?: EnvironmentSchema[];
      };
    };
  };

  /**
   * @name repos/get-environment
   * @summary Get an environment
   * @description > [!NOTE]
   * > To get information about name patterns that branches must match in order to deploy to this environment, see "[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)."
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
   * @see https://docs.github.com/rest/deployments/environments#get-an-environment
   */
  "GET /repos/{owner}/{repo}/environments/{environment_name}": {
    parameters: {
      owner: string;
      repo: string;
      environment_name: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/environments/{environment_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: EnvironmentSchema;
    };
  };

  /**
   * @name repos/create-or-update-environment
   * @summary Create or update an environment
   * @description Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
   *
   * > [!NOTE]
   * > To create or update name patterns that branches must match in order to deploy to this environment, see "[Deployment branch policies](/rest/deployments/branch-policies)."
   *
   * > [!NOTE]
   * > To create or update secrets for an environment, see "[GitHub Actions secrets](/rest/actions/secrets)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/deployments/environments#create-or-update-an-environment
   */
  "PUT /repos/{owner}/{repo}/environments/{environment_name}": {
    parameters: {
      owner: string;
      repo: string;
      environment_name: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/environments/{environment_name}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/environments/{environment_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        wait_timer?: WaitTimerSchema;
        prevent_self_review?: PreventSelfReviewSchema;

        /**
         * @description The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
         */
        reviewers?:
          | {
              type?: DeploymentReviewerTypeSchema;

              /**
               * @description The id of the user or team who can review the deployment
               * @example 4532992
               */
              id?: number;
            }[]
          | null;
        deployment_branch_policy?: DeploymentBranchPolicySettingsSchema;
      } | null;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: EnvironmentSchema;
    };
  };

  /**
   * @name repos/delete-an-environment
   * @summary Delete an environment
   * @description OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/deployments/environments#delete-an-environment
   */
  "DELETE /repos/{owner}/{repo}/environments/{environment_name}": {
    parameters: {
      owner: string;
      repo: string;
      environment_name: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/environments/{environment_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/list-deployment-branch-policies
   * @summary List deployment branch policies
   * @description Lists the deployment branch policies for an environment.
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
   * @see https://docs.github.com/rest/deployments/branch-policies#list-deployment-branch-policies
   */
  "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies": {
    parameters: {
      owner: string;
      repo: string;
      environment_name: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        /**
         * @description The number of deployment branch policies for the environment.
         * @example 2
         */
        total_count: number;
        branch_policies: DeploymentBranchPolicySchema[];
      };
    };
  };

  /**
   * @name repos/create-deployment-branch-policy
   * @summary Create a deployment branch policy
   * @description Creates a deployment branch or tag policy for an environment.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/deployments/branch-policies#create-a-deployment-branch-policy
   */
  "POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies": {
    parameters: {
      owner: string;
      repo: string;
      environment_name: string;
    } & Endpoints["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DeploymentBranchPolicySchema;
    };
  };

  /**
   * @name repos/get-deployment-branch-policy
   * @summary Get a deployment branch policy
   * @description Gets a deployment branch or tag policy for an environment.
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
   * @see https://docs.github.com/rest/deployments/branch-policies#get-a-deployment-branch-policy
   */
  "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}": {
    parameters: {
      owner: string;
      repo: string;
      environment_name: string;
      branch_policy_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DeploymentBranchPolicySchema;
    };
  };

  /**
   * @name repos/update-deployment-branch-policy
   * @summary Update a deployment branch policy
   * @description Updates a deployment branch or tag policy for an environment.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/deployments/branch-policies#update-a-deployment-branch-policy
   */
  "PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}": {
    parameters: {
      owner: string;
      repo: string;
      environment_name: string;
      branch_policy_id: number;
    } & Endpoints["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DeploymentBranchPolicySchema;
    };
  };

  /**
   * @name repos/delete-deployment-branch-policy
   * @summary Delete a deployment branch policy
   * @description Deletes a deployment branch or tag policy for an environment.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/deployments/branch-policies#delete-a-deployment-branch-policy
   */
  "DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}": {
    parameters: {
      owner: string;
      repo: string;
      environment_name: string;
      branch_policy_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/get-all-deployment-protection-rules
   * @summary Get all deployment protection rules for an environment
   * @description Gets all custom deployment protection rules that are enabled for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
   *
   * For more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app).
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
   * @see https://docs.github.com/rest/deployments/protection-rules#get-all-deployment-protection-rules-for-an-environment
   */
  "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules": {
    parameters: {
      environment_name: string;
      repo: string;
      owner: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        /**
         * @description The number of enabled custom deployment protection rules for this environment
         * @example 10
         */
        total_count?: number;
        custom_deployment_protection_rules?: DeploymentProtectionRuleSchema[];
      };
    };
  };

  /**
   * @name repos/create-deployment-protection-rule
   * @summary Create a custom deployment protection rule on an environment
   * @description Enable a custom deployment protection rule for an environment.
   *
   * The authenticated user must have admin or owner permissions to the repository to use this endpoint.
   *
   * For more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app), as well as the [guide to creating custom deployment protection rules](https://docs.github.com/actions/managing-workflow-runs-and-deployments/managing-deployments/creating-custom-deployment-protection-rules).
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/deployments/protection-rules#create-a-custom-deployment-protection-rule-on-an-environment
   */
  "POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules": {
    parameters: {
      environment_name: string;
      repo: string;
      owner: string;
    } & Endpoints["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The ID of the custom app that will be enabled on the environment.
         */
        integration_id?: number;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name repos/list-custom-deployment-rule-integrations
   * @summary List custom deployment rule integrations available for an environment
   * @description Gets all custom deployment protection rule integrations that are available for an environment.
   *
   * The authenticated user must have admin or owner permissions to the repository to use this endpoint.
   *
   * For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
   *
   * For more information about the app that is providing this custom deployment rule, see "[GET an app](https://docs.github.com/rest/apps/apps#get-an-app)".
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
   * @see https://docs.github.com/rest/deployments/protection-rules#list-custom-deployment-rule-integrations-available-for-an-environment
   */
  "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps": {
    parameters: {
      environment_name: string;
      repo: string;
      owner: string;
      page?: number;
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        /**
         * @description The total number of custom deployment protection rule integrations available for this environment.
         * @example 35
         */
        total_count?: number;
        available_custom_deployment_protection_rule_integrations?: CustomDeploymentRuleAppSchema[];
      };
    };
  };

  /**
   * @name repos/get-custom-deployment-protection-rule
   * @summary Get a custom deployment protection rule
   * @description Gets an enabled custom deployment protection rule for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
   *
   * For more information about the app that is providing this custom deployment rule, see [`GET /apps/{app_slug}`](https://docs.github.com/rest/apps/apps#get-an-app).
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
   * @see https://docs.github.com/rest/deployments/protection-rules#get-a-custom-deployment-protection-rule
   */
  "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}": {
    parameters: {
      owner: string;
      repo: string;
      environment_name: string;
      protection_rule_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DeploymentProtectionRuleSchema;
    };
  };

  /**
   * @name repos/disable-deployment-protection-rule
   * @summary Disable a custom protection rule for an environment
   * @description Disables a custom deployment protection rule for an environment.
   *
   * The authenticated user must have admin or owner permissions to the repository to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/deployments/protection-rules#disable-a-custom-protection-rule-for-an-environment
   */
  "DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}": {
    parameters: {
      environment_name: string;
      repo: string;
      owner: string;
      protection_rule_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/list-environment-secrets
   * @summary List environment secrets
   * @description Lists all secrets available in an environment without revealing their
   * encrypted values.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/secrets#list-environment-secrets
   */
  "GET /repos/{owner}/{repo}/environments/{environment_name}/secrets": {
    parameters: {
      owner: string;
      repo: string;
      environment_name: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/environments/{environment_name}/secrets";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        secrets: ActionsSecretSchema[];
      };
    };
  };

  /**
   * @name actions/get-environment-public-key
   * @summary Get an environment public key
   * @description Get the public key for an environment, which you need to encrypt environment
   * secrets. You need to encrypt a secret before you can create or update secrets.
   *
   * Anyone with read access to the repository can use this endpoint.
   *
   * If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/secrets#get-an-environment-public-key
   */
  "GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key": {
    parameters: {
      owner: string;
      repo: string;
      environment_name: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsPublicKeySchema;
    };
  };

  /**
   * @name actions/get-environment-secret
   * @summary Get an environment secret
   * @description Gets a single environment secret without revealing its encrypted value.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/secrets#get-an-environment-secret
   */
  "GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}": {
    parameters: {
      owner: string;
      repo: string;
      environment_name: string;
      secret_name: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsSecretSchema;
    };
  };

  /**
   * @name actions/create-or-update-environment-secret
   * @summary Create or update an environment secret
   * @description Creates or updates an environment secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/secrets#create-or-update-an-environment-secret
   */
  "PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}": {
    parameters: {
      owner: string;
      repo: string;
      environment_name: string;
      secret_name: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/actions/secrets#get-an-environment-public-key) endpoint.
         */
        encrypted_value: string;

        /**
         * @description ID of the key you used to encrypt the secret.
         */
        key_id: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name actions/delete-environment-secret
   * @summary Delete an environment secret
   * @description Deletes a secret in an environment using the secret name.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read secrets.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/secrets#delete-an-environment-secret
   */
  "DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}": {
    parameters: {
      owner: string;
      repo: string;
      environment_name: string;
      secret_name: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name actions/list-environment-variables
   * @summary List environment variables
   * @description Lists all environment variables.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read variables.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/variables#list-environment-variables
   */
  "GET /repos/{owner}/{repo}/environments/{environment_name}/variables": {
    parameters: {
      owner: string;
      repo: string;
      environment_name: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/environments/{environment_name}/variables";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        variables: ActionsVariableSchema[];
      };
    };
  };

  /**
   * @name actions/create-environment-variable
   * @summary Create an environment variable
   * @description Create an environment variable that you can reference in a GitHub Actions workflow.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read variables.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/variables#create-an-environment-variable
   */
  "POST /repos/{owner}/{repo}/environments/{environment_name}/variables": {
    parameters: {
      owner: string;
      repo: string;
      environment_name: string;
    } & Endpoints["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/environments/{environment_name}/variables";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the variable.
         */
        name: string;

        /**
         * @description The value of the variable.
         */
        value: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name actions/get-environment-variable
   * @summary Get an environment variable
   * @description Gets a specific variable in an environment.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read variables.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/variables#get-an-environment-variable
   */
  "GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}": {
    parameters: {
      owner: string;
      repo: string;
      environment_name: string;
      name: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsVariableSchema;
    };
  };

  /**
   * @name actions/update-environment-variable
   * @summary Update an environment variable
   * @description Updates an environment variable that you can reference in a GitHub Actions workflow.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read variables.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/variables#update-an-environment-variable
   */
  "PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}": {
    parameters: {
      owner: string;
      repo: string;
      name: string;
      environment_name: string;
    } & Endpoints["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the variable.
         */
        name?: string;

        /**
         * @description The value of the variable.
         */
        value?: string;
      };
    };
    response: never;
  };

  /**
   * @name actions/delete-environment-variable
   * @summary Delete an environment variable
   * @description Deletes an environment variable using the variable name.
   *
   * Authenticated users must have collaborator access to a repository to create, update, or read variables.
   *
   * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/actions/variables#delete-an-environment-variable
   */
  "DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}": {
    parameters: {
      owner: string;
      repo: string;
      name: string;
      environment_name: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name activity/list-repo-events
   * @summary List repository events
   * @description > [!NOTE]
   * > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
   * @see https://docs.github.com/rest/activity/events#list-repository-events
   */
  "GET /repos/{owner}/{repo}/events": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/events";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: EventSchema[];
    };
  };

  /**
   * @name repos/list-forks
   * @summary List forks
   * @see https://docs.github.com/rest/repos/forks#list-forks
   */
  "GET /repos/{owner}/{repo}/forks": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description The sort order. `stargazers` will sort by star count.
       */
      sort?: "newest" | "oldest" | "stargazers" | "watchers";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/forks";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MinimalRepositorySchema[];
    };
  };

  /**
   * @name repos/create-fork
   * @summary Create a fork
   * @description Create a fork for the authenticated user.
   *
   * > [!NOTE]
   * > Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
   *
   * > [!NOTE]
   * > Although this endpoint works with GitHub Apps, the GitHub App must be installed on the destination account with access to all repositories and on the source account with access to the source repository.
   * @see https://docs.github.com/rest/repos/forks#create-a-fork
   */
  "POST /repos/{owner}/{repo}/forks": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/forks"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/forks";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Optional parameter to specify the organization name if forking into an organization.
         */
        organization?: string;

        /**
         * @description When forking from an existing repository, a new name for the fork.
         */
        name?: string;

        /**
         * @description When forking from an existing repository, fork with only the default branch.
         */
        default_branch_only?: boolean;
      } | null;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: FullRepositorySchema;
    };
  };

  /**
   * @name git/create-blob
   * @summary Create a blob
   * @see https://docs.github.com/rest/git/blobs#create-a-blob
   */
  "POST /repos/{owner}/{repo}/git/blobs": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/git/blobs"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/git/blobs";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The new blob's content.
         */
        content: string;

        /**
         * @description The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
         * @default "utf-8"
         */
        encoding?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name git/get-blob
   * @summary Get a blob
   * @description The `content` in the response will always be Base64 encoded.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw blob data.
   * - **`application/vnd.github+json`**: Returns a JSON representation of the blob with `content` as a base64 encoded string. This is the default if no media type is specified.
   *
   * **Note** This endpoint supports blobs up to 100 megabytes in size.
   * @see https://docs.github.com/rest/git/blobs#get-a-blob
   */
  "GET /repos/{owner}/{repo}/git/blobs/{file_sha}": {
    parameters: {
      owner: string;
      repo: string;
      file_sha: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/git/blobs/{file_sha}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: BlobSchema;
    };
  };

  /**
   * @name git/create-commit
   * @summary Create a commit
   * @description Creates a new Git [commit object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   * | `verified_at` | `string` | The date the signature was verified by GitHub. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   * @see https://docs.github.com/rest/git/commits#create-a-commit
   */
  "POST /repos/{owner}/{repo}/git/commits": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/git/commits"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/git/commits";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The commit message
         */
        message: string;

        /**
         * @description The SHA of the tree object this commit points to
         */
        tree: string;

        /**
         * @description The full SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.
         */
        parents?: string[];

        /**
         * @description Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.
         */
        author?: {
          /**
           * @description The name of the author (or committer) of the commit
           */
          name: string;

          /**
           * @description The email of the author (or committer) of the commit
           */
          email: string;

          /**
           * @description Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
           */
          date?: string;
        };

        /**
         * @description Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.
         */
        committer?: {
          /**
           * @description The name of the author (or committer) of the commit
           */
          name?: string;

          /**
           * @description The email of the author (or committer) of the commit
           */
          email?: string;

          /**
           * @description Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
           */
          date?: string;
        };

        /**
         * @description The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.
         */
        signature?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name git/get-commit
   * @summary Get a commit object
   * @description Gets a Git [commit object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).
   *
   * To get the contents of a commit, see "[Get a commit](/rest/commits/commits#get-a-commit)."
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   * | `verified_at` | `string` | The date the signature was verified by GitHub. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   * @see https://docs.github.com/rest/git/commits#get-a-commit-object
   */
  "GET /repos/{owner}/{repo}/git/commits/{commit_sha}": {
    parameters: {
      owner: string;
      repo: string;
      commit_sha: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/git/commits/{commit_sha}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: GitCommitSchema;
    };
  };

  /**
   * @name git/list-matching-refs
   * @summary List matching references
   * @description Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
   *
   * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
   *
   * > [!NOTE]
   * > You need to explicitly [request a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
   *
   * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
   * @see https://docs.github.com/rest/git/refs#list-matching-references
   */
  "GET /repos/{owner}/{repo}/git/matching-refs/{ref}": {
    parameters: {
      owner: string;
      repo: string;
      ref: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/git/matching-refs/{ref}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: GitRefSchema[];
    };
  };

  /**
   * @name git/get-ref
   * @summary Get a reference
   * @description Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
   *
   * > [!NOTE]
   * > You need to explicitly [request a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
   * @see https://docs.github.com/rest/git/refs#get-a-reference
   */
  "GET /repos/{owner}/{repo}/git/ref/{ref}": {
    parameters: {
      owner: string;
      repo: string;
      ref: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/git/ref/{ref}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: GitRefSchema;
    };
  };

  /**
   * @name git/create-ref
   * @summary Create a reference
   * @description Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
   * @see https://docs.github.com/rest/git/refs#create-a-reference
   */
  "POST /repos/{owner}/{repo}/git/refs": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/git/refs"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/git/refs";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.
         */
        ref: string;

        /**
         * @description The SHA1 value for this reference.
         */
        sha: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name git/update-ref
   * @summary Update a reference
   * @description Updates the provided reference to point to a new SHA. For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
   * @see https://docs.github.com/rest/git/refs#update-a-reference
   */
  "PATCH /repos/{owner}/{repo}/git/refs/{ref}": {
    parameters: {
      owner: string;
      repo: string;
      ref: string;
    } & Endpoints["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/git/refs/{ref}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The SHA1 value to set this reference to
         */
        sha: string;

        /**
         * @description Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.
         * @default false
         */
        force?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: GitRefSchema;
    };
  };

  /**
   * @name git/delete-ref
   * @summary Delete a reference
   * @description Deletes the provided reference.
   * @see https://docs.github.com/rest/git/refs#delete-a-reference
   */
  "DELETE /repos/{owner}/{repo}/git/refs/{ref}": {
    parameters: {
      owner: string;
      repo: string;
      ref: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/git/refs/{ref}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name git/create-tag
   * @summary Create a tag object
   * @description Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/git/refs#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/git/refs#create-a-reference) the tag reference - this call would be unnecessary.
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   * | `verified_at` | `string` | The date the signature was verified by GitHub. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   * @see https://docs.github.com/rest/git/tags#create-a-tag-object
   */
  "POST /repos/{owner}/{repo}/git/tags": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/git/tags"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/git/tags";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The tag's name. This is typically a version (e.g., "v0.0.1").
         */
        tag: string;

        /**
         * @description The tag message.
         */
        message: string;

        /**
         * @description The SHA of the git object this is tagging.
         */
        object: string;

        /**
         * @description The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
         */
        type: "commit" | "tree" | "blob";

        /**
         * @description An object with information about the individual creating the tag.
         */
        tagger?: {
          /**
           * @description The name of the author of the tag
           */
          name: string;

          /**
           * @description The email of the author of the tag
           */
          email: string;

          /**
           * @description When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
           */
          date?: string;
        };
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name git/get-tag
   * @summary Get a tag
   * @description **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   * | `verified_at` | `string` | The date the signature was verified by GitHub. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   * @see https://docs.github.com/rest/git/tags#get-a-tag
   */
  "GET /repos/{owner}/{repo}/git/tags/{tag_sha}": {
    parameters: {
      owner: string;
      repo: string;
      tag_sha: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/git/tags/{tag_sha}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: GitTagSchema;
    };
  };

  /**
   * @name git/create-tree
   * @summary Create a tree
   * @description The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
   *
   * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/git/commits#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/git/refs#update-a-reference)."
   *
   * Returns an error if you try to delete a file that does not exist.
   * @see https://docs.github.com/rest/git/trees#create-a-tree
   */
  "POST /repos/{owner}/{repo}/git/trees": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/git/trees"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/git/trees";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
         */
        tree: {
          /**
           * @description The file referenced in the tree.
           */
          path?: string;

          /**
           * @description The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.
           */
          mode?: "100644" | "100755" | "040000" | "160000" | "120000";

          /**
           * @description Either `blob`, `tree`, or `commit`.
           */
          type?: "blob" | "tree" | "commit";

          /**
           * @description The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.
           *
           * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
           */
          sha?: string | null;

          /**
           * @description The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.
           *
           * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
           */
          content?: string;
        }[];

        /**
         * @description The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
         * If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
         */
        base_tree?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name git/get-tree
   * @summary Get a tree
   * @description Returns a single tree using the SHA1 value or ref name for that tree.
   *
   * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
   *
   * > [!NOTE]
   * > The limit for the `tree` array is 100,000 entries with a maximum size of 7 MB when using the `recursive` parameter.
   * @see https://docs.github.com/rest/git/trees#get-a-tree
   */
  "GET /repos/{owner}/{repo}/git/trees/{tree_sha}": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description The SHA1 value or ref (branch or tag) name of the tree.
       */
      tree_sha: string;

      /**
       * @description Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent recursively returning objects or subtrees.
       */
      recursive?: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/git/trees/{tree_sha}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: GitTreeSchema;
    };
  };

  /**
   * @name repos/list-webhooks
   * @summary List repository webhooks
   * @description Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days.
   * @see https://docs.github.com/rest/repos/webhooks#list-repository-webhooks
   */
  "GET /repos/{owner}/{repo}/hooks": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/hooks";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: HookSchema[];
    };
  };

  /**
   * @name repos/create-webhook
   * @summary Create a repository webhook
   * @description Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
   * share the same `config` as long as those webhooks do not have any `events` that overlap.
   * @see https://docs.github.com/rest/repos/webhooks#create-a-repository-webhook
   */
  "POST /repos/{owner}/{repo}/hooks": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/hooks"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/hooks";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.
         */
        name?: string;

        /**
         * @description Key/value pairs to provide settings for this webhook.
         */
        config?: {
          url?: WebhookConfigUrlSchema;
          content_type?: WebhookConfigContentTypeSchema;
          secret?: WebhookConfigSecretSchema;
          insecure_ssl?: WebhookConfigInsecureSslSchema;
        };

        /**
         * @description Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
         * @default ["push"]
         */
        events?: string[];

        /**
         * @description Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
         * @default true
         */
        active?: boolean;
      } | null;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name repos/get-webhook
   * @summary Get a repository webhook
   * @description Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository)."
   * @see https://docs.github.com/rest/repos/webhooks#get-a-repository-webhook
   */
  "GET /repos/{owner}/{repo}/hooks/{hook_id}": {
    parameters: {
      owner: string;
      repo: string;
      hook_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/hooks/{hook_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: HookSchema;
    };
  };

  /**
   * @name repos/update-webhook
   * @summary Update a repository webhook
   * @description Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/webhooks/repo-config#update-a-webhook-configuration-for-a-repository)."
   * @see https://docs.github.com/rest/repos/webhooks#update-a-repository-webhook
   */
  "PATCH /repos/{owner}/{repo}/hooks/{hook_id}": {
    parameters: {
      owner: string;
      repo: string;
      hook_id: number;
    } & Endpoints["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/hooks/{hook_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        config?: WebhookConfigSchema;

        /**
         * @description Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
         * @default ["push"]
         */
        events?: string[];

        /**
         * @description Determines a list of events to be added to the list of events that the Hook triggers for.
         */
        add_events?: string[];

        /**
         * @description Determines a list of events to be removed from the list of events that the Hook triggers for.
         */
        remove_events?: string[];

        /**
         * @description Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
         * @default true
         */
        active?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: HookSchema;
    };
  };

  /**
   * @name repos/delete-webhook
   * @summary Delete a repository webhook
   * @description Delete a webhook for an organization.
   *
   * The authenticated user must be a repository owner, or have admin access in the repository, to delete the webhook.
   * @see https://docs.github.com/rest/repos/webhooks#delete-a-repository-webhook
   */
  "DELETE /repos/{owner}/{repo}/hooks/{hook_id}": {
    parameters: {
      owner: string;
      repo: string;
      hook_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/hooks/{hook_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/get-webhook-config-for-repo
   * @summary Get a webhook configuration for a repository
   * @description Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/webhooks/repos#get-a-repository-webhook)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:repo_hook` or `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/repos/webhooks#get-a-webhook-configuration-for-a-repository
   */
  "GET /repos/{owner}/{repo}/hooks/{hook_id}/config": {
    parameters: {
      owner: string;
      repo: string;
      hook_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/hooks/{hook_id}/config";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: WebhookConfigSchema;
    };
  };

  /**
   * @name repos/update-webhook-config-for-repo
   * @summary Update a webhook configuration for a repository
   * @description Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/webhooks/repos#update-a-repository-webhook)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:repo_hook` or `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/repos/webhooks#update-a-webhook-configuration-for-a-repository
   */
  "PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config": {
    parameters: {
      owner: string;
      repo: string;
      hook_id: number;
    } & Endpoints["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/hooks/{hook_id}/config";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        url?: WebhookConfigUrlSchema;
        content_type?: WebhookConfigContentTypeSchema;
        secret?: WebhookConfigSecretSchema;
        insecure_ssl?: WebhookConfigInsecureSslSchema;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: WebhookConfigSchema;
    };
  };

  /**
   * @name repos/list-webhook-deliveries
   * @summary List deliveries for a repository webhook
   * @description Returns a list of webhook deliveries for a webhook configured in a repository.
   * @see https://docs.github.com/rest/repos/webhooks#list-deliveries-for-a-repository-webhook
   */
  "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries": {
    parameters: {
      owner: string;
      repo: string;
      hook_id: number;
      per_page?: number;
      cursor?: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: HookDeliveryItemSchema[];
    };
  };

  /**
   * @name repos/get-webhook-delivery
   * @summary Get a delivery for a repository webhook
   * @description Returns a delivery for a webhook configured in a repository.
   * @see https://docs.github.com/rest/repos/webhooks#get-a-delivery-for-a-repository-webhook
   */
  "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}": {
    parameters: {
      owner: string;
      repo: string;
      hook_id: number;
      delivery_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: HookDeliverySchema;
    };
  };

  /**
   * @name repos/redeliver-webhook-delivery
   * @summary Redeliver a delivery for a repository webhook
   * @description Redeliver a webhook delivery for a webhook configured in a repository.
   * @see https://docs.github.com/rest/repos/webhooks#redeliver-a-delivery-for-a-repository-webhook
   */
  "POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts": {
    parameters: {
      owner: string;
      repo: string;
      hook_id: number;
      delivery_id: number;
    };
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: AcceptedResponse;
    };
  };

  /**
   * @name repos/ping-webhook
   * @summary Ping a repository webhook
   * @description This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
   * @see https://docs.github.com/rest/repos/webhooks#ping-a-repository-webhook
   */
  "POST /repos/{owner}/{repo}/hooks/{hook_id}/pings": {
    parameters: {
      owner: string;
      repo: string;
      hook_id: number;
    };
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/hooks/{hook_id}/pings";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/test-push-webhook
   * @summary Test the push repository webhook
   * @description This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
   *
   * > [!NOTE]
   * > Previously `/repos/:owner/:repo/hooks/:hook_id/test`
   * @see https://docs.github.com/rest/repos/webhooks#test-the-push-repository-webhook
   */
  "POST /repos/{owner}/{repo}/hooks/{hook_id}/tests": {
    parameters: {
      owner: string;
      repo: string;
      hook_id: number;
    };
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/hooks/{hook_id}/tests";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name migrations/get-import-status
   * @summary Get an import status
   * @description View the progress of an import.
   *
   * > [!WARNING]
   * > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
   *
   * **Import status**
   *
   * This section includes details about the possible values of the `status` field of the Import Progress response.
   *
   * An import that does not have errors will progress through these steps:
   *
   * *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
   * *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
   * *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
   * *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
   * *   `complete` - the import is complete, and the repository is ready on GitHub.
   *
   * If there are problems, you will see one of these in the `status` field:
   *
   * *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
   * *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information.
   * *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
   * *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import) and [retry](https://docs.github.com/rest/migrations/source-imports#start-an-import) with the correct URL.
   * *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
   *
   * **The project_choices field**
   *
   * When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
   *
   * **Git LFS related fields**
   *
   * This section includes details about Git LFS related fields that may be present in the Import Progress response.
   *
   * *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
   * *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
   * *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
   * *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
   * @deprecated
   * @see https://docs.github.com/rest/migrations/source-imports#get-an-import-status
   */
  "GET /repos/{owner}/{repo}/import": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/import";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ImportSchema;
    };
  };

  /**
   * @name migrations/start-import
   * @summary Start an import
   * @description Start a source import to a GitHub repository using GitHub Importer.
   * Importing into a GitHub repository with GitHub Actions enabled is not supported and will
   * return a status `422 Unprocessable Entity` response.
   *
   * > [!WARNING]
   * > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
   * @deprecated
   * @see https://docs.github.com/rest/migrations/source-imports#start-an-import
   */
  "PUT /repos/{owner}/{repo}/import": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/import"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/import";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The URL of the originating repository.
         */
        vcs_url: string;

        /**
         * @description The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
         */
        vcs?: "subversion" | "git" | "mercurial" | "tfvc";

        /**
         * @description If authentication is required, the username to provide to `vcs_url`.
         */
        vcs_username?: string;

        /**
         * @description If authentication is required, the password to provide to `vcs_url`.
         */
        vcs_password?: string;

        /**
         * @description For a tfvc import, the name of the project that is being imported.
         */
        tfvc_project?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name migrations/update-import
   * @summary Update an import
   * @description An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API
   * request. If no parameters are provided, the import will be restarted.
   *
   * Some servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will
   * have the status `detection_found_multiple` and the Import Progress response will include a `project_choices` array.
   * You can select the project to import by providing one of the objects in the `project_choices` array in the update request.
   *
   * > [!WARNING]
   * > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
   * @deprecated
   * @see https://docs.github.com/rest/migrations/source-imports#update-an-import
   */
  "PATCH /repos/{owner}/{repo}/import": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["PATCH /repos/{owner}/{repo}/import"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/import";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The username to provide to the originating repository.
         */
        vcs_username?: string;

        /**
         * @description The password to provide to the originating repository.
         */
        vcs_password?: string;

        /**
         * @description The type of version control system you are migrating from.
         * @example "git"
         */
        vcs?: "subversion" | "tfvc" | "git" | "mercurial";

        /**
         * @description For a tfvc import, the name of the project that is being imported.
         * @example "project1"
         */
        tfvc_project?: string;
      } | null;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ImportSchema;
    };
  };

  /**
   * @name migrations/cancel-import
   * @summary Cancel an import
   * @description Stop an import for a repository.
   *
   * > [!WARNING]
   * > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
   * @deprecated
   * @see https://docs.github.com/rest/migrations/source-imports#cancel-an-import
   */
  "DELETE /repos/{owner}/{repo}/import": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/import";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name migrations/get-commit-authors
   * @summary Get commit authors
   * @description Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
   *
   * This endpoint and the [Map a commit author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide correct Git author information.
   *
   * > [!WARNING]
   * > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
   * @deprecated
   * @see https://docs.github.com/rest/migrations/source-imports#get-commit-authors
   */
  "GET /repos/{owner}/{repo}/import/authors": {
    parameters: {
      owner: string;
      repo: string;
      since?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/import/authors";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PorterAuthorSchema[];
    };
  };

  /**
   * @name migrations/map-commit-author
   * @summary Map a commit author
   * @description Update an author's identity for the import. Your application can continue updating authors any time before you push
   * new commits to the repository.
   *
   * > [!WARNING]
   * > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
   * @deprecated
   * @see https://docs.github.com/rest/migrations/source-imports#map-a-commit-author
   */
  "PATCH /repos/{owner}/{repo}/import/authors/{author_id}": {
    parameters: {
      owner: string;
      repo: string;
      author_id: number;
    } & Endpoints["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/import/authors/{author_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The new Git author email.
         */
        email?: string;

        /**
         * @description The new Git author name.
         */
        name?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PorterAuthorSchema;
    };
  };

  /**
   * @name migrations/get-large-files
   * @summary Get large files
   * @description List files larger than 100MB found during the import
   *
   * > [!WARNING]
   * > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
   * @deprecated
   * @see https://docs.github.com/rest/migrations/source-imports#get-large-files
   */
  "GET /repos/{owner}/{repo}/import/large_files": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/import/large_files";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PorterLargeFileSchema[];
    };
  };

  /**
   * @name migrations/set-lfs-preference
   * @summary Update Git LFS preference
   * @description You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability
   * is powered by [Git LFS](https://git-lfs.com).
   *
   * You can learn more about our LFS feature and working with large files [on our help
   * site](https://docs.github.com/repositories/working-with-files/managing-large-files).
   *
   * > [!WARNING]
   * > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
   * @deprecated
   * @see https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference
   */
  "PATCH /repos/{owner}/{repo}/import/lfs": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["PATCH /repos/{owner}/{repo}/import/lfs"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/import/lfs";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Whether to store large files during the import. `opt_in` means large files will be stored using Git LFS. `opt_out` means large files will be removed during the import.
         */
        use_lfs: "opt_in" | "opt_out";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ImportSchema;
    };
  };

  /**
   * @name apps/get-repo-installation
   * @summary Get a repository installation for the authenticated app
   * @description Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * @see https://docs.github.com/rest/apps/apps#get-a-repository-installation-for-the-authenticated-app
   */
  "GET /repos/{owner}/{repo}/installation": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/installation";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: InstallationSchema;
    };
  };

  /**
   * @name interactions/get-restrictions-for-repo
   * @summary Get interaction restrictions for a repository
   * @description Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
   * @see https://docs.github.com/rest/interactions/repos#get-interaction-restrictions-for-a-repository
   */
  "GET /repos/{owner}/{repo}/interaction-limits": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/interaction-limits";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: InteractionLimitResponseSchema | {};
    };
  };

  /**
   * @name interactions/set-restrictions-for-repo
   * @summary Set interaction restrictions for a repository
   * @description Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
   * @see https://docs.github.com/rest/interactions/repos#set-interaction-restrictions-for-a-repository
   */
  "PUT /repos/{owner}/{repo}/interaction-limits": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/interaction-limits"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/interaction-limits";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: InteractionLimitResponseSchema;
    };
  };

  /**
   * @name interactions/remove-restrictions-for-repo
   * @summary Remove interaction restrictions for a repository
   * @description Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
   * @see https://docs.github.com/rest/interactions/repos#remove-interaction-restrictions-for-a-repository
   */
  "DELETE /repos/{owner}/{repo}/interaction-limits": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/interaction-limits";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/list-invitations
   * @summary List repository invitations
   * @description When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
   * @see https://docs.github.com/rest/collaborators/invitations#list-repository-invitations
   */
  "GET /repos/{owner}/{repo}/invitations": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/invitations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RepositoryInvitationSchema[];
    };
  };

  /**
   * @name repos/update-invitation
   * @summary Update a repository invitation
   * @see https://docs.github.com/rest/collaborators/invitations#update-a-repository-invitation
   */
  "PATCH /repos/{owner}/{repo}/invitations/{invitation_id}": {
    parameters: {
      owner: string;
      repo: string;
      invitation_id: number;
    } & Endpoints["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/invitations/{invitation_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
         */
        permissions?: "read" | "write" | "maintain" | "triage" | "admin";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RepositoryInvitationSchema;
    };
  };

  /**
   * @name repos/delete-invitation
   * @summary Delete a repository invitation
   * @see https://docs.github.com/rest/collaborators/invitations#delete-a-repository-invitation
   */
  "DELETE /repos/{owner}/{repo}/invitations/{invitation_id}": {
    parameters: {
      owner: string;
      repo: string;
      invitation_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/invitations/{invitation_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name issues/list-for-repo
   * @summary List repository issues
   * @description List issues in a repository. Only open issues will be listed.
   *
   * > [!NOTE]
   * > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/issues/issues#list-repository-issues
   */
  "GET /repos/{owner}/{repo}/issues": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.
       */
      milestone?: string;

      /**
       * @description Indicates the state of the issues to return.
       */
      state?: "open" | "closed" | "all";

      /**
       * @description Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.
       */
      assignee?: string;

      /**
       * @description Can be the name of an issue type. If the string `*` is passed, issues with any type are accepted. If the string `none` is passed, issues without type are returned.
       */
      type?: string;

      /**
       * @description The user that created the issue.
       */
      creator?: string;

      /**
       * @description A user that's mentioned in the issue.
       */
      mentioned?: string;
      labels?: string;

      /**
       * @description What to sort results by.
       */
      sort?: "created" | "updated" | "comments";
      direction?: "asc" | "desc";
      since?: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/issues";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueSchema[];
    };
  };

  /**
   * @name issues/create
   * @summary Create an issue
   * @description Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
   *
   * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
   * and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/issues/issues#create-an-issue
   */
  "POST /repos/{owner}/{repo}/issues": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/issues"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/issues";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The title of the issue.
         */
        title: string | number;

        /**
         * @description The contents of the issue.
         */
        body?: string;

        /**
         * @description Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is closing down.**_
         */
        assignee?: string | null;
        milestone?: string | number | null;

        /**
         * @description Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
         */
        labels?: (
          | string
          | {
              id?: number;
              name?: string;
              description?: string | null;
              color?: string | null;
            }
        )[];

        /**
         * @description Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
         */
        assignees?: string[];

        /**
         * @description The name of the issue type to associate with this issue. _NOTE: Only users with push access can set the type for new issues. The type is silently dropped otherwise._
         * @example Epic
         */
        type?: string | null;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name issues/list-comments-for-repo
   * @summary List issue comments for a repository
   * @description You can use the REST API to list comments on issues and pull requests for a repository. Every pull request is an issue, but not every issue is a pull request.
   *
   * By default, issue comments are ordered by ascending ID.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/issues/comments#list-issue-comments-for-a-repository
   */
  "GET /repos/{owner}/{repo}/issues/comments": {
    parameters: {
      owner: string;
      repo: string;
      sort?: "created" | "updated";

      /**
       * @description Either `asc` or `desc`. Ignored without the `sort` parameter.
       */
      direction?: "asc" | "desc";
      since?: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/issues/comments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueCommentSchema[];
    };
  };

  /**
   * @name issues/get-comment
   * @summary Get an issue comment
   * @description You can use the REST API to get comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/issues/comments#get-an-issue-comment
   */
  "GET /repos/{owner}/{repo}/issues/comments/{comment_id}": {
    parameters: {
      owner: string;
      repo: string;
      comment_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/issues/comments/{comment_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueCommentSchema;
    };
  };

  /**
   * @name issues/update-comment
   * @summary Update an issue comment
   * @description You can use the REST API to update comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/issues/comments#update-an-issue-comment
   */
  "PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}": {
    parameters: {
      owner: string;
      repo: string;
      comment_id: number;
    } & Endpoints["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/issues/comments/{comment_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The contents of the comment.
         */
        body: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueCommentSchema;
    };
  };

  /**
   * @name issues/delete-comment
   * @summary Delete an issue comment
   * @description You can use the REST API to delete comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
   * @see https://docs.github.com/rest/issues/comments#delete-an-issue-comment
   */
  "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}": {
    parameters: {
      owner: string;
      repo: string;
      comment_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/issues/comments/{comment_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name reactions/list-for-issue-comment
   * @summary List reactions for an issue comment
   * @description List the reactions to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).
   * @see https://docs.github.com/rest/reactions/reactions#list-reactions-for-an-issue-comment
   */
  "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions": {
    parameters: {
      owner: string;
      repo: string;
      comment_id: number;

      /**
       * @description Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to an issue comment.
       */
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReactionSchema[];
    };
  };

  /**
   * @name reactions/create-for-issue-comment
   * @summary Create reaction for an issue comment
   * @description Create a reaction to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.
   * @see https://docs.github.com/rest/reactions/reactions#create-reaction-for-an-issue-comment
   */
  "POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions": {
    parameters: {
      owner: string;
      repo: string;
      comment_id: number;
    } & Endpoints["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue comment.
         */
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReactionSchema;
    };
  };

  /**
   * @name reactions/delete-for-issue-comment
   * @summary Delete an issue comment reaction
   * @description > [!NOTE]
   * > You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
   *
   * Delete a reaction to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).
   * @see https://docs.github.com/rest/reactions/reactions#delete-an-issue-comment-reaction
   */
  "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}": {
    parameters: {
      owner: string;
      repo: string;
      comment_id: number;
      reaction_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name issues/list-events-for-repo
   * @summary List issue events for a repository
   * @description Lists events for a repository.
   * @see https://docs.github.com/rest/issues/events#list-issue-events-for-a-repository
   */
  "GET /repos/{owner}/{repo}/issues/events": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/issues/events";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueEventSchema[];
    };
  };

  /**
   * @name issues/get-event
   * @summary Get an issue event
   * @description Gets a single event by the event id.
   * @see https://docs.github.com/rest/issues/events#get-an-issue-event
   */
  "GET /repos/{owner}/{repo}/issues/events/{event_id}": {
    parameters: {
      owner: string;
      repo: string;
      event_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/issues/events/{event_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueEventSchema;
    };
  };

  /**
   * @name issues/get
   * @summary Get an issue
   * @description The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api#follow-redirects) if the issue was
   * [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
   * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
   * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
   * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
   * to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
   *
   * > [!NOTE]
   * > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/issues/issues#get-an-issue
   */
  "GET /repos/{owner}/{repo}/issues/{issue_number}": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/issues/{issue_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueSchema;
    };
  };

  /**
   * @name issues/update
   * @summary Update an issue
   * @description Issue owners and users with push access or Triage role can edit an issue.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/issues/issues#update-an-issue
   */
  "PATCH /repos/{owner}/{repo}/issues/{issue_number}": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
    } & Endpoints["PATCH /repos/{owner}/{repo}/issues/{issue_number}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/issues/{issue_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The title of the issue.
         */
        title?: string | number | null;

        /**
         * @description The contents of the issue.
         */
        body?: string | null;

        /**
         * @description Username to assign to this issue. **This field is closing down.**
         */
        assignee?: string | null;

        /**
         * @description The open or closed state of the issue.
         */
        state?: "open" | "closed";

        /**
         * @description The reason for the state change. Ignored unless `state` is changed.
         * @example not_planned
         */
        state_reason?:
          | "completed"
          | "not_planned"
          | "duplicate"
          | "reopened"
          | null;
        milestone?: string | number | null;

        /**
         * @description Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.
         */
        labels?: (
          | string
          | {
              id?: number;
              name?: string;
              description?: string | null;
              color?: string | null;
            }
        )[];

        /**
         * @description Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.
         */
        assignees?: string[];

        /**
         * @description The name of the issue type to associate with this issue or use `null` to remove the current issue type. Only users with push access can set the type for issues. Without push access to the repository, type changes are silently dropped.
         * @example Epic
         */
        type?: string | null;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueSchema;
    };
  };

  /**
   * @name issues/add-assignees
   * @summary Add assignees to an issue
   * @description Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
   * @see https://docs.github.com/rest/issues/assignees#add-assignees-to-an-issue
   */
  "POST /repos/{owner}/{repo}/issues/{issue_number}/assignees": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
    } & Endpoints["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/assignees";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._
         */
        assignees?: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name issues/remove-assignees
   * @summary Remove assignees from an issue
   * @description Removes one or more assignees from an issue.
   * @see https://docs.github.com/rest/reference/issues#remove-assignees-from-an-issue
   */
  "DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
    } & Endpoints["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"]["request"]["data"];
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/assignees";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._
         */
        assignees: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueSchema;
    };
  };

  /**
   * @name issues/check-user-can-be-assigned-to-issue
   * @summary Check if a user can be assigned to a issue
   * @description Checks if a user has permission to be assigned to a specific issue.
   *
   * If the `assignee` can be assigned to this issue, a `204` status code with no content is returned.
   *
   * Otherwise a `404` status code is returned.
   * @see https://docs.github.com/rest/issues/assignees#check-if-a-user-can-be-assigned-to-a-issue
   */
  "GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
      assignee: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name issues/list-comments
   * @summary List issue comments
   * @description You can use the REST API to list comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
   *
   * Issue comments are ordered by ascending ID.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/issues/comments#list-issue-comments
   */
  "GET /repos/{owner}/{repo}/issues/{issue_number}/comments": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
      since?: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/comments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueCommentSchema[];
    };
  };

  /**
   * @name issues/create-comment
   * @summary Create an issue comment
   * @description You can use the REST API to create comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
   *
   * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
   * Creating content too quickly using this endpoint may result in secondary rate limiting.
   * For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
   * and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/issues/comments#create-an-issue-comment
   */
  "POST /repos/{owner}/{repo}/issues/{issue_number}/comments": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
    } & Endpoints["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/comments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The contents of the comment.
         */
        body: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name issues/list-dependencies-blocked-by
   * @summary List dependencies an issue is blocked by
   * @description You can use the REST API to list the dependencies an issue is blocked by.
   *
   * This endpoint supports the following custom media types. For more information, see [Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw Markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the Markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's Markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/issues/issue-dependencies#list-dependencies-an-issue-is-blocked-by
   */
  "GET /repos/{owner}/{repo}/issues/{issue_number}/dependencies/blocked_by": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/dependencies/blocked_by";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueSchema[];
    };
  };

  /**
   * @name issues/add-blocked-by-dependency
   * @summary Add a dependency an issue is blocked by
   * @description You can use the REST API to add a 'blocked by' relationship to an issue.
   *
   * Creating content too quickly using this endpoint may result in secondary rate limiting.
   * For more information, see [Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)
   * and [Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).
   *
   * This endpoint supports the following custom media types. For more information, see [Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw Markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the Markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's Markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/issues/issue-dependencies#add-a-dependency-an-issue-is-blocked-by
   */
  "POST /repos/{owner}/{repo}/issues/{issue_number}/dependencies/blocked_by": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
    } & Endpoints["POST /repos/{owner}/{repo}/issues/{issue_number}/dependencies/blocked_by"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/dependencies/blocked_by";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The id of the issue that blocks the current issue
         */
        issue_id: number;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name issues/remove-dependency-blocked-by
   * @summary Remove dependency an issue is blocked by
   * @description You can use the REST API to remove a dependency that an issue is blocked by.
   *
   * Removing content too quickly using this endpoint may result in secondary rate limiting.
   * For more information, see [Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)
   * and [Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).
   *
   * This endpoint supports the following custom media types. For more information, see [Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).
   * - **`application/vnd.github.raw+json`**: Returns the raw Markdown body. Response will include `body`. This is the default if you do not pass a specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the Markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's Markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/issues/issue-dependencies#remove-dependency-an-issue-is-blocked-by
   */
  "DELETE /repos/{owner}/{repo}/issues/{issue_number}/dependencies/blocked_by/{issue_id}": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;

      /**
       * @description The id of the blocking issue to remove as a dependency
       */
      issue_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/dependencies/blocked_by/{issue_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueSchema;
    };
  };

  /**
   * @name issues/list-dependencies-blocking
   * @summary List dependencies an issue is blocking
   * @description You can use the REST API to list the dependencies an issue is blocking.
   *
   * This endpoint supports the following custom media types. For more information, see [Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw Markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the Markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's Markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/issues/issue-dependencies#list-dependencies-an-issue-is-blocking
   */
  "GET /repos/{owner}/{repo}/issues/{issue_number}/dependencies/blocking": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/dependencies/blocking";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueSchema[];
    };
  };

  /**
   * @name issues/list-events
   * @summary List issue events
   * @description Lists all events for an issue.
   * @see https://docs.github.com/rest/issues/events#list-issue-events
   */
  "GET /repos/{owner}/{repo}/issues/{issue_number}/events": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/events";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueEventForIssueSchema[];
    };
  };

  /**
   * @name issues/list-labels-on-issue
   * @summary List labels for an issue
   * @description Lists all labels for an issue.
   * @see https://docs.github.com/rest/issues/labels#list-labels-for-an-issue
   */
  "GET /repos/{owner}/{repo}/issues/{issue_number}/labels": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/labels";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: LabelSchema[];
    };
  };

  /**
   * @name issues/add-labels
   * @summary Add labels to an issue
   * @description Adds labels to an issue. If you provide an empty array of labels, all labels are removed from the issue.
   * @see https://docs.github.com/rest/issues/labels#add-labels-to-an-issue
   */
  "POST /repos/{owner}/{repo}/issues/{issue_number}/labels": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
    } & Endpoints["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/labels";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data:
        | {
            /**
             * @description The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/rest/issues/labels#set-labels-for-an-issue)."
             */
            labels?: string[];
          }
        | {
            labels?: {
              name: string;
            }[];
          };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: LabelSchema[];
    };
  };

  /**
   * @name issues/set-labels
   * @summary Set labels for an issue
   * @description Removes any previous labels and sets the new labels for an issue.
   * @see https://docs.github.com/rest/issues/labels#set-labels-for-an-issue
   */
  "PUT /repos/{owner}/{repo}/issues/{issue_number}/labels": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
    } & Endpoints["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/labels";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data:
        | {
            /**
             * @description The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/rest/issues/labels#add-labels-to-an-issue)."
             */
            labels?: string[];
          }
        | {
            labels?: {
              name: string;
            }[];
          };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: LabelSchema[];
    };
  };

  /**
   * @name issues/remove-all-labels
   * @summary Remove all labels from an issue
   * @description Removes all labels from an issue.
   * @see https://docs.github.com/rest/issues/labels#remove-all-labels-from-an-issue
   */
  "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/labels";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name issues/remove-label
   * @summary Remove a label from an issue
   * @description Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
   * @see https://docs.github.com/rest/issues/labels#remove-a-label-from-an-issue
   */
  "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
      name: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: LabelSchema[];
    };
  };

  /**
   * @name issues/lock
   * @summary Lock an issue
   * @description Users with push access can lock an issue or pull request's conversation.
   *
   * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
   * @see https://docs.github.com/rest/issues/issues#lock-an-issue
   */
  "PUT /repos/{owner}/{repo}/issues/{issue_number}/lock": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
    } & Endpoints["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/lock";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
         *  * `off-topic`
         *  * `too heated`
         *  * `resolved`
         *  * `spam`
         */
        lock_reason?: "off-topic" | "too heated" | "resolved" | "spam";
      } | null;
    };
    response: never;
  };

  /**
   * @name issues/unlock
   * @summary Unlock an issue
   * @description Users with push access can unlock an issue's conversation.
   * @see https://docs.github.com/rest/issues/issues#unlock-an-issue
   */
  "DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/lock";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name issues/get-parent
   * @summary Get parent issue
   * @description You can use the REST API to get the parent issue of a sub-issue.
   *
   * This endpoint supports the following custom media types. For more information, see [Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/issues/sub-issues#get-parent-issue
   */
  "GET /repos/{owner}/{repo}/issues/{issue_number}/parent": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/parent";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueSchema;
    };
  };

  /**
   * @name reactions/list-for-issue
   * @summary List reactions for an issue
   * @description List the reactions to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue).
   * @see https://docs.github.com/rest/reactions/reactions#list-reactions-for-an-issue
   */
  "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;

      /**
       * @description Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to an issue.
       */
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/reactions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReactionSchema[];
    };
  };

  /**
   * @name reactions/create-for-issue
   * @summary Create reaction for an issue
   * @description Create a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue). A response with an HTTP `200` status means that you already added the reaction type to this issue.
   * @see https://docs.github.com/rest/reactions/reactions#create-reaction-for-an-issue
   */
  "POST /repos/{owner}/{repo}/issues/{issue_number}/reactions": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
    } & Endpoints["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/reactions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue.
         */
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReactionSchema;
    };
  };

  /**
   * @name reactions/delete-for-issue
   * @summary Delete an issue reaction
   * @description > [!NOTE]
   * > You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
   *
   * Delete a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue).
   * @see https://docs.github.com/rest/reactions/reactions#delete-an-issue-reaction
   */
  "DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
      reaction_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name issues/remove-sub-issue
   * @summary Remove sub-issue
   * @description You can use the REST API to remove a sub-issue from an issue.
   * Removing content too quickly using this endpoint may result in secondary rate limiting.
   * For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
   * and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass a specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/issues/sub-issues#remove-sub-issue
   */
  "DELETE /repos/{owner}/{repo}/issues/{issue_number}/sub_issue": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
    } & Endpoints["DELETE /repos/{owner}/{repo}/issues/{issue_number}/sub_issue"]["request"]["data"];
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/sub_issue";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The id of the sub-issue to remove
         */
        sub_issue_id: number;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueSchema;
    };
  };

  /**
   * @name issues/list-sub-issues
   * @summary List sub-issues
   * @description You can use the REST API to list the sub-issues on an issue.
   *
   * This endpoint supports the following custom media types. For more information, see [Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw Markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the Markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's Markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/issues/sub-issues#list-sub-issues
   */
  "GET /repos/{owner}/{repo}/issues/{issue_number}/sub_issues": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/sub_issues";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueSchema[];
    };
  };

  /**
   * @name issues/add-sub-issue
   * @summary Add sub-issue
   * @description You can use the REST API to add sub-issues to issues.
   *
   * Creating content too quickly using this endpoint may result in secondary rate limiting.
   * For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
   * and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/issues/sub-issues#add-sub-issue
   */
  "POST /repos/{owner}/{repo}/issues/{issue_number}/sub_issues": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
    } & Endpoints["POST /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/sub_issues";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The id of the sub-issue to add. The sub-issue must belong to the same repository owner as the parent issue
         */
        sub_issue_id: number;

        /**
         * @description Option that, when true, instructs the operation to replace the sub-issues current parent issue
         */
        replace_parent?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name issues/reprioritize-sub-issue
   * @summary Reprioritize sub-issue
   * @description You can use the REST API to reprioritize a sub-issue to a different position in the parent list.
   * @see https://docs.github.com/rest/issues/sub-issues#reprioritize-sub-issue
   */
  "PATCH /repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
    } & Endpoints["PATCH /repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The id of the sub-issue to reprioritize
         */
        sub_issue_id: number;

        /**
         * @description The id of the sub-issue to be prioritized after (either positional argument after OR before should be specified).
         */
        after_id?: number;

        /**
         * @description The id of the sub-issue to be prioritized before (either positional argument after OR before should be specified).
         */
        before_id?: number;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueSchema;
    };
  };

  /**
   * @name issues/list-events-for-timeline
   * @summary List timeline events for an issue
   * @description List all timeline events for an issue.
   * @see https://docs.github.com/rest/issues/timeline#list-timeline-events-for-an-issue
   */
  "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline": {
    parameters: {
      owner: string;
      repo: string;
      issue_number: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/issues/{issue_number}/timeline";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TimelineIssueEventsSchema[];
    };
  };

  /**
   * @name repos/list-deploy-keys
   * @summary List deploy keys
   * @see https://docs.github.com/rest/deploy-keys/deploy-keys#list-deploy-keys
   */
  "GET /repos/{owner}/{repo}/keys": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/keys";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DeployKeySchema[];
    };
  };

  /**
   * @name repos/create-deploy-key
   * @summary Create a deploy key
   * @description You can create a read-only deploy key.
   * @see https://docs.github.com/rest/deploy-keys/deploy-keys#create-a-deploy-key
   */
  "POST /repos/{owner}/{repo}/keys": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/keys"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/keys";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description A name for the key.
         */
        title?: string;

        /**
         * @description The contents of the key.
         */
        key: string;

        /**
         * @description If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.
         *
         * Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."
         */
        read_only?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name repos/get-deploy-key
   * @summary Get a deploy key
   * @see https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key
   */
  "GET /repos/{owner}/{repo}/keys/{key_id}": {
    parameters: {
      owner: string;
      repo: string;
      key_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/keys/{key_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DeployKeySchema;
    };
  };

  /**
   * @name repos/delete-deploy-key
   * @summary Delete a deploy key
   * @description Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
   * @see https://docs.github.com/rest/deploy-keys/deploy-keys#delete-a-deploy-key
   */
  "DELETE /repos/{owner}/{repo}/keys/{key_id}": {
    parameters: {
      owner: string;
      repo: string;
      key_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/keys/{key_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name issues/list-labels-for-repo
   * @summary List labels for a repository
   * @description Lists all labels for a repository.
   * @see https://docs.github.com/rest/issues/labels#list-labels-for-a-repository
   */
  "GET /repos/{owner}/{repo}/labels": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/labels";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: LabelSchema[];
    };
  };

  /**
   * @name issues/create-label
   * @summary Create a label
   * @description Creates a label for the specified repository with the given name and color. The name and color parameters are required. The color must be a valid [hexadecimal color code](http://www.color-hex.com/).
   * @see https://docs.github.com/rest/issues/labels#create-a-label
   */
  "POST /repos/{owner}/{repo}/labels": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/labels"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/labels";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
         */
        name: string;

        /**
         * @description The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
         */
        color?: string;

        /**
         * @description A short description of the label. Must be 100 characters or fewer.
         */
        description?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name issues/get-label
   * @summary Get a label
   * @description Gets a label using the given name.
   * @see https://docs.github.com/rest/issues/labels#get-a-label
   */
  "GET /repos/{owner}/{repo}/labels/{name}": {
    parameters: {
      owner: string;
      repo: string;
      name: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/labels/{name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: LabelSchema;
    };
  };

  /**
   * @name issues/update-label
   * @summary Update a label
   * @description Updates a label using the given label name.
   * @see https://docs.github.com/rest/issues/labels#update-a-label
   */
  "PATCH /repos/{owner}/{repo}/labels/{name}": {
    parameters: {
      owner: string;
      repo: string;
      name: string;
    } & Endpoints["PATCH /repos/{owner}/{repo}/labels/{name}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/labels/{name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
         */
        new_name?: string;

        /**
         * @description The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
         */
        color?: string;

        /**
         * @description A short description of the label. Must be 100 characters or fewer.
         */
        description?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: LabelSchema;
    };
  };

  /**
   * @name issues/delete-label
   * @summary Delete a label
   * @description Deletes a label using the given label name.
   * @see https://docs.github.com/rest/issues/labels#delete-a-label
   */
  "DELETE /repos/{owner}/{repo}/labels/{name}": {
    parameters: {
      owner: string;
      repo: string;
      name: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/labels/{name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/list-languages
   * @summary List repository languages
   * @description Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
   * @see https://docs.github.com/rest/repos/repos#list-repository-languages
   */
  "GET /repos/{owner}/{repo}/languages": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/languages";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: LanguageSchema;
    };
  };

  /**
   * @name licenses/get-for-repo
   * @summary Get the license for a repository
   * @description This method returns the contents of the repository's license file, if one is detected.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw contents of the license.
   * - **`application/vnd.github.html+json`**: Returns the license contents in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
   * @see https://docs.github.com/rest/licenses/licenses#get-the-license-for-a-repository
   */
  "GET /repos/{owner}/{repo}/license": {
    parameters: {
      owner: string;
      repo: string;
      ref?: {};
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/license";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: LicenseContentSchema;
    };
  };

  /**
   * @name repos/merge-upstream
   * @summary Sync a fork branch with the upstream repository
   * @description Sync a branch of a forked repository to keep it up-to-date with the upstream repository.
   * @see https://docs.github.com/rest/branches/branches#sync-a-fork-branch-with-the-upstream-repository
   */
  "POST /repos/{owner}/{repo}/merge-upstream": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/merge-upstream"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/merge-upstream";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the branch which should be updated to match upstream.
         */
        branch: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MergedUpstreamSchema;
    };
  };

  /**
   * @name repos/merge
   * @summary Merge a branch
   * @see https://docs.github.com/rest/branches/branches#merge-a-branch
   */
  "POST /repos/{owner}/{repo}/merges": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/merges"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/merges";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the base branch that the head will be merged into.
         */
        base: string;

        /**
         * @description The head to merge. This can be a branch name or a commit SHA1.
         */
        head: string;

        /**
         * @description Commit message to use for the merge commit. If omitted, a default message will be used.
         */
        commit_message?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name issues/list-milestones
   * @summary List milestones
   * @description Lists milestones for a repository.
   * @see https://docs.github.com/rest/issues/milestones#list-milestones
   */
  "GET /repos/{owner}/{repo}/milestones": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description The state of the milestone. Either `open`, `closed`, or `all`.
       */
      state?: "open" | "closed" | "all";

      /**
       * @description What to sort results by. Either `due_on` or `completeness`.
       */
      sort?: "due_on" | "completeness";

      /**
       * @description The direction of the sort. Either `asc` or `desc`.
       */
      direction?: "asc" | "desc";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/milestones";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MilestoneSchema[];
    };
  };

  /**
   * @name issues/create-milestone
   * @summary Create a milestone
   * @description Creates a milestone.
   * @see https://docs.github.com/rest/issues/milestones#create-a-milestone
   */
  "POST /repos/{owner}/{repo}/milestones": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/milestones"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/milestones";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The title of the milestone.
         */
        title: string;

        /**
         * @description The state of the milestone. Either `open` or `closed`.
         * @default "open"
         */
        state?: "open" | "closed";

        /**
         * @description A description of the milestone.
         */
        description?: string;

        /**
         * @description The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        due_on?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name issues/get-milestone
   * @summary Get a milestone
   * @description Gets a milestone using the given milestone number.
   * @see https://docs.github.com/rest/issues/milestones#get-a-milestone
   */
  "GET /repos/{owner}/{repo}/milestones/{milestone_number}": {
    parameters: {
      owner: string;
      repo: string;
      milestone_number: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/milestones/{milestone_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MilestoneSchema;
    };
  };

  /**
   * @name issues/update-milestone
   * @summary Update a milestone
   * @see https://docs.github.com/rest/issues/milestones#update-a-milestone
   */
  "PATCH /repos/{owner}/{repo}/milestones/{milestone_number}": {
    parameters: {
      owner: string;
      repo: string;
      milestone_number: number;
    } & Endpoints["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/milestones/{milestone_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The title of the milestone.
         */
        title?: string;

        /**
         * @description The state of the milestone. Either `open` or `closed`.
         * @default "open"
         */
        state?: "open" | "closed";

        /**
         * @description A description of the milestone.
         */
        description?: string;

        /**
         * @description The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        due_on?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MilestoneSchema;
    };
  };

  /**
   * @name issues/delete-milestone
   * @summary Delete a milestone
   * @description Deletes a milestone using the given milestone number.
   * @see https://docs.github.com/rest/issues/milestones#delete-a-milestone
   */
  "DELETE /repos/{owner}/{repo}/milestones/{milestone_number}": {
    parameters: {
      owner: string;
      repo: string;
      milestone_number: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/milestones/{milestone_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name issues/list-labels-for-milestone
   * @summary List labels for issues in a milestone
   * @description Lists labels for issues in a milestone.
   * @see https://docs.github.com/rest/issues/labels#list-labels-for-issues-in-a-milestone
   */
  "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels": {
    parameters: {
      owner: string;
      repo: string;
      milestone_number: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/milestones/{milestone_number}/labels";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: LabelSchema[];
    };
  };

  /**
   * @name activity/list-repo-notifications-for-authenticated-user
   * @summary List repository notifications for the authenticated user
   * @description Lists all notifications for the current user in the specified repository.
   * @see https://docs.github.com/rest/activity/notifications#list-repository-notifications-for-the-authenticated-user
   */
  "GET /repos/{owner}/{repo}/notifications": {
    parameters: {
      owner: string;
      repo: string;
      all?: boolean;
      participating?: boolean;
      since?: string;
      before?: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/notifications";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ThreadSchema[];
    };
  };

  /**
   * @name activity/mark-repo-notifications-as-read
   * @summary Mark repository notifications as read
   * @description Marks all notifications in a repository as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
   * @see https://docs.github.com/rest/activity/notifications#mark-repository-notifications-as-read
   */
  "PUT /repos/{owner}/{repo}/notifications": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/notifications"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/notifications";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
         */
        last_read_at?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: {
        message?: string;
        url?: string;
      };
    };
  };

  /**
   * @name repos/get-pages
   * @summary Get a GitHub Pages site
   * @description Gets information about a GitHub Pages site.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/pages/pages#get-a-apiname-pages-site
   */
  "GET /repos/{owner}/{repo}/pages": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/pages";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PageSchema;
    };
  };

  /**
   * @name repos/create-pages-site
   * @summary Create a GitHub Pages site
   * @description Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
   *
   * The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/pages/pages#create-a-apiname-pages-site
   */
  "POST /repos/{owner}/{repo}/pages": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/pages"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/pages";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {} | null;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name repos/update-information-about-pages-site
   * @summary Update information about a GitHub Pages site
   * @description Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
   *
   * The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/pages/pages#update-information-about-a-apiname-pages-site
   */
  "PUT /repos/{owner}/{repo}/pages": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/pages"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/pages";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: never;
  };

  /**
   * @name repos/delete-pages-site
   * @summary Delete a GitHub Pages site
   * @description Deletes a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
   *
   * The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/pages/pages#delete-a-apiname-pages-site
   */
  "DELETE /repos/{owner}/{repo}/pages": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/pages";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/list-pages-builds
   * @summary List GitHub Pages builds
   * @description Lists builts of a GitHub Pages site.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/pages/pages#list-apiname-pages-builds
   */
  "GET /repos/{owner}/{repo}/pages/builds": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/pages/builds";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PageBuildSchema[];
    };
  };

  /**
   * @name repos/request-pages-build
   * @summary Request a GitHub Pages build
   * @description You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
   *
   * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
   * @see https://docs.github.com/rest/pages/pages#request-a-apiname-pages-build
   */
  "POST /repos/{owner}/{repo}/pages/builds": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/pages/builds";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name repos/get-latest-pages-build
   * @summary Get latest Pages build
   * @description Gets information about the single most recent build of a GitHub Pages site.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/pages/pages#get-latest-pages-build
   */
  "GET /repos/{owner}/{repo}/pages/builds/latest": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/pages/builds/latest";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PageBuildSchema;
    };
  };

  /**
   * @name repos/get-pages-build
   * @summary Get GitHub Pages build
   * @description Gets information about a GitHub Pages build.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/pages/pages#get-apiname-pages-build
   */
  "GET /repos/{owner}/{repo}/pages/builds/{build_id}": {
    parameters: {
      owner: string;
      repo: string;
      build_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/pages/builds/{build_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PageBuildSchema;
    };
  };

  /**
   * @name repos/create-pages-deployment
   * @summary Create a GitHub Pages deployment
   * @description Create a GitHub Pages deployment for a repository.
   *
   * The authenticated user must have write permission to the repository.
   * @see https://docs.github.com/rest/pages/pages#create-a-github-pages-deployment
   */
  "POST /repos/{owner}/{repo}/pages/deployments": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/pages/deployments"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/pages/deployments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The ID of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required.
         */
        artifact_id?: number;

        /**
         * @description The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required.
         */
        artifact_url?: string;

        /**
         * @description The target environment for this GitHub Pages deployment.
         * @default "github-pages"
         */
        environment?: string;

        /**
         * @description A unique string that represents the version of the build for this deployment.
         * @default "GITHUB_SHA"
         */
        pages_build_version: string;

        /**
         * @description The OIDC token issued by GitHub Actions certifying the origin of the deployment.
         */
        oidc_token: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PageDeploymentSchema;
    };
  };

  /**
   * @name repos/get-pages-deployment
   * @summary Get the status of a GitHub Pages deployment
   * @description Gets the current status of a GitHub Pages deployment.
   *
   * The authenticated user must have read permission for the GitHub Pages site.
   * @see https://docs.github.com/rest/pages/pages#get-the-status-of-a-github-pages-deployment
   */
  "GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}": {
    parameters: {
      owner: string;
      repo: string;
      pages_deployment_id: number | string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PagesDeploymentStatusSchema;
    };
  };

  /**
   * @name repos/cancel-pages-deployment
   * @summary Cancel a GitHub Pages deployment
   * @description Cancels a GitHub Pages deployment.
   *
   * The authenticated user must have write permissions for the GitHub Pages site.
   * @see https://docs.github.com/rest/pages/pages#cancel-a-github-pages-deployment
   */
  "POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel": {
    parameters: {
      owner: string;
      repo: string;
      pages_deployment_id: number | string;
    };
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 204;
      data: never;
    };
  };

  /**
   * @name repos/get-pages-health-check
   * @summary Get a DNS health check for GitHub Pages
   * @description Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.
   *
   * The first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.
   *
   * The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/pages/pages#get-a-dns-health-check-for-github-pages
   */
  "GET /repos/{owner}/{repo}/pages/health": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/pages/health";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PagesHealthCheckSchema;
    };
  };

  /**
   * @name repos/check-private-vulnerability-reporting
   * @summary Check if private vulnerability reporting is enabled for a repository
   * @description Returns a boolean indicating whether or not private vulnerability reporting is enabled for the repository. For more information, see "[Evaluating the security settings of a repository](https://docs.github.com/code-security/security-advisories/working-with-repository-security-advisories/evaluating-the-security-settings-of-a-repository)".
   * @see https://docs.github.com/rest/repos/repos#check-if-private-vulnerability-reporting-is-enabled-for-a-repository
   */
  "GET /repos/{owner}/{repo}/private-vulnerability-reporting": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/private-vulnerability-reporting";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        /**
         * @description Whether or not private vulnerability reporting is enabled for the repository.
         */
        enabled: boolean;
      };
    };
  };

  /**
   * @name repos/enable-private-vulnerability-reporting
   * @summary Enable private vulnerability reporting for a repository
   * @description Enables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)."
   * @see https://docs.github.com/rest/repos/repos#enable-private-vulnerability-reporting-for-a-repository
   */
  "PUT /repos/{owner}/{repo}/private-vulnerability-reporting": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/private-vulnerability-reporting";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 204;
      data: never;
    };
  };

  /**
   * @name repos/disable-private-vulnerability-reporting
   * @summary Disable private vulnerability reporting for a repository
   * @description Disables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)".
   * @see https://docs.github.com/rest/repos/repos#disable-private-vulnerability-reporting-for-a-repository
   */
  "DELETE /repos/{owner}/{repo}/private-vulnerability-reporting": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/private-vulnerability-reporting";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 204;
      data: never;
    };
  };

  /**
   * @name projects-classic/list-for-repo
   * @summary List repository projects
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/projects-classic/projects#list-repository-projects
   */
  "GET /repos/{owner}/{repo}/projects": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description Indicates the state of the projects to return.
       */
      state?: "open" | "closed" | "all";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/projects";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectSchema[];
    };
  };

  /**
   * @name projects-classic/create-for-repo
   * @summary Create a repository project
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/projects-classic/projects#create-a-repository-project
   */
  "POST /repos/{owner}/{repo}/projects": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/projects"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/projects";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the project.
         */
        name: string;

        /**
         * @description The description of the project.
         */
        body?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name repos/get-custom-properties-values
   * @summary Get all custom property values for a repository
   * @description Gets all custom property values that are set for a repository.
   * Users with read access to the repository can use this endpoint.
   * @see https://docs.github.com/rest/repos/custom-properties#get-all-custom-property-values-for-a-repository
   */
  "GET /repos/{owner}/{repo}/properties/values": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/properties/values";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CustomPropertyValueSchema[];
    };
  };

  /**
   * @name repos/create-or-update-custom-properties-values
   * @summary Create or update custom property values for a repository
   * @description Create new or update existing custom property values for a repository.
   * Using a value of `null` for a custom property will remove or 'unset' the property value from the repository.
   *
   * Repository admins and other users with the repository-level "edit custom property values" fine-grained permission can use this endpoint.
   * @see https://docs.github.com/rest/repos/custom-properties#create-or-update-custom-property-values-for-a-repository
   */
  "PATCH /repos/{owner}/{repo}/properties/values": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["PATCH /repos/{owner}/{repo}/properties/values"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/properties/values";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description A list of custom property names and associated values to apply to the repositories.
         */
        properties: CustomPropertyValueSchema[];
      };
    };
    response: never;
  };

  /**
   * @name pulls/list
   * @summary List pull requests
   * @description Lists pull requests in a specified repository.
   *
   * Draft pull requests are available in public repositories with GitHub
   * Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing
   * plans, and in public and private repositories with GitHub Team and GitHub Enterprise
   * Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
   * in the GitHub Help documentation.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/pulls/pulls#list-pull-requests
   */
  "GET /repos/{owner}/{repo}/pulls": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description Either `open`, `closed`, or `all` to filter by state.
       */
      state?: "open" | "closed" | "all";

      /**
       * @description Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
       */
      head?: string;

      /**
       * @description Filter pulls by base branch name. Example: `gh-pages`.
       */
      base?: string;

      /**
       * @description What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.
       */
      sort?: "created" | "updated" | "popularity" | "long-running";

      /**
       * @description The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
       */
      direction?: "asc" | "desc";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/pulls";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PullRequestSimpleSchema[];
    };
  };

  /**
   * @name pulls/create
   * @summary Create a pull request
   * @description Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
   *
   * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/pulls/pulls#create-a-pull-request
   */
  "POST /repos/{owner}/{repo}/pulls": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/pulls"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/pulls";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The title of the new pull request. Required unless `issue` is specified.
         */
        title?: string;

        /**
         * @description The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.
         */
        head: string;

        /**
         * @description The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization.
         * @example octo-org/octo-repo
         */
        head_repo?: string;

        /**
         * @description The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
         */
        base: string;

        /**
         * @description The contents of the pull request.
         */
        body?: string;

        /**
         * @description Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
         */
        maintainer_can_modify?: boolean;

        /**
         * @description Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more.
         */
        draft?: boolean;

        /**
         * @description An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified.
         * @example 1
         */
        issue?: number;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name pulls/list-review-comments-for-repo
   * @summary List review comments in a repository
   * @description Lists review comments for all pull requests in a repository. By default,
   * review comments are in ascending order by ID.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/pulls/comments#list-review-comments-in-a-repository
   */
  "GET /repos/{owner}/{repo}/pulls/comments": {
    parameters: {
      owner: string;
      repo: string;
      sort?: "created" | "updated" | "created_at";

      /**
       * @description The direction to sort results. Ignored without `sort` parameter.
       */
      direction?: "asc" | "desc";
      since?: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/pulls/comments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PullRequestReviewCommentSchema[];
    };
  };

  /**
   * @name pulls/get-review-comment
   * @summary Get a review comment for a pull request
   * @description Provides details for a specified review comment.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request
   */
  "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}": {
    parameters: {
      owner: string;
      repo: string;
      comment_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/pulls/comments/{comment_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PullRequestReviewCommentSchema;
    };
  };

  /**
   * @name pulls/update-review-comment
   * @summary Update a review comment for a pull request
   * @description Edits the content of a specified review comment.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/pulls/comments#update-a-review-comment-for-a-pull-request
   */
  "PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}": {
    parameters: {
      owner: string;
      repo: string;
      comment_id: number;
    } & Endpoints["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/pulls/comments/{comment_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The text of the reply to the review comment.
         */
        body: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PullRequestReviewCommentSchema;
    };
  };

  /**
   * @name pulls/delete-review-comment
   * @summary Delete a review comment for a pull request
   * @description Deletes a review comment.
   * @see https://docs.github.com/rest/pulls/comments#delete-a-review-comment-for-a-pull-request
   */
  "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}": {
    parameters: {
      owner: string;
      repo: string;
      comment_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/pulls/comments/{comment_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name reactions/list-for-pull-request-review-comment
   * @summary List reactions for a pull request review comment
   * @description List the reactions to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request).
   * @see https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-pull-request-review-comment
   */
  "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions": {
    parameters: {
      owner: string;
      repo: string;
      comment_id: number;

      /**
       * @description Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a pull request review comment.
       */
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReactionSchema[];
    };
  };

  /**
   * @name reactions/create-for-pull-request-review-comment
   * @summary Create reaction for a pull request review comment
   * @description Create a reaction to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.
   * @see https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-pull-request-review-comment
   */
  "POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions": {
    parameters: {
      owner: string;
      repo: string;
      comment_id: number;
    } & Endpoints["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the pull request review comment.
         */
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReactionSchema;
    };
  };

  /**
   * @name reactions/delete-for-pull-request-comment
   * @summary Delete a pull request comment reaction
   * @description > [!NOTE]
   * > You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
   *
   * Delete a reaction to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request).
   * @see https://docs.github.com/rest/reactions/reactions#delete-a-pull-request-comment-reaction
   */
  "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}": {
    parameters: {
      owner: string;
      repo: string;
      comment_id: number;
      reaction_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name pulls/get
   * @summary Get a pull request
   * @description Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists details of a pull request by providing its number.
   *
   * When you get, [create](https://docs.github.com/rest/pulls/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/pulls/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
   *
   * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
   *
   * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
   *
   * *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
   * *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
   * *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
   *
   * Pass the appropriate [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types) to fetch diff and patch formats.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * - **`application/vnd.github.diff`**: For more information, see "[git-diff](https://git-scm.com/docs/git-diff)" in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.
   * @see https://docs.github.com/rest/pulls/pulls#get-a-pull-request
   */
  "GET /repos/{owner}/{repo}/pulls/{pull_number}": {
    parameters: {
      owner: string;
      repo: string;
      pull_number: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/pulls/{pull_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PullRequestSchema;
    };
  };

  /**
   * @name pulls/update
   * @summary Update a pull request
   * @description Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/pulls/pulls#update-a-pull-request
   */
  "PATCH /repos/{owner}/{repo}/pulls/{pull_number}": {
    parameters: {
      owner: string;
      repo: string;
      pull_number: number;
    } & Endpoints["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/pulls/{pull_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The title of the pull request.
         */
        title?: string;

        /**
         * @description The contents of the pull request.
         */
        body?: string;

        /**
         * @description State of this Pull Request. Either `open` or `closed`.
         */
        state?: "open" | "closed";

        /**
         * @description The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
         */
        base?: string;

        /**
         * @description Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
         */
        maintainer_can_modify?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PullRequestSchema;
    };
  };

  /**
   * @name codespaces/create-with-pr-for-authenticated-user
   * @summary Create a codespace from a pull request
   * @description Creates a codespace owned by the authenticated user for the specified pull request.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/codespaces#create-a-codespace-from-a-pull-request
   */
  "POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces": {
    parameters: {
      owner: string;
      repo: string;
      pull_number: number;
    } & Endpoints["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/pulls/{pull_number}/codespaces";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
         */
        location?: string;

        /**
         * @description The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down.
         */
        geo?: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest";

        /**
         * @description IP for location auto-detection when proxying a request
         */
        client_ip?: string;

        /**
         * @description Machine type to use for this codespace
         */
        machine?: string;

        /**
         * @description Path to devcontainer.json config to use for this codespace
         */
        devcontainer_path?: string;

        /**
         * @description Whether to authorize requested permissions from devcontainer.json
         */
        multi_repo_permissions_opt_out?: boolean;

        /**
         * @description Working directory for this codespace
         */
        working_directory?: string;

        /**
         * @description Time in minutes before codespace stops from inactivity
         */
        idle_timeout_minutes?: number;

        /**
         * @description Display name for this codespace
         */
        display_name?: string;

        /**
         * @description Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
         */
        retention_period_minutes?: number;
      } | null;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name pulls/list-review-comments
   * @summary List review comments on a pull request
   * @description Lists all review comments for a specified pull request. By default, review comments
   * are in ascending order by ID.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/pulls/comments#list-review-comments-on-a-pull-request
   */
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments": {
    parameters: {
      owner: string;
      repo: string;
      pull_number: number;
      sort?: "created" | "updated";

      /**
       * @description The direction to sort results. Ignored without `sort` parameter.
       */
      direction?: "asc" | "desc";
      since?: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/pulls/{pull_number}/comments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PullRequestReviewCommentSchema[];
    };
  };

  /**
   * @name pulls/create-review-comment
   * @summary Create a review comment for a pull request
   * @description Creates a review comment on the diff of a specified pull request. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/issues/comments#create-an-issue-comment)."
   *
   * If your comment applies to more than one line in the pull request diff, you should use the parameters `line`, `side`, and optionally `start_line` and `start_side` in your request.
   *
   * The `position` parameter is closing down. If you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.
   *
   * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
   * and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/pulls/comments#create-a-review-comment-for-a-pull-request
   */
  "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments": {
    parameters: {
      owner: string;
      repo: string;
      pull_number: number;
    } & Endpoints["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/pulls/{pull_number}/comments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The text of the review comment.
         */
        body: string;

        /**
         * @description The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.
         */
        commit_id: string;

        /**
         * @description The relative path to the file that necessitates a comment.
         */
        path: string;

        /**
         * @description **This parameter is closing down. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
         * @deprecated
         */
        position?: number;

        /**
         * @description In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
         */
        side?: "LEFT" | "RIGHT";

        /**
         * @description **Required unless using `subject_type:file`**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
         */
        line?: number;

        /**
         * @description **Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.
         */
        start_line?: number;

        /**
         * @description **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
         */
        start_side?: "LEFT" | "RIGHT" | "side";

        /**
         * @description The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.
         * @example 2
         */
        in_reply_to?: number;

        /**
         * @description The level at which the comment is targeted.
         */
        subject_type?: "line" | "file";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name pulls/create-reply-for-review-comment
   * @summary Create a reply for a review comment
   * @description Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
   *
   * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
   * and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/pulls/comments#create-a-reply-for-a-review-comment
   */
  "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies": {
    parameters: {
      owner: string;
      repo: string;
      pull_number: number;
      comment_id: number;
    } & Endpoints["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The text of the review comment.
         */
        body: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name pulls/list-commits
   * @summary List commits on a pull request
   * @description Lists a maximum of 250 commits for a pull request. To receive a complete
   * commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/commits/commits#list-commits)
   * endpoint.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/pulls/pulls#list-commits-on-a-pull-request
   */
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/commits": {
    parameters: {
      owner: string;
      repo: string;
      pull_number: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/pulls/{pull_number}/commits";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CommitSchema[];
    };
  };

  /**
   * @name pulls/list-files
   * @summary List pull requests files
   * @description Lists the files in a specified pull request.
   *
   * > [!NOTE]
   * > Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/pulls/pulls#list-pull-requests-files
   */
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/files": {
    parameters: {
      owner: string;
      repo: string;
      pull_number: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/pulls/{pull_number}/files";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: DiffEntrySchema[];
    };
  };

  /**
   * @name pulls/check-if-merged
   * @summary Check if a pull request has been merged
   * @description Checks if a pull request has been merged into the base branch. The HTTP status of the response indicates whether or not the pull request has been merged; the response body is empty.
   * @see https://docs.github.com/rest/pulls/pulls#check-if-a-pull-request-has-been-merged
   */
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/merge": {
    parameters: {
      owner: string;
      repo: string;
      pull_number: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/pulls/{pull_number}/merge";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name pulls/merge
   * @summary Merge a pull request
   * @description Merges a pull request into the base branch.
   * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
   * @see https://docs.github.com/rest/pulls/pulls#merge-a-pull-request
   */
  "PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge": {
    parameters: {
      owner: string;
      repo: string;
      pull_number: number;
    } & Endpoints["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/pulls/{pull_number}/merge";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Title for the automatic commit message.
         */
        commit_title?: string;

        /**
         * @description Extra detail to append to automatic commit message.
         */
        commit_message?: string;

        /**
         * @description SHA that pull request head must match to allow merge.
         */
        sha?: string;

        /**
         * @description The merge method to use.
         */
        merge_method?: "merge" | "squash" | "rebase";
      } | null;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PullRequestMergeResultSchema;
    };
  };

  /**
   * @name pulls/list-requested-reviewers
   * @summary Get all requested reviewers for a pull request
   * @description Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.
   * @see https://docs.github.com/rest/pulls/review-requests#get-all-requested-reviewers-for-a-pull-request
   */
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers": {
    parameters: {
      owner: string;
      repo: string;
      pull_number: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PullRequestReviewRequestSchema;
    };
  };

  /**
   * @name pulls/request-reviewers
   * @summary Request reviewers for a pull request
   * @description This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   * @see https://docs.github.com/rest/reference/pulls#request-reviewers-for-a-pull-request
   */
  "POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers": {
    parameters: {
      owner: string;
      repo: string;
      pull_number: number;
    } & Endpoints["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description An array of user `login`s that will be requested.
         */
        reviewers?: string[];

        /**
         * @description An array of team `slug`s that will be requested.
         */
        team_reviewers?: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name pulls/remove-requested-reviewers
   * @summary Remove requested reviewers from a pull request
   * @description Removes review requests from a pull request for a given set of users and/or teams.
   * @see https://docs.github.com/rest/pulls/review-requests#remove-requested-reviewers-from-a-pull-request
   */
  "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers": {
    parameters: {
      owner: string;
      repo: string;
      pull_number: number;
    } & Endpoints["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"]["request"]["data"];
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description An array of user `login`s that will be removed.
         */
        reviewers: string[];

        /**
         * @description An array of team `slug`s that will be removed.
         */
        team_reviewers?: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PullRequestSimpleSchema;
    };
  };

  /**
   * @name pulls/list-reviews
   * @summary List reviews for a pull request
   * @description Lists all reviews for a specified pull request. The list of reviews returns in chronological order.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request
   */
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews": {
    parameters: {
      owner: string;
      repo: string;
      pull_number: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PullRequestReviewSchema[];
    };
  };

  /**
   * @name pulls/create-review
   * @summary Create a review for a pull request
   * @description Creates a review on a specified pull request.
   *
   * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
   *
   * Pull request reviews created in the `PENDING` state are not submitted and therefore do not include the `submitted_at` property in the response. To create a pending review for a pull request, leave the `event` parameter blank. For more information about submitting a `PENDING` review, see "[Submit a review for a pull request](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request)."
   *
   * > [!NOTE]
   * > To comment on a specific line in a file, you need to first determine the position of that line in the diff. To see a pull request diff, add the `application/vnd.github.v3.diff` media type to the `Accept` header of a call to the [Get a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) endpoint.
   *
   * The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/pulls/reviews#create-a-review-for-a-pull-request
   */
  "POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews": {
    parameters: {
      owner: string;
      repo: string;
      pull_number: number;
    } & Endpoints["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.
         */
        commit_id?: string;

        /**
         * @description **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.
         */
        body?: string;

        /**
         * @description The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request) when you are ready.
         */
        event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";

        /**
         * @description Use the following table to specify the location, destination, and contents of the draft review comment.
         */
        comments?: {
          /**
           * @description The relative path to the file that necessitates a review comment.
           */
          path: string;

          /**
           * @description The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
           */
          position?: number;

          /**
           * @description Text of the review comment.
           */
          body: string;

          /**
           * @example 28
           */
          line?: number;

          /**
           * @example RIGHT
           */
          side?: string;

          /**
           * @example 26
           */
          start_line?: number;

          /**
           * @example LEFT
           */
          start_side?: string;
        }[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PullRequestReviewSchema;
    };
  };

  /**
   * @name pulls/get-review
   * @summary Get a review for a pull request
   * @description Retrieves a pull request review by its ID.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/pulls/reviews#get-a-review-for-a-pull-request
   */
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}": {
    parameters: {
      owner: string;
      repo: string;
      pull_number: number;
      review_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PullRequestReviewSchema;
    };
  };

  /**
   * @name pulls/update-review
   * @summary Update a review for a pull request
   * @description Updates the contents of a specified review summary comment.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/pulls/reviews#update-a-review-for-a-pull-request
   */
  "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}": {
    parameters: {
      owner: string;
      repo: string;
      pull_number: number;
      review_id: number;
    } & Endpoints["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The body text of the pull request review.
         */
        body: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PullRequestReviewSchema;
    };
  };

  /**
   * @name pulls/delete-pending-review
   * @summary Delete a pending review for a pull request
   * @description Deletes a pull request review that has not been submitted. Submitted reviews cannot be deleted.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/pulls/reviews#delete-a-pending-review-for-a-pull-request
   */
  "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}": {
    parameters: {
      owner: string;
      repo: string;
      pull_number: number;
      review_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PullRequestReviewSchema;
    };
  };

  /**
   * @name pulls/list-comments-for-review
   * @summary List comments for a pull request review
   * @description Lists comments for a specific pull request review.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/pulls/reviews#list-comments-for-a-pull-request-review
   */
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments": {
    parameters: {
      owner: string;
      repo: string;
      pull_number: number;
      review_id: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReviewCommentSchema[];
    };
  };

  /**
   * @name pulls/dismiss-review
   * @summary Dismiss a review for a pull request
   * @description Dismisses a specified review on a pull request.
   *
   * > [!NOTE]
   * > To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/branches/branch-protection), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/pulls/reviews#dismiss-a-review-for-a-pull-request
   */
  "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals": {
    parameters: {
      owner: string;
      repo: string;
      pull_number: number;
      review_id: number;
    } & Endpoints["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The message for the pull request review dismissal
         */
        message: string;

        /**
         * @example "DISMISS"
         */
        event?: "DISMISS";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PullRequestReviewSchema;
    };
  };

  /**
   * @name pulls/submit-review
   * @summary Submit a review for a pull request
   * @description Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see "[Create a review for a pull request](https://docs.github.com/rest/pulls/reviews#create-a-review-for-a-pull-request)."
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request
   */
  "POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events": {
    parameters: {
      owner: string;
      repo: string;
      pull_number: number;
      review_id: number;
    } & Endpoints["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The body text of the pull request review
         */
        body?: string;

        /**
         * @description The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
         */
        event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PullRequestReviewSchema;
    };
  };

  /**
   * @name pulls/update-branch
   * @summary Update a pull request branch
   * @description Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
   * Note: If making a request on behalf of a GitHub App you must also have permissions to write the contents of the head repository.
   * @see https://docs.github.com/rest/pulls/pulls#update-a-pull-request-branch
   */
  "PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch": {
    parameters: {
      owner: string;
      repo: string;
      pull_number: number;
    } & Endpoints["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/pulls/{pull_number}/update-branch";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/commits/commits#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.
         */
        expected_head_sha?: string;
      } | null;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: {
        message?: string;
        url?: string;
      };
    };
  };

  /**
   * @name repos/get-readme
   * @summary Get a repository README
   * @description Gets the preferred README for a repository.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type.
   * - **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
   * @see https://docs.github.com/rest/repos/contents#get-a-repository-readme
   */
  "GET /repos/{owner}/{repo}/readme": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description The name of the commit/branch/tag. Default: the repository’s default branch.
       */
      ref?: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/readme";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ContentFileSchema;
    };
  };

  /**
   * @name repos/get-readme-in-directory
   * @summary Get a repository README for a directory
   * @description Gets the README from a repository directory.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type.
   * - **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
   * @see https://docs.github.com/rest/repos/contents#get-a-repository-readme-for-a-directory
   */
  "GET /repos/{owner}/{repo}/readme/{dir}": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description The alternate path to look for a README file
       */
      dir: string;

      /**
       * @description The name of the commit/branch/tag. Default: the repository’s default branch.
       */
      ref?: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/readme/{dir}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ContentFileSchema;
    };
  };

  /**
   * @name repos/list-releases
   * @summary List releases
   * @description This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/repos/repos#list-repository-tags).
   *
   * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
   * @see https://docs.github.com/rest/releases/releases#list-releases
   */
  "GET /repos/{owner}/{repo}/releases": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/releases";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReleaseSchema[];
    };
  };

  /**
   * @name repos/create-release
   * @summary Create a release
   * @description Users with push access to the repository can create a release.
   *
   * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
   * @see https://docs.github.com/rest/releases/releases#create-a-release
   */
  "POST /repos/{owner}/{repo}/releases": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/releases"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/releases";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the tag.
         */
        tag_name: string;

        /**
         * @description Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
         */
        target_commitish?: string;

        /**
         * @description The name of the release.
         */
        name?: string;

        /**
         * @description Text describing the contents of the tag.
         */
        body?: string;

        /**
         * @description `true` to create a draft (unpublished) release, `false` to create a published one.
         * @default false
         */
        draft?: boolean;

        /**
         * @description `true` to identify the release as a prerelease. `false` to identify the release as a full release.
         * @default false
         */
        prerelease?: boolean;

        /**
         * @description If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
         */
        discussion_category_name?: string;

        /**
         * @description Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
         * @default false
         */
        generate_release_notes?: boolean;

        /**
         * @description Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
         * @default "true"
         */
        make_latest?: "true" | "false" | "legacy";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name repos/get-release-asset
   * @summary Get a release asset
   * @description To download the asset's binary content:
   *
   * - If within a browser, fetch the location specified in the `browser_download_url` key provided in the response.
   * - Alternatively, set the `Accept` header of the request to
   *   [`application/octet-stream`](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).
   *   The API will either redirect the client to the location, or stream it directly if possible.
   *   API clients should handle both a `200` or `302` response.
   * @see https://docs.github.com/rest/releases/assets#get-a-release-asset
   */
  "GET /repos/{owner}/{repo}/releases/assets/{asset_id}": {
    parameters: {
      owner: string;
      repo: string;
      asset_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/releases/assets/{asset_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReleaseAssetSchema;
    };
  };

  /**
   * @name repos/update-release-asset
   * @summary Update a release asset
   * @description Users with push access to the repository can edit a release asset.
   * @see https://docs.github.com/rest/releases/assets#update-a-release-asset
   */
  "PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}": {
    parameters: {
      owner: string;
      repo: string;
      asset_id: number;
    } & Endpoints["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/releases/assets/{asset_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The file name of the asset.
         */
        name?: string;

        /**
         * @description An alternate short description of the asset. Used in place of the filename.
         */
        label?: string;

        /**
         * @example "uploaded"
         */
        state?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReleaseAssetSchema;
    };
  };

  /**
   * @name repos/delete-release-asset
   * @summary Delete a release asset
   * @see https://docs.github.com/rest/releases/assets#delete-a-release-asset
   */
  "DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}": {
    parameters: {
      owner: string;
      repo: string;
      asset_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/releases/assets/{asset_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/generate-release-notes
   * @summary Generate release notes content for a release
   * @description Generate a name and body describing a [release](https://docs.github.com/rest/releases/releases#get-a-release). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.
   * @see https://docs.github.com/rest/releases/releases#generate-release-notes-content-for-a-release
   */
  "POST /repos/{owner}/{repo}/releases/generate-notes": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/releases/generate-notes"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/releases/generate-notes";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The tag name for the release. This can be an existing tag or a new one.
         */
        tag_name: string;

        /**
         * @description Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists.
         */
        target_commitish?: string;

        /**
         * @description The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.
         */
        previous_tag_name?: string;

        /**
         * @description Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used.
         */
        configuration_file_path?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReleaseNotesContentSchema;
    };
  };

  /**
   * @name repos/get-latest-release
   * @summary Get the latest release
   * @description View the latest published full release for the repository.
   *
   * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
   * @see https://docs.github.com/rest/releases/releases#get-the-latest-release
   */
  "GET /repos/{owner}/{repo}/releases/latest": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/releases/latest";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReleaseSchema;
    };
  };

  /**
   * @name repos/get-release-by-tag
   * @summary Get a release by tag name
   * @description Get a published release with the specified tag.
   * @see https://docs.github.com/rest/releases/releases#get-a-release-by-tag-name
   */
  "GET /repos/{owner}/{repo}/releases/tags/{tag}": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description tag parameter
       */
      tag: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/releases/tags/{tag}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReleaseSchema;
    };
  };

  /**
   * @name repos/get-release
   * @summary Get a release
   * @description Gets a public release with the specified release ID.
   *
   * > [!NOTE]
   * > This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a hypermedia resource. For more information, see "[Getting started with the REST API](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."
   * @see https://docs.github.com/rest/releases/releases#get-a-release
   */
  "GET /repos/{owner}/{repo}/releases/{release_id}": {
    parameters: {
      owner: string;
      repo: string;
      release_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/releases/{release_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReleaseSchema;
    };
  };

  /**
   * @name repos/update-release
   * @summary Update a release
   * @description Users with push access to the repository can edit a release.
   * @see https://docs.github.com/rest/releases/releases#update-a-release
   */
  "PATCH /repos/{owner}/{repo}/releases/{release_id}": {
    parameters: {
      owner: string;
      repo: string;
      release_id: number;
    } & Endpoints["PATCH /repos/{owner}/{repo}/releases/{release_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/releases/{release_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the tag.
         */
        tag_name?: string;

        /**
         * @description Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
         */
        target_commitish?: string;

        /**
         * @description The name of the release.
         */
        name?: string;

        /**
         * @description Text describing the contents of the tag.
         */
        body?: string;

        /**
         * @description `true` makes the release a draft, and `false` publishes the release.
         */
        draft?: boolean;

        /**
         * @description `true` to identify the release as a prerelease, `false` to identify the release as a full release.
         */
        prerelease?: boolean;

        /**
         * @description Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
         * @default true
         */
        make_latest?: "true" | "false" | "legacy";

        /**
         * @description If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
         */
        discussion_category_name?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReleaseSchema;
    };
  };

  /**
   * @name repos/delete-release
   * @summary Delete a release
   * @description Users with push access to the repository can delete a release.
   * @see https://docs.github.com/rest/releases/releases#delete-a-release
   */
  "DELETE /repos/{owner}/{repo}/releases/{release_id}": {
    parameters: {
      owner: string;
      repo: string;
      release_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/releases/{release_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/list-release-assets
   * @summary List release assets
   * @see https://docs.github.com/rest/releases/assets#list-release-assets
   */
  "GET /repos/{owner}/{repo}/releases/{release_id}/assets": {
    parameters: {
      owner: string;
      repo: string;
      release_id: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/releases/{release_id}/assets";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReleaseAssetSchema[];
    };
  };

  /**
   * @name repos/upload-release-asset
   * @summary Upload a release asset
   * @description This endpoint makes use of a [Hypermedia relation](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
   * the response of the [Create a release endpoint](https://docs.github.com/rest/releases/releases#create-a-release) to upload a release asset.
   *
   * You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
   *
   * Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:
   *
   * `application/zip`
   *
   * GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
   * you'll still need to pass your authentication to be able to upload an asset.
   *
   * When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
   *
   * **Notes:**
   * *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List release assets](https://docs.github.com/rest/releases/assets#list-release-assets)"
   * endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
   * *   To find the `release_id` query the [`GET /repos/{owner}/{repo}/releases/latest` endpoint](https://docs.github.com/rest/releases/releases#get-the-latest-release).
   * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
   * @see https://docs.github.com/rest/releases/assets#upload-a-release-asset
   */
  "POST /repos/{owner}/{repo}/releases/{release_id}/assets": {
    parameters: {
      owner: string;
      repo: string;
      release_id: number;
      name: string;
      label?: string;
    };
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/releases/{release_id}/assets";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name reactions/list-for-release
   * @summary List reactions for a release
   * @description List the reactions to a [release](https://docs.github.com/rest/releases/releases#get-a-release).
   * @see https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-release
   */
  "GET /repos/{owner}/{repo}/releases/{release_id}/reactions": {
    parameters: {
      owner: string;
      repo: string;
      release_id: number;

      /**
       * @description Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a release.
       */
      content?: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/releases/{release_id}/reactions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReactionSchema[];
    };
  };

  /**
   * @name reactions/create-for-release
   * @summary Create reaction for a release
   * @description Create a reaction to a [release](https://docs.github.com/rest/releases/releases#get-a-release). A response with a `Status: 200 OK` means that you already added the reaction type to this release.
   * @see https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-release
   */
  "POST /repos/{owner}/{repo}/releases/{release_id}/reactions": {
    parameters: {
      owner: string;
      repo: string;
      release_id: number;
    } & Endpoints["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/releases/{release_id}/reactions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the release.
         */
        content: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReactionSchema;
    };
  };

  /**
   * @name reactions/delete-for-release
   * @summary Delete a release reaction
   * @description > [!NOTE]
   * > You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.
   *
   * Delete a reaction to a [release](https://docs.github.com/rest/releases/releases#get-a-release).
   * @see https://docs.github.com/rest/reactions/reactions#delete-a-release-reaction
   */
  "DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}": {
    parameters: {
      owner: string;
      repo: string;
      release_id: number;
      reaction_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/get-branch-rules
   * @summary Get rules for a branch
   * @description Returns all active rules that apply to the specified branch. The branch does not need to exist; rules that would apply
   * to a branch with that name will be returned. All active rules that apply will be returned, regardless of the level
   * at which they are configured (e.g. repository or organization). Rules in rulesets with "evaluate" or "disabled"
   * enforcement statuses are not returned.
   * @see https://docs.github.com/rest/repos/rules#get-rules-for-a-branch
   */
  "GET /repos/{owner}/{repo}/rules/branches/{branch}": {
    parameters: {
      owner: string;
      repo: string;
      branch: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/rules/branches/{branch}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RepositoryRuleDetailedSchema[];
    };
  };

  /**
   * @name repos/get-repo-rulesets
   * @summary Get all repository rulesets
   * @description Get all the rulesets for a repository.
   * @see https://docs.github.com/rest/repos/rules#get-all-repository-rulesets
   */
  "GET /repos/{owner}/{repo}/rulesets": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;

      /**
       * @description Include rulesets configured at higher levels that apply to this repository
       */
      includes_parents?: boolean;
      targets?: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/rulesets";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RepositoryRulesetSchema[];
    };
  };

  /**
   * @name repos/create-repo-ruleset
   * @summary Create a repository ruleset
   * @description Create a ruleset for a repository.
   * @see https://docs.github.com/rest/repos/rules#create-a-repository-ruleset
   */
  "POST /repos/{owner}/{repo}/rulesets": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/rulesets"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/rulesets";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the ruleset.
         */
        name: string;

        /**
         * @description The target of the ruleset
         * @default "branch"
         */
        target?: "branch" | "tag" | "push";
        enforcement: RepositoryRuleEnforcementSchema;

        /**
         * @description The actors that can bypass the rules in this ruleset
         */
        bypass_actors?: RepositoryRulesetBypassActorSchema[];
        conditions?: RepositoryRulesetConditionsSchema;

        /**
         * @description An array of rules within the ruleset.
         */
        rules?: RepositoryRuleSchema[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name repos/get-repo-rule-suites
   * @summary List repository rule suites
   * @description Lists suites of rule evaluations at the repository level.
   * For more information, see "[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets)."
   * @see https://docs.github.com/rest/repos/rule-suites#list-repository-rule-suites
   */
  "GET /repos/{owner}/{repo}/rulesets/rule-suites": {
    parameters: {
      owner: string;
      repo: string;
      ref?: string;
      time_period?: "hour" | "day" | "week" | "month";
      actor_name?: string;
      rule_suite_result?: "pass" | "fail" | "bypass" | "all";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/rulesets/rule-suites";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RuleSuitesSchema;
    };
  };

  /**
   * @name repos/get-repo-rule-suite
   * @summary Get a repository rule suite
   * @description Gets information about a suite of rule evaluations from within a repository.
   * For more information, see "[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets)."
   * @see https://docs.github.com/rest/repos/rule-suites#get-a-repository-rule-suite
   */
  "GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}": {
    parameters: {
      owner: string;
      repo: string;
      rule_suite_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RuleSuiteSchema;
    };
  };

  /**
   * @name repos/get-repo-ruleset
   * @summary Get a repository ruleset
   * @description Get a ruleset for a repository.
   *
   * **Note:** To prevent leaking sensitive information, the `bypass_actors` property is only returned if the user
   * making the API request has write access to the ruleset.
   * @see https://docs.github.com/rest/repos/rules#get-a-repository-ruleset
   */
  "GET /repos/{owner}/{repo}/rulesets/{ruleset_id}": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description The ID of the ruleset.
       */
      ruleset_id: number;

      /**
       * @description Include rulesets configured at higher levels that apply to this repository
       */
      includes_parents?: boolean;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/rulesets/{ruleset_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RepositoryRulesetSchema;
    };
  };

  /**
   * @name repos/update-repo-ruleset
   * @summary Update a repository ruleset
   * @description Update a ruleset for a repository.
   * @see https://docs.github.com/rest/repos/rules#update-a-repository-ruleset
   */
  "PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description The ID of the ruleset.
       */
      ruleset_id: number;
    } & Endpoints["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/rulesets/{ruleset_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the ruleset.
         */
        name?: string;

        /**
         * @description The target of the ruleset
         */
        target?: "branch" | "tag" | "push";
        enforcement?: RepositoryRuleEnforcementSchema;

        /**
         * @description The actors that can bypass the rules in this ruleset
         */
        bypass_actors?: RepositoryRulesetBypassActorSchema[];
        conditions?: RepositoryRulesetConditionsSchema;

        /**
         * @description An array of rules within the ruleset.
         */
        rules?: RepositoryRuleSchema[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RepositoryRulesetSchema;
    };
  };

  /**
   * @name repos/delete-repo-ruleset
   * @summary Delete a repository ruleset
   * @description Delete a ruleset for a repository.
   * @see https://docs.github.com/rest/repos/rules#delete-a-repository-ruleset
   */
  "DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description The ID of the ruleset.
       */
      ruleset_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/rulesets/{ruleset_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/get-repo-ruleset-history
   * @summary Get repository ruleset history
   * @description Get the history of a repository ruleset.
   * @see https://docs.github.com/rest/repos/rules#get-repository-ruleset-history
   */
  "GET /repos/{owner}/{repo}/rulesets/{ruleset_id}/history": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;

      /**
       * @description The ID of the ruleset.
       */
      ruleset_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/rulesets/{ruleset_id}/history";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RulesetVersionSchema[];
    };
  };

  /**
   * @name repos/get-repo-ruleset-version
   * @summary Get repository ruleset version
   * @description Get a version of a repository ruleset.
   * @see https://docs.github.com/rest/repos/rules#get-repository-ruleset-version
   */
  "GET /repos/{owner}/{repo}/rulesets/{ruleset_id}/history/{version_id}": {
    parameters: {
      owner: string;
      repo: string;

      /**
       * @description The ID of the ruleset.
       */
      ruleset_id: number;

      /**
       * @description The ID of the version
       */
      version_id: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/rulesets/{ruleset_id}/history/{version_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RulesetVersionWithStateSchema;
    };
  };

  /**
   * @name secret-scanning/list-alerts-for-repo
   * @summary List secret scanning alerts for a repository
   * @description Lists secret scanning alerts for an eligible repository, from newest to oldest.
   *
   * The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
   * @see https://docs.github.com/rest/secret-scanning/secret-scanning#list-secret-scanning-alerts-for-a-repository
   */
  "GET /repos/{owner}/{repo}/secret-scanning/alerts": {
    parameters: {
      owner: string;
      repo: string;
      state?: "open" | "resolved";
      secret_type?: string;
      resolution?: string;
      sort?: "created" | "updated";
      direction?: "asc" | "desc";
      page?: number;
      per_page?: number;
      before?: string;
      after?: string;
      validity?: string;
      is_publicly_leaked?: boolean;
      is_multi_repo?: boolean;
      hide_secret?: boolean;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/secret-scanning/alerts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SecretScanningAlertSchema[];
    };
  };

  /**
   * @name secret-scanning/get-alert
   * @summary Get a secret scanning alert
   * @description Gets a single secret scanning alert detected in an eligible repository.
   *
   * The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
   * @see https://docs.github.com/rest/secret-scanning/secret-scanning#get-a-secret-scanning-alert
   */
  "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}": {
    parameters: {
      owner: string;
      repo: string;
      alert_number: {};
      hide_secret?: boolean;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SecretScanningAlertSchema;
    };
  };

  /**
   * @name secret-scanning/update-alert
   * @summary Update a secret scanning alert
   * @description Updates the status of a secret scanning alert in an eligible repository.
   *
   * The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
   * @see https://docs.github.com/rest/secret-scanning/secret-scanning#update-a-secret-scanning-alert
   */
  "PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}": {
    parameters: {
      owner: string;
      repo: string;
      alert_number: {};
    } & Endpoints["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        state: SecretScanningAlertStateSchema;
        resolution?: SecretScanningAlertResolutionSchema;
        resolution_comment?: SecretScanningAlertResolutionCommentSchema;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SecretScanningAlertSchema;
    };
  };

  /**
   * @name secret-scanning/list-locations-for-alert
   * @summary List locations for a secret scanning alert
   * @description Lists all locations for a given secret scanning alert for an eligible repository.
   *
   * The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
   * @see https://docs.github.com/rest/secret-scanning/secret-scanning#list-locations-for-a-secret-scanning-alert
   */
  "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations": {
    parameters: {
      owner: string;
      repo: string;
      alert_number: {};
      page?: number;
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SecretScanningLocationSchema[];
    };
  };

  /**
   * @name secret-scanning/create-push-protection-bypass
   * @summary Create a push protection bypass
   * @description Creates a bypass for a previously push protected secret.
   *
   * The authenticated user must be the original author of the committed secret.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/secret-scanning/secret-scanning#create-a-push-protection-bypass
   */
  "POST /repos/{owner}/{repo}/secret-scanning/push-protection-bypasses": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/secret-scanning/push-protection-bypasses"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/secret-scanning/push-protection-bypasses";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        reason: SecretScanningPushProtectionBypassReasonSchema;
        placeholder_id: SecretScanningPushProtectionBypassPlaceholderIdSchema;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SecretScanningPushProtectionBypassSchema;
    };
  };

  /**
   * @name secret-scanning/get-scan-history
   * @summary Get secret scanning scan history for a repository
   * @description Lists the latest default incremental and backfill scans by type for a repository. Scans from Copilot Secret Scanning are not included.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
   * @see https://docs.github.com/rest/secret-scanning/secret-scanning#get-secret-scanning-scan-history-for-a-repository
   */
  "GET /repos/{owner}/{repo}/secret-scanning/scan-history": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/secret-scanning/scan-history";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SecretScanningScanHistorySchema;
    };
  };

  /**
   * @name security-advisories/list-repository-advisories
   * @summary List repository security advisories
   * @description Lists security advisories in a repository.
   *
   * The authenticated user can access unpublished security advisories from a repository if they are a security manager or administrator of that repository, or if they are a collaborator on any security advisory.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
   * @see https://docs.github.com/rest/security-advisories/repository-advisories#list-repository-security-advisories
   */
  "GET /repos/{owner}/{repo}/security-advisories": {
    parameters: {
      owner: string;
      repo: string;
      direction?: "asc" | "desc";

      /**
       * @description The property to sort the results by.
       */
      sort?: "created" | "updated" | "published";
      before?: string;
      after?: string;

      /**
       * @description The number of advisories to return per page. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
       */
      per_page?: number;

      /**
       * @description Filter by state of the repository advisories. Only advisories of this state will be returned.
       */
      state?: "triage" | "draft" | "published" | "closed";
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/security-advisories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RepositoryAdvisorySchema[];
    };
  };

  /**
   * @name security-advisories/create-repository-advisory
   * @summary Create a repository security advisory
   * @description Creates a new repository security advisory.
   *
   * In order to create a draft repository security advisory, the authenticated user must be a security manager or administrator of that repository.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
   * @see https://docs.github.com/rest/security-advisories/repository-advisories#create-a-repository-security-advisory
   */
  "POST /repos/{owner}/{repo}/security-advisories": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/security-advisories"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/security-advisories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name security-advisories/create-private-vulnerability-report
   * @summary Privately report a security vulnerability
   * @description Report a security vulnerability to the maintainers of the repository.
   * See "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)" for more information about private vulnerability reporting.
   * @see https://docs.github.com/rest/security-advisories/repository-advisories#privately-report-a-security-vulnerability
   */
  "POST /repos/{owner}/{repo}/security-advisories/reports": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/security-advisories/reports"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/security-advisories/reports";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name security-advisories/get-repository-advisory
   * @summary Get a repository security advisory
   * @description Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier.
   *
   * Anyone can access any published security advisory on a public repository.
   *
   * The authenticated user can access an unpublished security advisory from a repository if they are a security manager or administrator of that repository, or if they are a
   * collaborator on the security advisory.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
   * @see https://docs.github.com/rest/security-advisories/repository-advisories#get-a-repository-security-advisory
   */
  "GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}": {
    parameters: {
      owner: string;
      repo: string;
      ghsa_id: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/security-advisories/{ghsa_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RepositoryAdvisorySchema;
    };
  };

  /**
   * @name security-advisories/update-repository-advisory
   * @summary Update a repository security advisory
   * @description Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier.
   *
   * In order to update any security advisory, the authenticated user must be a security manager or administrator of that repository,
   * or a collaborator on the repository security advisory.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
   * @see https://docs.github.com/rest/security-advisories/repository-advisories#update-a-repository-security-advisory
   */
  "PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}": {
    parameters: {
      owner: string;
      repo: string;
      ghsa_id: string;
    } & Endpoints["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/repos/{owner}/{repo}/security-advisories/{ghsa_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RepositoryAdvisorySchema;
    };
  };

  /**
   * @name security-advisories/create-repository-advisory-cve-request
   * @summary Request a CVE for a repository security advisory
   * @description If you want a CVE identification number for the security vulnerability in your project, and don't already have one, you can request a CVE identification number from GitHub. For more information see "[Requesting a CVE identification number](https://docs.github.com/code-security/security-advisories/repository-security-advisories/publishing-a-repository-security-advisory#requesting-a-cve-identification-number-optional)."
   *
   * You may request a CVE for public repositories, but cannot do so for private repositories.
   *
   * In order to request a CVE for a repository security advisory, the authenticated user must be a security manager or administrator of that repository.
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
   * @see https://docs.github.com/rest/security-advisories/repository-advisories#request-a-cve-for-a-repository-security-advisory
   */
  "POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve": {
    parameters: {
      owner: string;
      repo: string;
      ghsa_id: string;
    };
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: AcceptedResponse;
    };
  };

  /**
   * @name security-advisories/create-fork
   * @summary Create a temporary private fork
   * @description Create a temporary private fork to collaborate on fixing a security vulnerability in your repository.
   *
   * > [!NOTE]
   * > Forking a repository happens asynchronously. You may have to wait up to 5 minutes before you can access the fork.
   * @see https://docs.github.com/rest/security-advisories/repository-advisories#create-a-temporary-private-fork
   */
  "POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks": {
    parameters: {
      owner: string;
      repo: string;
      ghsa_id: string;
    };
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: FullRepositorySchema;
    };
  };

  /**
   * @name activity/list-stargazers-for-repo
   * @summary List stargazers
   * @description Lists the people that have starred the repository.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
   * @see https://docs.github.com/rest/activity/starring#list-stargazers
   */
  "GET /repos/{owner}/{repo}/stargazers": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/stargazers";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SimpleUserSchema[] | StargazerSchema[];
    };
  };

  /**
   * @name repos/get-code-frequency-stats
   * @summary Get the weekly commit activity
   * @description Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
   *
   * > [!NOTE]
   * > This endpoint can only be used for repositories with fewer than 10,000 commits. If the repository contains 10,000 or more commits, a 422 status code will be returned.
   * @see https://docs.github.com/rest/metrics/statistics#get-the-weekly-commit-activity
   */
  "GET /repos/{owner}/{repo}/stats/code_frequency": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/stats/code_frequency";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeFrequencyStatSchema[];
    };
  };

  /**
   * @name repos/get-commit-activity-stats
   * @summary Get the last year of commit activity
   * @description Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
   * @see https://docs.github.com/rest/metrics/statistics#get-the-last-year-of-commit-activity
   */
  "GET /repos/{owner}/{repo}/stats/commit_activity": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/stats/commit_activity";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CommitActivitySchema[];
    };
  };

  /**
   * @name repos/get-contributors-stats
   * @summary Get all contributor commit activity
   * @description
   * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
   *
   * *   `w` - Start of the week, given as a [Unix timestamp](https://en.wikipedia.org/wiki/Unix_time).
   * *   `a` - Number of additions
   * *   `d` - Number of deletions
   * *   `c` - Number of commits
   *
   * > [!NOTE]
   * > This endpoint will return `0` values for all addition and deletion counts in repositories with 10,000 or more commits.
   * @see https://docs.github.com/rest/metrics/statistics#get-all-contributor-commit-activity
   */
  "GET /repos/{owner}/{repo}/stats/contributors": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/stats/contributors";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ContributorActivitySchema[];
    };
  };

  /**
   * @name repos/get-participation-stats
   * @summary Get the weekly commit count
   * @description Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
   *
   * The array order is oldest week (index 0) to most recent week.
   *
   * The most recent week is seven days ago at UTC midnight to today at UTC midnight.
   * @see https://docs.github.com/rest/metrics/statistics#get-the-weekly-commit-count
   */
  "GET /repos/{owner}/{repo}/stats/participation": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/stats/participation";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ParticipationStatsSchema;
    };
  };

  /**
   * @name repos/get-punch-card-stats
   * @summary Get the hourly commit count for each day
   * @description Each array contains the day number, hour number, and number of commits:
   *
   * *   `0-6`: Sunday - Saturday
   * *   `0-23`: Hour of day
   * *   Number of commits
   *
   * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
   * @see https://docs.github.com/rest/metrics/statistics#get-the-hourly-commit-count-for-each-day
   */
  "GET /repos/{owner}/{repo}/stats/punch_card": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/stats/punch_card";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodeFrequencyStatSchema[];
    };
  };

  /**
   * @name repos/create-commit-status
   * @summary Create a commit status
   * @description Users with push access in a repository can create commit statuses for a given SHA.
   *
   * Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
   * @see https://docs.github.com/rest/commits/statuses#create-a-commit-status
   */
  "POST /repos/{owner}/{repo}/statuses/{sha}": {
    parameters: {
      owner: string;
      repo: string;
      sha: string;
    } & Endpoints["POST /repos/{owner}/{repo}/statuses/{sha}"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/statuses/{sha}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The state of the status.
         */
        state: "error" | "failure" | "pending" | "success";

        /**
         * @description The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
         * For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:
         * `http://ci.example.com/user/repo/build/sha`
         */
        target_url?: string | null;

        /**
         * @description A short description of the status.
         */
        description?: string | null;

        /**
         * @description A string label to differentiate this status from the status of other systems. This field is case-insensitive.
         * @default "default"
         */
        context?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name activity/list-watchers-for-repo
   * @summary List watchers
   * @description Lists the people watching the specified repository.
   * @see https://docs.github.com/rest/activity/watching#list-watchers
   */
  "GET /repos/{owner}/{repo}/subscribers": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/subscribers";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SimpleUserSchema[];
    };
  };

  /**
   * @name activity/get-repo-subscription
   * @summary Get a repository subscription
   * @description Gets information about whether the authenticated user is subscribed to the repository.
   * @see https://docs.github.com/rest/activity/watching#get-a-repository-subscription
   */
  "GET /repos/{owner}/{repo}/subscription": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/subscription";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RepositorySubscriptionSchema;
    };
  };

  /**
   * @name activity/set-repo-subscription
   * @summary Set a repository subscription
   * @description If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/activity/watching#delete-a-repository-subscription) completely.
   * @see https://docs.github.com/rest/activity/watching#set-a-repository-subscription
   */
  "PUT /repos/{owner}/{repo}/subscription": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/subscription"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/subscription";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Determines if notifications should be received from this repository.
         */
        subscribed?: boolean;

        /**
         * @description Determines if all notifications should be blocked from this repository.
         */
        ignored?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RepositorySubscriptionSchema;
    };
  };

  /**
   * @name activity/delete-repo-subscription
   * @summary Delete a repository subscription
   * @description This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/activity/watching#set-a-repository-subscription).
   * @see https://docs.github.com/rest/activity/watching#delete-a-repository-subscription
   */
  "DELETE /repos/{owner}/{repo}/subscription": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/subscription";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/list-tags
   * @summary List repository tags
   * @see https://docs.github.com/rest/repos/repos#list-repository-tags
   */
  "GET /repos/{owner}/{repo}/tags": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/tags";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TagSchema[];
    };
  };

  /**
   * @name repos/list-tag-protection
   * @summary Closing down - List tag protection states for a repository
   * @description > [!WARNING]
   * > **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the "[Repository Rulesets](https://docs.github.com/rest/repos/rules#get-all-repository-rulesets)" endpoint instead.
   *
   * This returns the tag protection states of a repository.
   *
   * This information is only available to repository administrators.
   * @deprecated
   * @see https://docs.github.com/rest/repos/tags#closing-down---list-tag-protection-states-for-a-repository
   */
  "GET /repos/{owner}/{repo}/tags/protection": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/tags/protection";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TagProtectionSchema[];
    };
  };

  /**
   * @name repos/create-tag-protection
   * @summary Closing down - Create a tag protection state for a repository
   * @description > [!WARNING]
   * > **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the "[Repository Rulesets](https://docs.github.com/rest/repos/rules#create-a-repository-ruleset)" endpoint instead.
   *
   * This creates a tag protection state for a repository.
   * This endpoint is only available to repository administrators.
   * @deprecated
   * @see https://docs.github.com/rest/repos/tags#closing-down---create-a-tag-protection-state-for-a-repository
   */
  "POST /repos/{owner}/{repo}/tags/protection": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/tags/protection"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/tags/protection";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description An optional glob pattern to match against when enforcing tag protection.
         */
        pattern: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name repos/delete-tag-protection
   * @summary Closing down - Delete a tag protection state for a repository
   * @description > [!WARNING]
   * > **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the "[Repository Rulesets](https://docs.github.com/rest/repos/rules#delete-a-repository-ruleset)" endpoint instead.
   *
   * This deletes a tag protection state for a repository.
   * This endpoint is only available to repository administrators.
   * @deprecated
   * @see https://docs.github.com/rest/repos/tags#closing-down---delete-a-tag-protection-state-for-a-repository
   */
  "DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}": {
    parameters: {
      owner: string;
      repo: string;
      tag_protection_id: number;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/tags/protection/{tag_protection_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/download-tarball-archive
   * @summary Download a repository archive (tar)
   * @description Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
   * `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
   * the `Location` header to make a second `GET` request.
   *
   * > [!NOTE]
   * > For private repositories, these links are temporary and expire after five minutes.
   * @see https://docs.github.com/rest/repos/contents#download-a-repository-archive-tar
   */
  "GET /repos/{owner}/{repo}/tarball/{ref}": {
    parameters: {
      owner: string;
      repo: string;
      ref: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/tarball/{ref}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: any;
  };

  /**
   * @name repos/list-teams
   * @summary List repository teams
   * @description Lists the teams that have access to the specified repository and that are also visible to the authenticated user.
   *
   * For a public repository, a team is listed only if that team added the public repository explicitly.
   *
   * OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to use this endpoint with a public repository, and `repo` scope to use this endpoint with a private repository.
   * @see https://docs.github.com/rest/repos/repos#list-repository-teams
   */
  "GET /repos/{owner}/{repo}/teams": {
    parameters: {
      owner: string;
      repo: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/teams";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamSchema[];
    };
  };

  /**
   * @name repos/get-all-topics
   * @summary Get all repository topics
   * @see https://docs.github.com/rest/repos/repos#get-all-repository-topics
   */
  "GET /repos/{owner}/{repo}/topics": {
    parameters: {
      owner: string;
      repo: string;
      page?: number;
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/topics";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TopicSchema;
    };
  };

  /**
   * @name repos/replace-all-topics
   * @summary Replace all repository topics
   * @see https://docs.github.com/rest/repos/repos#replace-all-repository-topics
   */
  "PUT /repos/{owner}/{repo}/topics": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["PUT /repos/{owner}/{repo}/topics"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/topics";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` will be saved as lowercase.
         */
        names: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TopicSchema;
    };
  };

  /**
   * @name repos/get-clones
   * @summary Get repository clones
   * @description Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
   * @see https://docs.github.com/rest/metrics/traffic#get-repository-clones
   */
  "GET /repos/{owner}/{repo}/traffic/clones": {
    parameters: {
      owner: string;
      repo: string;
      per?: "day" | "week";
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/traffic/clones";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CloneTrafficSchema;
    };
  };

  /**
   * @name repos/get-top-paths
   * @summary Get top referral paths
   * @description Get the top 10 popular contents over the last 14 days.
   * @see https://docs.github.com/rest/metrics/traffic#get-top-referral-paths
   */
  "GET /repos/{owner}/{repo}/traffic/popular/paths": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/traffic/popular/paths";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ContentTrafficSchema[];
    };
  };

  /**
   * @name repos/get-top-referrers
   * @summary Get top referral sources
   * @description Get the top 10 referrers over the last 14 days.
   * @see https://docs.github.com/rest/metrics/traffic#get-top-referral-sources
   */
  "GET /repos/{owner}/{repo}/traffic/popular/referrers": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/traffic/popular/referrers";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReferrerTrafficSchema[];
    };
  };

  /**
   * @name repos/get-views
   * @summary Get page views
   * @description Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
   * @see https://docs.github.com/rest/metrics/traffic#get-page-views
   */
  "GET /repos/{owner}/{repo}/traffic/views": {
    parameters: {
      owner: string;
      repo: string;
      per?: "day" | "week";
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/traffic/views";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ViewTrafficSchema;
    };
  };

  /**
   * @name repos/transfer
   * @summary Transfer a repository
   * @description A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).
   * @see https://docs.github.com/rest/repos/repos#transfer-a-repository
   */
  "POST /repos/{owner}/{repo}/transfer": {
    parameters: {
      owner: string;
      repo: string;
    } & Endpoints["POST /repos/{owner}/{repo}/transfer"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{owner}/{repo}/transfer";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The username or organization name the repository will be transferred to.
         */
        new_owner: string;

        /**
         * @description The new name to be given to the repository.
         */
        new_name?: string;

        /**
         * @description ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
         */
        team_ids?: number[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: MinimalRepositorySchema;
    };
  };

  /**
   * @name repos/check-vulnerability-alerts
   * @summary Check if vulnerability alerts are enabled for a repository
   * @description Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
   * @see https://docs.github.com/rest/repos/repos#check-if-vulnerability-alerts-are-enabled-for-a-repository
   */
  "GET /repos/{owner}/{repo}/vulnerability-alerts": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/vulnerability-alerts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/enable-vulnerability-alerts
   * @summary Enable vulnerability alerts
   * @description Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
   * @see https://docs.github.com/rest/repos/repos#enable-vulnerability-alerts
   */
  "PUT /repos/{owner}/{repo}/vulnerability-alerts": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "PUT";
      url: "/repos/{owner}/{repo}/vulnerability-alerts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/disable-vulnerability-alerts
   * @summary Disable vulnerability alerts
   * @description Disables dependency alerts and the dependency graph for a repository.
   * The authenticated user must have admin access to the repository. For more information,
   * see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
   * @see https://docs.github.com/rest/repos/repos#disable-vulnerability-alerts
   */
  "DELETE /repos/{owner}/{repo}/vulnerability-alerts": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "DELETE";
      url: "/repos/{owner}/{repo}/vulnerability-alerts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/download-zipball-archive
   * @summary Download a repository archive (zip)
   * @description Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
   * `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
   * the `Location` header to make a second `GET` request.
   *
   * > [!NOTE]
   * > For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect.
   * @see https://docs.github.com/rest/repos/contents#download-a-repository-archive-zip
   */
  "GET /repos/{owner}/{repo}/zipball/{ref}": {
    parameters: {
      owner: string;
      repo: string;
      ref: string;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/zipball/{ref}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: any;
  };

  /**
   * @name repos/create-using-template
   * @summary Create a repository using a template
   * @description Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/repos/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
   *
   * OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
   * @see https://docs.github.com/rest/repos/repos#create-a-repository-using-a-template
   */
  "POST /repos/{template_owner}/{template_repo}/generate": {
    parameters: {
      /**
       * @description The account owner of the template repository. The name is not case sensitive.
       */
      template_owner: string;

      /**
       * @description The name of the template repository without the `.git` extension. The name is not case sensitive.
       */
      template_repo: string;
    } & Endpoints["POST /repos/{template_owner}/{template_repo}/generate"]["request"]["data"];
    request: {
      method: "POST";
      url: "/repos/{template_owner}/{template_repo}/generate";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.
         */
        owner?: string;

        /**
         * @description The name of the new repository.
         */
        name: string;

        /**
         * @description A short description of the new repository.
         */
        description?: string;

        /**
         * @description Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
         * @default false
         */
        include_all_branches?: boolean;

        /**
         * @description Either `true` to create a new private repository or `false` to create a new public one.
         * @default false
         */
        private?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name repos/list-public
   * @summary List public repositories
   * @description Lists all public repositories in the order that they were created.
   *
   * Note:
   * - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
   * - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of repositories.
   * @see https://docs.github.com/rest/repos/repos#list-public-repositories
   */
  "GET /repositories": {
    parameters: {
      since?: number;
    };
    request: {
      method: "GET";
      url: "/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MinimalRepositorySchema[];
    };
  };

  /**
   * @name search/code
   * @summary Search code
   * @description Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
   *
   * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
   *
   * For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
   *
   * `q=addClass+in:file+language:js+repo:jquery/jquery`
   *
   * This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
   *
   * Considerations for code search:
   *
   * Due to the complexity of searching code, there are a few restrictions on how searches are performed:
   *
   * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
   * *   Only files smaller than 384 KB are searchable.
   * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
   * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
   *
   * This endpoint requires you to authenticate and limits you to 10 requests per minute.
   * @see https://docs.github.com/rest/search/search#search-code
   */
  "GET /search/code": {
    parameters: {
      /**
       * @description The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching code](https://docs.github.com/search-github/searching-on-github/searching-code)" for a detailed list of qualifiers.
       */
      q: string;

      /**
       * @description **This field is closing down.** Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
       * @deprecated
       * @deprecated
       */
      sort?: "indexed";

      /**
       * @description **This field is closing down.** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
       * @deprecated
       * @deprecated
       */
      order?: "desc" | "asc";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/search/code";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        incomplete_results: boolean;
        items: CodeSearchResultItemSchema[];
      };
    };
  };

  /**
   * @name search/commits
   * @summary Search commits
   * @description Find commits via various criteria on the default branch (usually `main`). This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
   *
   * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
   * metadata](https://docs.github.com/rest/search/search#text-match-metadata).
   *
   * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
   *
   * `q=repo:octocat/Spoon-Knife+css`
   * @see https://docs.github.com/rest/search/search#search-commits
   */
  "GET /search/commits": {
    parameters: {
      /**
       * @description The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching commits](https://docs.github.com/search-github/searching-on-github/searching-commits)" for a detailed list of qualifiers.
       */
      q: string;

      /**
       * @description Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
       */
      sort?: "author-date" | "committer-date";
      order?: "desc" | "asc";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/search/commits";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        incomplete_results: boolean;
        items: CommitSearchResultItemSchema[];
      };
    };
  };

  /**
   * @name search/issues-and-pull-requests
   * @summary Search issues and pull requests
   * @description > [!WARNING]
   * > **Notice:** Search for issues and pull requests will be overridden by advanced search on November 4, 2025.
   * > You can read more about this change on [the GitHub blog](https://github.blog/changelog/2025-03-06-github-issues-projects-api-support-for-issues-advanced-search-and-more/).
   * @deprecated
   * @see https://docs.github.com/rest/search/search#search-issues-and-pull-requests
   */
  "GET /search/issues": {
    parameters: {
      /**
       * @description The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching issues and pull requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)" for a detailed list of qualifiers.
       */
      q: string;

      /**
       * @description Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
       */
      sort?:
        | "comments"
        | "reactions"
        | "reactions-+1"
        | "reactions--1"
        | "reactions-smile"
        | "reactions-thinking_face"
        | "reactions-heart"
        | "reactions-tada"
        | "interactions"
        | "created"
        | "updated";
      order?: "desc" | "asc";
      per_page?: number;
      page?: number;
      advanced_search?: string;
    };
    request: {
      method: "GET";
      url: "/search/issues";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        incomplete_results: boolean;
        items: IssueSearchResultItemSchema[];
      };
    };
  };

  /**
   * @name search/labels
   * @summary Search labels
   * @description Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
   *
   * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
   *
   * For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
   *
   * `q=bug+defect+enhancement&repository_id=64778136`
   *
   * The labels that best match the query appear first in the search results.
   * @see https://docs.github.com/rest/search/search#search-labels
   */
  "GET /search/labels": {
    parameters: {
      /**
       * @description The id of the repository.
       */
      repository_id: number;

      /**
       * @description The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query).
       */
      q: string;

      /**
       * @description Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
       */
      sort?: "created" | "updated";
      order?: "desc" | "asc";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/search/labels";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        incomplete_results: boolean;
        items: LabelSearchResultItemSchema[];
      };
    };
  };

  /**
   * @name search/repos
   * @summary Search repositories
   * @description Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
   *
   * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
   *
   * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
   *
   * `q=tetris+language:assembly&sort=stars&order=desc`
   *
   * This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
   * @see https://docs.github.com/rest/search/search#search-repositories
   */
  "GET /search/repositories": {
    parameters: {
      /**
       * @description The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers.
       */
      q: string;

      /**
       * @description Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
       */
      sort?: "stars" | "forks" | "help-wanted-issues" | "updated";
      order?: "desc" | "asc";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/search/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        incomplete_results: boolean;
        items: RepoSearchResultItemSchema[];
      };
    };
  };

  /**
   * @name search/topics
   * @summary Search topics
   * @description Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
   *
   * When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
   *
   * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
   *
   * `q=ruby+is:featured`
   *
   * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
   * @see https://docs.github.com/rest/search/search#search-topics
   */
  "GET /search/topics": {
    parameters: {
      /**
       * @description The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query).
       */
      q: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/search/topics";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        incomplete_results: boolean;
        items: TopicSearchResultItemSchema[];
      };
    };
  };

  /**
   * @name search/users
   * @summary Search users
   * @description Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
   *
   * When searching for users, you can get text match metadata for the issue **login**, public **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
   *
   * For example, if you're looking for a list of popular users, you might try this query:
   *
   * `q=tom+repos:%3E42+followers:%3E1000`
   *
   * This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
   *
   * This endpoint does not accept authentication and will only include publicly visible users. As an alternative, you can use the GraphQL API. The GraphQL API requires authentication and will return private users, including Enterprise Managed Users (EMUs), that you are authorized to view. For more information, see "[GraphQL Queries](https://docs.github.com/graphql/reference/queries#search)."
   * @see https://docs.github.com/rest/search/search#search-users
   */
  "GET /search/users": {
    parameters: {
      /**
       * @description The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching users](https://docs.github.com/search-github/searching-on-github/searching-users)" for a detailed list of qualifiers.
       */
      q: string;

      /**
       * @description Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
       */
      sort?: "followers" | "repositories" | "joined";
      order?: "desc" | "asc";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/search/users";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        incomplete_results: boolean;
        items: UserSearchResultItemSchema[];
      };
    };
  };

  /**
   * @name teams/get-legacy
   * @summary Get a team (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/teams/teams#get-a-team-by-name) endpoint.
   * @deprecated
   * @see https://docs.github.com/rest/teams/teams#get-a-team-legacy
   */
  "GET /teams/{team_id}": {
    parameters: {
      team_id: number;
    };
    request: {
      method: "GET";
      url: "/teams/{team_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamFullSchema;
    };
  };

  /**
   * @name teams/update-legacy
   * @summary Update a team (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/teams/teams#update-a-team) endpoint.
   *
   * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
   *
   * > [!NOTE]
   * > With nested teams, the `privacy` for parent teams cannot be `secret`.
   * @deprecated
   * @see https://docs.github.com/rest/teams/teams#update-a-team-legacy
   */
  "PATCH /teams/{team_id}": {
    parameters: {
      team_id: number;
    } & Endpoints["PATCH /teams/{team_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/teams/{team_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the team.
         */
        name: string;

        /**
         * @description The description of the team.
         */
        description?: string;

        /**
         * @description The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:
         * **For a non-nested team:**
         *  * `secret` - only visible to organization owners and members of this team.
         *  * `closed` - visible to all members of this organization.
         * **For a parent or child team:**
         *  * `closed` - visible to all members of this organization.
         */
        privacy?: "secret" | "closed";

        /**
         * @description The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are:
         *  * `notifications_enabled` - team members receive notifications when the team is @mentioned.
         *  * `notifications_disabled` - no one receives notifications.
         */
        notification_setting?:
          | "notifications_enabled"
          | "notifications_disabled";

        /**
         * @description **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
         * @default "pull"
         */
        permission?: "pull" | "push" | "admin";

        /**
         * @description The ID of a team to set as the parent team.
         */
        parent_team_id?: number | null;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamFullSchema;
    };
  };

  /**
   * @name teams/delete-legacy
   * @summary Delete a team (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/teams/teams#delete-a-team) endpoint.
   *
   * To delete a team, the authenticated user must be an organization owner or team maintainer.
   *
   * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
   * @deprecated
   * @see https://docs.github.com/rest/teams/teams#delete-a-team-legacy
   */
  "DELETE /teams/{team_id}": {
    parameters: {
      team_id: number;
    };
    request: {
      method: "DELETE";
      url: "/teams/{team_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name teams/list-discussions-legacy
   * @summary List discussions (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/teams/discussions#list-discussions) endpoint.
   *
   * List all discussions on a team's page.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
   * @deprecated
   * @see https://docs.github.com/rest/teams/discussions#list-discussions-legacy
   */
  "GET /teams/{team_id}/discussions": {
    parameters: {
      team_id: number;
      direction?: "asc" | "desc";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/teams/{team_id}/discussions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamDiscussionSchema[];
    };
  };

  /**
   * @name teams/create-discussion-legacy
   * @summary Create a discussion (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/teams/discussions#create-a-discussion) endpoint.
   *
   * Creates a new discussion post on a team's page.
   *
   * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
   * @deprecated
   * @see https://docs.github.com/rest/teams/discussions#create-a-discussion-legacy
   */
  "POST /teams/{team_id}/discussions": {
    parameters: {
      team_id: number;
    } & Endpoints["POST /teams/{team_id}/discussions"]["request"]["data"];
    request: {
      method: "POST";
      url: "/teams/{team_id}/discussions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The discussion post's title.
         */
        title: string;

        /**
         * @description The discussion post's body text.
         */
        body: string;

        /**
         * @description Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
         * @default false
         */
        private?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name teams/get-discussion-legacy
   * @summary Get a discussion (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion) endpoint.
   *
   * Get a specific discussion on a team's page.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
   * @deprecated
   * @see https://docs.github.com/rest/teams/discussions#get-a-discussion-legacy
   */
  "GET /teams/{team_id}/discussions/{discussion_number}": {
    parameters: {
      team_id: number;
      discussion_number: number;
    };
    request: {
      method: "GET";
      url: "/teams/{team_id}/discussions/{discussion_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamDiscussionSchema;
    };
  };

  /**
   * @name teams/update-discussion-legacy
   * @summary Update a discussion (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/teams/discussions#update-a-discussion) endpoint.
   *
   * Edits the title and body text of a discussion post. Only the parameters you provide are updated.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
   * @deprecated
   * @see https://docs.github.com/rest/teams/discussions#update-a-discussion-legacy
   */
  "PATCH /teams/{team_id}/discussions/{discussion_number}": {
    parameters: {
      team_id: number;
      discussion_number: number;
    } & Endpoints["PATCH /teams/{team_id}/discussions/{discussion_number}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/teams/{team_id}/discussions/{discussion_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The discussion post's title.
         */
        title?: string;

        /**
         * @description The discussion post's body text.
         */
        body?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamDiscussionSchema;
    };
  };

  /**
   * @name teams/delete-discussion-legacy
   * @summary Delete a discussion (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/teams/discussions#delete-a-discussion) endpoint.
   *
   * Delete a discussion from a team's page.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
   * @deprecated
   * @see https://docs.github.com/rest/teams/discussions#delete-a-discussion-legacy
   */
  "DELETE /teams/{team_id}/discussions/{discussion_number}": {
    parameters: {
      team_id: number;
      discussion_number: number;
    };
    request: {
      method: "DELETE";
      url: "/teams/{team_id}/discussions/{discussion_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name teams/list-discussion-comments-legacy
   * @summary List discussion comments (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/teams/discussion-comments#list-discussion-comments) endpoint.
   *
   * List all comments on a team discussion.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
   * @deprecated
   * @see https://docs.github.com/rest/teams/discussion-comments#list-discussion-comments-legacy
   */
  "GET /teams/{team_id}/discussions/{discussion_number}/comments": {
    parameters: {
      team_id: number;
      discussion_number: number;
      direction?: "asc" | "desc";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/teams/{team_id}/discussions/{discussion_number}/comments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamDiscussionCommentSchema[];
    };
  };

  /**
   * @name teams/create-discussion-comment-legacy
   * @summary Create a discussion comment (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/teams/discussion-comments#create-a-discussion-comment) endpoint.
   *
   * Creates a new comment on a team discussion.
   *
   * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
   * @deprecated
   * @see https://docs.github.com/rest/teams/discussion-comments#create-a-discussion-comment-legacy
   */
  "POST /teams/{team_id}/discussions/{discussion_number}/comments": {
    parameters: {
      team_id: number;
      discussion_number: number;
    } & Endpoints["POST /teams/{team_id}/discussions/{discussion_number}/comments"]["request"]["data"];
    request: {
      method: "POST";
      url: "/teams/{team_id}/discussions/{discussion_number}/comments";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The discussion comment's body text.
         */
        body: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name teams/get-discussion-comment-legacy
   * @summary Get a discussion comment (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment) endpoint.
   *
   * Get a specific comment on a team discussion.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
   * @deprecated
   * @see https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment-legacy
   */
  "GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}": {
    parameters: {
      team_id: number;
      discussion_number: number;
      comment_number: number;
    };
    request: {
      method: "GET";
      url: "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamDiscussionCommentSchema;
    };
  };

  /**
   * @name teams/update-discussion-comment-legacy
   * @summary Update a discussion comment (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/teams/discussion-comments#update-a-discussion-comment) endpoint.
   *
   * Edits the body text of a discussion comment.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
   * @deprecated
   * @see https://docs.github.com/rest/teams/discussion-comments#update-a-discussion-comment-legacy
   */
  "PATCH /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}": {
    parameters: {
      team_id: number;
      discussion_number: number;
      comment_number: number;
    } & Endpoints["PATCH /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The discussion comment's body text.
         */
        body: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamDiscussionCommentSchema;
    };
  };

  /**
   * @name teams/delete-discussion-comment-legacy
   * @summary Delete a discussion comment (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/teams/discussion-comments#delete-a-discussion-comment) endpoint.
   *
   * Deletes a comment on a team discussion.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
   * @deprecated
   * @see https://docs.github.com/rest/teams/discussion-comments#delete-a-discussion-comment-legacy
   */
  "DELETE /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}": {
    parameters: {
      team_id: number;
      discussion_number: number;
      comment_number: number;
    };
    request: {
      method: "DELETE";
      url: "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name reactions/list-for-team-discussion-comment-legacy
   * @summary List reactions for a team discussion comment (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
   *
   * List the reactions to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
   * @deprecated
   * @see https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion-comment-legacy
   */
  "GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
    parameters: {
      team_id: number;
      discussion_number: number;
      comment_number: number;

      /**
       * @description Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion comment.
       */
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReactionSchema[];
    };
  };

  /**
   * @name reactions/create-for-team-discussion-comment-legacy
   * @summary Create reaction for a team discussion comment (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
   *
   * Create a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).
   *
   * A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
   * @deprecated
   * @see https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion-comment-legacy
   */
  "POST /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
    parameters: {
      team_id: number;
      discussion_number: number;
      comment_number: number;
    } & Endpoints["POST /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions"]["request"]["data"];
    request: {
      method: "POST";
      url: "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment.
         */
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name reactions/list-for-team-discussion-legacy
   * @summary List reactions for a team discussion (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion) endpoint.
   *
   * List the reactions to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
   * @deprecated
   * @see https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion-legacy
   */
  "GET /teams/{team_id}/discussions/{discussion_number}/reactions": {
    parameters: {
      team_id: number;
      discussion_number: number;

      /**
       * @description Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion.
       */
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/teams/{team_id}/discussions/{discussion_number}/reactions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ReactionSchema[];
    };
  };

  /**
   * @name reactions/create-for-team-discussion-legacy
   * @summary Create reaction for a team discussion (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion) endpoint.
   *
   * Create a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).
   *
   * A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
   * @deprecated
   * @see https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion-legacy
   */
  "POST /teams/{team_id}/discussions/{discussion_number}/reactions": {
    parameters: {
      team_id: number;
      discussion_number: number;
    } & Endpoints["POST /teams/{team_id}/discussions/{discussion_number}/reactions"]["request"]["data"];
    request: {
      method: "POST";
      url: "/teams/{team_id}/discussions/{discussion_number}/reactions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion.
         */
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name teams/list-pending-invitations-legacy
   * @summary List pending team invitations (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/teams/members#list-pending-team-invitations) endpoint.
   *
   * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
   * @deprecated
   * @see https://docs.github.com/rest/teams/members#list-pending-team-invitations-legacy
   */
  "GET /teams/{team_id}/invitations": {
    parameters: {
      team_id: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/teams/{team_id}/invitations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrganizationInvitationSchema[];
    };
  };

  /**
   * @name teams/list-members-legacy
   * @summary List team members (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/teams/members#list-team-members) endpoint.
   *
   * Team members will include the members of child teams.
   * @deprecated
   * @see https://docs.github.com/rest/teams/members#list-team-members-legacy
   */
  "GET /teams/{team_id}/members": {
    parameters: {
      team_id: number;

      /**
       * @description Filters members returned by their role in the team.
       */
      role?: "member" | "maintainer" | "all";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/teams/{team_id}/members";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SimpleUserSchema[];
    };
  };

  /**
   * @name teams/get-member-legacy
   * @summary Get team member (Legacy)
   * @description The "Get team member" endpoint (described below) is closing down.
   *
   * We recommend using the [Get team membership for a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
   *
   * To list members in a team, the team must be visible to the authenticated user.
   * @deprecated
   * @see https://docs.github.com/rest/teams/members#get-team-member-legacy
   */
  "GET /teams/{team_id}/members/{username}": {
    parameters: {
      team_id: number;
      username: string;
    };
    request: {
      method: "GET";
      url: "/teams/{team_id}/members/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name teams/add-member-legacy
   * @summary Add team member (Legacy)
   * @description The "Add team member" endpoint (described below) is closing down.
   *
   * We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
   *
   * > [!NOTE]
   * > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   *
   * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
   * @deprecated
   * @see https://docs.github.com/rest/teams/members#add-team-member-legacy
   */
  "PUT /teams/{team_id}/members/{username}": {
    parameters: {
      team_id: number;
      username: string;
    };
    request: {
      method: "PUT";
      url: "/teams/{team_id}/members/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name teams/remove-member-legacy
   * @summary Remove team member (Legacy)
   * @description The "Remove team member" endpoint (described below) is closing down.
   *
   * We recommend using the [Remove team membership for a user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
   *
   * > [!NOTE]
   * > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   * @deprecated
   * @see https://docs.github.com/rest/teams/members#remove-team-member-legacy
   */
  "DELETE /teams/{team_id}/members/{username}": {
    parameters: {
      team_id: number;
      username: string;
    };
    request: {
      method: "DELETE";
      url: "/teams/{team_id}/members/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name teams/get-membership-for-user-legacy
   * @summary Get team membership for a user (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint.
   *
   * Team members will include the members of child teams.
   *
   * To get a user's membership with a team, the team must be visible to the authenticated user.
   *
   * **Note:**
   * The response contains the `state` of the membership and the member's `role`.
   *
   * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team).
   * @deprecated
   * @see https://docs.github.com/rest/teams/members#get-team-membership-for-a-user-legacy
   */
  "GET /teams/{team_id}/memberships/{username}": {
    parameters: {
      team_id: number;
      username: string;
    };
    request: {
      method: "GET";
      url: "/teams/{team_id}/memberships/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamMembershipSchema;
    };
  };

  /**
   * @name teams/add-or-update-membership-for-user-legacy
   * @summary Add or update team membership for a user (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
   *
   * > [!NOTE]
   * > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   *
   * If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
   *
   * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
   * @deprecated
   * @see https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user-legacy
   */
  "PUT /teams/{team_id}/memberships/{username}": {
    parameters: {
      team_id: number;
      username: string;
    } & Endpoints["PUT /teams/{team_id}/memberships/{username}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/teams/{team_id}/memberships/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The role that this user should have in the team.
         * @default "member"
         */
        role?: "member" | "maintainer";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamMembershipSchema;
    };
  };

  /**
   * @name teams/remove-membership-for-user-legacy
   * @summary Remove team membership for a user (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
   *
   * > [!NOTE]
   * > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   * @deprecated
   * @see https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user-legacy
   */
  "DELETE /teams/{team_id}/memberships/{username}": {
    parameters: {
      team_id: number;
      username: string;
    };
    request: {
      method: "DELETE";
      url: "/teams/{team_id}/memberships/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name teams/list-projects-legacy
   * @summary List team projects (Legacy)
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/teams/teams#list-team-projects-legacy
   */
  "GET /teams/{team_id}/projects": {
    parameters: {
      team_id: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/teams/{team_id}/projects";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamProjectSchema[];
    };
  };

  /**
   * @name teams/check-permissions-for-project-legacy
   * @summary Check team permissions for a project (Legacy)
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-project-legacy
   */
  "GET /teams/{team_id}/projects/{project_id}": {
    parameters: {
      team_id: number;
      project_id: number;
    };
    request: {
      method: "GET";
      url: "/teams/{team_id}/projects/{project_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamProjectSchema;
    };
  };

  /**
   * @name teams/add-or-update-project-permissions-legacy
   * @summary Add or update team project permissions (Legacy)
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/teams/teams#add-or-update-team-project-permissions-legacy
   */
  "PUT /teams/{team_id}/projects/{project_id}": {
    parameters: {
      team_id: number;
      project_id: number;
    } & Endpoints["PUT /teams/{team_id}/projects/{project_id}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/teams/{team_id}/projects/{project_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
         */
        permission?: "read" | "write" | "admin";
      };
    };
    response: never;
  };

  /**
   * @name teams/remove-project-legacy
   * @summary Remove a project from a team (Legacy)
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/teams/teams#remove-a-project-from-a-team-legacy
   */
  "DELETE /teams/{team_id}/projects/{project_id}": {
    parameters: {
      team_id: number;
      project_id: number;
    };
    request: {
      method: "DELETE";
      url: "/teams/{team_id}/projects/{project_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name teams/list-repos-legacy
   * @summary List team repositories (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/teams/teams#list-team-repositories) endpoint.
   * @deprecated
   * @see https://docs.github.com/rest/teams/teams#list-team-repositories-legacy
   */
  "GET /teams/{team_id}/repos": {
    parameters: {
      team_id: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/teams/{team_id}/repos";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MinimalRepositorySchema[];
    };
  };

  /**
   * @name teams/check-permissions-for-repo-legacy
   * @summary Check team permissions for a repository (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-repository) endpoint.
   *
   * > [!NOTE]
   * > Repositories inherited through a parent team will also be checked.
   *
   * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types/) via the `Accept` header:
   * @deprecated
   * @see https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-repository-legacy
   */
  "GET /teams/{team_id}/repos/{owner}/{repo}": {
    parameters: {
      team_id: number;
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/teams/{team_id}/repos/{owner}/{repo}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamRepositorySchema;
    };
  };

  /**
   * @name teams/add-or-update-repo-permissions-legacy
   * @summary Add or update team repository permissions (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/teams/teams#add-or-update-team-repository-permissions)" endpoint.
   *
   * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
   *
   * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
   * @deprecated
   * @see https://docs.github.com/rest/teams/teams#add-or-update-team-repository-permissions-legacy
   */
  "PUT /teams/{team_id}/repos/{owner}/{repo}": {
    parameters: {
      team_id: number;
      owner: string;
      repo: string;
    } & Endpoints["PUT /teams/{team_id}/repos/{owner}/{repo}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/teams/{team_id}/repos/{owner}/{repo}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
         */
        permission?: "pull" | "push" | "admin";
      };
    };
    response: never;
  };

  /**
   * @name teams/remove-repo-legacy
   * @summary Remove a repository from a team (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/teams/teams#remove-a-repository-from-a-team) endpoint.
   *
   * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
   * @deprecated
   * @see https://docs.github.com/rest/teams/teams#remove-a-repository-from-a-team-legacy
   */
  "DELETE /teams/{team_id}/repos/{owner}/{repo}": {
    parameters: {
      team_id: number;
      owner: string;
      repo: string;
    };
    request: {
      method: "DELETE";
      url: "/teams/{team_id}/repos/{owner}/{repo}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name teams/list-child-legacy
   * @summary List child teams (Legacy)
   * @description > [!WARNING]
   * > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/teams/teams#list-child-teams) endpoint.
   * @deprecated
   * @see https://docs.github.com/rest/teams/teams#list-child-teams-legacy
   */
  "GET /teams/{team_id}/teams": {
    parameters: {
      team_id: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/teams/{team_id}/teams";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamSchema[];
    };
  };

  /**
   * @name users/get-authenticated
   * @summary Get the authenticated user
   * @description OAuth app tokens and personal access tokens (classic) need the `user` scope in order for the response to include private profile information.
   * @see https://docs.github.com/rest/users/users#get-the-authenticated-user
   */
  "GET /user": {
    parameters: {};
    request: {
      method: "GET";
      url: "/user";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PrivateUserSchema | PublicUserSchema;
    };
  };

  /**
   * @name users/update-authenticated
   * @summary Update the authenticated user
   * @description **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
   * @see https://docs.github.com/rest/users/users#update-the-authenticated-user
   */
  "PATCH /user": {
    parameters: {} & Endpoints["PATCH /user"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/user";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The new name of the user.
         * @example Omar Jahandar
         */
        name?: string;

        /**
         * @description The publicly visible email address of the user.
         * @example omar@example.com
         */
        email?: string;

        /**
         * @description The new blog URL of the user.
         * @example blog.example.com
         */
        blog?: string;

        /**
         * @description The new Twitter username of the user.
         * @example therealomarj
         */
        twitter_username?: string | null;

        /**
         * @description The new company of the user.
         * @example Acme corporation
         */
        company?: string;

        /**
         * @description The new location of the user.
         * @example Berlin, Germany
         */
        location?: string;

        /**
         * @description The new hiring availability of the user.
         */
        hireable?: boolean;

        /**
         * @description The new short biography of the user.
         */
        bio?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PrivateUserSchema;
    };
  };

  /**
   * @name users/list-blocked-by-authenticated-user
   * @summary List users blocked by the authenticated user
   * @description List the users you've blocked on your personal account.
   * @see https://docs.github.com/rest/users/blocking#list-users-blocked-by-the-authenticated-user
   */
  "GET /user/blocks": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/blocks";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SimpleUserSchema[];
    };
  };

  /**
   * @name users/check-blocked
   * @summary Check if a user is blocked by the authenticated user
   * @description Returns a 204 if the given user is blocked by the authenticated user. Returns a 404 if the given user is not blocked by the authenticated user, or if the given user account has been identified as spam by GitHub.
   * @see https://docs.github.com/rest/users/blocking#check-if-a-user-is-blocked-by-the-authenticated-user
   */
  "GET /user/blocks/{username}": {
    parameters: {
      username: string;
    };
    request: {
      method: "GET";
      url: "/user/blocks/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name users/block
   * @summary Block a user
   * @description Blocks the given user and returns a 204. If the authenticated user cannot block the given user a 422 is returned.
   * @see https://docs.github.com/rest/users/blocking#block-a-user
   */
  "PUT /user/blocks/{username}": {
    parameters: {
      username: string;
    };
    request: {
      method: "PUT";
      url: "/user/blocks/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name users/unblock
   * @summary Unblock a user
   * @description Unblocks the given user and returns a 204.
   * @see https://docs.github.com/rest/users/blocking#unblock-a-user
   */
  "DELETE /user/blocks/{username}": {
    parameters: {
      username: string;
    };
    request: {
      method: "DELETE";
      url: "/user/blocks/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name codespaces/list-for-authenticated-user
   * @summary List codespaces for the authenticated user
   * @description Lists the authenticated user's codespaces.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/codespaces#list-codespaces-for-the-authenticated-user
   */
  "GET /user/codespaces": {
    parameters: {
      per_page?: number;
      page?: number;
      repository_id?: number;
    };
    request: {
      method: "GET";
      url: "/user/codespaces";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        codespaces: CodespaceSchema[];
      };
    };
  };

  /**
   * @name codespaces/create-for-authenticated-user
   * @summary Create a codespace for the authenticated user
   * @description Creates a new codespace, owned by the authenticated user.
   *
   * This endpoint requires either a `repository_id` OR a `pull_request` but not both.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/codespaces#create-a-codespace-for-the-authenticated-user
   */
  "POST /user/codespaces": {
    parameters: {} & Endpoints["POST /user/codespaces"]["request"]["data"];
    request: {
      method: "POST";
      url: "/user/codespaces";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data:
        | {
            /**
             * @description Repository id for this codespace
             */
            repository_id: number;

            /**
             * @description Git ref (typically a branch name) for this codespace
             */
            ref?: string;

            /**
             * @description The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
             */
            location?: string;

            /**
             * @description The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down.
             */
            geo?: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest";

            /**
             * @description IP for location auto-detection when proxying a request
             */
            client_ip?: string;

            /**
             * @description Machine type to use for this codespace
             */
            machine?: string;

            /**
             * @description Path to devcontainer.json config to use for this codespace
             */
            devcontainer_path?: string;

            /**
             * @description Whether to authorize requested permissions from devcontainer.json
             */
            multi_repo_permissions_opt_out?: boolean;

            /**
             * @description Working directory for this codespace
             */
            working_directory?: string;

            /**
             * @description Time in minutes before codespace stops from inactivity
             */
            idle_timeout_minutes?: number;

            /**
             * @description Display name for this codespace
             */
            display_name?: string;

            /**
             * @description Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
             */
            retention_period_minutes?: number;
          }
        | {
            /**
             * @description Pull request number for this codespace
             */
            pull_request: {
              /**
               * @description Pull request number
               */
              pull_request_number: number;

              /**
               * @description Repository id for this codespace
               */
              repository_id: number;
            };

            /**
             * @description The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
             */
            location?: string;

            /**
             * @description The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down.
             */
            geo?: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest";

            /**
             * @description Machine type to use for this codespace
             */
            machine?: string;

            /**
             * @description Path to devcontainer.json config to use for this codespace
             */
            devcontainer_path?: string;

            /**
             * @description Working directory for this codespace
             */
            working_directory?: string;

            /**
             * @description Time in minutes before codespace stops from inactivity
             */
            idle_timeout_minutes?: number;
          };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name codespaces/list-secrets-for-authenticated-user
   * @summary List secrets for the authenticated user
   * @description Lists all development environment secrets available for a user's codespaces without revealing their
   * encrypted values.
   *
   * The authenticated user must have Codespaces access to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/secrets#list-secrets-for-the-authenticated-user
   */
  "GET /user/codespaces/secrets": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/codespaces/secrets";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        secrets: CodespacesSecretSchema[];
      };
    };
  };

  /**
   * @name codespaces/get-public-key-for-authenticated-user
   * @summary Get public key for the authenticated user
   * @description Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.
   *
   * The authenticated user must have Codespaces access to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/secrets#get-public-key-for-the-authenticated-user
   */
  "GET /user/codespaces/secrets/public-key": {
    parameters: {};
    request: {
      method: "GET";
      url: "/user/codespaces/secrets/public-key";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodespacesUserPublicKeySchema;
    };
  };

  /**
   * @name codespaces/get-secret-for-authenticated-user
   * @summary Get a secret for the authenticated user
   * @description Gets a development environment secret available to a user's codespaces without revealing its encrypted value.
   *
   * The authenticated user must have Codespaces access to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/secrets#get-a-secret-for-the-authenticated-user
   */
  "GET /user/codespaces/secrets/{secret_name}": {
    parameters: {
      secret_name: string;
    };
    request: {
      method: "GET";
      url: "/user/codespaces/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodespacesSecretSchema;
    };
  };

  /**
   * @name codespaces/create-or-update-secret-for-authenticated-user
   * @summary Create or update a secret for the authenticated user
   * @description Creates or updates a development environment secret for a user's codespace with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
   *
   * The authenticated user must have Codespaces access to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/secrets#create-or-update-a-secret-for-the-authenticated-user
   */
  "PUT /user/codespaces/secrets/{secret_name}": {
    parameters: {
      secret_name: string;
    } & Endpoints["PUT /user/codespaces/secrets/{secret_name}"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/user/codespaces/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/codespaces/secrets#get-public-key-for-the-authenticated-user) endpoint.
         */
        encrypted_value?: string;

        /**
         * @description ID of the key you used to encrypt the secret.
         */
        key_id: string;

        /**
         * @description An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints.
         */
        selected_repository_ids?: (number | string)[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name codespaces/delete-secret-for-authenticated-user
   * @summary Delete a secret for the authenticated user
   * @description Deletes a development environment secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.
   *
   * The authenticated user must have Codespaces access to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/secrets#delete-a-secret-for-the-authenticated-user
   */
  "DELETE /user/codespaces/secrets/{secret_name}": {
    parameters: {
      secret_name: string;
    };
    request: {
      method: "DELETE";
      url: "/user/codespaces/secrets/{secret_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name codespaces/list-repositories-for-secret-for-authenticated-user
   * @summary List selected repositories for a user secret
   * @description List the repositories that have been granted the ability to use a user's development environment secret.
   *
   * The authenticated user must have Codespaces access to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret
   */
  "GET /user/codespaces/secrets/{secret_name}/repositories": {
    parameters: {
      secret_name: string;
    };
    request: {
      method: "GET";
      url: "/user/codespaces/secrets/{secret_name}/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        repositories: MinimalRepositorySchema[];
      };
    };
  };

  /**
   * @name codespaces/set-repositories-for-secret-for-authenticated-user
   * @summary Set selected repositories for a user secret
   * @description Select the repositories that will use a user's development environment secret.
   *
   * The authenticated user must have Codespaces access to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/secrets#set-selected-repositories-for-a-user-secret
   */
  "PUT /user/codespaces/secrets/{secret_name}/repositories": {
    parameters: {
      secret_name: string;
    } & Endpoints["PUT /user/codespaces/secrets/{secret_name}/repositories"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/user/codespaces/secrets/{secret_name}/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/codespaces/secrets#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints.
         */
        selected_repository_ids: number[];
      };
    };
    response: never;
  };

  /**
   * @name codespaces/add-repository-for-secret-for-authenticated-user
   * @summary Add a selected repository to a user secret
   * @description Adds a repository to the selected repositories for a user's development environment secret.
   *
   * The authenticated user must have Codespaces access to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/secrets#add-a-selected-repository-to-a-user-secret
   */
  "PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}": {
    parameters: {
      secret_name: string;
      repository_id: number;
    };
    request: {
      method: "PUT";
      url: "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name codespaces/remove-repository-for-secret-for-authenticated-user
   * @summary Remove a selected repository from a user secret
   * @description Removes a repository from the selected repositories for a user's development environment secret.
   *
   * The authenticated user must have Codespaces access to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret
   */
  "DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}": {
    parameters: {
      secret_name: string;
      repository_id: number;
    };
    request: {
      method: "DELETE";
      url: "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name codespaces/get-for-authenticated-user
   * @summary Get a codespace for the authenticated user
   * @description Gets information about a user's codespace.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/codespaces#get-a-codespace-for-the-authenticated-user
   */
  "GET /user/codespaces/{codespace_name}": {
    parameters: {
      codespace_name: string;
    };
    request: {
      method: "GET";
      url: "/user/codespaces/{codespace_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodespaceSchema;
    };
  };

  /**
   * @name codespaces/update-for-authenticated-user
   * @summary Update a codespace for the authenticated user
   * @description Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.
   *
   * If you specify a new machine type it will be applied the next time your codespace is started.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/codespaces#update-a-codespace-for-the-authenticated-user
   */
  "PATCH /user/codespaces/{codespace_name}": {
    parameters: {
      codespace_name: string;
    } & Endpoints["PATCH /user/codespaces/{codespace_name}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/user/codespaces/{codespace_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description A valid machine to transition this codespace to.
         */
        machine?: string;

        /**
         * @description Display name for this codespace
         */
        display_name?: string;

        /**
         * @description Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in.
         */
        recent_folders?: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodespaceSchema;
    };
  };

  /**
   * @name codespaces/delete-for-authenticated-user
   * @summary Delete a codespace for the authenticated user
   * @description Deletes a user's codespace.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/codespaces#delete-a-codespace-for-the-authenticated-user
   */
  "DELETE /user/codespaces/{codespace_name}": {
    parameters: {
      codespace_name: string;
    };
    request: {
      method: "DELETE";
      url: "/user/codespaces/{codespace_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: AcceptedResponse;
    };
  };

  /**
   * @name codespaces/export-for-authenticated-user
   * @summary Export a codespace for the authenticated user
   * @description Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.
   *
   * If changes cannot be pushed to the codespace's repository, they will be pushed to a new or previously-existing fork instead.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/codespaces#export-a-codespace-for-the-authenticated-user
   */
  "POST /user/codespaces/{codespace_name}/exports": {
    parameters: {
      codespace_name: string;
    };
    request: {
      method: "POST";
      url: "/user/codespaces/{codespace_name}/exports";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 202;
      data: CodespaceExportDetailsSchema;
    };
  };

  /**
   * @name codespaces/get-export-details-for-authenticated-user
   * @summary Get details about a codespace export
   * @description Gets information about an export of a codespace.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/codespaces#get-details-about-a-codespace-export
   */
  "GET /user/codespaces/{codespace_name}/exports/{export_id}": {
    parameters: {
      codespace_name: string;
      export_id: string;
    };
    request: {
      method: "GET";
      url: "/user/codespaces/{codespace_name}/exports/{export_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodespaceExportDetailsSchema;
    };
  };

  /**
   * @name codespaces/codespace-machines-for-authenticated-user
   * @summary List machine types for a codespace
   * @description List the machine types a codespace can transition to use.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/machines#list-machine-types-for-a-codespace
   */
  "GET /user/codespaces/{codespace_name}/machines": {
    parameters: {
      codespace_name: string;
    };
    request: {
      method: "GET";
      url: "/user/codespaces/{codespace_name}/machines";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        machines: CodespaceMachineSchema[];
      };
    };
  };

  /**
   * @name codespaces/publish-for-authenticated-user
   * @summary Create a repository from an unpublished codespace
   * @description Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.
   *
   * The codespace's token is granted write permissions to the repository, allowing the user to push their changes.
   *
   * This will fail for a codespace that is already published, meaning it has an associated repository.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/codespaces#create-a-repository-from-an-unpublished-codespace
   */
  "POST /user/codespaces/{codespace_name}/publish": {
    parameters: {
      codespace_name: string;
    } & Endpoints["POST /user/codespaces/{codespace_name}/publish"]["request"]["data"];
    request: {
      method: "POST";
      url: "/user/codespaces/{codespace_name}/publish";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description A name for the new repository.
         */
        name?: string;

        /**
         * @description Whether the new repository should be private.
         * @default false
         */
        private?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name codespaces/start-for-authenticated-user
   * @summary Start a codespace for the authenticated user
   * @description Starts a user's codespace.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/codespaces#start-a-codespace-for-the-authenticated-user
   */
  "POST /user/codespaces/{codespace_name}/start": {
    parameters: {
      codespace_name: string;
    };
    request: {
      method: "POST";
      url: "/user/codespaces/{codespace_name}/start";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodespaceSchema;
    };
  };

  /**
   * @name codespaces/stop-for-authenticated-user
   * @summary Stop a codespace for the authenticated user
   * @description Stops a user's codespace.
   *
   * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
   * @see https://docs.github.com/rest/codespaces/codespaces#stop-a-codespace-for-the-authenticated-user
   */
  "POST /user/codespaces/{codespace_name}/stop": {
    parameters: {
      codespace_name: string;
    };
    request: {
      method: "POST";
      url: "/user/codespaces/{codespace_name}/stop";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CodespaceSchema;
    };
  };

  /**
   * @name packages/list-docker-migration-conflicting-packages-for-authenticated-user
   * @summary Get list of conflicting packages during Docker migration for authenticated-user
   * @description Lists all packages that are owned by the authenticated user within the user's namespace, and that encountered a conflict during a Docker migration.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
   * @see https://docs.github.com/rest/packages/packages#get-list-of-conflicting-packages-during-docker-migration-for-authenticated-user
   */
  "GET /user/docker/conflicts": {
    parameters: {};
    request: {
      method: "GET";
      url: "/user/docker/conflicts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PackageSchema[];
    };
  };

  /**
   * @name users/set-primary-email-visibility-for-authenticated-user
   * @summary Set primary email visibility for the authenticated user
   * @description Sets the visibility for your primary email addresses.
   * @see https://docs.github.com/rest/users/emails#set-primary-email-visibility-for-the-authenticated-user
   */
  "PATCH /user/email/visibility": {
    parameters: {} & Endpoints["PATCH /user/email/visibility"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/user/email/visibility";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Denotes whether an email is publicly visible.
         */
        visibility: "public" | "private";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: EmailSchema[];
    };
  };

  /**
   * @name users/list-emails-for-authenticated-user
   * @summary List email addresses for the authenticated user
   * @description Lists all of your email addresses, and specifies which one is visible
   * to the public.
   *
   * OAuth app tokens and personal access tokens (classic) need the `user:email` scope to use this endpoint.
   * @see https://docs.github.com/rest/users/emails#list-email-addresses-for-the-authenticated-user
   */
  "GET /user/emails": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/emails";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: EmailSchema[];
    };
  };

  /**
   * @name users/add-email-for-authenticated-user
   * @summary Add an email address for the authenticated user
   * @description OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
   * @see https://docs.github.com/rest/users/emails#add-an-email-address-for-the-authenticated-user
   */
  "POST /user/emails": {
    parameters: {} & Endpoints["POST /user/emails"]["request"]["data"];
    request: {
      method: "POST";
      url: "/user/emails";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
         * @example []
         */
        emails: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name users/delete-email-for-authenticated-user
   * @summary Delete an email address for the authenticated user
   * @description OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
   * @see https://docs.github.com/rest/users/emails#delete-an-email-address-for-the-authenticated-user
   */
  "DELETE /user/emails": {
    parameters: {} & Endpoints["DELETE /user/emails"]["request"]["data"];
    request: {
      method: "DELETE";
      url: "/user/emails";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Email addresses associated with the GitHub user account.
         */
        emails: string[];
      };
    };
    response: never;
  };

  /**
   * @name users/list-followers-for-authenticated-user
   * @summary List followers of the authenticated user
   * @description Lists the people following the authenticated user.
   * @see https://docs.github.com/rest/users/followers#list-followers-of-the-authenticated-user
   */
  "GET /user/followers": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/followers";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SimpleUserSchema[];
    };
  };

  /**
   * @name users/list-followed-by-authenticated-user
   * @summary List the people the authenticated user follows
   * @description Lists the people who the authenticated user follows.
   * @see https://docs.github.com/rest/users/followers#list-the-people-the-authenticated-user-follows
   */
  "GET /user/following": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/following";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SimpleUserSchema[];
    };
  };

  /**
   * @name users/check-person-is-followed-by-authenticated
   * @summary Check if a person is followed by the authenticated user
   * @see https://docs.github.com/rest/users/followers#check-if-a-person-is-followed-by-the-authenticated-user
   */
  "GET /user/following/{username}": {
    parameters: {
      username: string;
    };
    request: {
      method: "GET";
      url: "/user/following/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name users/follow
   * @summary Follow a user
   * @description Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `user:follow` scope to use this endpoint.
   * @see https://docs.github.com/rest/users/followers#follow-a-user
   */
  "PUT /user/following/{username}": {
    parameters: {
      username: string;
    };
    request: {
      method: "PUT";
      url: "/user/following/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name users/unfollow
   * @summary Unfollow a user
   * @description OAuth app tokens and personal access tokens (classic) need the `user:follow` scope to use this endpoint.
   * @see https://docs.github.com/rest/users/followers#unfollow-a-user
   */
  "DELETE /user/following/{username}": {
    parameters: {
      username: string;
    };
    request: {
      method: "DELETE";
      url: "/user/following/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name users/list-gpg-keys-for-authenticated-user
   * @summary List GPG keys for the authenticated user
   * @description Lists the current user's GPG keys.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:gpg_key` scope to use this endpoint.
   * @see https://docs.github.com/rest/users/gpg-keys#list-gpg-keys-for-the-authenticated-user
   */
  "GET /user/gpg_keys": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/gpg_keys";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: GpgKeySchema[];
    };
  };

  /**
   * @name users/create-gpg-key-for-authenticated-user
   * @summary Create a GPG key for the authenticated user
   * @description Adds a GPG key to the authenticated user's GitHub account.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:gpg_key` scope to use this endpoint.
   * @see https://docs.github.com/rest/users/gpg-keys#create-a-gpg-key-for-the-authenticated-user
   */
  "POST /user/gpg_keys": {
    parameters: {} & Endpoints["POST /user/gpg_keys"]["request"]["data"];
    request: {
      method: "POST";
      url: "/user/gpg_keys";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description A descriptive name for the new key.
         */
        name?: string;

        /**
         * @description A GPG key in ASCII-armored format.
         */
        armored_public_key: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name users/get-gpg-key-for-authenticated-user
   * @summary Get a GPG key for the authenticated user
   * @description View extended details for a single GPG key.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:gpg_key` scope to use this endpoint.
   * @see https://docs.github.com/rest/users/gpg-keys#get-a-gpg-key-for-the-authenticated-user
   */
  "GET /user/gpg_keys/{gpg_key_id}": {
    parameters: {
      gpg_key_id: number;
    };
    request: {
      method: "GET";
      url: "/user/gpg_keys/{gpg_key_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: GpgKeySchema;
    };
  };

  /**
   * @name users/delete-gpg-key-for-authenticated-user
   * @summary Delete a GPG key for the authenticated user
   * @description Removes a GPG key from the authenticated user's GitHub account.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:gpg_key` scope to use this endpoint.
   * @see https://docs.github.com/rest/users/gpg-keys#delete-a-gpg-key-for-the-authenticated-user
   */
  "DELETE /user/gpg_keys/{gpg_key_id}": {
    parameters: {
      gpg_key_id: number;
    };
    request: {
      method: "DELETE";
      url: "/user/gpg_keys/{gpg_key_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name apps/list-installations-for-authenticated-user
   * @summary List app installations accessible to the user access token
   * @description Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
   *
   * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
   *
   * You can find the permissions for the installation under the `permissions` key.
   * @see https://docs.github.com/rest/apps/installations#list-app-installations-accessible-to-the-user-access-token
   */
  "GET /user/installations": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/installations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        installations: InstallationSchema[];
      };
    };
  };

  /**
   * @name apps/list-installation-repos-for-authenticated-user
   * @summary List repositories accessible to the user access token
   * @description List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
   *
   * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
   *
   * The access the user has to each repository is included in the hash under the `permissions` key.
   * @see https://docs.github.com/rest/apps/installations#list-repositories-accessible-to-the-user-access-token
   */
  "GET /user/installations/{installation_id}/repositories": {
    parameters: {
      installation_id: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/installations/{installation_id}/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        total_count: number;
        repository_selection?: string;
        repositories: RepositorySchema[];
      };
    };
  };

  /**
   * @name apps/add-repo-to-installation-for-authenticated-user
   * @summary Add a repository to an app installation
   * @description Add a single repository to an installation. The authenticated user must have admin access to the repository.
   *
   * This endpoint only works for PATs (classic) with the `repo` scope.
   * @see https://docs.github.com/rest/apps/installations#add-a-repository-to-an-app-installation
   */
  "PUT /user/installations/{installation_id}/repositories/{repository_id}": {
    parameters: {
      installation_id: number;
      repository_id: number;
    };
    request: {
      method: "PUT";
      url: "/user/installations/{installation_id}/repositories/{repository_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name apps/remove-repo-from-installation-for-authenticated-user
   * @summary Remove a repository from an app installation
   * @description Remove a single repository from an installation. The authenticated user must have admin access to the repository. The installation must have the `repository_selection` of `selected`.
   *
   * This endpoint only works for PATs (classic) with the `repo` scope.
   * @see https://docs.github.com/rest/apps/installations#remove-a-repository-from-an-app-installation
   */
  "DELETE /user/installations/{installation_id}/repositories/{repository_id}": {
    parameters: {
      installation_id: number;
      repository_id: number;
    };
    request: {
      method: "DELETE";
      url: "/user/installations/{installation_id}/repositories/{repository_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name interactions/get-restrictions-for-authenticated-user
   * @summary Get interaction restrictions for your public repositories
   * @description Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
   * @see https://docs.github.com/rest/interactions/user#get-interaction-restrictions-for-your-public-repositories
   */
  "GET /user/interaction-limits": {
    parameters: {};
    request: {
      method: "GET";
      url: "/user/interaction-limits";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: InteractionLimitResponseSchema | {};
    };
  };

  /**
   * @name interactions/set-restrictions-for-authenticated-user
   * @summary Set interaction restrictions for your public repositories
   * @description Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
   * @see https://docs.github.com/rest/interactions/user#set-interaction-restrictions-for-your-public-repositories
   */
  "PUT /user/interaction-limits": {
    parameters: {} & Endpoints["PUT /user/interaction-limits"]["request"]["data"];
    request: {
      method: "PUT";
      url: "/user/interaction-limits";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {};
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: InteractionLimitResponseSchema;
    };
  };

  /**
   * @name interactions/remove-restrictions-for-authenticated-user
   * @summary Remove interaction restrictions from your public repositories
   * @description Removes any interaction restrictions from your public repositories.
   * @see https://docs.github.com/rest/interactions/user#remove-interaction-restrictions-from-your-public-repositories
   */
  "DELETE /user/interaction-limits": {
    parameters: {};
    request: {
      method: "DELETE";
      url: "/user/interaction-limits";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name issues/list-for-authenticated-user
   * @summary List user account issues assigned to the authenticated user
   * @description List issues across owned and member repositories assigned to the authenticated user.
   *
   * > [!NOTE]
   * > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
   * - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
   * - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
   * - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
   * @see https://docs.github.com/rest/issues/issues#list-user-account-issues-assigned-to-the-authenticated-user
   */
  "GET /user/issues": {
    parameters: {
      /**
       * @description Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
       */
      filter?:
        | "assigned"
        | "created"
        | "mentioned"
        | "subscribed"
        | "repos"
        | "all";

      /**
       * @description Indicates the state of the issues to return.
       */
      state?: "open" | "closed" | "all";
      labels?: string;

      /**
       * @description What to sort results by.
       */
      sort?: "created" | "updated" | "comments";
      direction?: "asc" | "desc";
      since?: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/issues";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: IssueSchema[];
    };
  };

  /**
   * @name users/list-public-ssh-keys-for-authenticated-user
   * @summary List public SSH keys for the authenticated user
   * @description Lists the public SSH keys for the authenticated user's GitHub account.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:public_key` scope to use this endpoint.
   * @see https://docs.github.com/rest/users/keys#list-public-ssh-keys-for-the-authenticated-user
   */
  "GET /user/keys": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/keys";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: KeySchema[];
    };
  };

  /**
   * @name users/create-public-ssh-key-for-authenticated-user
   * @summary Create a public SSH key for the authenticated user
   * @description Adds a public SSH key to the authenticated user's GitHub account.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:public_key` scope to use this endpoint.
   * @see https://docs.github.com/rest/users/keys#create-a-public-ssh-key-for-the-authenticated-user
   */
  "POST /user/keys": {
    parameters: {} & Endpoints["POST /user/keys"]["request"]["data"];
    request: {
      method: "POST";
      url: "/user/keys";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description A descriptive name for the new key.
         * @example Personal MacBook Air
         */
        title?: string;

        /**
         * @description The public SSH key to add to your GitHub account.
         */
        key: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name users/get-public-ssh-key-for-authenticated-user
   * @summary Get a public SSH key for the authenticated user
   * @description View extended details for a single public SSH key.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:public_key` scope to use this endpoint.
   * @see https://docs.github.com/rest/users/keys#get-a-public-ssh-key-for-the-authenticated-user
   */
  "GET /user/keys/{key_id}": {
    parameters: {
      key_id: number;
    };
    request: {
      method: "GET";
      url: "/user/keys/{key_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: KeySchema;
    };
  };

  /**
   * @name users/delete-public-ssh-key-for-authenticated-user
   * @summary Delete a public SSH key for the authenticated user
   * @description Removes a public SSH key from the authenticated user's GitHub account.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:public_key` scope to use this endpoint.
   * @see https://docs.github.com/rest/users/keys#delete-a-public-ssh-key-for-the-authenticated-user
   */
  "DELETE /user/keys/{key_id}": {
    parameters: {
      key_id: number;
    };
    request: {
      method: "DELETE";
      url: "/user/keys/{key_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name apps/list-subscriptions-for-authenticated-user
   * @summary List subscriptions for the authenticated user
   * @description Lists the active subscriptions for the authenticated user.
   * @see https://docs.github.com/rest/apps/marketplace#list-subscriptions-for-the-authenticated-user
   */
  "GET /user/marketplace_purchases": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/marketplace_purchases";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: UserMarketplacePurchaseSchema[];
    };
  };

  /**
   * @name apps/list-subscriptions-for-authenticated-user-stubbed
   * @summary List subscriptions for the authenticated user (stubbed)
   * @description Lists the active subscriptions for the authenticated user.
   * @see https://docs.github.com/rest/apps/marketplace#list-subscriptions-for-the-authenticated-user-stubbed
   */
  "GET /user/marketplace_purchases/stubbed": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/marketplace_purchases/stubbed";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: UserMarketplacePurchaseSchema[];
    };
  };

  /**
   * @name orgs/list-memberships-for-authenticated-user
   * @summary List organization memberships for the authenticated user
   * @description Lists all of the authenticated user's organization memberships.
   * @see https://docs.github.com/rest/orgs/members#list-organization-memberships-for-the-authenticated-user
   */
  "GET /user/memberships/orgs": {
    parameters: {
      /**
       * @description Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships.
       */
      state?: "active" | "pending";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/memberships/orgs";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrgMembershipSchema[];
    };
  };

  /**
   * @name orgs/get-membership-for-authenticated-user
   * @summary Get an organization membership for the authenticated user
   * @description If the authenticated user is an active or pending member of the organization, this endpoint will return the user's membership. If the authenticated user is not affiliated with the organization, a `404` is returned. This endpoint will return a `403` if the request is made by a GitHub App that is blocked by the organization.
   * @see https://docs.github.com/rest/orgs/members#get-an-organization-membership-for-the-authenticated-user
   */
  "GET /user/memberships/orgs/{org}": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/user/memberships/orgs/{org}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrgMembershipSchema;
    };
  };

  /**
   * @name orgs/update-membership-for-authenticated-user
   * @summary Update an organization membership for the authenticated user
   * @description Converts the authenticated user to an active member of the organization, if that user has a pending invitation from the organization.
   * @see https://docs.github.com/rest/orgs/members#update-an-organization-membership-for-the-authenticated-user
   */
  "PATCH /user/memberships/orgs/{org}": {
    parameters: {
      org: string;
    } & Endpoints["PATCH /user/memberships/orgs/{org}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/user/memberships/orgs/{org}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The state that the membership should be in. Only `"active"` will be accepted.
         */
        state: "active";
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrgMembershipSchema;
    };
  };

  /**
   * @name migrations/list-for-authenticated-user
   * @summary List user migrations
   * @description Lists all migrations a user has started.
   * @see https://docs.github.com/rest/migrations/users#list-user-migrations
   */
  "GET /user/migrations": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/migrations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MigrationSchema[];
    };
  };

  /**
   * @name migrations/start-for-authenticated-user
   * @summary Start a user migration
   * @description Initiates the generation of a user migration archive.
   * @see https://docs.github.com/rest/migrations/users#start-a-user-migration
   */
  "POST /user/migrations": {
    parameters: {} & Endpoints["POST /user/migrations"]["request"]["data"];
    request: {
      method: "POST";
      url: "/user/migrations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Lock the repositories being migrated at the start of the migration
         * @example true
         */
        lock_repositories?: boolean;

        /**
         * @description Indicates whether metadata should be excluded and only git source should be included for the migration.
         * @example true
         */
        exclude_metadata?: boolean;

        /**
         * @description Indicates whether the repository git data should be excluded from the migration.
         * @example true
         */
        exclude_git_data?: boolean;

        /**
         * @description Do not include attachments in the migration
         * @example true
         */
        exclude_attachments?: boolean;

        /**
         * @description Do not include releases in the migration
         * @example true
         */
        exclude_releases?: boolean;

        /**
         * @description Indicates whether projects owned by the organization or users should be excluded.
         * @example true
         */
        exclude_owner_projects?: boolean;

        /**
         * @description Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
         * @example true
         * @default false
         */
        org_metadata_only?: boolean;

        /**
 * @description Exclude attributes from the API response to improve performance
 * @example [
  "repositories"
]
  */
        exclude?: "repositories"[];
        repositories: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name migrations/get-status-for-authenticated-user
   * @summary Get a user migration status
   * @description Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
   *
   * *   `pending` - the migration hasn't started yet.
   * *   `exporting` - the migration is in progress.
   * *   `exported` - the migration finished successfully.
   * *   `failed` - the migration failed.
   *
   * Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).
   * @see https://docs.github.com/rest/migrations/users#get-a-user-migration-status
   */
  "GET /user/migrations/{migration_id}": {
    parameters: {
      migration_id: number;
      exclude?: string[];
    };
    request: {
      method: "GET";
      url: "/user/migrations/{migration_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MigrationSchema;
    };
  };

  /**
   * @name migrations/get-archive-for-authenticated-user
   * @summary Download a user migration archive
   * @description Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
   *
   * *   attachments
   * *   bases
   * *   commit\_comments
   * *   issue\_comments
   * *   issue\_events
   * *   issues
   * *   milestones
   * *   organizations
   * *   projects
   * *   protected\_branches
   * *   pull\_request\_reviews
   * *   pull\_requests
   * *   releases
   * *   repositories
   * *   review\_comments
   * *   schema
   * *   users
   *
   * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
   * @see https://docs.github.com/rest/migrations/users#download-a-user-migration-archive
   */
  "GET /user/migrations/{migration_id}/archive": {
    parameters: {
      migration_id: number;
    };
    request: {
      method: "GET";
      url: "/user/migrations/{migration_id}/archive";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: any;
  };

  /**
   * @name migrations/delete-archive-for-authenticated-user
   * @summary Delete a user migration archive
   * @description Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/migrations/users#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/migrations/users#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
   * @see https://docs.github.com/rest/migrations/users#delete-a-user-migration-archive
   */
  "DELETE /user/migrations/{migration_id}/archive": {
    parameters: {
      migration_id: number;
    };
    request: {
      method: "DELETE";
      url: "/user/migrations/{migration_id}/archive";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name migrations/unlock-repo-for-authenticated-user
   * @summary Unlock a user repository
   * @description Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/migrations/users#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/repos/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.
   * @see https://docs.github.com/rest/migrations/users#unlock-a-user-repository
   */
  "DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock": {
    parameters: {
      migration_id: number;
      repo_name: string;
    };
    request: {
      method: "DELETE";
      url: "/user/migrations/{migration_id}/repos/{repo_name}/lock";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name migrations/list-repos-for-authenticated-user
   * @summary List repositories for a user migration
   * @description Lists all the repositories for this user migration.
   * @see https://docs.github.com/rest/migrations/users#list-repositories-for-a-user-migration
   */
  "GET /user/migrations/{migration_id}/repositories": {
    parameters: {
      migration_id: number;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/migrations/{migration_id}/repositories";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MinimalRepositorySchema[];
    };
  };

  /**
   * @name orgs/list-for-authenticated-user
   * @summary List organizations for the authenticated user
   * @description List organizations for the authenticated user.
   *
   * For OAuth app tokens and personal access tokens (classic), this endpoint only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope for OAuth app tokens and personal access tokens (classic). Requests with insufficient scope will receive a `403 Forbidden` response.
   *
   * > [!NOTE]
   * > Requests using a fine-grained access token will receive a `200 Success` response with an empty list.
   * @see https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user
   */
  "GET /user/orgs": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/orgs";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrganizationSimpleSchema[];
    };
  };

  /**
   * @name packages/list-packages-for-authenticated-user
   * @summary List packages for the authenticated user's namespace
   * @description Lists packages owned by the authenticated user within the user's namespace.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#list-packages-for-the-authenticated-users-namespace
   */
  "GET /user/packages": {
    parameters: {
      /**
       * @description The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
       */
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      visibility?: "public" | "private" | "internal";
      page?: number;
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/user/packages";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PackageSchema[];
    };
  };

  /**
   * @name packages/get-package-for-authenticated-user
   * @summary Get a package for the authenticated user
   * @description Gets a specific package for a package owned by the authenticated user.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#get-a-package-for-the-authenticated-user
   */
  "GET /user/packages/{package_type}/{package_name}": {
    parameters: {
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      package_name: string;
    };
    request: {
      method: "GET";
      url: "/user/packages/{package_type}/{package_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PackageSchema;
    };
  };

  /**
   * @name packages/delete-package-for-authenticated-user
   * @summary Delete a package for the authenticated user
   * @description Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#delete-a-package-for-the-authenticated-user
   */
  "DELETE /user/packages/{package_type}/{package_name}": {
    parameters: {
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      package_name: string;
    };
    request: {
      method: "DELETE";
      url: "/user/packages/{package_type}/{package_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name packages/restore-package-for-authenticated-user
   * @summary Restore a package for the authenticated user
   * @description Restores a package owned by the authenticated user.
   *
   * You can restore a deleted package under the following conditions:
   *   - The package was deleted within the last 30 days.
   *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#restore-a-package-for-the-authenticated-user
   */
  "POST /user/packages/{package_type}/{package_name}/restore": {
    parameters: {
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      package_name: string;

      /**
       * @description package token
       */
      token?: string;
    };
    request: {
      method: "POST";
      url: "/user/packages/{package_type}/{package_name}/restore";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name packages/get-all-package-versions-for-package-owned-by-authenticated-user
   * @summary List package versions for a package owned by the authenticated user
   * @description Lists package versions for a package owned by the authenticated user.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#list-package-versions-for-a-package-owned-by-the-authenticated-user
   */
  "GET /user/packages/{package_type}/{package_name}/versions": {
    parameters: {
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      package_name: string;
      page?: number;
      per_page?: number;

      /**
       * @description The state of the package, either active or deleted.
       */
      state?: "active" | "deleted";
    };
    request: {
      method: "GET";
      url: "/user/packages/{package_type}/{package_name}/versions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PackageVersionSchema[];
    };
  };

  /**
   * @name packages/get-package-version-for-authenticated-user
   * @summary Get a package version for the authenticated user
   * @description Gets a specific package version for a package owned by the authenticated user.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#get-a-package-version-for-the-authenticated-user
   */
  "GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}": {
    parameters: {
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      package_name: string;
      package_version_id: number;
    };
    request: {
      method: "GET";
      url: "/user/packages/{package_type}/{package_name}/versions/{package_version_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PackageVersionSchema;
    };
  };

  /**
   * @name packages/delete-package-version-for-authenticated-user
   * @summary Delete a package version for the authenticated user
   * @description Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
   *
   * The authenticated user must have admin permissions in the organization to use this endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#delete-a-package-version-for-the-authenticated-user
   */
  "DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}": {
    parameters: {
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      package_name: string;
      package_version_id: number;
    };
    request: {
      method: "DELETE";
      url: "/user/packages/{package_type}/{package_name}/versions/{package_version_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name packages/restore-package-version-for-authenticated-user
   * @summary Restore a package version for the authenticated user
   * @description Restores a package version owned by the authenticated user.
   *
   * You can restore a deleted package version under the following conditions:
   *   - The package was deleted within the last 30 days.
   *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#restore-a-package-version-for-the-authenticated-user
   */
  "POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore": {
    parameters: {
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      package_name: string;
      package_version_id: number;
    };
    request: {
      method: "POST";
      url: "/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name projects-classic/create-for-authenticated-user
   * @summary Create a user project
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/projects-classic/projects#create-a-user-project
   */
  "POST /user/projects": {
    parameters: {} & Endpoints["POST /user/projects"]["request"]["data"];
    request: {
      method: "POST";
      url: "/user/projects";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Name of the project
         * @example Week One Sprint
         */
        name: string;

        /**
         * @description Body of the project
         * @example This project represents the sprint of the first week in January
         */
        body?: string | null;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name users/list-public-emails-for-authenticated-user
   * @summary List public email addresses for the authenticated user
   * @description Lists your publicly visible email address, which you can set with the
   * [Set primary email visibility for the authenticated user](https://docs.github.com/rest/users/emails#set-primary-email-visibility-for-the-authenticated-user)
   * endpoint.
   *
   * OAuth app tokens and personal access tokens (classic) need the `user:email` scope to use this endpoint.
   * @see https://docs.github.com/rest/users/emails#list-public-email-addresses-for-the-authenticated-user
   */
  "GET /user/public_emails": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/public_emails";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: EmailSchema[];
    };
  };

  /**
   * @name repos/list-for-authenticated-user
   * @summary List repositories for the authenticated user
   * @description Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
   *
   * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
   * @see https://docs.github.com/rest/repos/repos#list-repositories-for-the-authenticated-user
   */
  "GET /user/repos": {
    parameters: {
      /**
       * @description Limit results to repositories with the specified visibility.
       */
      visibility?: "all" | "public" | "private";

      /**
       * @description Comma-separated list of values. Can include:
       *  * `owner`: Repositories that are owned by the authenticated user.
       *  * `collaborator`: Repositories that the user has been added to as a collaborator.
       *  * `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
       */
      affiliation?: string;

      /**
       * @description Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
       */
      type?: "all" | "owner" | "public" | "private" | "member";

      /**
       * @description The property to sort the results by.
       */
      sort?: "created" | "updated" | "pushed" | "full_name";

      /**
       * @description The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.
       */
      direction?: "asc" | "desc";
      per_page?: number;
      page?: number;
      since?: string;
      before?: string;
    };
    request: {
      method: "GET";
      url: "/user/repos";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RepositorySchema[];
    };
  };

  /**
   * @name repos/create-for-authenticated-user
   * @summary Create a repository for the authenticated user
   * @description Creates a new repository for the authenticated user.
   *
   * OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
   * @see https://docs.github.com/rest/repos/repos#create-a-repository-for-the-authenticated-user
   */
  "POST /user/repos": {
    parameters: {} & Endpoints["POST /user/repos"]["request"]["data"];
    request: {
      method: "POST";
      url: "/user/repos";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The name of the repository.
         * @example Team Environment
         */
        name: string;

        /**
         * @description A short description of the repository.
         */
        description?: string;

        /**
         * @description A URL with more information about the repository.
         */
        homepage?: string;

        /**
         * @description Whether the repository is private.
         * @default false
         */
        private?: boolean;

        /**
         * @description Whether issues are enabled.
         * @example true
         * @default true
         */
        has_issues?: boolean;

        /**
         * @description Whether projects are enabled.
         * @example true
         * @default true
         */
        has_projects?: boolean;

        /**
         * @description Whether the wiki is enabled.
         * @example true
         * @default true
         */
        has_wiki?: boolean;

        /**
         * @description Whether discussions are enabled.
         * @example true
         * @default false
         */
        has_discussions?: boolean;

        /**
         * @description The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
         */
        team_id?: number;

        /**
         * @description Whether the repository is initialized with a minimal README.
         * @default false
         */
        auto_init?: boolean;

        /**
         * @description The desired language or platform to apply to the .gitignore.
         * @example Haskell
         */
        gitignore_template?: string;

        /**
         * @description The license keyword of the open source license for this repository.
         * @example mit
         */
        license_template?: string;

        /**
         * @description Whether to allow squash merges for pull requests.
         * @example true
         * @default true
         */
        allow_squash_merge?: boolean;

        /**
         * @description Whether to allow merge commits for pull requests.
         * @example true
         * @default true
         */
        allow_merge_commit?: boolean;

        /**
         * @description Whether to allow rebase merges for pull requests.
         * @example true
         * @default true
         */
        allow_rebase_merge?: boolean;

        /**
         * @description Whether to allow Auto-merge to be used on pull requests.
         * @default false
         */
        allow_auto_merge?: boolean;

        /**
         * @description Whether to delete head branches when pull requests are merged
         * @default false
         */
        delete_branch_on_merge?: boolean;

        /**
         * @description Required when using `squash_merge_commit_message`.
         *
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";

        /**
         * @description The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";

        /**
         * @description Required when using `merge_commit_message`.
         *
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";

        /**
         * @description The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";

        /**
         * @description Whether downloads are enabled.
         * @example true
         * @default true
         */
        has_downloads?: boolean;

        /**
         * @description Whether this repository acts as a template that can be used to generate new repositories.
         * @example true
         * @default false
         */
        is_template?: boolean;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name repos/list-invitations-for-authenticated-user
   * @summary List repository invitations for the authenticated user
   * @description When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
   * @see https://docs.github.com/rest/collaborators/invitations#list-repository-invitations-for-the-authenticated-user
   */
  "GET /user/repository_invitations": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/repository_invitations";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RepositoryInvitationSchema[];
    };
  };

  /**
   * @name repos/accept-invitation-for-authenticated-user
   * @summary Accept a repository invitation
   * @see https://docs.github.com/rest/collaborators/invitations#accept-a-repository-invitation
   */
  "PATCH /user/repository_invitations/{invitation_id}": {
    parameters: {
      invitation_id: number;
    };
    request: {
      method: "PATCH";
      url: "/user/repository_invitations/{invitation_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name repos/decline-invitation-for-authenticated-user
   * @summary Decline a repository invitation
   * @see https://docs.github.com/rest/collaborators/invitations#decline-a-repository-invitation
   */
  "DELETE /user/repository_invitations/{invitation_id}": {
    parameters: {
      invitation_id: number;
    };
    request: {
      method: "DELETE";
      url: "/user/repository_invitations/{invitation_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name users/list-social-accounts-for-authenticated-user
   * @summary List social accounts for the authenticated user
   * @description Lists all of your social accounts.
   * @see https://docs.github.com/rest/users/social-accounts#list-social-accounts-for-the-authenticated-user
   */
  "GET /user/social_accounts": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/social_accounts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SocialAccountSchema[];
    };
  };

  /**
   * @name users/add-social-account-for-authenticated-user
   * @summary Add social accounts for the authenticated user
   * @description Add one or more social accounts to the authenticated user's profile.
   *
   * OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
   * @see https://docs.github.com/rest/users/social-accounts#add-social-accounts-for-the-authenticated-user
   */
  "POST /user/social_accounts": {
    parameters: {} & Endpoints["POST /user/social_accounts"]["request"]["data"];
    request: {
      method: "POST";
      url: "/user/social_accounts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Full URLs for the social media profiles to add.
         * @example []
         */
        account_urls: string[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name users/delete-social-account-for-authenticated-user
   * @summary Delete social accounts for the authenticated user
   * @description Deletes one or more social accounts from the authenticated user's profile.
   *
   * OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
   * @see https://docs.github.com/rest/users/social-accounts#delete-social-accounts-for-the-authenticated-user
   */
  "DELETE /user/social_accounts": {
    parameters: {} & Endpoints["DELETE /user/social_accounts"]["request"]["data"];
    request: {
      method: "DELETE";
      url: "/user/social_accounts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description Full URLs for the social media profiles to delete.
         * @example []
         */
        account_urls: string[];
      };
    };
    response: never;
  };

  /**
   * @name users/list-ssh-signing-keys-for-authenticated-user
   * @summary List SSH signing keys for the authenticated user
   * @description Lists the SSH signing keys for the authenticated user's GitHub account.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key` scope to use this endpoint.
   * @see https://docs.github.com/rest/users/ssh-signing-keys#list-ssh-signing-keys-for-the-authenticated-user
   */
  "GET /user/ssh_signing_keys": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/ssh_signing_keys";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SshSigningKeySchema[];
    };
  };

  /**
   * @name users/create-ssh-signing-key-for-authenticated-user
   * @summary Create a SSH signing key for the authenticated user
   * @description Creates an SSH signing key for the authenticated user's GitHub account.
   *
   * OAuth app tokens and personal access tokens (classic) need the `write:ssh_signing_key` scope to use this endpoint.
   * @see https://docs.github.com/rest/users/ssh-signing-keys#create-a-ssh-signing-key-for-the-authenticated-user
   */
  "POST /user/ssh_signing_keys": {
    parameters: {} & Endpoints["POST /user/ssh_signing_keys"]["request"]["data"];
    request: {
      method: "POST";
      url: "/user/ssh_signing_keys";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description A descriptive name for the new key.
         * @example Personal MacBook Air
         */
        title?: string;

        /**
         * @description The public SSH key to add to your GitHub account. For more information, see "[Checking for existing SSH keys](https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys)."
         */
        key: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name users/get-ssh-signing-key-for-authenticated-user
   * @summary Get an SSH signing key for the authenticated user
   * @description Gets extended details for an SSH signing key.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key` scope to use this endpoint.
   * @see https://docs.github.com/rest/users/ssh-signing-keys#get-an-ssh-signing-key-for-the-authenticated-user
   */
  "GET /user/ssh_signing_keys/{ssh_signing_key_id}": {
    parameters: {
      ssh_signing_key_id: number;
    };
    request: {
      method: "GET";
      url: "/user/ssh_signing_keys/{ssh_signing_key_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SshSigningKeySchema;
    };
  };

  /**
   * @name users/delete-ssh-signing-key-for-authenticated-user
   * @summary Delete an SSH signing key for the authenticated user
   * @description Deletes an SSH signing key from the authenticated user's GitHub account.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:ssh_signing_key` scope to use this endpoint.
   * @see https://docs.github.com/rest/users/ssh-signing-keys#delete-an-ssh-signing-key-for-the-authenticated-user
   */
  "DELETE /user/ssh_signing_keys/{ssh_signing_key_id}": {
    parameters: {
      ssh_signing_key_id: number;
    };
    request: {
      method: "DELETE";
      url: "/user/ssh_signing_keys/{ssh_signing_key_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name activity/list-repos-starred-by-authenticated-user
   * @summary List repositories starred by the authenticated user
   * @description Lists repositories the authenticated user has starred.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
   * @see https://docs.github.com/rest/activity/starring#list-repositories-starred-by-the-authenticated-user
   */
  "GET /user/starred": {
    parameters: {
      sort?: "created" | "updated";
      direction?: "asc" | "desc";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/starred";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: RepositorySchema[];
    };
  };

  /**
   * @name activity/check-repo-is-starred-by-authenticated-user
   * @summary Check if a repository is starred by the authenticated user
   * @description Whether the authenticated user has starred the repository.
   * @see https://docs.github.com/rest/activity/starring#check-if-a-repository-is-starred-by-the-authenticated-user
   */
  "GET /user/starred/{owner}/{repo}": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "GET";
      url: "/user/starred/{owner}/{repo}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name activity/star-repo-for-authenticated-user
   * @summary Star a repository for the authenticated user
   * @description Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
   * @see https://docs.github.com/rest/activity/starring#star-a-repository-for-the-authenticated-user
   */
  "PUT /user/starred/{owner}/{repo}": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "PUT";
      url: "/user/starred/{owner}/{repo}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name activity/unstar-repo-for-authenticated-user
   * @summary Unstar a repository for the authenticated user
   * @description Unstar a repository that the authenticated user has previously starred.
   * @see https://docs.github.com/rest/activity/starring#unstar-a-repository-for-the-authenticated-user
   */
  "DELETE /user/starred/{owner}/{repo}": {
    parameters: {
      owner: string;
      repo: string;
    };
    request: {
      method: "DELETE";
      url: "/user/starred/{owner}/{repo}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name activity/list-watched-repos-for-authenticated-user
   * @summary List repositories watched by the authenticated user
   * @description Lists repositories the authenticated user is watching.
   * @see https://docs.github.com/rest/activity/watching#list-repositories-watched-by-the-authenticated-user
   */
  "GET /user/subscriptions": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/subscriptions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MinimalRepositorySchema[];
    };
  };

  /**
   * @name teams/list-for-authenticated-user
   * @summary List teams for the authenticated user
   * @description List all of the teams across all of the organizations to which the authenticated
   * user belongs.
   *
   * OAuth app tokens and personal access tokens (classic) need the `user`, `repo`, or `read:org` scope to use this endpoint.
   *
   * When using a fine-grained personal access token, the resource owner of the token must be a single organization, and the response will only include the teams from that organization.
   * @see https://docs.github.com/rest/teams/teams#list-teams-for-the-authenticated-user
   */
  "GET /user/teams": {
    parameters: {
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/user/teams";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: TeamFullSchema[];
    };
  };

  /**
   * @name users/get-by-id
   * @summary Get a user using their ID
   * @description Provides publicly available information about someone with a GitHub account. This method takes their durable user `ID` instead of their `login`, which can change over time.
   *
   * If you are requesting information about an [Enterprise Managed User](https://docs.github.com/enterprise-cloud@latest/admin/managing-iam/understanding-iam-for-enterprises/about-enterprise-managed-users), or a GitHub App bot that is installed in an organization that uses Enterprise Managed Users, your requests must be authenticated as a user or GitHub App that has access to the organization to view that account's information. If you are not authorized, the request will return a `404 Not Found` status.
   *
   * The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be public which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).
   *
   * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see [Emails API](https://docs.github.com/rest/users/emails).
   * @see https://docs.github.com/rest/users/users#get-a-user-using-their-id
   */
  "GET /user/{account_id}": {
    parameters: {
      account_id: number;
    };
    request: {
      method: "GET";
      url: "/user/{account_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PrivateUserSchema | PublicUserSchema;
    };
  };

  /**
   * @name users/list
   * @summary List users
   * @description Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
   *
   * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of users.
   * @see https://docs.github.com/rest/users/users#list-users
   */
  "GET /users": {
    parameters: {
      since?: number;
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/users";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SimpleUserSchema[];
    };
  };

  /**
   * @name projects/get-for-user
   * @summary Get project for user
   * @description Get a specific user-owned project.
   * @see https://docs.github.com/rest/projects/projects#get-project-for-user
   */
  "GET /users/{user_id}/projectsV2/{project_number}": {
    parameters: {
      project_number: number;
      user_id: string;
    };
    request: {
      method: "GET";
      url: "/users/{user_id}/projectsV2/{project_number}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectsV2Schema;
    };
  };

  /**
   * @name projects/list-fields-for-user
   * @summary List project fields for user
   * @description List all fields for a specific user-owned project.
   * @see https://docs.github.com/rest/projects/fields#list-project-fields-for-user
   */
  "GET /users/{user_id}/projectsV2/{project_number}/fields": {
    parameters: {
      project_number: number;
      user_id: string;
      per_page?: number;
      before?: string;
      after?: string;
    };
    request: {
      method: "GET";
      url: "/users/{user_id}/projectsV2/{project_number}/fields";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectsV2FieldSchema[];
    };
  };

  /**
   * @name projects/get-field-for-user
   * @summary Get project field for user
   * @description Get a specific field for a user-owned project.
   * @see https://docs.github.com/rest/projects/fields#get-project-field-for-user
   */
  "GET /users/{user_id}/projectsV2/{project_number}/fields/{field_id}": {
    parameters: {
      project_number: number;
      field_id: number;
      user_id: string;
    };
    request: {
      method: "GET";
      url: "/users/{user_id}/projectsV2/{project_number}/fields/{field_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectsV2FieldSchema;
    };
  };

  /**
   * @name projects/list-items-for-user
   * @summary List items for a user owned project
   * @description List all items for a specific user-owned project accessible by the authenticated user.
   * @see https://docs.github.com/rest/projects/items#list-items-for-a-user-owned-project
   */
  "GET /users/{user_id}/projectsV2/{project_number}/items": {
    parameters: {
      project_number: number;
      user_id: string;
      before?: string;
      after?: string;
      per_page?: number;

      /**
       * @description Search query to filter items, see [Filtering projects](https://docs.github.com/issues/planning-and-tracking-with-projects/customizing-views-in-your-project/filtering-projects) for more information.
       */
      q?: string;

      /**
       * @description Limit results to specific fields, by their IDs. If not specified, the title field will be returned.
       */
      fields?: string[];
    };
    request: {
      method: "GET";
      url: "/users/{user_id}/projectsV2/{project_number}/items";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectsV2ItemWithContentSchema[];
    };
  };

  /**
   * @name projects/add-item-for-user
   * @summary Add item to user owned project
   * @description Add an issue or pull request item to the specified user owned project.
   * @see https://docs.github.com/rest/projects/items#add-item-to-user-owned-project
   */
  "POST /users/{user_id}/projectsV2/{project_number}/items": {
    parameters: {
      user_id: string;
      project_number: number;
    } & Endpoints["POST /users/{user_id}/projectsV2/{project_number}/items"]["request"]["data"];
    request: {
      method: "POST";
      url: "/users/{user_id}/projectsV2/{project_number}/items";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description The type of item to add to the project. Must be either Issue or PullRequest.
         */
        type: "Issue" | "PullRequest";

        /**
         * @description The numeric ID of the issue or pull request to add to the project.
         */
        id: number;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 201;
      data: never;
    };
  };

  /**
   * @name projects/get-user-item
   * @summary Get an item for a user owned project
   * @description Get a specific item from a user-owned project.
   * @see https://docs.github.com/rest/projects/items#get-an-item-for-a-user-owned-project
   */
  "GET /users/{user_id}/projectsV2/{project_number}/items/{item_id}": {
    parameters: {
      project_number: number;
      user_id: string;
      item_id: number;

      /**
       * @description Limit results to specific fields, by their IDs. If not specified, the title field will be returned.
       */
      fields?: string[];
    };
    request: {
      method: "GET";
      url: "/users/{user_id}/projectsV2/{project_number}/items/{item_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectsV2ItemWithContentSchema;
    };
  };

  /**
   * @name projects/update-item-for-user
   * @summary Update project item for user
   * @description Update a specific item in a user-owned project.
   * @see https://docs.github.com/rest/projects/items#update-project-item-for-user
   */
  "PATCH /users/{user_id}/projectsV2/{project_number}/items/{item_id}": {
    parameters: {
      project_number: number;
      user_id: string;
      item_id: number;
    } & Endpoints["PATCH /users/{user_id}/projectsV2/{project_number}/items/{item_id}"]["request"]["data"];
    request: {
      method: "PATCH";
      url: "/users/{user_id}/projectsV2/{project_number}/items/{item_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description A list of field updates to apply.
         */
        fields: {
          /**
           * @description The ID of the project field to update.
           */
          id: number;

          /**
           * @description The new value for the field:
           * - For text, number, and date fields, provide the new value directly.
           * - For single select and iteration fields, provide the ID of the option or iteration.
           * - To clear the field, set this to null.
           */
          value: string | number | null;
        }[];
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectsV2ItemWithContentSchema;
    };
  };

  /**
   * @name projects/delete-item-for-user
   * @summary Delete project item for user
   * @description Delete a specific item from a user-owned project.
   * @see https://docs.github.com/rest/projects/items#delete-project-item-for-user
   */
  "DELETE /users/{user_id}/projectsV2/{project_number}/items/{item_id}": {
    parameters: {
      project_number: number;
      user_id: string;
      item_id: number;
    };
    request: {
      method: "DELETE";
      url: "/users/{user_id}/projectsV2/{project_number}/items/{item_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name users/get-by-username
   * @summary Get a user
   * @description Provides publicly available information about someone with a GitHub account.
   *
   * If you are requesting information about an [Enterprise Managed User](https://docs.github.com/enterprise-cloud@latest/admin/managing-iam/understanding-iam-for-enterprises/about-enterprise-managed-users), or a GitHub App bot that is installed in an organization that uses Enterprise Managed Users, your requests must be authenticated as a user or GitHub App that has access to the organization to view that account's information. If you are not authorized, the request will return a `404 Not Found` status.
   *
   * The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be public which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).
   *
   * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see [Emails API](https://docs.github.com/rest/users/emails).
   * @see https://docs.github.com/rest/users/users#get-a-user
   */
  "GET /users/{username}": {
    parameters: {
      username: string;
    };
    request: {
      method: "GET";
      url: "/users/{username}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PrivateUserSchema | PublicUserSchema;
    };
  };

  /**
   * @name users/list-attestations-bulk
   * @summary List attestations by bulk subject digests
   * @description List a collection of artifact attestations associated with any entry in a list of subject digests owned by a user.
   *
   * The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.
   *
   * **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
   * @see https://docs.github.com/rest/users/attestations#list-attestations-by-bulk-subject-digests
   */
  "POST /users/{username}/attestations/bulk-list": {
    parameters: {
      per_page?: number;
      before?: string;
      after?: string;
      username: string;
    } & Endpoints["POST /users/{username}/attestations/bulk-list"]["request"]["data"];
    request: {
      method: "POST";
      url: "/users/{username}/attestations/bulk-list";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data: {
        /**
         * @description List of subject digests to fetch attestations for.
         */
        subject_digests: string[];

        /**
         * @description Optional filter for fetching attestations with a given predicate type.
         * This option accepts `provenance`, `sbom`, or freeform text for custom predicate types.
         */
        predicate_type?: string;
      };
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        /**
         * @description Mapping of subject digest to bundles.
         */
        attestations_subject_digests?: {
          [key: string]:
            | {
                /**
                 * @description The bundle of the attestation.
                 */
                bundle?: {
                  mediaType?: string;
                  verificationMaterial?: {
                    [key: string]: any;
                  };
                  dsseEnvelope?: {
                    [key: string]: any;
                  };
                };
                repository_id?: number;
                bundle_url?: string;
              }[]
            | null;
        };

        /**
         * @description Information about the current page.
         */
        page_info?: {
          /**
           * @description Indicates whether there is a next page.
           */
          has_next?: boolean;

          /**
           * @description Indicates whether there is a previous page.
           */
          has_previous?: boolean;

          /**
           * @description The cursor to the next page.
           */
          next?: string;

          /**
           * @description The cursor to the previous page.
           */
          previous?: string;
        };
      };
    };
  };

  /**
   * @name users/delete-attestations-bulk
   * @summary Delete attestations in bulk
   * @description Delete artifact attestations in bulk by either subject digests or unique ID.
   * @see https://docs.github.com/rest/users/attestations#delete-attestations-in-bulk
   */
  "POST /users/{username}/attestations/delete-request": {
    parameters: {
      username: string;
    } & Endpoints["POST /users/{username}/attestations/delete-request"]["request"]["data"];
    request: {
      method: "POST";
      url: "/users/{username}/attestations/delete-request";
      headers: RequestHeaders;
      request: RequestRequestOptions;
      data:
        | {
            /**
             * @description List of subject digests associated with the artifact attestations to delete.
             */
            subject_digests: string[];
          }
        | {
            /**
             * @description List of unique IDs associated with the artifact attestations to delete.
             */
            attestation_ids: number[];
          };
    };
    response: never;
  };

  /**
   * @name users/delete-attestations-by-subject-digest
   * @summary Delete attestations by subject digest
   * @description Delete an artifact attestation by subject digest.
   * @see https://docs.github.com/rest/users/attestations#delete-attestations-by-subject-digest
   */
  "DELETE /users/{username}/attestations/digest/{subject_digest}": {
    parameters: {
      username: string;

      /**
       * @description Subject Digest
       */
      subject_digest: string;
    };
    request: {
      method: "DELETE";
      url: "/users/{username}/attestations/digest/{subject_digest}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name users/delete-attestations-by-id
   * @summary Delete attestations by ID
   * @description Delete an artifact attestation by unique ID that is associated with a repository owned by a user.
   * @see https://docs.github.com/rest/users/attestations#delete-attestations-by-id
   */
  "DELETE /users/{username}/attestations/{attestation_id}": {
    parameters: {
      username: string;

      /**
       * @description Attestation ID
       */
      attestation_id: number;
    };
    request: {
      method: "DELETE";
      url: "/users/{username}/attestations/{attestation_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name users/list-attestations
   * @summary List attestations
   * @description List a collection of artifact attestations with a given subject digest that are associated with repositories owned by a user.
   *
   * The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.
   *
   * **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
   * @see https://docs.github.com/rest/users/attestations#list-attestations
   */
  "GET /users/{username}/attestations/{subject_digest}": {
    parameters: {
      per_page?: number;
      before?: string;
      after?: string;
      username: string;

      /**
       * @description Subject Digest
       */
      subject_digest: string;

      /**
       * @description Optional filter for fetching attestations with a given predicate type.
       * This option accepts `provenance`, `sbom`, or freeform text for custom predicate types.
       */
      predicate_type?: string;
    };
    request: {
      method: "GET";
      url: "/users/{username}/attestations/{subject_digest}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        attestations?: {
          /**
           * @description The attestation's Sigstore Bundle.
           * Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
           */
          bundle?: {
            mediaType?: string;
            verificationMaterial?: {
              [key: string]: any;
            };
            dsseEnvelope?: {
              [key: string]: any;
            };
          };
          repository_id?: number;
          bundle_url?: string;
        }[];
      };
    };
  };

  /**
   * @name packages/list-docker-migration-conflicting-packages-for-user
   * @summary Get list of conflicting packages during Docker migration for user
   * @description Lists all packages that are in a specific user's namespace, that the requesting user has access to, and that encountered a conflict during Docker migration.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
   * @see https://docs.github.com/rest/packages/packages#get-list-of-conflicting-packages-during-docker-migration-for-user
   */
  "GET /users/{username}/docker/conflicts": {
    parameters: {
      username: string;
    };
    request: {
      method: "GET";
      url: "/users/{username}/docker/conflicts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PackageSchema[];
    };
  };

  /**
   * @name activity/list-events-for-authenticated-user
   * @summary List events for the authenticated user
   * @description If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events. _Optional_: use the fine-grained token with following permission set to view private events: "Events" user permissions (read).
   *
   * > [!NOTE]
   * > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
   * @see https://docs.github.com/rest/activity/events#list-events-for-the-authenticated-user
   */
  "GET /users/{username}/events": {
    parameters: {
      username: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/users/{username}/events";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: EventSchema[];
    };
  };

  /**
   * @name activity/list-org-events-for-authenticated-user
   * @summary List organization events for the authenticated user
   * @description This is the user's organization dashboard. You must be authenticated as the user to view this.
   *
   * > [!NOTE]
   * > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
   * @see https://docs.github.com/rest/activity/events#list-organization-events-for-the-authenticated-user
   */
  "GET /users/{username}/events/orgs/{org}": {
    parameters: {
      username: string;
      org: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/users/{username}/events/orgs/{org}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: EventSchema[];
    };
  };

  /**
   * @name activity/list-public-events-for-user
   * @summary List public events for a user
   * @description > [!NOTE]
   * > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
   * @see https://docs.github.com/rest/activity/events#list-public-events-for-a-user
   */
  "GET /users/{username}/events/public": {
    parameters: {
      username: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/users/{username}/events/public";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: EventSchema[];
    };
  };

  /**
   * @name users/list-followers-for-user
   * @summary List followers of a user
   * @description Lists the people following the specified user.
   * @see https://docs.github.com/rest/users/followers#list-followers-of-a-user
   */
  "GET /users/{username}/followers": {
    parameters: {
      username: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/users/{username}/followers";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SimpleUserSchema[];
    };
  };

  /**
   * @name users/list-following-for-user
   * @summary List the people a user follows
   * @description Lists the people who the specified user follows.
   * @see https://docs.github.com/rest/users/followers#list-the-people-a-user-follows
   */
  "GET /users/{username}/following": {
    parameters: {
      username: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/users/{username}/following";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SimpleUserSchema[];
    };
  };

  /**
   * @name users/check-following-for-user
   * @summary Check if a user follows another user
   * @see https://docs.github.com/rest/users/followers#check-if-a-user-follows-another-user
   */
  "GET /users/{username}/following/{target_user}": {
    parameters: {
      username: string;
      target_user: string;
    };
    request: {
      method: "GET";
      url: "/users/{username}/following/{target_user}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name gists/list-for-user
   * @summary List gists for a user
   * @description Lists public gists for the specified user:
   * @see https://docs.github.com/rest/gists/gists#list-gists-for-a-user
   */
  "GET /users/{username}/gists": {
    parameters: {
      username: string;
      since?: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/users/{username}/gists";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: BaseGistSchema[];
    };
  };

  /**
   * @name users/list-gpg-keys-for-user
   * @summary List GPG keys for a user
   * @description Lists the GPG keys for a user. This information is accessible by anyone.
   * @see https://docs.github.com/rest/users/gpg-keys#list-gpg-keys-for-a-user
   */
  "GET /users/{username}/gpg_keys": {
    parameters: {
      username: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/users/{username}/gpg_keys";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: GpgKeySchema[];
    };
  };

  /**
   * @name users/get-context-for-user
   * @summary Get contextual information for a user
   * @description Provides hovercard information. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
   *
   *   The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository, you would use a `subject_type` value of `repository` and a `subject_id` value of `1300192` (the ID of the `Spoon-Knife` repository).
   *
   * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
   * @see https://docs.github.com/rest/users/users#get-contextual-information-for-a-user
   */
  "GET /users/{username}/hovercard": {
    parameters: {
      username: string;

      /**
       * @description Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.
       */
      subject_type?: "organization" | "repository" | "issue" | "pull_request";

      /**
       * @description Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.
       */
      subject_id?: string;
    };
    request: {
      method: "GET";
      url: "/users/{username}/hovercard";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: HovercardSchema;
    };
  };

  /**
   * @name apps/get-user-installation
   * @summary Get a user installation for the authenticated app
   * @description Enables an authenticated GitHub App to find the user’s installation information.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * @see https://docs.github.com/rest/apps/apps#get-a-user-installation-for-the-authenticated-app
   */
  "GET /users/{username}/installation": {
    parameters: {
      username: string;
    };
    request: {
      method: "GET";
      url: "/users/{username}/installation";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: InstallationSchema;
    };
  };

  /**
   * @name users/list-public-keys-for-user
   * @summary List public keys for a user
   * @description Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
   * @see https://docs.github.com/rest/users/keys#list-public-keys-for-a-user
   */
  "GET /users/{username}/keys": {
    parameters: {
      username: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/users/{username}/keys";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: KeySimpleSchema[];
    };
  };

  /**
   * @name orgs/list-for-user
   * @summary List organizations for a user
   * @description List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
   *
   * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user) API instead.
   * @see https://docs.github.com/rest/orgs/orgs#list-organizations-for-a-user
   */
  "GET /users/{username}/orgs": {
    parameters: {
      username: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/users/{username}/orgs";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: OrganizationSimpleSchema[];
    };
  };

  /**
   * @name packages/list-packages-for-user
   * @summary List packages for a user
   * @description Lists all packages in a user's namespace for which the requesting user has access.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#list-packages-for-a-user
   */
  "GET /users/{username}/packages": {
    parameters: {
      /**
       * @description The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
       */
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      visibility?: "public" | "private" | "internal";
      username: string;
      page?: number;
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/users/{username}/packages";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PackageSchema[];
    };
  };

  /**
   * @name packages/get-package-for-user
   * @summary Get a package for a user
   * @description Gets a specific package metadata for a public package owned by a user.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#get-a-package-for-a-user
   */
  "GET /users/{username}/packages/{package_type}/{package_name}": {
    parameters: {
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      package_name: string;
      username: string;
    };
    request: {
      method: "GET";
      url: "/users/{username}/packages/{package_type}/{package_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PackageSchema;
    };
  };

  /**
   * @name packages/delete-package-for-user
   * @summary Delete a package for a user
   * @description Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
   *
   * If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#delete-a-package-for-a-user
   */
  "DELETE /users/{username}/packages/{package_type}/{package_name}": {
    parameters: {
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      package_name: string;
      username: string;
    };
    request: {
      method: "DELETE";
      url: "/users/{username}/packages/{package_type}/{package_name}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name packages/restore-package-for-user
   * @summary Restore a package for a user
   * @description Restores an entire package for a user.
   *
   * You can restore a deleted package under the following conditions:
   *   - The package was deleted within the last 30 days.
   *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
   *
   * If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#restore-a-package-for-a-user
   */
  "POST /users/{username}/packages/{package_type}/{package_name}/restore": {
    parameters: {
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      package_name: string;
      username: string;

      /**
       * @description package token
       */
      token?: string;
    };
    request: {
      method: "POST";
      url: "/users/{username}/packages/{package_type}/{package_name}/restore";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name packages/get-all-package-versions-for-package-owned-by-user
   * @summary List package versions for a package owned by a user
   * @description Lists package versions for a public package owned by a specified user.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#list-package-versions-for-a-package-owned-by-a-user
   */
  "GET /users/{username}/packages/{package_type}/{package_name}/versions": {
    parameters: {
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      package_name: string;
      username: string;
    };
    request: {
      method: "GET";
      url: "/users/{username}/packages/{package_type}/{package_name}/versions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PackageVersionSchema[];
    };
  };

  /**
   * @name packages/get-package-version-for-user
   * @summary Get a package version for a user
   * @description Gets a specific package version for a public package owned by a specified user.
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#get-a-package-version-for-a-user
   */
  "GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}": {
    parameters: {
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      package_name: string;
      package_version_id: number;
      username: string;
    };
    request: {
      method: "GET";
      url: "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PackageVersionSchema;
    };
  };

  /**
   * @name packages/delete-package-version-for-user
   * @summary Delete package version for a user
   * @description Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
   *
   * If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#delete-package-version-for-a-user
   */
  "DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}": {
    parameters: {
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      package_name: string;
      username: string;
      package_version_id: number;
    };
    request: {
      method: "DELETE";
      url: "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name packages/restore-package-version-for-user
   * @summary Restore package version for a user
   * @description Restores a specific package version for a user.
   *
   * You can restore a deleted package under the following conditions:
   *   - The package was deleted within the last 30 days.
   *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
   *
   * If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
   * @see https://docs.github.com/rest/packages/packages#restore-package-version-for-a-user
   */
  "POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore": {
    parameters: {
      package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      package_name: string;
      username: string;
      package_version_id: number;
    };
    request: {
      method: "POST";
      url: "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: never;
  };

  /**
   * @name projects-classic/list-for-user
   * @summary List user projects
   * @description > [!WARNING]
   * > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
   * > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
   * @deprecated
   * @see https://docs.github.com/rest/projects-classic/projects#list-user-projects
   */
  "GET /users/{username}/projects": {
    parameters: {
      username: string;

      /**
       * @description Indicates the state of the projects to return.
       */
      state?: "open" | "closed" | "all";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/users/{username}/projects";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectSchema[];
    };
  };

  /**
   * @name projects/list-for-user
   * @summary List projects for user
   * @description List all projects owned by a specific user accessible by the authenticated user.
   * @see https://docs.github.com/rest/projects/projects#list-projects-for-user
   */
  "GET /users/{username}/projectsV2": {
    parameters: {
      username: string;

      /**
       * @description Limit results to projects of the specified type.
       */
      q?: string;
      before?: string;
      after?: string;
      per_page?: number;
    };
    request: {
      method: "GET";
      url: "/users/{username}/projectsV2";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ProjectsV2Schema[];
    };
  };

  /**
   * @name activity/list-received-events-for-user
   * @summary List events received by the authenticated user
   * @description These are events that you've received by watching repositories and following users. If you are authenticated as the
   * given user, you will see private events. Otherwise, you'll only see public events.
   *
   * > [!NOTE]
   * > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
   * @see https://docs.github.com/rest/activity/events#list-events-received-by-the-authenticated-user
   */
  "GET /users/{username}/received_events": {
    parameters: {
      username: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/users/{username}/received_events";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: EventSchema[];
    };
  };

  /**
   * @name activity/list-received-public-events-for-user
   * @summary List public events received by a user
   * @description > [!NOTE]
   * > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
   * @see https://docs.github.com/rest/activity/events#list-public-events-received-by-a-user
   */
  "GET /users/{username}/received_events/public": {
    parameters: {
      username: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/users/{username}/received_events/public";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: EventSchema[];
    };
  };

  /**
   * @name repos/list-for-user
   * @summary List repositories for a user
   * @description Lists public repositories for the specified user.
   * @see https://docs.github.com/rest/repos/repos#list-repositories-for-a-user
   */
  "GET /users/{username}/repos": {
    parameters: {
      username: string;

      /**
       * @description Limit results to repositories of the specified type.
       */
      type?: "all" | "owner" | "member";

      /**
       * @description The property to sort the results by.
       */
      sort?: "created" | "updated" | "pushed" | "full_name";

      /**
       * @description The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.
       */
      direction?: "asc" | "desc";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/users/{username}/repos";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MinimalRepositorySchema[];
    };
  };

  /**
   * @name billing/get-github-actions-billing-user
   * @summary Get GitHub Actions billing for a user
   * @description Gets the summary of the free and paid GitHub Actions minutes used.
   *
   * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
   *
   * OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
   * @see https://docs.github.com/rest/billing/billing#get-github-actions-billing-for-a-user
   */
  "GET /users/{username}/settings/billing/actions": {
    parameters: {
      username: string;
    };
    request: {
      method: "GET";
      url: "/users/{username}/settings/billing/actions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: ActionsBillingUsageSchema;
    };
  };

  /**
   * @name billing/get-github-packages-billing-user
   * @summary Get GitHub Packages billing for a user
   * @description Gets the free and paid storage used for GitHub Packages in gigabytes.
   *
   * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
   * @see https://docs.github.com/rest/billing/billing#get-github-packages-billing-for-a-user
   */
  "GET /users/{username}/settings/billing/packages": {
    parameters: {
      username: string;
    };
    request: {
      method: "GET";
      url: "/users/{username}/settings/billing/packages";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: PackagesBillingUsageSchema;
    };
  };

  /**
   * @name billing/get-shared-storage-billing-user
   * @summary Get shared storage billing for a user
   * @description Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
   *
   * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
   *
   * OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
   * @see https://docs.github.com/rest/billing/billing#get-shared-storage-billing-for-a-user
   */
  "GET /users/{username}/settings/billing/shared-storage": {
    parameters: {
      username: string;
    };
    request: {
      method: "GET";
      url: "/users/{username}/settings/billing/shared-storage";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CombinedBillingUsageSchema;
    };
  };

  /**
   * @name billing/get-github-billing-usage-report-user
   * @summary Get billing usage report for a user
   * @description Gets a report of the total usage for a user.
   *
   * **Note:** This endpoint is only available to users with access to the enhanced billing platform.
   * @see https://docs.github.com/rest/billing/enhanced-billing#get-billing-usage-report-for-a-user
   */
  "GET /users/{username}/settings/billing/usage": {
    parameters: {
      username: string;
      year?: number;
      month?: number;
      day?: number;
      hour?: number;
    };
    request: {
      method: "GET";
      url: "/users/{username}/settings/billing/usage";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: BillingUsageReportUserSchema;
    };
  };

  /**
   * @name users/list-social-accounts-for-user
   * @summary List social accounts for a user
   * @description Lists social media accounts for a user. This endpoint is accessible by anyone.
   * @see https://docs.github.com/rest/users/social-accounts#list-social-accounts-for-a-user
   */
  "GET /users/{username}/social_accounts": {
    parameters: {
      username: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/users/{username}/social_accounts";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SocialAccountSchema[];
    };
  };

  /**
   * @name users/list-ssh-signing-keys-for-user
   * @summary List SSH signing keys for a user
   * @description Lists the SSH signing keys for a user. This operation is accessible by anyone.
   * @see https://docs.github.com/rest/users/ssh-signing-keys#list-ssh-signing-keys-for-a-user
   */
  "GET /users/{username}/ssh_signing_keys": {
    parameters: {
      username: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/users/{username}/ssh_signing_keys";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: SshSigningKeySchema[];
    };
  };

  /**
   * @name activity/list-repos-starred-by-user
   * @summary List repositories starred by a user
   * @description Lists repositories a user has starred.
   *
   * This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
   *
   * - **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
   * @see https://docs.github.com/rest/activity/starring#list-repositories-starred-by-a-user
   */
  "GET /users/{username}/starred": {
    parameters: {
      username: string;
      sort?: "created" | "updated";
      direction?: "asc" | "desc";
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/users/{username}/starred";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: StarredRepositorySchema[] | RepositorySchema[];
    };
  };

  /**
   * @name activity/list-repos-watched-by-user
   * @summary List repositories watched by a user
   * @description Lists repositories a user is watching.
   * @see https://docs.github.com/rest/activity/watching#list-repositories-watched-by-a-user
   */
  "GET /users/{username}/subscriptions": {
    parameters: {
      username: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/users/{username}/subscriptions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: MinimalRepositorySchema[];
    };
  };

  /**
   * @name meta/get-all-versions
   * @summary Get all API versions
   * @description Get all supported GitHub API versions.
   * @see https://docs.github.com/rest/meta/meta#get-all-api-versions
   */
  "GET /versions": {
    parameters: {};
    request: {
      method: "GET";
      url: "/versions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: string[];
    };
  };

  /**
   * @name meta/get-zen
   * @summary Get the Zen of GitHub
   * @description Get a random sentence from the Zen of GitHub
   * @see https://docs.github.com/rest/meta/meta#get-the-zen-of-github
   */
  "GET /zen": {
    parameters: {};
    request: {
      method: "GET";
      url: "/zen";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: string;
    };
  };

  /**
   * @name repos/compare-commits
   * @summary Compare two commits
   * @description **Deprecated**: Use `repos.compareCommitsWithBasehead()` (`GET /repos/{owner}/{repo}/compare/{basehead}`) instead. Both `:base` and `:head` must be branch names in `:repo`. To compare branches across other repositories in the same network as `:repo`, use the format `<USERNAME>:branch`.
   *
   * The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
   *
   * The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
   *
   * **Working with large comparisons**
   *
   * To process a response with a large number of commits, you can use (`per_page` or `page`) to paginate the results. When using paging, the list of changed files is only returned with page 1, but includes all changed files for the entire comparison. For more information on working with pagination, see "[Traversing with pagination](/rest/guides/traversing-with-pagination)."
   *
   * When calling this API without any paging parameters (`per_page` or `page`), the returned list is limited to 250 commits and the last commit in the list is the most recent of the entire comparison. When a paging parameter is specified, the first commit in the returned list of each page is the earliest.
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   * @see https://docs.github.com/rest/reference/repos#compare-two-commits
   */
  "GET /repos/{owner}/{repo}/compare/{base}...{head}": {
    parameters: {
      owner: string;
      repo: string;
      base: string;
      head: string;
      per_page?: number;
      page?: number;
    };
    request: {
      method: "GET";
      url: "/repos/{owner}/{repo}/compare/{base}...{head}";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: CommitComparisonSchema;
    };
  };

  /**
   * @name orgs/list-organization-fine-grained-permissions
   * @summary List organization fine-grained permissions for an organization
   * @description Lists the fine-grained permissions that can be used in custom organization roles for an organization. For more information, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
   *
   * To list the fine-grained permissions that can be used in custom repository roles for an organization, see "[List repository fine-grained permissions for an organization](https://docs.github.com/rest/orgs/organization-roles#list-repository-fine-grained-permissions-for-an-organization)."
   *
   * To use this endpoint, the authenticated user must be one of:
   *
   * - An administrator for the organization.
   * - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
   *
   * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
   * @see https://docs.github.com/rest/orgs/organization-roles#list-organization-fine-grained-permissions-for-an-organization
   */
  "GET /orgs/{org}/organization-fine-grained-permissions": {
    parameters: {
      org: string;
    };
    request: {
      method: "GET";
      url: "/orgs/{org}/organization-fine-grained-permissions";
      headers: RequestHeaders;
      request: RequestRequestOptions;
    };
    response: {
      headers: ResponseHeaders;
      url: string;
      status: 200;
      data: {
        name: string;
        description: string;
      }[];
    };
  };
}

export type EndpointKeys = keyof Endpoints;
