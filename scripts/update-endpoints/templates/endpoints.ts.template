// DO NOT EDIT THIS FILE
import type { paths } from "@octokit/openapi-types";
import type { OctokitResponse } from "../OctokitResponse.js";
import type { RequestHeaders } from "../RequestHeaders.js";
import type { RequestRequestOptions } from "../RequestRequestOptions.js";

/**
 * @license (MIT OR CC0-1.0)
 * @source https://github.com/sindresorhus/type-fest/blob/570e27f8fdaee37ef5d5e0fbf241e0212ff8fc1a/source/simplify.d.ts
 */
export type Simplify<T> = {[KeyType in keyof T]: T[KeyType]} & {};

type ExtractParameters<T> = "parameters" extends keyof T
  ? (T["parameters"] extends { query?: infer Q } ? Q : {}) &
      (T["parameters"] extends { path?: infer P } ? P : {}) &
      (T["parameters"] extends { header?: infer H } ? H : {})
  : {};

type ExtractRequestBody<T> = "requestBody" extends keyof T
  ? "content" extends keyof T["requestBody"]
    ? "application/json" extends keyof T["requestBody"]["content"]
      ? T["requestBody"]["content"]["application/json"]
      : {
          data: {
            [K in keyof T["requestBody"]["content"]]: T["requestBody"]["content"][K];
          }[keyof T["requestBody"]["content"]];
        }
    : "application/json" extends keyof T["requestBody"]
    ? T["requestBody"]["application/json"]
    : {
        data: {
          [K in keyof T["requestBody"]]: T["requestBody"][K];
        }[keyof T["requestBody"]];
      }
  : {};
type ToOctokitParameters<T> = ExtractParameters<T> & ExtractRequestBody<Required<T>>;

interface OctokitReadonlyRequestType<Url extends keyof paths, Method extends keyof paths[Url]> {
  request: {
    method: Method;
    url: Url;
    headers: RequestHeaders;
    request: RequestRequestOptions;
  }
}

interface OctokitWriteableRequestType<Url extends keyof paths, Method extends keyof paths[Url]> {
  request: {
    method: Method extends string ? Uppercase<Method> : never;
    url: Url;
    headers: RequestHeaders;
    request: RequestRequestOptions;
    data: ExtractRequestBody<paths[Url][Method]>;
  }
}

interface OctokitParametersType<Url extends keyof paths, Method extends keyof paths[Url]> {
  parameters: Simplify<ToOctokitParameters<paths[Url][Method]>>;
}

interface OctokitResponseType<Url extends keyof paths, Method extends keyof paths[Url]> {
  response: ExtractOctokitResponse<paths[Url][Method]>;
}

interface ReadonlyOperation<Url extends keyof paths, Method extends keyof paths[Url]> extends
  OctokitParametersType<Url, Method>,
  OctokitResponseType<Url, Method>,
  OctokitReadonlyRequestType<Url, Method>{
}

interface Operation<Url extends keyof paths, Method extends keyof paths[Url]> extends
  OctokitParametersType<Url, Method>,
  OctokitResponseType<Url, Method>,
  OctokitWriteableRequestType<Url, Method>{
}
type SuccessStatuses = 200 | 201 | 202 | 204 | 205;
type RedirectStatuses = 301 | 302;
type EmptyResponseStatuses = 201 | 204 | 205;
type KnownResponseTypes =
  | "application/json"
  | "application/octocat-stream" // GET /octocat
  | "application/scim+json"
  | "text/html"
  | "text/plain"; // GET /zen

type SuccessResponseDataType<Responses> = {
  [K in SuccessStatuses & keyof Responses]: GetContentKeyIfPresent<
    Responses[K]
  > extends never
    ? never
    : OctokitResponse<GetContentKeyIfPresent<Responses[K]>, K>;
}[SuccessStatuses & keyof Responses];
type RedirectResponseDataType<Responses> = {
  [K in RedirectStatuses & keyof Responses]: OctokitResponse<unknown, K>;
}[RedirectStatuses & keyof Responses];
type EmptyResponseDataType<Responses> = {
  [K in EmptyResponseStatuses & keyof Responses]: OctokitResponse<never, K>;
}[EmptyResponseStatuses & keyof Responses];

type GetContentKeyIfPresent<T> = "content" extends keyof T
  ? DataType<T["content"]>
  : DataType<T>;
type DataType<T> = {
  [K in KnownResponseTypes & keyof T]: T[K];
}[KnownResponseTypes & keyof T];
type ExtractOctokitResponse<R> = "responses" extends keyof R
  ? SuccessResponseDataType<R["responses"]> extends never
    ? RedirectResponseDataType<R["responses"]> extends never
      ? EmptyResponseDataType<R["responses"]>
      : RedirectResponseDataType<R["responses"]>
    : SuccessResponseDataType<R["responses"]>
  : unknown;

export interface Endpoints {
  {{#each endpointsByRoute}}
  /**
   * @see {{documentationUrl}}
   {{#deprecated}}
   * @deprecated {{{.}}}
   {{/deprecated}}
   */
  "{{@key}}": {{#if readonly}}ReadonlyOperation{{else}}Operation{{/if}}<
    "{{url}}",
    "{{method}}"
  >,
  {{/each}}
}

export type EndpointKeys = keyof Endpoints;
